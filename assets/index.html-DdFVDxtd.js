import{_ as e}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,d as i,b as o,o as n,r as s}from"./app-Cpaph37u.js";const l={};function c(d,t){const a=s("Catalog");return n(),r("div",null,[i(a),t[0]||(t[0]=o('<h1 id="canvans" tabindex="-1"><a class="header-anchor" href="#canvans"><span>canvans</span></a></h1><h2 id="介绍" tabindex="-1"><a class="header-anchor" href="#介绍"><span>介绍</span></a></h2><p><mark>&lt;canvas&gt;</mark> 标签是图形容器，定义图形，比如图表和其他图像，您必须使用脚本来绘制图形。<br> 使用canvas 绘制复杂图形，做动画，处理图像，开发游戏，处理视频…</p><ol><li>标签通常需要指定一个id属性 (脚本中经常引用), width 和 height 属性定义的画布的大小.</li><li>可以在HTML页面中使用多个==&lt;canvas&gt;== 元素.</li><li>设置画布的宽高只能在html标签里通过height和width属性来设置(canvas标签有且只有这两个属性)</li><li>css样式不会生效</li></ol><p>&lt;canvas&gt;简单实例如下:</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">canvas</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> id</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;myCanvas&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> width</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;200&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> height</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;100&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">canvas</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="坐标系" tabindex="-1"><a class="header-anchor" href="#坐标系"><span>坐标系</span></a></h2><p>Canvas 使用的是 <mark>W3C</mark> 坐标系 ，也就是遵循我们屏幕、报纸的阅读习惯，从上往下，从左往右。</p><p>使用 JavaScript 来绘制图像<br> canvas 元素本身是没有绘图能力的。所有的绘制工作必须在 JavaScript 内部完成：<br> 1.找到 &lt;canvas&gt; 元素:<br> a.var c=document.getElementById(&quot;myCanvas&quot;);<br> 2.创建 context 对象：<br> a.var ctx=c.getContext(&quot;2d&quot;);<br> b.getContext(&quot;2d&quot;) 对象是内建的 HTML5 对象，拥有多种绘制路径、矩形、圆形、字符以及添加图像的方法。<br> 3.绘制一个红色的矩形：<br> a.ctx.fillStyle=&quot;#FF0000&quot;;<br> i.设置fillStyle属性可以是CSS颜色，渐变，或图案。fillStyle 默认设置是#000000（黑色）。<br> b.ctx.fillRect(0,0,150,75);<br> i.fillRect(x,y,width,height) 方法定义了矩形当前的填充方式。<br> var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> ctx.fillStyle=&quot;#FF0000&quot;;<br> ctx.fillRect(0,0,150,75);<br> Canvas 坐标<br> canvas 是一个二维网格。canvas 的左上角坐标为 (0,0),坐标系向下<br> Canvas - 路径<br> 在Canvas上画线，我们将使用以下两种方法：</p><ul><li>moveTo(x,y) 定义线条开始坐标</li><li>lineTo(x,y) 定义线条结束坐标<br> 绘制线条我们必须使用到 &quot;ink&quot; 的方法，就像stroke()，file（）<br> var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> ctx.moveTo(0,0);<br> ctx.lineTo(200,100);<br> ctx.stroke();<br> 在canvas中绘制圆形, 我们将使用以下方法:<br> arc(x,y,r,start,stop)<br> var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> ctx.beginPath();<br> ctx.arc(95,50,40,0,2*Math.PI);<br> ctx.stroke();<br> Canvas - 文本<br> 使用 canvas 绘制文本，重要的属性和方法如下：</li><li>font - 定义字体</li><li>fillText(text,x,y) - 在 canvas 上绘制实心的文本</li><li>strokeText(text,x,y) - 在 canvas 上绘制空心的文本<br> 使用 fillText():<br> var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> ctx.font=&quot;30px Arial&quot;;<br> ctx.fillText(&quot;Hello World&quot;,10,50);<br> 使用 strokeText():<br> var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> ctx.font=&quot;30px Arial&quot;;<br> ctx.strokeText(&quot;Hello World&quot;,10,50);<br> Canvas - 渐变<br> 渐变可以填充在矩形, 圆形, 线条, 文本等等, 各种形状可以自己定义不同的颜色。<br> 以下有两种不同的方式来设置Canvas渐变：当我们使用渐变对象，必须使用两种或两种以上的停止颜色。</li><li>createLinearGradient(x,y,x1,y1) - 创建线条渐变</li><li>createRadialGradient(x,y,r,x1,y1,r1) - 创建一个径向/圆渐变<br> addColorStop()方法指定颜色停止，参数使用坐标来描述，可以是0至1.<br> 使用渐变，设置fillStyle或strokeStyle的值为 渐变，然后绘制形状，如矩形，文本，或一条线。<br> 使用 createLinearGradient():<br> var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> // 创建渐变<br> var grd=ctx.createLinearGradient(0,0,200,0);<br> grd.addColorStop(0,&quot;red&quot;);<br> grd.addColorStop(1,&quot;white&quot;);<br> // 填充渐变<br> ctx.fillStyle=grd;<br> ctx.fillRect(10,10,150,80);<br> 使用 createRadialGradient():<br> var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> // 创建渐变<br> var grd=ctx.createRadialGradient(75,50,5,90,60,100);<br> grd.addColorStop(0,&quot;red&quot;);<br> grd.addColorStop(1,&quot;white&quot;);<br> // 填充渐变<br> ctx.fillStyle=grd;<br> ctx.fillRect(10,10,150,80);<br> Canvas - 图像<br> 把一幅图像放置到画布上, 使用以下方法:</li><li>drawImage(image,x,y)</li><li></li></ul><p>var c=document.getElementById(&quot;myCanvas&quot;);<br> var ctx=c.getContext(&quot;2d&quot;);<br> var img=document.getElementById(&quot;scream&quot;);<br> ctx.drawImage(img,10,10);<br> HTML Canvas 参考手册<br> 标签的完整属性可以参考Canvas 参考手册.<br> HTML &lt;canvas&gt; 标签<br> Tag描述&lt;canvas&gt;HTML5 的 canvas 元素使用 JavaScript 在网页上绘制图像。</p>',11))])}const u=e(l,[["render",c],["__file","index.html.vue"]]),b=JSON.parse('{"path":"/posts/HTML5/canvas/","title":"canvas","lang":"zh-CN","frontmatter":{"title":"canvas","date":"2024-06-09T00:00:00.000Z","index":false,"icon":"laptop-code","category":["h5"],"head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/HTML5/canvas/"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"canvas"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-09T10:11:02.000Z"}],["meta",{"property":"article:published_time","content":"2024-06-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-09T10:11:02.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"canvas\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-06-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-09T10:11:02.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"介绍","slug":"介绍","link":"#介绍","children":[]},{"level":2,"title":"坐标系","slug":"坐标系","link":"#坐标系","children":[]}],"git":{"createdTime":1752055862000,"updatedTime":1752055862000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":3.16,"words":949},"filePathRelative":"posts/HTML5/canvas/README.md","localizedDate":"2024年6月9日","excerpt":""}');export{u as comp,b as data};
