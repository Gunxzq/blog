import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as r,b as a,o as n}from"./app-Cpaph37u.js";const o={};function i(s,e){return n(),r("div",null,e[0]||(e[0]=[a('<h1 id="vue" tabindex="-1"><a class="header-anchor" href="#vue"><span>Vue</span></a></h1><p>一个用于创建用户界面的开源JS框架，也是一个创建单页应用的web应用框架。</p><h3 id="他的核心特性与技术原理如下" tabindex="-1"><a class="header-anchor" href="#他的核心特性与技术原理如下"><span>他的核心特性与技术原理如下：</span></a></h3><ol><li>响应式数据驱动视图（MVVM）<br><mark>数据劫持</mark>：通过劫持数据对象的getter/setter(vue2)或proxy对象代理（vue3），收集依赖，并在数据变化时触发依赖更新。<br><mark>依赖收集与触发更新</mark>：在组件渲染或计算属性执行时，会“记录”当前使用的数据（创建Watcher实例），数据变化时通知所有相关Watcher重新执行（如重新渲染组件或更新计算属性）。<br><mark>双向绑定的实现</mark>​​：通过v-model指令，在表单元素（如input）上绑定数据，将输入事件（如input）与数据更新关联，实现“数据→视图”和“视图→数据”的双向同步。<br><strong>​注意点</strong>​​：Vue2对对象新增属性、数组索引修改的响应式支持有限（需通过Vue.set或this.$set解决）；Vue3基于Proxy的响应式系统解决了这一问题，并支持更细粒度的依赖跟踪。</li><li>组件化开发（模块化与复用）：通过单文件组件（SFC）将模板、逻辑和样式封装为独立单元</li><li>虚拟DOM与性能优化：通过虚拟dom实现高效DOM更新<br> 渲染阶段：将组件模板转换为虚拟DOM（JS对象），通过Diff算法比较新旧虚拟DOM的差异<br> 更新阶段：仅将差异部分应用到真实DOM，减少不必要的重排/重绘。</li></ol><p><strong>vue3对虚拟DOM的优化</strong>：<br><mark>静态标记</mark>：标记动态节点（绑定了变量的文本、属性），Diff时仅扫描动态节点。<br> ​<mark>​Fragments</mark>​​：支持组件返回多个根节点（无需额外包裹div），减少DOM层级。<br> ​​==事件缓存（Event Cache）==​​：缓存高频事件处理函数，避免重复创建<br> 4. 模板语法：声明式模板，通过类似于原生H5的语法描述UI结构，框架会自动处理DOM更新。<br> ​​指令（Directives）​​：v-if（条件渲染）、v-for（列表渲染）、v-bind（属性绑定）、v-model（双向绑定）、v-on（事件绑定）、v-show（显示隐藏）等，扩展HTML的能力。<br> ​​计算属性（Computed）​​：基于响应式数据缓存计算结果，仅当依赖变化时重新计算（适合需要缓存的复杂逻辑，如拼接姓名、过滤列表）。<br> ​​侦听器（Watch）​​：监听数据变化并执行副作用（如异步请求、复杂对象属性监控），适合需要“响应后执行操作”的场景。<br> ​​模板引用（Ref）​​：通过ref获取DOM元素或子组件的实例，直接操作原生DOM或调用子组件方法（补充声明式模板的灵活性）。</p><h3 id="他的生态体系完善覆盖全开发流程" tabindex="-1"><a class="header-anchor" href="#他的生态体系完善覆盖全开发流程"><span>他的生态体系完善覆盖全开发流程</span></a></h3><p>路由管理：Vue Router，支持动态路由、嵌套路由、导航守卫等。<br> 状态管理：Vuex（基于模块化状态树）、Pinia（更简洁的API，支持TypeScript，无mutation）。<br> 构建工具：Vite（新一代构建工具，基于ES模块，开发环境秒启动，生产环境高效打包）、Vue CLI（基于Webpack，适合传统项目）。<br> UI框架：Element UI（PC端）、Vant（移动端）、Naive UI（现代风格）等，降低界面开发成本。<br> 类型支持：Vue3全面支持TypeScript，通过defineComponent、ref/reactive的类型推断，提升代码健壮性。</p><h3 id="vue3的关键更新" tabindex="-1"><a class="header-anchor" href="#vue3的关键更新"><span>vue3的关键更新</span></a></h3><p><strong>组合式API（Composition API）​</strong>​：替代选项式API（Options API），通过setup函数或&lt;\\script setup&gt;语法糖，将逻辑按功能聚合（而非按选项拆分），提升代码可读性和复用性（逻辑抽取更方便）。<br> ​​<strong>TypeScript原生支持​​</strong>：Vue3核心代码用TS重写，组件定义、类型推断更友好（如defineProps自动推导类型）。<br> ​​<strong>更小的体积与更快的运行​​</strong>：通过Tree-shaking优化，核心库体积更小；响应式系统基于Proxy，性能更优。<br> ​​自定义渲染器（Renderer）​​：支持扩展渲染目标（如SSR、Canvas、WebGL），扩展了Vue的应用场景（如游戏、可视化）。</p>',9)]))}const l=t(o,[["render",i],["__file","vue.html.vue"]]),m=JSON.parse('{"path":"/posts/Vue/vue.html","title":"Vue","lang":"zh-CN","frontmatter":{"date":"2025-03-09T00:00:00.000Z","category":["JS框架"],"tag":["Vue"],"description":"Vue 一个用于创建用户界面的开源JS框架，也是一个创建单页应用的web应用框架。 他的核心特性与技术原理如下： 响应式数据驱动视图（MVVM） 数据劫持：通过劫持数据对象的getter/setter(vue2)或proxy对象代理（vue3），收集依赖，并在数据变化时触发依赖更新。 依赖收集与触发更新：在组件渲染或计算属性执行时，会“记录”当前使用的...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/Vue/vue.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"Vue"}],["meta",{"property":"og:description","content":"Vue 一个用于创建用户界面的开源JS框架，也是一个创建单页应用的web应用框架。 他的核心特性与技术原理如下： 响应式数据驱动视图（MVVM） 数据劫持：通过劫持数据对象的getter/setter(vue2)或proxy对象代理（vue3），收集依赖，并在数据变化时触发依赖更新。 依赖收集与触发更新：在组件渲染或计算属性执行时，会“记录”当前使用的..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T06:14:43.000Z"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2025-03-09T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T06:14:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-09T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-14T06:14:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":3,"title":"他的核心特性与技术原理如下：","slug":"他的核心特性与技术原理如下","link":"#他的核心特性与技术原理如下","children":[]},{"level":3,"title":"他的生态体系完善覆盖全开发流程","slug":"他的生态体系完善覆盖全开发流程","link":"#他的生态体系完善覆盖全开发流程","children":[]},{"level":3,"title":"vue3的关键更新","slug":"vue3的关键更新","link":"#vue3的关键更新","children":[]}],"git":{"createdTime":1741956220000,"updatedTime":1752473683000,"contributors":[{"name":"GUNxzq","username":"GUNxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/GUNxzq"},{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":2,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":3.44,"words":1032},"filePathRelative":"posts/Vue/vue.md","localizedDate":"2025年3月9日","excerpt":"\\n<p>一个用于创建用户界面的开源JS框架，也是一个创建单页应用的web应用框架。</p>\\n<h3>他的核心特性与技术原理如下：</h3>\\n<ol>\\n<li>响应式数据驱动视图（MVVM）<br>\\n<mark>数据劫持</mark>：通过劫持数据对象的getter/setter(vue2)或proxy对象代理（vue3），收集依赖，并在数据变化时触发依赖更新。<br>\\n<mark>依赖收集与触发更新</mark>：在组件渲染或计算属性执行时，会“记录”当前使用的数据（创建Watcher实例），数据变化时通知所有相关Watcher重新执行（如重新渲染组件或更新计算属性）。<br>\\n<mark>双向绑定的实现</mark>​​：通过v-model指令，在表单元素（如input）上绑定数据，将输入事件（如input）与数据更新关联，实现“数据→视图”和“视图→数据”的双向同步。<br>\\n<strong>​注意点</strong>​​：Vue2对对象新增属性、数组索引修改的响应式支持有限（需通过Vue.set或this.$set解决）；Vue3基于Proxy的响应式系统解决了这一问题，并支持更细粒度的依赖跟踪。</li>\\n<li>组件化开发（模块化与复用）：通过单文件组件（SFC）将模板、逻辑和样式封装为独立单元</li>\\n<li>虚拟DOM与性能优化：通过虚拟dom实现高效DOM更新<br>\\n渲染阶段：将组件模板转换为虚拟DOM（JS对象），通过Diff算法比较新旧虚拟DOM的差异<br>\\n更新阶段：仅将差异部分应用到真实DOM，减少不必要的重排/重绘。</li>\\n</ol>","autoDesc":true}');export{l as comp,m as data};
