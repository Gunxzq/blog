import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as t}from"./app-Bqkh5_iM.js";const l={};function s(r,e){return t(),a("div",null,e[0]||(e[0]=[n(`<h1 id="get、post" tabindex="-1"><a class="header-anchor" href="#get、post"><span>GET、POST</span></a></h1><ul><li><p>GET：GET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据</p></li><li><p>POST：POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用</p></li></ul><h2 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h2><p>从w3schools得到的标准答案的区别如下：</p><ul><li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li><li>GET产生的URL地址可以被Bookmark(书签)，而POST不可以。</li><li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li><li>GET请求只能进行url编码，而POST支持多种编码方式。</li><li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li><li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li><li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li><li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li><li>GET参数通过URL传递，POST放在Request body中</li></ul><h3 id="参数位置" tabindex="-1"><a class="header-anchor" href="#参数位置"><span>参数位置</span></a></h3><p>貌似从上面看到GET与POST请求区别非常大，但两者实质并没有区别<br> 无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输上没有区别<br> 当不携带参数的时候，两者最大的区别为第一行方法名不同</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /uri HTTP/1.1 \\r\\n</span></span>
<span class="line"><span>GET /uri HTTP/1.1 \\r\\n</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>当携带参数的时候，我们都知道GET请求是放在url中，POST则放在body中<br> GET 方法简约版报文是这样的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GET /index.html?name=qiming.c&amp;age=22 HTTP/1.1</span></span>
<span class="line"><span>Host: localhost</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>POST 方法简约版报文是这样的</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>POST /index.html HTTP/1.1</span></span>
<span class="line"><span>Host: localhost</span></span>
<span class="line"><span>Content-Type: application/x-www-form-urlencoded</span></span>
<span class="line"><span></span></span>
<span class="line"><span>name=qiming.c&amp;age=22</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>这里只是约定，并不属于HTTP规范，相反的，我们可以在POST请求中url中写入参数，或者GET请求中的body携带参数</p><ul><li>HTTP/1.0中没有明确指出GET请求不能携带请求体。</li><li>HTTP/1.1协议也没有明确禁止GET请求包含请求体。</li><li>HTTP协议规范（RFC 7231）中，明确指出GET请求中的有效负载（payload）没有定义的语义，而且在GET请求中发送有效负载可能会导致一些现有的实现拒绝该请求</li></ul></div><h3 id="参数长度" tabindex="-1"><a class="header-anchor" href="#参数长度"><span>参数长度</span></a></h3><p>HTTP 协议没有Body和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因<br> IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持</p><p>这里限制的是整个URL长度，而不仅仅是参数值的长度</p><p>服务器处理长 URL 要消耗比较多的资源，为了性能和安全考虑，会给 URL 长度加限制</p><h3 id="安全" tabindex="-1"><a class="header-anchor" href="#安全"><span>安全</span></a></h3><p>POST 比 GET 安全，因为数据在地址栏上不可见<br> 然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文<br> 只有使用HTTPS才能加密安全</p><h3 id="数据包" tabindex="-1"><a class="header-anchor" href="#数据包"><span>数据包</span></a></h3><p>对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据）<br> 对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok</p><p>并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次</p>`,22)]))}const d=i(l,[["render",s],["__file","get-post.html.vue"]]),T=JSON.parse('{"path":"/posts/HTTP/get-post.html","title":"GET、POST","lang":"zh-CN","frontmatter":{"date":"2025-05-04T00:00:00.000Z","order":2,"category":["React"],"tag":["React"],"description":"GET、POST GET：GET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据 POST：POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用 区别 从w3schools得到的标准答案的区别如下： GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark(书签)...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/HTTP/get-post.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"GET、POST"}],["meta",{"property":"og:description","content":"GET、POST GET：GET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据 POST：POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用 区别 从w3schools得到的标准答案的区别如下： GET在浏览器回退时是无害的，而POST会再次提交请求。 GET产生的URL地址可以被Bookmark(书签)..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-16T16:32:48.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2025-05-04T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T16:32:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"GET、POST\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-04T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-16T16:32:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"区别","slug":"区别","link":"#区别","children":[{"level":3,"title":"参数位置","slug":"参数位置","link":"#参数位置","children":[]},{"level":3,"title":"参数长度","slug":"参数长度","link":"#参数长度","children":[]},{"level":3,"title":"安全","slug":"安全","link":"#安全","children":[]},{"level":3,"title":"数据包","slug":"数据包","link":"#数据包","children":[]}]}],"git":{"createdTime":1752683568000,"updatedTime":1752683568000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":3.05,"words":915},"filePathRelative":"posts/HTTP/get-post.md","localizedDate":"2025年5月4日","excerpt":"\\n<ul>\\n<li>\\n<p>GET：GET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据</p>\\n</li>\\n<li>\\n<p>POST：POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用</p>\\n</li>\\n</ul>\\n<h2>区别</h2>\\n<p>从w3schools得到的标准答案的区别如下：</p>\\n<ul>\\n<li>GET在浏览器回退时是无害的，而POST会再次提交请求。</li>\\n<li>GET产生的URL地址可以被Bookmark(书签)，而POST不可以。</li>\\n<li>GET请求会被浏览器主动cache，而POST不会，除非手动设置。</li>\\n<li>GET请求只能进行url编码，而POST支持多种编码方式。</li>\\n<li>GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。</li>\\n<li>GET请求在URL中传送的参数是有长度限制的，而POST没有。</li>\\n<li>对参数的数据类型，GET只接受ASCII字符，而POST没有限制。</li>\\n<li>GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。</li>\\n<li>GET参数通过URL传递，POST放在Request body中</li>\\n</ul>","autoDesc":true}');export{d as comp,T as data};
