import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as n,o as e}from"./app-C9qP9JtV.js";const l={};function p(t,s){return e(),a("div",null,s[0]||(s[0]=[n(`<h1 id="配置文件" tabindex="-1"><a class="header-anchor" href="#配置文件"><span>配置文件</span></a></h1><p>webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack 配置的对象。 webpack 会根据该配置定义的属性进行处理。</p><p>由于 webpack 遵循 CommonJS 模块规范，因此，你可以在配置中使用语法：</p><ul><li>通过 require(...) 引入其他文件</li><li>通过 require(...) 使用 npm 下载的工具函数</li><li>使用 JavaScript 控制流表达式，例如 ?: 操作符</li><li>对 value 使用常量或变量赋值</li><li>编写并执行函数，生成部分配置</li></ul><div class="hint-container important"><p class="hint-container-title">避免如下操作</p><ul><li>当使用 webpack CLI 工具时，访问 CLI 参数（应编写自己的 CLI 工具替代，或者使用 --env</li><li>导出不确定的结果（两次调用 webpack 应产生相同的输出文件）</li><li>编写超长的配置（应将配置文件拆分成多个）</li></ul></div><h2 id="基本配置" tabindex="-1"><a class="header-anchor" href="#基本配置"><span>基本配置</span></a></h2><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//webpack.config.js</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> require</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;path&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  mode</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;development&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  entry</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;./foo.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  output</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">path</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;"> path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">resolve</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">__dirname</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;dist&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">),</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">filename</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;foo.bundle.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>webpack 会假定项目的入口起点为 src/index.js，然后会在 dist/main.js 输出结果，并且在生产环境开启压缩和优化。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p><a href="https://createapp.dev/webpack" target="_blank" rel="noopener noreferrer">createapp.dev</a>创建自定义 webpack 配置的在线工具。</p></div><h3 id="使用不同的配置文件" tabindex="-1"><a class="header-anchor" href="#使用不同的配置文件"><span>使用不同的配置文件</span></a></h3><p>如果出于某些原因，需要根据特定情况使用不同的配置文件，则可以通过在命令行中使用 --config 标志修改。</p><div class="language-json line-numbers-mode" data-highlighter="shiki" data-ext="json" data-title="json" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//package.json</span></span>
<span class="line"><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;scripts&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  &quot;build&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">: </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;webpack --config prod.config.js&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="设置一个新的-webpack-项目" tabindex="-1"><a class="header-anchor" href="#设置一个新的-webpack-项目"><span>设置一个新的 webpack 项目</span></a></h2><p>Webpack 有大量的配置项，利用 webpack-cli 的 init 命令，它可以根据项目需求快速生成 webpack 配置文件，它会在创建配置文件之前询问几个问题。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>npx webpack init</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>如果尚未在项目或全局安装 @webpack-cli/generators，npx 可能会提示你安装。根据你在配置生成过程中的选择，你也可能会安装额外的 package 到你的项目中。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>$ npx webpack init</span></span>
<span class="line"><span></span></span>
<span class="line"><span>[webpack-cli] For using this command you need to install: &#39;@webpack-cli/generators&#39; package.</span></span>
<span class="line"><span>[webpack-cli] Would you like to install &#39;@webpack-cli/generators&#39; package? (That will run &#39;npm install -D @webpack-cli/generators&#39;) (Y/n)</span></span>
<span class="line"><span>devDependencies:</span></span>
<span class="line"><span>+ @webpack-cli/generators 2.5.0</span></span>
<span class="line"><span>? Which of the following JS solutions do you want to use? ES6</span></span>
<span class="line"><span>? Do you want to use webpack-dev-server? Yes</span></span>
<span class="line"><span>? Do you want to simplify the creation of HTML files for your bundle? Yes</span></span>
<span class="line"><span>? Do you want to add PWA support? No</span></span>
<span class="line"><span>? Which of the following CSS solutions do you want to use? CSS only</span></span>
<span class="line"><span>? Will you be using PostCSS in your project? Yes</span></span>
<span class="line"><span>? Do you want to extract CSS for every file? Only for Production</span></span>
<span class="line"><span>? Do you like to install prettier to format generated configuration? Yes</span></span>
<span class="line"><span>? Pick a package manager: pnpm</span></span>
<span class="line"><span>[webpack-cli] ℹ INFO  Initialising project...</span></span>
<span class="line"><span></span></span>
<span class="line"><span>devDependencies:</span></span>
<span class="line"><span>+ @babel/core 7.19.3</span></span>
<span class="line"><span>+ @babel/preset-env 7.19.4</span></span>
<span class="line"><span>+ autoprefixer 10.4.12</span></span>
<span class="line"><span>+ babel-loader 8.2.5</span></span>
<span class="line"><span>+ css-loader 6.7.1</span></span>
<span class="line"><span>+ html-webpack-plugin 5.5.0</span></span>
<span class="line"><span>+ mini-css-extract-plugin 2.6.1</span></span>
<span class="line"><span>+ postcss 8.4.17</span></span>
<span class="line"><span>+ postcss-loader 7.0.1</span></span>
<span class="line"><span>+ prettier 2.7.1</span></span>
<span class="line"><span>+ style-loader 3.3.1</span></span>
<span class="line"><span>+ webpack-dev-server 4.11.1</span></span>
<span class="line"><span>[webpack-cli] Project has been initialised with webpack!</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>`,17)]))}const d=i(l,[["render",p],["__file","Configuration.html.vue"]]),h=JSON.parse('{"path":"/posts/webpack/Configuration.html","title":"配置文件","lang":"zh-CN","frontmatter":{"date":"2024-08-08T00:00:00.000Z","category":["构建工具"],"tag":["webpack"],"description":"配置文件 webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack 配置的对象。 webpack 会根据该配置定义的属性进行处理。 由于 webpack 遵循 CommonJS 模块规范，因此，你可以在配置中使用语法： 通过 require(...) 引入其他文件 通过 require(...) 使用 npm 下载的工...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/webpack/Configuration.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"配置文件"}],["meta",{"property":"og:description","content":"配置文件 webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack 配置的对象。 webpack 会根据该配置定义的属性进行处理。 由于 webpack 遵循 CommonJS 模块规范，因此，你可以在配置中使用语法： 通过 require(...) 引入其他文件 通过 require(...) 使用 npm 下载的工..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T06:14:43.000Z"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:published_time","content":"2024-08-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T06:14:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"配置文件\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-14T06:14:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"基本配置","slug":"基本配置","link":"#基本配置","children":[{"level":3,"title":"使用不同的配置文件","slug":"使用不同的配置文件","link":"#使用不同的配置文件","children":[]}]},{"level":2,"title":"设置一个新的 webpack 项目","slug":"设置一个新的-webpack-项目","link":"#设置一个新的-webpack-项目","children":[]}],"git":{"createdTime":1752055862000,"updatedTime":1752473683000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":2,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":2.16,"words":649},"filePathRelative":"posts/webpack/Configuration.md","localizedDate":"2024年8月8日","excerpt":"\\n<p>webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack 配置的对象。 webpack 会根据该配置定义的属性进行处理。</p>\\n<p>由于 webpack 遵循 CommonJS 模块规范，因此，你可以在配置中使用语法：</p>\\n<ul>\\n<li>通过 require(...) 引入其他文件</li>\\n<li>通过 require(...) 使用 npm 下载的工具函数</li>\\n<li>使用 JavaScript 控制流表达式，例如 ?: 操作符</li>\\n<li>对 value 使用常量或变量赋值</li>\\n<li>编写并执行函数，生成部分配置</li>\\n</ul>","autoDesc":true}');export{d as comp,h as data};
