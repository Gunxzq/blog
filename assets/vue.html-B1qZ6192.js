import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as i,b as a,o as t}from"./app-BWDYifJJ.js";const s="/blog/assets/image-CPbDqEa9.png",n="/blog/assets/image-1-y0m6pxEq.png",r="/blog/assets/image-2-_n0hwqR5.png",o="/blog/assets/image-3-BLY99285.png",p="/blog/assets/image-4-mwDOqCnN.png",d="/blog/assets/image-5-BgKBBLMg.png",h="/blog/assets/image-6-uihAWXvB.png",c="/blog/assets/image-7-DxX2-9UK.png",g="/blog/assets/image-8-DiT4A245.png",b="/blog/assets/image-10-D4QAgokH.png",m="/blog/assets/image-9-CCSIWkGA.png",v="/blog/assets/image-11-Bz39UTz-.png",u="/blog/assets/image-13-7puat7_V.png",x="/blog/assets/image-12-Bd-FU4Ku.png",f="/blog/assets/image-14-CDhLXy05.png",k="/blog/assets/image-15-DnV3Yj9_.png",_="/blog/assets/image-16-CaQ_lppk.png",y="/blog/assets/image-17-CQvSx4yl.png",z="/blog/assets/image-18-CcZBzqt0.png",V="/blog/assets/image-19-Bd19t1eJ.png",B="/blog/assets/image-20-DJim571t.png",D="/blog/assets/image-21-kKD1UYMO.png",C="/blog/assets/image-22-PBuHp467.png",w="/blog/assets/image-23-DPzUPfZ4.png",A="/blog/assets/image-24-BlhcpqM_.png",M="/blog/assets/image-25-BblxLtAd.png",S="/blog/assets/image-26-C_EDKrUM.png",E="/blog/assets/image-27-_NcGTTY_.png",O="/blog/assets/image-28-CqHvv5ZM.png",j="/blog/assets/image-29-D3-hXGit.png",F="/blog/assets/image-30-DgS3MvkS.png",q="/blog/assets/image-31-BLx6AS1U.png",P="/blog/assets/image-32-Vq6wxBty.png",T="/blog/assets/image-33-Cq1LvuUs.png",U="/blog/assets/image-34-nOWw1w3p.png",$="/blog/assets/image-35-Cz9sY9ge.png",N="/blog/assets/image-36-BaQE1sdr.png",R="/blog/assets/image-37-BnofX65W.png",I="/blog/assets/image-38-C9iBA-wR.png",L="/blog/assets/image-39-CMzVpaYg.png",Z="/blog/assets/image-40-Mv2AMXPX.png",H="/blog/assets/image-41-SU12QTB2.png",Q="/blog/assets/image-42-Bdzt8lut.png",W="/blog/assets/image-43-BPqCa32z.png",X="/blog/assets/image-44-D1t1wDFM.png",G="/blog/assets/image-45-BrBJGXLT.png",Y="/blog/assets/image-46-CzwA97IP.png",J="/blog/assets/image-47-DMiwbzqI.png",K="/blog/assets/image-48-oUbi8HrQ.png",ee="/blog/assets/image-49-C_Yq3af8.png",le="/blog/assets/image-50-D6jC4kne.png",ie="/blog/assets/image-51-CyyTpzRF.png",ae="/blog/assets/image-52-DEEZQqEz.png",te="/blog/assets/image-53-_3SWqtAs.png",se="/blog/assets/WH2WS~N_UZ9)_8Z8651L7C8-C6KjQUby.png",ne={};function re(oe,e){return t(),i("div",null,e[0]||(e[0]=[a('<h1 id="vue2" tabindex="-1"><a class="header-anchor" href="#vue2"><span>Vue2</span></a></h1><h2 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信"><span>组件通信</span></a></h2><p>分类：</p><ol><li>父子组件之间</li><li>兄弟组件之间</li><li>祖孙与后代组件之间</li><li>非关系组件间之间</li></ol><p>8种常规方法</p><ol><li>props传递：父传子</li><li>$emit触发自定义事件：子传父</li><li>ref:获取子组件数据，子传父</li><li>eventbus：兄弟组件之间传值 <ol><li>emit触发事件，on监听事件</li></ol></li><li>parent、root<br><img src="'+s+'" alt="alt text" loading="lazy"></li><li>attrs与listeners <ol><li>向下传递属性，包含了未在props中声明的值</li></ol></li><li>provide与inject <ol><li>祖先定义provide</li><li>后代定义inject</li></ol></li><li>vuex:存储共享变量的容器 <ol><li>state：存放共享变量</li><li>getter：增加一个getter的派生状态</li><li>mutations：修改state的方法</li><li>actions：异步的mutations</li></ol></li></ol><h2 id="data属性为何是一个函数" tabindex="-1"><a class="header-anchor" href="#data属性为何是一个函数"><span>data属性为何是一个函数</span></a></h2><p>在实例中可以定义为对象或函数<br><img src="'+n+'" alt="alt text" loading="lazy"><br> 如果是为组件只能是一个函数<br><img src="'+r+'" alt="alt text" loading="lazy"></p><h3 id="区别" tabindex="-1"><a class="header-anchor" href="#区别"><span>区别</span></a></h3><p>定义好组件时，vue最终都会通过vue.extend()构建组件实例<br> 如果采用对象的data，每个组件的实例都会共用一个内存地址<br> 采用函数返回一个全新的data形式</p><h3 id="原理" tabindex="-1"><a class="header-anchor" href="#原理"><span>原理</span></a></h3><p>data初始化时，对象或函数都可以<br><img src="'+o+'" alt="alt text" loading="lazy"><br> 组件创建时进行选项合并，vm实例为undefined，进入if判断<br> 如果类型不是函数，则发出警告<br><img src="'+p+'" alt="alt text" loading="lazy"><br><img src="'+d+'" alt="alt text" loading="lazy"></p><h2 id="动态添加属性的问题" tabindex="-1"><a class="header-anchor" href="#动态添加属性的问题"><span>动态添加属性的问题</span></a></h2><p>通过函数运行时的为组件添加属性，页面不会触发更新</p><h3 id="原理-1" tabindex="-1"><a class="header-anchor" href="#原理-1"><span>原理</span></a></h3><p>vue2使用object.defineProperty实现的数据响应式，由此可见对定义时存在的属性都进行这样的操作<br><img src="'+h+'" alt="alt text" loading="lazy"><br> 新增的属性自然不具备响应式</p><h3 id="解决" tabindex="-1"><a class="header-anchor" href="#解决"><span>解决</span></a></h3><p>若想实现数据与视图更新<br> Vue.set()向一个响应式对象中添加一个property，并确保这个新的property同样是响应式的<br> defineReactive新增属性的响应式<br><img src="'+c+'" alt="alt text" loading="lazy"><br><img src="'+g+'" alt="alt text" loading="lazy"><br> Object.assign()<br> 创建一个新的对象，合并原对象和混入对象的属性</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">someObject</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">Object</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">assign</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">({},</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">someObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,{</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">newProperty1</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">})</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><em>$forceUpdated()</em><br> 当需要做强制更新，九成的情况是，在某个地方写错了迫使Vue实例重新渲染，只影响实例本身和使用插槽的子组件。</p><h2 id="v-if和v-for的优先级" tabindex="-1"><a class="header-anchor" href="#v-if和v-for的优先级"><span>v-if和v-for的优先级</span></a></h2><p><img src="'+b+'" alt="alt text" loading="lazy"><br> vue模板编译时，会将指令系统转为可执行的render函数，模板指令的代码都会生成在render函数中，通过app.$options.render就可以得到渲染函数<br><img src="'+m+'" alt="alt text" loading="lazy"><br> _l是vue的列表渲染函数，显然v-for优先级比v-if高<br><img src="'+v+'" alt="alt text" loading="lazy"><br> 当置于不同的标签中<br><img src="'+u+'" alt="alt text" loading="lazy"><br><img src="'+x+'" alt="alt text" loading="lazy"><br> v-for比v-if先进行判断</p><h3 id="注意" tabindex="-1"><a class="header-anchor" href="#注意"><span>注意</span></a></h3><p>不同时使用使用在同一个标签上，如果条件出现在循环内部，可以用computed提前过滤那些不需要显示的项</p><h2 id="v-if和v-show" tabindex="-1"><a class="header-anchor" href="#v-if和v-show"><span>v-if和v-show</span></a></h2><p>v-show隐藏是为元素添加css属性display：none，dom元素依然存在<br> v-if隐藏是将dom元素整个添加或删除<br> 编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重新组件内部的事件监听和子组件<br> 编译条件：v-if是真正的条件渲染，确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。<br> v-if的状态更改，会触发组件的生命周期</p><h3 id="原理-2" tabindex="-1"><a class="header-anchor" href="#原理-2"><span>原理</span></a></h3><p>解析流程:<br> 将模板template转为ast结构的JS对象<br> 用ast得到的js对象拼装成render和staticRenderFns函数<br> render和staticRenderFns函数被调用后生成虚拟VNODE节点，该节点包含创建DOM节点所需信息<br> vm.patch函数通过虚拟DOM算法利用VNODE节点创建真实DOM节点</p><p>v-show原理<br><img src="'+f+'" alt="alt text" loading="lazy"><br> vShow函数，使用了生命周期函数，挂载之前，设置display属性<br> 如果有transition就执行，否则直接设置display</p><p>v-if原理<br> 返回一个node节点，render函数通过表达式的值来决定是否生成DOM<br><img src="'+k+'" alt="alt text" loading="lazy"></p><h2 id="key的作用" tabindex="-1"><a class="header-anchor" href="#key的作用"><span>key的作用</span></a></h2><p>key是每一个vnode的唯一id，也是diff的一种优化策略，根据key更准确的找到对应的vnode节点</p><p>如果不使用key，vue就会使用就地复地原则：最小化element的移动，并且最大程度在同适当的地方对同类型的element，做patch或者reuse<br> 如果使用key，根据keys的顺序记录element，曾经拥有key的element如果不再出现的话，会被直接remove或者destoryed<br> 使用new Date()生成的时间戳作为key，手动强制触发重新渲染<br><img src="'+_+'" alt="alt text" loading="lazy"><br> 对于以上，不使用key会依次比较，数据不同发生dom操作，c与f、d与c、e与d<br> 如果使用key，vue只会更改顺序，将f插入到c之前</p><h3 id="原理-3" tabindex="-1"><a class="header-anchor" href="#原理-3"><span>原理</span></a></h3><p>判断是否为同一个key，如果没有设置key则为undefined<br><img src="'+y+'" alt="alt text" loading="lazy"><br> 对新旧vnode进行diff，如何比对出的结果用来更新真实dom<br><img src="'+z+'" alt="alt text" loading="lazy"></p><h2 id="mixin" tabindex="-1"><a class="header-anchor" href="#mixin"><span>mixin</span></a></h2><p>面向对象中的类，提供了方法的实现。其他的类可以访问mixin类的方法而不必成为子类<br> 一个普通的js对象，包含组件中任意选项功能，将共有的功能以对象的方式传入mixins，<br> 当组件使用mixins对象的选项是所有的mixins对象的选项都将被混入该组件本身的选项中来<br> 局部混入<br><img src="'+V+'" alt="alt text" loading="lazy"><br> 全局混入<br><img src="'+B+'" alt="alt text" loading="lazy"></p><h3 id="注意-1" tabindex="-1"><a class="header-anchor" href="#注意-1"><span>注意</span></a></h3><p>当组件存在与mixin对象相同的选项时，在递归合并的时候组件的选项会覆盖mixin的选项<br> 如果相同选项为生命周期钩子，会合并为一个数组，先执行mixin的钩子</p><h3 id="源码" tabindex="-1"><a class="header-anchor" href="#源码"><span>源码</span></a></h3><ol><li>替换型：props，methods，computed</li><li>合并型：data，通过set方法合并、重新赋值</li><li>队列型：生命周期函数和watch</li><li>叠加型：component、directives、filters</li></ol><h2 id="修饰符" tabindex="-1"><a class="header-anchor" href="#修饰符"><span>修饰符</span></a></h2><p>五种修饰符：</p><ol><li>表单修饰符 <ol><li>lazy：change事件之后进行同步</li><li>trim：过滤首空格</li><li>number：转为数值类型，内部调用parseFloat，如果无法解析，返回原来值</li></ol></li><li>事件修饰符：支持链式调用 <ol><li>stop：阻止事件冒泡，event.stopPropagation方法</li><li>prevent：阻止事件的默认行为，event.preventDefault方法</li><li>self：当元素自身时触发处理函数</li><li>once：绑定了事件以后只能触发一次</li><li>capture：向下捕获事件，向下传递事件</li><li>passive：相当于给onscroll事件整了一个.lazy修饰符</li><li>native：让<strong>组件</strong>变得像内置标签那样监听根元素的原生事件，否则只会监听自定义事件</li></ol></li><li>鼠标按键修饰符 <ol><li>left、right、middle</li></ol></li><li>键盘修饰符</li><li>v-bind修饰符 <ol><li>async：双向绑定</li><li>prop：自定义标签属性</li><li>camel：将命名变为驼峰命名法</li></ol></li></ol><h2 id="nexttick" tabindex="-1"><a class="header-anchor" href="#nexttick"><span>nextTick</span></a></h2><p>在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM.<br> 数据变化后,vue将开启一个异步更新队列,视图需要等待队列中所有的数据变化完成后,再统一进行更新.</p><h3 id="场景" tabindex="-1"><a class="header-anchor" href="#场景"><span>场景</span></a></h3><p><em>Vue.nextTick()</em>,第一个参数是回调函数,第二个参数为执行函数上下文.<br> 返回一个promise对象,可以使用async和await完成相同作用的事情.<br><img src="'+D+'" alt="alt text" loading="lazy"><br> callbacks是异步操作队列,将回调函数压入<br> pending用于标识,同一时间只能执行一次<br> timerFunc()异步延迟函数,根据当前环境选择合适的方法<br><img src="'+C+'" alt="alt text" loading="lazy"><br> 无论是宏任务还是微任务,都会放到flushCallbacks<br><img src="'+w+'" alt="alt text" loading="lazy"></p><h2 id="实例挂载过程" tabindex="-1"><a class="header-anchor" href="#实例挂载过程"><span>实例挂载过程</span></a></h2><p>vue的构造函数,options是用户传递的配置项,调用*_init*方法<br><img src="'+A+'" alt="alt text" loading="lazy"></p><ol><li>关于_init方法<br><img src="'+M+'" alt="alt text" loading="lazy"><br><img src="'+S+'" alt="alt text" loading="lazy"><br> 初始化生命周期,渲染方法,调用beforeCreate钩子,初始化依赖注入,initState,调用created钩子<br> 使用vm.$mount方法挂载元素</li><li>initState方法完成props/data/method/watch/methods的初始化<br><img src="'+E+'" alt="alt text" loading="lazy"></li><li>initData方法<br><img src="'+O+'" alt="alt text" loading="lazy"></li><li>vm.$mount方法<br><img src="'+j+'" alt="alt text" loading="lazy"><br><img src="'+F+'" alt="alt text" loading="lazy"><br> 如果没有提供render函数,则解析模板文件.<br> 将html解析成ast树,转为render语法字符串,生成render方法</li><li>mountComponent渲染组件<br><img src="'+q+'" alt="alt text" loading="lazy"><br><img src="'+P+'" alt="alt text" loading="lazy"><br> 触发beforeCreate钩子,定义updateComponent渲染页面视图的方法.监听组件数据,一旦发生变化,触发beforeCreate钩子.updateComponent主要执行初始化声明的render,update方法</li><li>render方法<br> render用于生成vnode<br><img src="'+T+'" alt="alt text" loading="lazy"><br><img src="'+U+'" alt="alt text" loading="lazy"></li><li>_update主要功能是调用patch,将vnode转为真实DOM,并更新到页面中<br><img src="'+$+'" alt="alt text" loading="lazy"></li></ol><h3 id="结论" tabindex="-1"><a class="header-anchor" href="#结论"><span>结论</span></a></h3><ol><li>new Vue调用_init方法 <ol><li>定义$set,$get,$delete,$watch等方法</li><li>定义$on,$off,$emit,$off等事件</li><li>定义_update,$forceUpdate,$destroy生命周期</li></ol></li><li>调用$mount方法进行页面的挂载 <ol><li>主要通过mountComponent方法</li><li>定义updateComponent更新函数</li><li>_update将虚拟DOM生成真实DOM结构,并且渲染到页面中</li></ol></li></ol><h2 id="diff算法" tabindex="-1"><a class="header-anchor" href="#diff算法"><span>diff算法</span></a></h2><p>一种通过同层的树节点进行比较的高效算法</p><ol><li>比较只会再同层级进行,不会跨层级比较<br><img src="'+N+'" alt="alt text" loading="lazy"></li><li>在diff比较的过程中,循环从两边向中间收拢<br><img src="'+R+'" alt="alt text" loading="lazy"><br> 例子<br><img src="'+I+'" alt="alt text" loading="lazy"><br> 第一次循环结束后,发现新旧节点D相同,diff后将他作为第一个真实节点,同时endindex移动到c.<br><img src="'+L+'" alt="alt text" loading="lazy"><br> 第二次循环后,新旧节点c相同,diff后建立c的真实节点,startindex移动到e,endindex移动到b<br><img src="'+Z+'" alt="alt text" loading="lazy"><br> 第三次循环,没有发现e,直接创建新的真实节点E,startindex移动到a<br><img src="'+H+'" alt="alt text" loading="lazy"><br> 第四次循环,diff创建了a的真实节点,startindex移动到b<br><img src="'+Q+'" alt="alt text" loading="lazy"><br> 第五次循环,创建b的真实节点,startindex已经大于endindex,需要创建newStrtIdx和newEndIdx之间的所有节点,即F<br><img src="'+W+'" alt="alt text" loading="lazy"><br> startindex已经大于endindex,退出循环,创建newStrtIdx和newEndIdx之间的所有节点,即F<br><img src="'+X+'" alt="alt text" loading="lazy"></li></ol><h3 id="原理-4" tabindex="-1"><a class="header-anchor" href="#原理-4"><span>原理</span></a></h3><p>当数据发生改变时,set方法会调用Dep.notify通知所有的订阅者Watcher,订阅者就会调用pacth给真实DOM打补丁,更新相应的视图</p><ol><li>patch方法接受参数,oldVnode和Vnode<br><img src="'+G+'" alt="alt text" loading="lazy"><br> 主要做了如下判断:<br> 没有新节点,直接触发旧节点的destory钩子<br> 没有旧节点,直接createElm新建节点<br> 新旧节点自身一样,通过sameVnode判断节点是否一样,一样时,直接调用patchVnode去处理这两个节点<br> 新旧节点自身不一样,直接创建新节点,删除旧的节点</li><li>patchVnode<br><img src="'+Y+'" alt="alt text" loading="lazy"><br><img src="'+J+'" alt="alt text" loading="lazy"><br> 主要做了如下判断:<br> 是否是文本节点,如果是,直接更新文本内容<br> 如果存在子节点,则处理比较更新子节点<br> 只有新节点有子节点,旧节点没有,所有的节点都是全新的,直接新建所有的新DOM,并且加入父节点<br> 只有旧节点有子节点,把所有的旧节点删除,直接删除DOM</li><li>子节点不完全一致,调用updateChildren<br><img src="'+K+'" alt="alt text" loading="lazy"><br><img src="'+ee+'" alt="alt text" loading="lazy"><br><img src="'+le+'" alt="alt text" loading="lazy"><br> 处理了五种情景:<br> 新老节点的start相同,直接patchVnode,新老节点的start索引+1<br> 新老节点的end相同,直接patchVnode,新老节点的end索引-1<br> 老节点的start和新节点的end相同时,patchVnode后,将当前真实DOM移动到oldEndVnode后面,老节点的start索引+1,新节点的end索引-1<br> 老节点的start和新节点的end相同时,patchVnode后,将当前真实DOM移动到oldEndVnode前面,老节点的end索引-1,新节点的start索引+1<br> 如果不满足以上四种情况,则没有节点可以复用，分为以下两种情况<br> 从旧的vnode为key值，对应的index序列为value值的哈希表中寻找到与newStartVnode一致key的旧的vnode节点，在进行patchVnode，同时将这个真实dom移动到oldstartVnode对应的真实dom的前面<br> 调用createElm创建一个新的dom节点放到newStartIdx的位置</li></ol><h3 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h3><p>数据发生改变时，订阅者watcher就会调用patch给真实dom打补丁<br> 通过isSameVnode进行判断，相同则调用patchVnode方法<br> patchVnode方法做了以下操作：</p><ol><li>找到对应的真实dom，称为el</li><li>如果都有文本节点且不相等，将el文本节点设置为Vnode的文本节点</li><li>如果oldVnode有子节点而Vnode没有，则删除el子节点</li><li>如果oldVnode没有子节点而Vnode有，则将vnode的子节点真实化后添加到el</li><li>如果两者都有子节点，则执行updateChildren函数比较子节点<br> updateChildren主要做了以下操作</li><li>设置新旧Vnode的头尾指针</li><li>新旧头尾指针进行比较，向循环中间靠拢，根据情况调用patchVnode进行patch重复流程、调用createElem创建一个新节点，从哈希表寻找key一致的Vnode节点再分情况操作</li></ol><h2 id="组件和插件的区别" tabindex="-1"><a class="header-anchor" href="#组件和插件的区别"><span>组件和插件的区别</span></a></h2><p>组件是把图形、非图形的各种逻辑均抽象为一个统一的概念来实现的开发模式<br> 优势：</p><ol><li>降低系统的耦合度，保持接口不变的情况下，替换不同的组件快速完成需求</li><li>调试方便，出现问题时可以用排除法直接移除组件、快速定位问题</li><li>提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，使用对代码进行优化可获得系统的整体升级</li></ol><p>插件用来给Vue添加全局功能：</p><ol><li>添加全局方法或属性：vue-custom-element</li><li>添加全局资源：指令、过滤器、过渡，vue-touch</li><li>全局混入来添加一些组件选项：vue-router</li><li>添加Vue实例方法，通过把他们添加到Vue.prototype上实现</li><li>一个库，提供自己的api</li></ol><h3 id="区别-1" tabindex="-1"><a class="header-anchor" href="#区别-1"><span>区别</span></a></h3><p>组件有vue单文件，插件暴露了一个install函数<br> 组件注册有全局注册和局部注册，插件使用Vue.use进行注册</p><h3 id="场景-1" tabindex="-1"><a class="header-anchor" href="#场景-1"><span>场景</span></a></h3><p>组件是业务模块，插件是功能模块</p><h2 id="跨域问题" tabindex="-1"><a class="header-anchor" href="#跨域问题"><span>跨域问题</span></a></h2><p>跨域是浏览器基于同源策略的安全手段</p><p>同源有三个部分：</p><ol><li>协议相同</li><li>主机相同</li><li>端口相同</li></ol><p>非同源请求，则发生了跨域</p><h3 id="方法" tabindex="-1"><a class="header-anchor" href="#方法"><span>方法</span></a></h3><ol><li>jsonp</li><li>cors<br> 跨域资源共享，一系列的HTTP头组成，决定了是否阻止前端代码获取跨域请求的响应</li><li>proxy<br> 代理，网络代理，允许一个通过这个服务与另一个网络终端进行非直接的连接<br> vue.config.js文件配置，最终发布上线时如果web应用和接口服务器不在一起仍会跨域<br> 通过服务端实现代理请求转发，express、nginx</li></ol><h2 id="自定义指令" tabindex="-1"><a class="header-anchor" href="#自定义指令"><span>自定义指令</span></a></h2><p>在vue中提供了一套数据驱动视图更为方便的操作，称之为指令</p><h3 id="实现" tabindex="-1"><a class="header-anchor" href="#实现"><span>实现</span></a></h3><p>通过Vue.directive方法进行注册<br> 第一个参数是指令的名字，第二个参数可以是对象数据，也可以是一个指令函数<br> 自定义指令也存在钩子函数：</p><ol><li>bind：只调用一次，指令第一次绑定到元素时调用</li><li>inserted：被绑定元素插入父节点时调用</li><li>update：所在组件的Vnode更新时调用，可能发生在其子Vnode更新之前。</li><li>componentUpdated：指令所在的组件Vnode及其子Vnode全部更新后调用</li><li>unbind：只调用一次，指令与元素解绑时调用<br> 钩子函数的参数：</li><li>el：指令绑定的元素，可以操作dom</li><li>binding：包含余下属性的对象 <ol><li>name</li><li>value：绑定值</li><li>oldValue：指令绑定的前一个值，只在update、componentUpdated可使用</li><li>expression：字符串形式的指令表达式</li><li>arg：传给指令的参数，可选</li><li>modifiers：一个包含修饰符的对象</li></ol></li><li>vnode：虚拟节点</li><li>oldVnode：上一个虚拟节点，只在update、componentUpdated可使用</li></ol><h3 id="场景-2" tabindex="-1"><a class="header-anchor" href="#场景-2"><span>场景</span></a></h3><p>防止表单重复提交<br> 图片懒加载<br> 一键copy的功能</p><h2 id="过滤器" tabindex="-1"><a class="header-anchor" href="#过滤器"><span>过滤器</span></a></h2><p>自定义过滤器，用于一些常见的文本格式化（vue3中已废弃<br> 他是管道式的</p><h3 id="使用" tabindex="-1"><a class="header-anchor" href="#使用"><span>使用</span></a></h3><p>双花括号插值，v-bind表达式<br><img src="'+ie+'" alt="alt text" loading="lazy"></p><h3 id="定义" tabindex="-1"><a class="header-anchor" href="#定义"><span>定义</span></a></h3><p>在选项filters中定义，过滤器函数总接受表达式的值作为第一个参数</p><h3 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h3><p>单位转换，数字打点，文本格式化，时间格式化</p><h3 id="原理-5" tabindex="-1"><a class="header-anchor" href="#原理-5"><span>原理</span></a></h3><p>模板编译阶段过滤器表达式将会被编译为过滤器函数，<br><img src="'+ae+'" alt="alt text" loading="lazy"></p><p>_f函数全名为resolveFilter，这个函数的作用是从this.$options.filters中找出注册的过滤器并返回</p><p>_s函数的全称是toString，过滤器处理后的结果会当作当前参数传递给toString函数，执行的结果保存到vnode中的text属性中</p><h2 id="slot" tabindex="-1"><a class="header-anchor" href="#slot"><span>slot</span></a></h2><p>在HTML中slot元素，作为webComponents技术套件的一部分，是web组件内的一个占位符，该占位符可以在后期使用自己的标记语言填充</p><h3 id="场景-3" tabindex="-1"><a class="header-anchor" href="#场景-3"><span>场景</span></a></h3><p>通过slot插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用<br> 比如布局组件、表格列、下拉选、弹框显示内容等。</p><h3 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span>分类</span></a></h3><ol><li>默认插槽</li><li>具名插槽</li><li>作用域插槽<br> 可获取子组件的信息</li></ol><h3 id="原理-6" tabindex="-1"><a class="header-anchor" href="#原理-6"><span>原理</span></a></h3><p>slot本质上是返回vnode的函数，vue组件渲染到页面上需要经过templete=&gt;render=&gt;vnode=&gt;dom过程<br><img src="'+te+'" alt="alt text" loading="lazy"></p><p>_v表示穿插普通文本节点，_t表示渲染插槽的函数</p><h2 id="虚拟dom" tabindex="-1"><a class="header-anchor" href="#虚拟dom"><span>虚拟dom</span></a></h2><p>虚拟DOM是对一层真实DOM的抽象，以js对象作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。</p><p>在js对象中，虚拟DOM表现为一个Object对象。并且至少包含签名（tag）、属性（attrs）和子元素对象（children）</p><h3 id="为什么需要" tabindex="-1"><a class="header-anchor" href="#为什么需要"><span>为什么需要</span></a></h3><p>DOM是很慢的，页面的性能问题，大部分是由DOM操作引起的。<br> 一次操作时，需要更新10个dom节点，浏览器会依次执行10次更新操作。<br> 而通过vnode，同样的更新10个dom节点，虚拟dom不会立即操作dom，而是将这10次更新内容保存在本地的一个js对象中，最终将这个js对象一次性attach到dom树上，避免大量的无谓计算。</p><h2 id="错误处理" tabindex="-1"><a class="header-anchor" href="#错误处理"><span>错误处理</span></a></h2><p>主要的错误来源包括：</p><ol><li>后端接口错误</li><li>代码中本身逻辑错误<br> 设置全局错误处理函数<br> 生命周期钩子</li></ol><h2 id="vue权限管理" tabindex="-1"><a class="header-anchor" href="#vue权限管理"><span>vue权限管理</span></a></h2><p>权限控制，确保用户只能访问到被分配的资源<br> 前端权限归根结底是请求的发起权，页面加载触发、按钮点击触发</p><p>可以分为四个方面：</p><ol><li>接口权限<br> jwt验证</li><li>按钮权限 <ol><li>v-if</li><li>自定义指令</li></ol></li><li>菜单权限 <ol><li>菜单与路由分离，菜单由后端返回，缺点：菜单与路由做一一对应，全局路由守卫里，每次路由跳转都要做判断</li><li>菜单和路由都有后端返回，缺点：全局路由守卫里，每次路由跳转都要做判断；前后端配合要求更高</li></ol></li><li>路由权限 <ol><li>在路由上标记相应的权限信息，每次路由跳转前做校验</li><li>四种缺点： <ol><li>如果路由很多，对性能会有影响</li><li>全局路由守卫里，每次路由跳转都要做权限判断</li><li>菜单信息写死在前端，要改个文字或权限信息，都需要重新编译</li><li>菜单和路由耦合在一起，定义路由的时候还有添加菜单显示标题，图表之类的信息，而且路由不一定作为菜单显示，还需要更多的字段进行标识</li></ol></li><li>初始化，先挂在不需要权限控制的路由，用户登陆后，获取用户的权限信息，筛选出有权限的路由，在全局路由守卫中调用addRoutes添加路由</li><li>缺点： <ol><li>全局守卫里，每次路由跳转都要做判断</li><li>菜单信息写死在前端，要改个文字或权限信息，都需要重新编译</li><li>菜单和路由耦合在一起，定义路由的时候还有添加菜单显示标题，图表之类的信息，而且路由不一定作为菜单显示，还需要更多的的字段进行标识</li></ol></li></ol></li></ol><h2 id="keep-alive" tabindex="-1"><a class="header-anchor" href="#keep-alive"><span>keep-alive</span></a></h2><p>能在组件切换过程中将状态保留在内存中，防止重复渲染dom<br> 可以设置以下props属性：</p><ol><li>include</li><li>exclude</li><li>max<br> 设置了缓存的组件会多出来两个生命周期钩子（activated、deactivated）</li></ol><h3 id="场景-4" tabindex="-1"><a class="header-anchor" href="#场景-4"><span>场景</span></a></h3><p>首页-列表页-商详页-再返回，列表页应该缓存<br> 首页-列表页-商详页-返回列表页（缓存-返回到首页（缓存-再次进入列表页（不缓存<br> 利用路由元信息，在keep-alive判断是否需要缓存</p><h3 id="获取缓存后组件的数据" tabindex="-1"><a class="header-anchor" href="#获取缓存后组件的数据"><span>获取缓存后组件的数据</span></a></h3><ol><li>每次组件渲染时，都会执行beforeRouteEnter,next方法中可以拿到组件实例，vm.getData</li><li>缓存的组件被激活时，都会执行actived钩子，可以从里面拿到</li></ol><h2 id="spa" tabindex="-1"><a class="header-anchor" href="#spa"><span>SPA</span></a></h2><p>SPA，单页应用SPA是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互</p><p>和MPA多页应用的区别</p><h2 id="部署到服务器后404" tabindex="-1"><a class="header-anchor" href="#部署到服务器后404"><span>部署到服务器后404</span></a></h2><p>在history模式下的问题，但在hash模式下没有问题<br> history的路由切换会被当成http请求<br> 配置将任何页面重定向到index.html，把路由交给前端处理</p><h2 id="vue3" tabindex="-1"><a class="header-anchor" href="#vue3"><span>vue3</span></a></h2><p>速度更快、体积减少、更易维护、更接近原生、更易于使用</p><p>比较：</p><ol><li>重写了虚拟dom实现</li><li>编译模板优化</li><li>更高效的组件初始化</li><li>undate性能提高</li><li>SSR速度提高2~3倍</li></ol><h3 id="新特性" tabindex="-1"><a class="header-anchor" href="#新特性"><span>新特性</span></a></h3><ol><li>framents<br> 支持多个根节点</li><li>teleport<br> 传送，在逻辑位置写模板代码，然后再vue范围之外渲染他<br> 它可以出现在任何地方</li><li>组合式api<br><img src="'+se+'" alt="alt text" loading="lazy"></li><li>createRenderer<br> 自定义渲染器，将vue的开发模型扩展到其他平台</li></ol><h3 id="vue3优化" tabindex="-1"><a class="header-anchor" href="#vue3优化"><span>vue3优化</span></a></h3><ol><li>diff算法优化：<br> 对会发生变化的地方增加了flag标记，变化时直接找到该地方进行比较</li><li>静态提升：<br> 对不参与更新的元素，会做静态提升，只会被创建一次，渲染时直接复用</li><li>事件监听缓存：<br> 默认情况下绑定事件行为会被视为动态绑定，所以每次都会追踪他的变化</li><li>SSR优化：<br> 当静态内容大到一定量级时候，会用createStaticVNode方法在客户端去生成一个static node，这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染</li><li>源码体积<br> 移除了一些不常用的API，使用了TreeShanking，不使用的内容都会被摇掉</li></ol><h3 id="响应式系统" tabindex="-1"><a class="header-anchor" href="#响应式系统"><span>响应式系统</span></a></h3><p>vue2使用defineProperty来劫持整个对象，深度遍历为每个属性添加getter和setter实现响应式<br> vue3采用proxy重写了响应式系统，proxy可以对整个对象进行监听，不需要深度遍历</p><ol><li>监听动态属性的添加</li><li>监听数组的索引和length属性</li><li>监听删除属性</li></ol><p>defineproperty和proxy实现的区别：<br> 原理，数据更新后，通知相关的依赖函数<br> defineproperty无法劫持到对象的删除和添加属性的操作，动态的属性不具备响应式，深层的监听也造成了性能的极大问题<br> proxy劫持整个对象的基本操作，而不是某个属性，多达13种拦截方法</p>',142)]))}const he=l(ne,[["render",re],["__file","vue.html.vue"]]),ce=JSON.parse('{"path":"/posts/Vue/vue.html","title":"Vue2","lang":"zh-CN","frontmatter":{"category":["JS框架"],"description":"Vue2 组件通信 分类： 父子组件之间 兄弟组件之间 祖孙与后代组件之间 非关系组件间之间 8种常规方法 props传递：父传子 $emit触发自定义事件：子传父 ref:获取子组件数据，子传父 eventbus：兄弟组件之间传值 emit触发事件，on监听事件 parent、root alt text attrs与listeners 向下传递属性，...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/Vue/vue.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"Vue2"}],["meta",{"property":"og:description","content":"Vue2 组件通信 分类： 父子组件之间 兄弟组件之间 祖孙与后代组件之间 非关系组件间之间 8种常规方法 props传递：父传子 $emit触发自定义事件：子传父 ref:获取子组件数据，子传父 eventbus：兄弟组件之间传值 emit触发事件，on监听事件 parent、root alt text attrs与listeners 向下传递属性，..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-03-14T12:43:40.000Z"}],["meta",{"property":"article:modified_time","content":"2025-03-14T12:43:40.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"Vue2\\",\\"image\\":[\\"\\"],\\"dateModified\\":\\"2025-03-14T12:43:40.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"组件通信","slug":"组件通信","link":"#组件通信","children":[]},{"level":2,"title":"data属性为何是一个函数","slug":"data属性为何是一个函数","link":"#data属性为何是一个函数","children":[{"level":3,"title":"区别","slug":"区别","link":"#区别","children":[]},{"level":3,"title":"原理","slug":"原理","link":"#原理","children":[]}]},{"level":2,"title":"动态添加属性的问题","slug":"动态添加属性的问题","link":"#动态添加属性的问题","children":[{"level":3,"title":"原理","slug":"原理-1","link":"#原理-1","children":[]},{"level":3,"title":"解决","slug":"解决","link":"#解决","children":[]}]},{"level":2,"title":"v-if和v-for的优先级","slug":"v-if和v-for的优先级","link":"#v-if和v-for的优先级","children":[{"level":3,"title":"注意","slug":"注意","link":"#注意","children":[]}]},{"level":2,"title":"v-if和v-show","slug":"v-if和v-show","link":"#v-if和v-show","children":[{"level":3,"title":"原理","slug":"原理-2","link":"#原理-2","children":[]}]},{"level":2,"title":"key的作用","slug":"key的作用","link":"#key的作用","children":[{"level":3,"title":"原理","slug":"原理-3","link":"#原理-3","children":[]}]},{"level":2,"title":"mixin","slug":"mixin","link":"#mixin","children":[{"level":3,"title":"注意","slug":"注意-1","link":"#注意-1","children":[]},{"level":3,"title":"源码","slug":"源码","link":"#源码","children":[]}]},{"level":2,"title":"修饰符","slug":"修饰符","link":"#修饰符","children":[]},{"level":2,"title":"nextTick","slug":"nexttick","link":"#nexttick","children":[{"level":3,"title":"场景","slug":"场景","link":"#场景","children":[]}]},{"level":2,"title":"实例挂载过程","slug":"实例挂载过程","link":"#实例挂载过程","children":[{"level":3,"title":"结论","slug":"结论","link":"#结论","children":[]}]},{"level":2,"title":"diff算法","slug":"diff算法","link":"#diff算法","children":[{"level":3,"title":"原理","slug":"原理-4","link":"#原理-4","children":[]},{"level":3,"title":"总结","slug":"总结","link":"#总结","children":[]}]},{"level":2,"title":"组件和插件的区别","slug":"组件和插件的区别","link":"#组件和插件的区别","children":[{"level":3,"title":"区别","slug":"区别-1","link":"#区别-1","children":[]},{"level":3,"title":"场景","slug":"场景-1","link":"#场景-1","children":[]}]},{"level":2,"title":"跨域问题","slug":"跨域问题","link":"#跨域问题","children":[{"level":3,"title":"方法","slug":"方法","link":"#方法","children":[]}]},{"level":2,"title":"自定义指令","slug":"自定义指令","link":"#自定义指令","children":[{"level":3,"title":"实现","slug":"实现","link":"#实现","children":[]},{"level":3,"title":"场景","slug":"场景-2","link":"#场景-2","children":[]}]},{"level":2,"title":"过滤器","slug":"过滤器","link":"#过滤器","children":[{"level":3,"title":"使用","slug":"使用","link":"#使用","children":[]},{"level":3,"title":"定义","slug":"定义","link":"#定义","children":[]},{"level":3,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]},{"level":3,"title":"原理","slug":"原理-5","link":"#原理-5","children":[]}]},{"level":2,"title":"slot","slug":"slot","link":"#slot","children":[{"level":3,"title":"场景","slug":"场景-3","link":"#场景-3","children":[]},{"level":3,"title":"分类","slug":"分类","link":"#分类","children":[]},{"level":3,"title":"原理","slug":"原理-6","link":"#原理-6","children":[]}]},{"level":2,"title":"虚拟dom","slug":"虚拟dom","link":"#虚拟dom","children":[{"level":3,"title":"为什么需要","slug":"为什么需要","link":"#为什么需要","children":[]}]},{"level":2,"title":"错误处理","slug":"错误处理","link":"#错误处理","children":[]},{"level":2,"title":"vue权限管理","slug":"vue权限管理","link":"#vue权限管理","children":[]},{"level":2,"title":"keep-alive","slug":"keep-alive","link":"#keep-alive","children":[{"level":3,"title":"场景","slug":"场景-4","link":"#场景-4","children":[]},{"level":3,"title":"获取缓存后组件的数据","slug":"获取缓存后组件的数据","link":"#获取缓存后组件的数据","children":[]}]},{"level":2,"title":"SPA","slug":"spa","link":"#spa","children":[]},{"level":2,"title":"部署到服务器后404","slug":"部署到服务器后404","link":"#部署到服务器后404","children":[]},{"level":2,"title":"vue3","slug":"vue3","link":"#vue3","children":[{"level":3,"title":"新特性","slug":"新特性","link":"#新特性","children":[]},{"level":3,"title":"vue3优化","slug":"vue3优化","link":"#vue3优化","children":[]},{"level":3,"title":"响应式系统","slug":"响应式系统","link":"#响应式系统","children":[]}]}],"git":{"createdTime":1741956220000,"updatedTime":1741956220000,"contributors":[{"name":"GUNxzq","username":"GUNxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/GUNxzq"}]},"readingTime":{"minutes":20.61,"words":6184},"filePathRelative":"posts/Vue/vue.md","localizedDate":"2025年3月14日","excerpt":"\\n<h2>组件通信</h2>\\n<p>分类：</p>\\n<ol>\\n<li>父子组件之间</li>\\n<li>兄弟组件之间</li>\\n<li>祖孙与后代组件之间</li>\\n<li>非关系组件间之间</li>\\n</ol>\\n<p>8种常规方法</p>\\n<ol>\\n<li>props传递：父传子</li>\\n<li>$emit触发自定义事件：子传父</li>\\n<li>ref:获取子组件数据，子传父</li>\\n<li>eventbus：兄弟组件之间传值\\n<ol>\\n<li>emit触发事件，on监听事件</li>\\n</ol>\\n</li>\\n<li>parent、root<br>\\n</li>\\n<li>attrs与listeners\\n<ol>\\n<li>向下传递属性，包含了未在props中声明的值</li>\\n</ol>\\n</li>\\n<li>provide与inject\\n<ol>\\n<li>祖先定义provide</li>\\n<li>后代定义inject</li>\\n</ol>\\n</li>\\n<li>vuex:存储共享变量的容器\\n<ol>\\n<li>state：存放共享变量</li>\\n<li>getter：增加一个getter的派生状态</li>\\n<li>mutations：修改state的方法</li>\\n<li>actions：异步的mutations</li>\\n</ol>\\n</li>\\n</ol>","autoDesc":true}');export{he as comp,ce as data};
