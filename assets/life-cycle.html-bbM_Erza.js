import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,d as r,o}from"./app-o8wfpQUt.js";const n={};function d(i,e){return o(),a("div",null,e[0]||(e[0]=[r('<h1 id="生命周期理解" tabindex="-1"><a class="header-anchor" href="#生命周期理解"><span>生命周期理解</span></a></h1><p>vue生命周期即vue组件从创建到销毁的过程，通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力。<br> 大约有四个阶段：创建、挂载、更新和销毁。每个阶段包含多个钩子函数。<br><strong>注意</strong>：对于keep-alive缓存的组件，有额外的两个生命周期钩子，activated、deactivated。</p><ol><li><p>创建vue实例对象:<strong>new Vue(options)</strong></p></li><li><p>初始化实例对象:仅包含默认生命周期函数和默认事件</p></li></ol><h2 id="beforecreate" tabindex="-1"><a class="header-anchor" href="#beforecreate"><span>beforeCreate</span></a></h2><p>无法访问options的任何部分，响应式系统、事件绑定均未生效。可用于插件初始化（全局状态预加载），调试。</p><ol start="3"><li>初始化data、methods</li></ol><h2 id="created-options" tabindex="-1"><a class="header-anchor" href="#created-options"><span>created:options</span></a></h2><p>初始化完成，组件未挂载。可用于数据请求、第三方库初始化、验证props。</p><ol start="4"><li>编译模板：是否存在template标签，否则使用el属性（元素选择器）的元素（中的字符串）作为模板编译成render函数(调用<strong>vm.$mounted(el)</strong>)。<br> 父组件先进行模板编译，子组件后进行模板编译。</li></ol><h2 id="bedoremounted" tabindex="-1"><a class="header-anchor" href="#bedoremounted"><span>bedoreMounted</span></a></h2><p>可以访问虚拟DOM，但未挂载到页面中。干预模板编译（自定义渲染器），调试虚拟dom结构。</p><ol start="5"><li>生成虚拟DOM:在render函数中将虚拟DOM渲染成真实DOM</li></ol><h2 id="mounted" tabindex="-1"><a class="header-anchor" href="#mounted"><span>mounted</span></a></h2><p>可操作真实DOM，可访问子组件（<strong>子组件的mounted早于父组件的mounted</strong>）。DOM操作，获取真实DOM信息，子组件交互（<strong>调用子组件方法</strong>）。</p><ol start="6"><li>挂载完成：当数据变化之时</li></ol><h2 id="beforeupdate" tabindex="-1"><a class="header-anchor" href="#beforeupdate"><span>beforeUpdate</span></a></h2><p>可访问旧数据和旧dom。记录旧状态，对比数据变化。</p><ol start="7"><li>虚拟DOM重渲染：在内存中重新渲染虚拟DOM树，调用<strong>patch函数</strong>完成新旧虚拟DOM的差异计算，将差异应用到真实DOM</li></ol><h2 id="updated" tabindex="-1"><a class="header-anchor" href="#updated"><span>updated</span></a></h2><p>访问更新后DOM，可能因父组件更新而触发。依赖新DOM的操作，重新计算布局、触发副作用（统计日志）。<br> 当调用<strong>vm.$destroy</strong>之时</p><h2 id="beforedestroy" tabindex="-1"><a class="header-anchor" href="#beforedestroy"><span>beforeDestroy:</span></a></h2><p>访问完整的组件实例。清理资源，事件监听器、定时器、取消异步请求。解绑副作用，取消vuex的大约、断开websocket的链接。</p><ol start="8"><li>清理：清理watchers、事件监听器、子组件等</li><li>销毁</li></ol><h2 id="destroyed" tabindex="-1"><a class="header-anchor" href="#destroyed"><span>destroyed:</span></a></h2><p>实例销毁。日志记录、验证清理。</p><h2 id="activated" tabindex="-1"><a class="header-anchor" href="#activated"><span>activated</span></a></h2><p>被缓存的组件重新进入 DOM（如从其他页面返回）<br> 恢复组件状态（如刷新数据、重新绑定事件）；<br> 触发“激活”后的副作用（如重新加载最新数据）。</p><h2 id="deactivated" tabindex="-1"><a class="header-anchor" href="#deactivated"><span>deactivated</span></a></h2><p>被缓存的组件离开 DOM（如切换到其他页面）<br> 暂停组件状态（如停止定时器、暂停视频播放）；<br> 保存当前状态（如滚动位置、表单输入内容）。</p><h2 id="父子组件渲染顺序" tabindex="-1"><a class="header-anchor" href="#父子组件渲染顺序"><span>父子组件渲染顺序</span></a></h2><p>同步加载组件时，按模板的顺序来加载。父组件编译完模板后，加载完子组件后，再完成父组件挂载。<br> 异步加载组件时，父组件生命周期完成后，再开始加载子组件。</p>',31)]))}const p=t(n,[["render",d],["__file","life-cycle.html.vue"]]),c=JSON.parse('{"path":"/posts/Vue/life-cycle.html","title":"生命周期理解","lang":"zh-CN","frontmatter":{"date":"2025-03-11T00:00:00.000Z","category":["JS框架"],"tag":["Vue"],"description":"生命周期理解 vue生命周期即vue组件从创建到销毁的过程，通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力。 大约有四个阶段：创建、挂载、更新和销毁。每个阶段包含多个钩子函数。 注意：对于keep-alive缓存的组件，有额外的两个生命周期钩子，activated、deactivated。 创建vue实例对象:new Vue(o...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/Vue/life-cycle.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"生命周期理解"}],["meta",{"property":"og:description","content":"生命周期理解 vue生命周期即vue组件从创建到销毁的过程，通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力。 大约有四个阶段：创建、挂载、更新和销毁。每个阶段包含多个钩子函数。 注意：对于keep-alive缓存的组件，有额外的两个生命周期钩子，activated、deactivated。 创建vue实例对象:new Vue(o..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T06:14:43.000Z"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2025-03-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T06:14:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"生命周期理解\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-14T06:14:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"beforeCreate","slug":"beforecreate","link":"#beforecreate","children":[]},{"level":2,"title":"created:options","slug":"created-options","link":"#created-options","children":[]},{"level":2,"title":"bedoreMounted","slug":"bedoremounted","link":"#bedoremounted","children":[]},{"level":2,"title":"mounted","slug":"mounted","link":"#mounted","children":[]},{"level":2,"title":"beforeUpdate","slug":"beforeupdate","link":"#beforeupdate","children":[]},{"level":2,"title":"updated","slug":"updated","link":"#updated","children":[]},{"level":2,"title":"beforeDestroy:","slug":"beforedestroy","link":"#beforedestroy","children":[]},{"level":2,"title":"destroyed:","slug":"destroyed","link":"#destroyed","children":[]},{"level":2,"title":"activated","slug":"activated","link":"#activated","children":[]},{"level":2,"title":"deactivated","slug":"deactivated","link":"#deactivated","children":[]},{"level":2,"title":"父子组件渲染顺序","slug":"父子组件渲染顺序","link":"#父子组件渲染顺序","children":[]}],"git":{"createdTime":1752055862000,"updatedTime":1752473683000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":2,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":2.62,"words":785},"filePathRelative":"posts/Vue/life-cycle.md","localizedDate":"2025年3月11日","excerpt":"\\n<p>vue生命周期即vue组件从创建到销毁的过程，通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力。<br>\\n大约有四个阶段：创建、挂载、更新和销毁。每个阶段包含多个钩子函数。<br>\\n<strong>注意</strong>：对于keep-alive缓存的组件，有额外的两个生命周期钩子，activated、deactivated。</p>\\n<ol>\\n<li>\\n<p>创建vue实例对象:<strong>new Vue(options)</strong></p>\\n</li>\\n<li>\\n<p>初始化实例对象:仅包含默认生命周期函数和默认事件</p>\\n</li>\\n</ol>\\n","autoDesc":true}');export{p as comp,c as data};
