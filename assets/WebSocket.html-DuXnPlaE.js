import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,d as a,o as i}from"./app-C9qP9JtV.js";const t={};function l(c,e){return i(),n("div",null,e[0]||(e[0]=[a(`<h1 id="websocket" tabindex="-1"><a class="header-anchor" href="#websocket"><span>WebSocket</span></a></h1><p>WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅</p><p>客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输<br> websocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据</p><p>而在websocket出现之前，开发实时web应用的方式为轮询</p><p>不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果</p><p>轮询的缺点也很明显，反复发送无效查询请求耗费了大量的带宽和 CPU 资源</p><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><h3 id="全双工" tabindex="-1"><a class="header-anchor" href="#全双工"><span>全双工</span></a></h3><p>通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合<br> 例如指 A→B 的同时 B→A ，是瞬时同步的</p><h3 id="二进制帧" tabindex="-1"><a class="header-anchor" href="#二进制帧"><span>二进制帧</span></a></h3><p>采用了二进制帧结构，语法、语义与 HTTP 完全不兼容，相比http/2，WebSocket 更侧重于“实时通信”，而HTTP/2 更侧重于提高传输效率，所以两者的帧结构也有很大的区别<br> 不像 HTTP/2 那样定义流，也就不存在多路复用、优先级等特性<br> 自身就是全双工，也不需要服务器推送</p><h3 id="协议名" tabindex="-1"><a class="header-anchor" href="#协议名"><span>协议名</span></a></h3><p>引入ws和wss分别代表明文和密文的websocket协议，且默认端口使用80或443，几乎与http一致</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>ws://www.chrono.com</span></span>
<span class="line"><span>ws://www.chrono.com:8080/srv</span></span>
<span class="line"><span>wss://www.chrono.com:445/im?user_id=xxx</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="握手" tabindex="-1"><a class="header-anchor" href="#握手"><span>握手</span></a></h3><p>WebSocket 也要有一个握手过程，然后才能正式收发数据<br> 客户端发送数据格式如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>GET /chat HTTP/1.1</span></span>
<span class="line"><span>Host: server.example.com</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Connection: Upgrade</span></span>
<span class="line"><span>Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ==</span></span>
<span class="line"><span>Origin: http://example.com</span></span>
<span class="line"><span>Sec-WebSocket-Protocol: chat, superchat</span></span>
<span class="line"><span>Sec-WebSocket-Version: 13</span></span>
<span class="line"><span>Connection：必须设置Upgrade，表示客户端希望连接升级</span></span>
<span class="line"><span>Upgrade：必须设置Websocket，表示希望升级到Websocket协议</span></span>
<span class="line"><span>Sec-WebSocket-Key：客户端发送的一个 base64 编码的密文，用于简单的认证秘钥。要求服务端必须返回一个对应加密的“Sec-WebSocket-Accept应答，否则客户端会抛出错误，并关闭连接</span></span>
<span class="line"><span>Sec-WebSocket-Version ：表示支持的Websocket版本</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>服务端返回的数据格式：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>HTTP/1.1 101 Switching Protocols</span></span>
<span class="line"><span>Upgrade: websocket</span></span>
<span class="line"><span>Connection: Upgrade</span></span>
<span class="line"><span>Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=Sec-WebSocket-Protocol: chat</span></span>
<span class="line"><span>HTTP/1.1 101 Switching</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>Protocols：表示服务端接受 WebSocket 协议的客户端连接</li><li>Sec-WebSocket-Accep：验证客户端请求报文，同样也是为了防止误连接。具体做法是把请求头里“Sec-WebSocket-Key”的值，加上一个专用的 UUID，再计算摘要</li></ul><h2 id="优点" tabindex="-1"><a class="header-anchor" href="#优点"><span>优点</span></a></h2><ul><li>较少的控制开销：数据包头部协议较小，不同于http每次请求需要携带完整的头部</li><li>更强的实时性：相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少</li><li>保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证</li><li>更好的二进制支持：定义了二进制帧，更好处理二进制内容</li><li>支持扩展：用户可以扩展websocket协议、实现部分自定义的子协议</li><li>更好的压缩效果：Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率</li></ul><h2 id="应用场景" tabindex="-1"><a class="header-anchor" href="#应用场景"><span>应用场景</span></a></h2><p>基于websocket的事实通信的特点，其存在的应用场景大概有：</p><ul><li>弹幕</li><li>媒体聊天</li><li>协同编辑</li><li>基于位置的应用</li><li>体育实况更新</li><li>股票基金报价实时更新</li></ul>`,25)]))}const o=s(t,[["render",l],["__file","WebSocket.html.vue"]]),d=JSON.parse('{"path":"/posts/HTTP/WebSocket.html","title":"WebSocket","lang":"zh-CN","frontmatter":{"date":"2025-05-11T00:00:00.000Z","order":2,"category":["React"],"tag":["React"],"description":"WebSocket WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅 客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输 websocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据 而在web...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/HTTP/WebSocket.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"WebSocket"}],["meta",{"property":"og:description","content":"WebSocket WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅 客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输 websocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据 而在web..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-16T16:32:48.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2025-05-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T16:32:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"WebSocket\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-16T16:32:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[{"level":3,"title":"全双工","slug":"全双工","link":"#全双工","children":[]},{"level":3,"title":"二进制帧","slug":"二进制帧","link":"#二进制帧","children":[]},{"level":3,"title":"协议名","slug":"协议名","link":"#协议名","children":[]},{"level":3,"title":"握手","slug":"握手","link":"#握手","children":[]}]},{"level":2,"title":"优点","slug":"优点","link":"#优点","children":[]},{"level":2,"title":"应用场景","slug":"应用场景","link":"#应用场景","children":[]}],"git":{"createdTime":1752683568000,"updatedTime":1752683568000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":3.28,"words":984},"filePathRelative":"posts/HTTP/WebSocket.md","localizedDate":"2025年5月11日","excerpt":"\\n<p>WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅</p>\\n<p>客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输<br>\\nwebsocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据</p>\\n<p>而在websocket出现之前，开发实时web应用的方式为轮询</p>\\n<p>不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果</p>\\n","autoDesc":true}');export{o as comp,d as data};
