import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as e,d as t,o as a}from"./app-Bqkh5_iM.js";const n={};function r(l,i){return a(),e("div",null,i[0]||(i[0]=[t(`<h1 id="数字精度丢失" tabindex="-1"><a class="header-anchor" href="#数字精度丢失"><span>数字精度丢失</span></a></h1><p>在JavaScript中，现在主流的数值类型是Number，而Number采用的是<strong>IEEE754</strong>规范中64位双精度浮点数编码<br> 存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度</p><p>它的长度是 16，所以可以使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">.10000000000000000555</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toPrecision</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">16</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div></div></div><p>超出这个精度，数值就不准确</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toPrecision</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">21</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0.100000000000000005551</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="解决" tabindex="-1"><a class="header-anchor" href="#解决"><span>解决</span></a></h2><ul><li>考虑到每次浮点数运算的偏差非常小(其实不然)，可以对结果进行指定精度的四舍五入，比如可以parseFloat(result.toFixed(12));</li><li>将浮点数转为整数运算，再对结果做除法。比如0.1 + 0.2，可以转化为(1*2)/3。</li><li>把浮点数转化为字符串，模拟实际运算的过程。<br> 比如bignumber.js，decimal.js，以及big.js</li></ul>`,8)]))}const d=s(n,[["render",r],["__file","number.html.vue"]]),o=JSON.parse('{"path":"/posts/JS/number.html","title":"数字精度丢失","lang":"zh-CN","frontmatter":{"date":"2025-03-19T00:00:00.000Z","category":["JavaScript"],"description":"数字精度丢失 在JavaScript中，现在主流的数值类型是Number，而Number采用的是IEEE754规范中64位双精度浮点数编码 存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度 它的长度是 16，所以...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/JS/number.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"数字精度丢失"}],["meta",{"property":"og:description","content":"数字精度丢失 在JavaScript中，现在主流的数值类型是Number，而Number采用的是IEEE754规范中64位双精度浮点数编码 存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度 它的长度是 16，所以..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-16T16:32:48.000Z"}],["meta",{"property":"article:published_time","content":"2025-03-19T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T16:32:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数字精度丢失\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-19T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-16T16:32:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"解决","slug":"解决","link":"#解决","children":[]}],"git":{"createdTime":1752683568000,"updatedTime":1752683568000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":0.89,"words":266},"filePathRelative":"posts/JS/number.md","localizedDate":"2025年3月19日","excerpt":"\\n<p>在JavaScript中，现在主流的数值类型是Number，而Number采用的是<strong>IEEE754</strong>规范中64位双精度浮点数编码<br>\\n存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度</p>\\n<p>它的长度是 16，所以可以使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">.10000000000000000555</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">toPrecision</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">16</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 返回 0.1000000000000000，去掉末尾的零后正好为 0.1</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{d as comp,o as data};
