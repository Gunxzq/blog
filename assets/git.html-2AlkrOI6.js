import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as l,d as r,o as e}from"./app-C9qP9JtV.js";const n="/blog/assets/image-BchsTTEj.png",o="/blog/assets/image-1-BDOnGPZu.png",t="/blog/assets/image-1-BDOnGPZu.png",s="/blog/assets/image-3-BqeFren5.png",g={};function m(p,i){return e(),l("div",null,i[0]||(i[0]=[r('<h1 id="版本管理" tabindex="-1"><a class="header-anchor" href="#版本管理"><span><strong>版本管理</strong></span></a></h1><p>版本控制(Version control)，是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步。</p><p>通过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号。</p><p>一种简单的版本控制形式如下：赋给图的初版一个版本等级&quot;A&quot;。当做了第一次改变后，版本等级改为&quot;B&quot;,以此类推。</p><p>版本控制能提供项目的设计者，将设计恢复到之前任一状态的选择权。</p><p>简言之，修改只要提交到版本控制系统，基本上都能找回，版本控制系统就像一台时光机器，可以让你回到任何一个时间点。</p><p>优点：</p><ol><li>记录文件所有的历史变化，这是版本控制系统的基本能力</li><li>随时恢复到任意时间点，历史记录功能使我们不怕改错代码了</li><li>支持多功能并行开发，通常版本控制系统都支持分支，保证了并行开发的可行</li><li>多人协作并行开发，对于多人协作项目、支持多人协作开发的版本管理系统将事半功倍</li></ol><h2 id="分类" tabindex="-1"><a class="header-anchor" href="#分类"><span><strong>分类</strong></span></a></h2><p>版本控制系统根据类别可以分成：</p><ol><li>本地版本控制系统</li><li>集中式版本控制系统</li><li>分布式版本控制系统</li></ol><h3 id="本地版本控制系统" tabindex="-1"><a class="header-anchor" href="#本地版本控制系统"><span><strong>本地版本控制系统</strong></span></a></h3><p>结构如下图所示：<br><img src="'+n+'" alt="alt text" loading="lazy"><br> 优点：</p><ol><li>简单，很多系统中都有内置</li><li>适合管理文本，如系统设置<br> 缺点：</li><li>其不支持远程操作，因此并不适合多人版本开发。</li></ol><h3 id="集中式版本控制系统" tabindex="-1"><a class="header-anchor" href="#集中式版本控制系统"><span><strong>集中式版本控制系统</strong></span></a></h3><p>结构如下图所示：<br><img src="'+o+'" alt="alt text" loading="lazy"><br> 优点：</p><ol><li>适合多人团队协作开发</li><li>代码集中化管理<br> 缺点：</li><li>单点故障</li><li>必须联网，无法单机工作<br> 代表工具有<mark>SVN</mark>、<mark>CVS</mark></li></ol><h4 id="svn" tabindex="-1"><a class="header-anchor" href="#svn"><span><strong>SVN</strong></span></a></h4><p><mark>TortoiseSVN</mark>是一款非常易于使用的跨平台的版本控制/源代码控制软件</p><h4 id="cvs" tabindex="-1"><a class="header-anchor" href="#cvs"><span><strong>CVS</strong></span></a></h4><p><mark>CVS</mark>是版本控制系统，是源配置管理(SCM)的重要组成部分。使用它，您可以记录源文件和文档的历史记录。<br> 老牌的版本控制系统，它是基于客户端/服务器的行为使其可以容纳多用户，构成网络也很方便。<br> 这一特性使得<mark>CVS</mark>成为位于不同地点的人同时处理数据文件(特别是程序的源代码)时的首选。</p><h3 id="分布式版本控制系统" tabindex="-1"><a class="header-anchor" href="#分布式版本控制系统"><span><strong>分布式版本控制系统</strong></span></a></h3><p>结构如下图所示：<br><img src="'+t+'" alt="alt text" loading="lazy"><br> 优点：</p><ol><li>适合多人团队协作开发</li><li>代码集中化管理<br> 缺点：</li><li>可以离线工作</li><li>每个计算机都是一个完整仓库<br> 分布式版本管理系统每个计算机都有一个完整仓库，可本地提交，可做到离线工作，则不用像集中版本管理那样因为断网情况而无法工作<br> 代表工具为<mark>Git</mark>、<mark>HG</mark></li></ol><h4 id="git" tabindex="-1"><a class="header-anchor" href="#git"><span><strong>Git</strong></span></a></h4><p><mark>Git</mark>是目前世界上最先进的分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所以事务特性：易于学习、占用内存小，具有闪电般快速的性能。<br> 使用<mark>Git</mark>和<mark>Gitlab</mark>搭建版本控制环境是现在互联网公司最流行的版本控制方式</p><h4 id="hg" tabindex="-1"><a class="header-anchor" href="#hg"><span><strong>HG</strong></span></a></h4><p><mark>TortoiseHg</mark>是一个免费的分布式源代码管理工具。它可以有效地处理任何规模的项目，并提供简单直观的界面。<br><mark>MercurialHg</mark>是一种轻量级分布式版本控制系统，采用<mark>Python</mark>语言实现，易于学习和使用，扩展性强。</p><h2 id="git-1" tabindex="-1"><a class="header-anchor" href="#git-1"><span><strong>Git</strong></span></a></h2><p><mark>git</mark>是一个分布式版本控制软件，最初是为了更好地管理<mark>Linux</mark>内核开发而设计<br> 分布式版本控制系统的客户端并不只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协调工作用的服务器发生故障、事后都可以用任何一个镜像出来的本地仓库恢复</p><figure><img src="'+t+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>项目开始，只有一个原始版仓库，别的机器可以<mark>clone</mark>这个原始版本库，那么所有的<mark>clone</mark>的机器，他们的版本库其实都是一样的，并没有主次之分。</p><p>所以在实现团队协作的时候，只要有一台电脑充当服务器的角色，其他每个人都从这个”服务器“仓库<mark>clone</mark>一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。</p><p><mark>github</mark>实际就可以充当这个服务器角色，其是一个开源协作社区，提供<mark>Git</mark>仓库托管服务，既可以让别人参与你的开源项目，也可以参与别人的开源项目。</p><h3 id="工作原理" tabindex="-1"><a class="header-anchor" href="#工作原理"><span><strong>工作原理</strong></span></a></h3><p>当我们通过<mark>git init</mark>创建或者<mark>git clone</mark>一个项目的时候，项目目录会隐藏一个==.git==子目录，其作用是用来跟踪管理版本的</p><p><mark>Git</mark>中所有数据在存储前都计算校验和，然后以校验和来引用，所以在我们修改或者删除文件的时候，<mark>Git</mark>能够知道<br><mark>Git</mark>用以计算校验和的机制叫做 SHA-1 散列(hash，哈希)。这是一个由40个十六进制字符(0-9和a-f)组成字符串，基于 Git 中文件的内容或目录结构计算出来，如下：</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>24b9da6552252987aa493b52f8696cd6d3b00373</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>当我们修改文件的时候，<mark>git</mark>就会修改文件的状态，可以通过<mark>git status</mark>进行查询，状态情况如下：</p><ol><li>已修改(modified)：表示修改了文件，但还没保存到数据库中。</li><li>已暂存(staged)：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。</li><li>已提交(committed)：表示数据已经安全的保存在本地数据库中。<br> 文件状态对应的，不同状态的文件在<mark>Git</mark>中处于不同的工作区域，主要分成了四个部分：</li><li>工作区：相当于本地写代码的区域，如<mark>git clone</mark>一个项目到本地，相当于本地克隆了远程仓库项目的一个副本</li><li>暂存区：暂存区是一个文件，保存了下次将提交的文件列表信息，一般在<mark>Git</mark>仓库目录中</li><li>本地仓库：提交更新，找到暂存区域的文件，将快照永久性存储到Git本地仓库</li></ol><figure><img src="'+s+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="命令" tabindex="-1"><a class="header-anchor" href="#命令"><span><strong>命令</strong></span></a></h3><p><mark>git</mark>常用的命令</p><ol><li>add：提交全部文件修改到缓存区</li><li>commit：</li><li>push</li><li>pull</li><li>clone</li><li>checkout</li></ol><h4 id="配置命令" tabindex="-1"><a class="header-anchor" href="#配置命令"><span>配置命令</span></a></h4><p><mark>Git</mark>自带一个<mark>git config</mark>的工具来帮助设置控制<mark>Git</mark>外观和行为的配置变量，在我们安装完<mark>git</mark>之后，第一件事就是设置你的用户名和邮件地址。</p><p>后续每一个提交都会使用这些信息。他们会写入你的每一次提交中，不可更改。</p><p>设置提交代码的用户信息命令如下：</p><ol><li>git config [--global] <a href="http://user.name" target="_blank" rel="noopener noreferrer">user.name</a> &quot;[name]&quot;</li><li>git config [--global] user.email &quot;[email address]&quot;</li></ol><h4 id="启动命令" tabindex="-1"><a class="header-anchor" href="#启动命令"><span>启动命令</span></a></h4><p>一个<mark>git</mark>项目的初始有两个途径，分别是：</p><ol><li>git init [project-name]：创建或在当前目录初始化一个git代码库</li><li>git init url：下载一个项目和他的整个代码历史</li></ol><h4 id="日常基本操作" tabindex="-1"><a class="header-anchor" href="#日常基本操作"><span>日常基本操作</span></a></h4><ol><li>git init：初始化仓库，默认为<mark>master</mark>分支</li><li>add：提交全部文件修改到缓存区</li><li>add &lt;具体文件路径+全名&gt;：提交某些文件到缓冲区</li><li>git diff：查看当前代码<mark>add</mark>后，会<mark>add</mark>哪些内容</li><li>git diff --staged：查看现在<mark>commit</mark>提交后，会提交哪些内容</li><li>git status：查看当前分支状态</li><li>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt;：拉取远程仓库的分支与本地当前分支</li><li>git pull &lt;远程仓库名&gt; &lt;远程分支名&gt; &lt;本地分支名&gt;：拉取远程仓库的分支与本地的某个分支合并</li><li>git commit --amend [file1] [file2]：重做上一次<mark>commit</mark>，并包括指定文件的新变化</li><li>git commit -v:提交时显示所有的diff信息</li><li>git commit -m [message]：提交代码到本地仓库，并写提交信息[message]</li></ol><p>关于提交信息的格式，可以遵循以下的规则：</p><ol><li>feat：新特性，添加功能</li><li>fix：修改bug</li><li>refactor：代码重构</li><li>docs：文档修改</li><li>style：代码格式修改</li><li>test：测试用例修改</li><li>chore：其他修改，比如构建流程，依赖管理</li></ol><h4 id="分支操作" tabindex="-1"><a class="header-anchor" href="#分支操作"><span>分支操作</span></a></h4><ol><li>git branch：查看本地所有分支</li><li>git branch -r：查看远程所有的分支</li><li>git branch -a：查看本地和远程所有的分支</li><li>git merge &lt;分支名&gt;：合并分支</li><li>git merge --abort：合并分支出现冲突时，取消合并，一切回到合并前的状态</li><li>git branch &lt;新分支名&gt;：基于当前分支，新建一个分支</li><li>git checkout --orphan &lt;新分支名&gt;：新建一个空分支，会保留之前分支的所有文件</li><li>git branch -D &lt;分支名&gt;：删除本地某个分支</li><li>git push &lt;远程库名&gt;:&lt;分支名&gt;：删除某个远程分支</li><li>git branch &lt;新分支名&gt;&lt;提交ID&gt;：从提交历史恢复某个删除掉的某个分支</li><li>git branch -m &lt;原分支名&gt; &lt;新分支名&gt;：分支更名</li><li>git checkout &lt;分支名&gt;：切换到本地某个分支</li><li>git checkout &lt;远程库名&gt;/&lt;分支名&gt;：切换到线上某个分支</li><li>git checkout -b &lt;新分支名&gt;：基于当前分支新建分支，并切换为这个分支</li></ol>',58)]))}const d=a(g,[["render",m],["__file","git.html.vue"]]),k=JSON.parse('{"path":"/posts/VersionControl/git.html","title":"版本管理","lang":"zh-CN","frontmatter":{"date":"2025-02-11T00:00:00.000Z","category":["版本控制工具"],"tag":["Git"],"description":"版本管理 版本控制(Version control)，是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步。 通过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号。 一种简单的版本控制形式如下：赋给图的初版一个版本等...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/VersionControl/git.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"版本管理"}],["meta",{"property":"og:description","content":"版本管理 版本控制(Version control)，是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步。 通过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号。 一种简单的版本控制形式如下：赋给图的初版一个版本等..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T06:14:43.000Z"}],["meta",{"property":"article:tag","content":"Git"}],["meta",{"property":"article:published_time","content":"2025-02-11T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T06:14:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"版本管理\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-11T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-14T06:14:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"分类","slug":"分类","link":"#分类","children":[{"level":3,"title":"本地版本控制系统","slug":"本地版本控制系统","link":"#本地版本控制系统","children":[]},{"level":3,"title":"集中式版本控制系统","slug":"集中式版本控制系统","link":"#集中式版本控制系统","children":[]},{"level":3,"title":"分布式版本控制系统","slug":"分布式版本控制系统","link":"#分布式版本控制系统","children":[]}]},{"level":2,"title":"Git","slug":"git-1","link":"#git-1","children":[{"level":3,"title":"工作原理","slug":"工作原理","link":"#工作原理","children":[]},{"level":3,"title":"命令","slug":"命令","link":"#命令","children":[]}]}],"git":{"createdTime":1752473683000,"updatedTime":1752473683000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":8.47,"words":2540},"filePathRelative":"posts/VersionControl/git.md","localizedDate":"2025年2月11日","excerpt":"\\n<p>版本控制(Version control)，是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步。</p>\\n<p>通过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号。</p>\\n<p>一种简单的版本控制形式如下：赋给图的初版一个版本等级\\"A\\"。当做了第一次改变后，版本等级改为\\"B\\",以此类推。</p>\\n<p>版本控制能提供项目的设计者，将设计恢复到之前任一状态的选择权。</p>\\n<p>简言之，修改只要提交到版本控制系统，基本上都能找回，版本控制系统就像一台时光机器，可以让你回到任何一个时间点。</p>","autoDesc":true}');export{d as comp,k as data};
