import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as s,e as a,o as l}from"./app-DXvxhU6p.js";const e="/blog/assets/image-BpHqRcsw.png",r="/blog/assets/for%E6%89%A7%E8%A1%8C-BxbRZLmT.jpg",h="/blog/assets/image-3-C72D04PT.png",o="/blog/assets/image-4-CkSpOHGy.png",p={};function d(k,i){return l(),n("div",null,[i[0]||(i[0]=s(`<h1 id="作用域分析" tabindex="-1"><a class="header-anchor" href="#作用域分析"><span><strong>作用域分析</strong></span></a></h1><p>标准使用 <strong>环境记录器(Environment Record)</strong> 来表示作用域。</p><p>每个环境记录器都有一个 <strong>[[OuterEnv]]</strong> 字段指向另一个环境记录器，通过该字段连接起来的所有的环境记录器共同构成一条作用域链。</p><div class="hint-container important"><p class="hint-container-title">作用域链例子</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> &lt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">; </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    setTimeout</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(() </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">        console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    }, </span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">i</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> *</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure></div><p><strong>ECMAscript执行上下文</strong>的词法环境组件指向一个环境记录器，这就是执行上下文的代码查找变量的起点，也就是作用域链的起点。</p><p>调用栈上有几个<strong>ECMAScript代码执行上下文</strong>，运行环境中就有几条<strong>作用域链</strong>。</p><h2 id="环境记录器" tabindex="-1"><a class="header-anchor" href="#环境记录器"><span><strong>环境记录器</strong></span></a></h2><p>环境记录器存放着标识符的绑定，标准中有五种环境记录器：</p><ol><li><strong>全局环境记录器</strong>：绑定全局顶层代码的标识符。</li><li><strong>声明式环境记录器</strong>：常用于绑定块级语句内的标识符。</li><li><strong>函数环境记录器</strong>：绑定函数体内的标识符。</li><li><strong>模块环境记录器</strong>：绑定模块顶层代码的标识符。</li><li><strong>对象环境记录器</strong>：把一个对象中的属性方法抽取出来作为标识符绑定在环境中，这是with语句和全局对象所使用的记录器。</li></ol><h3 id="声明式环境记录" tabindex="-1"><a class="header-anchor" href="#声明式环境记录"><span><strong>声明式环境记录</strong></span></a></h3><p>声明式环境记录绑定其范围内包含的声明所定义的<strong>一组标识符</strong>。<br> 这些标识符可能是变量、常量、let、class、模块、import和/或函数声明</p><h3 id="函数环境记录" tabindex="-1"><a class="header-anchor" href="#函数环境记录"><span><strong>函数环境记录</strong></span></a></h3><p>一种声明式环境记录，表示函数的顶级作用域，并且如果函数不是一个箭头函数，则提供一个 this绑定。</p><div class="hint-container important"><p class="hint-container-title">附加字段</p><table><thead><tr><th>字段</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>[[ThisValue]]</td><td><strong>ES语言值</strong></td><td>函数调用中使用的<strong>this</strong>值</td></tr><tr><td>[[ThisBindingStatus]]</td><td><strong>lexical</strong>, <strong>initialized</strong>或 <strong>uninitialized</strong></td><td>如果值是<strong>lexical</strong>，则这是一个箭头函数，并且没有本地的<strong>this</strong>值。</td></tr><tr><td>[[FunctionObject]]</td><td><strong>函数对象</strong></td><td>创建此环境记录的函数对象</td></tr><tr><td>[[NewTarget]]</td><td><strong>对象、undefined</strong></td><td>如果此环境记录是由[[Construct]]内部方法创建的， 则[[NewTarget]]是[[Construct]]的<strong>newTarget</strong>参数的值。 否则，其值为<strong>undefined</strong>。</td></tr></tbody></table></div><h3 id="模块环境记录" tabindex="-1"><a class="header-anchor" href="#模块环境记录"><span><strong>模块环境记录</strong></span></a></h3><p>一种声明式环境记录，用于表示 ECMAScript 模块 的外部作用域。</p><h3 id="对象环境记录" tabindex="-1"><a class="header-anchor" href="#对象环境记录"><span><strong>对象环境记录</strong></span></a></h3><p>对象环境记录绑定<strong>一组字符串标识符名称</strong>，这些名称直接对应于其绑定<strong>对象的属性名称</strong>。</p><div class="hint-container important"><p class="hint-container-title">附加字段</p><table><thead><tr><th>字段</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>[[BindingObject]]</td><td>对象</td><td>环境记录绑定的对象</td></tr><tr><td>[[IsWithEnvironment]]</td><td>boolean</td><td>此环境记录是否为<strong>with</strong>语句创建</td></tr></tbody></table></div><h3 id="全局环境记录器" tabindex="-1"><a class="header-anchor" href="#全局环境记录器"><span><strong>全局环境记录器</strong></span></a></h3><p>全局环境记录用于表示所有在同一个realm中处理的<strong>ECMAScript script</strong>共享的最外层作用域。</p><div class="hint-container important"><p class="hint-container-title">附加字段</p><table><thead><tr><th>字段</th><th>值</th><th>说明</th></tr></thead><tbody><tr><td>[[ObjectRecord]]</td><td>对象环境记录</td><td>全局对象，包含内置绑定、全局代码中的函数声明、变量声明绑定，针对相关的Realm</td></tr><tr><td>[[GlobalThisValue]]</td><td>对象</td><td>全局作用域中this返回的值。宿主可以提供任何ECMAScript对象值。</td></tr><tr><td>[[DeclarativeRecord]]</td><td>声明式环境记录器</td><td>包含所有在相关领域代码中的全局代码声明的绑定，除了[[ObjectRecord]]中的绑定</td></tr><tr><td>[[VarNames]]</td><td>字符串列表</td><td>在相关领域代码的全局代码中，函数声明和变量声明的绑定名称。</td></tr></tbody></table></div><h2 id="作用域的分析" tabindex="-1"><a class="header-anchor" href="#作用域的分析"><span>作用域的分析</span></a></h2><p>有的语句的求值过程中，需要创建<strong>环境记录器</strong>(并使他指向旧有的)，然后进行<strong>声明实例化</strong>，之后对每个子语句进行求值。<br> 实例化的过程中，会收集自身区域的标识符并绑定到相应的环境记录器。<br> 如果层层嵌套，很自然的就组成了一个作用域链。</p><p>在标准中可以找到六种<strong>声明实例化操作</strong>，都需要环境记录器。</p><ul><li><a href="https://ecma262.com/2024/#sec-globaldeclarationinstantiation" target="_blank" rel="noopener noreferrer">GlobalDeclarationInstantiation</a>：全局声明实例化。</li><li><a href="https://ecma262.com/2024/#sec-functiondeclarationinstantiation" target="_blank" rel="noopener noreferrer">FunctionDeclarationInstantiation</a>：函数声明实例化。</li><li><a href="https://ecma262.com/2024/#sec-blockdeclarationinstantiation" target="_blank" rel="noopener noreferrer">BlockDeclarationInstantiation</a>：块级声明实例化。</li><li><a href="https://ecma262.com/2024/#sec-runtime-semantics-fordeclarationbindinginstantiation" target="_blank" rel="noopener noreferrer">ForDeclarationBindingInstantiation</a>：for声明实例化。</li><li><a href="">InitializeEnvironment</a>：模块声明实例化。</li><li><a href="">EvalDeclarationInstantiation</a>：eval函数声明实例化。</li></ul><h3 id="块级求值" tabindex="-1"><a class="header-anchor" href="#块级求值"><span><strong>块级求值</strong></span></a></h3><p>简述步骤：</p><ol><li>保存当前指向上下文的词法环境<strong>oldEnv</strong> ，创建新的声明式环境记录器<strong>blockEnv</strong>(blockEnv.[[OuterEnv]]=OldEnv)。</li><li>执行<strong>BlockDeclarationInstantiation</strong>。</li><li>设置当前上下文的词法环境为<strong>blockEnv</strong>。</li><li>对块中语句挨个执行。</li><li>当前上下文的词法环境恢复为<strong>oldEnv</strong>。</li></ol><h4 id="blockdeclarationinstantiation" tabindex="-1"><a class="header-anchor" href="#blockdeclarationinstantiation"><span><strong>BlockDeclarationInstantiation</strong></span></a></h4><p>收集标识符，并完成环境记录器的绑定。</p><ol><li>调用<strong>LexicallyScopedDeclarations</strong>收集词法声明<strong>declarations</strong>。</li><li>对<strong>declarations</strong>中的元素，进行相应的绑定。 <ol><li>let、const做相应的可变、不可变的绑定。</li><li>实例化函数对象，初始化绑定。</li></ol></li></ol><h3 id="for求值" tabindex="-1"><a class="header-anchor" href="#for求值"><span><strong>for求值</strong></span></a></h3><p>for循环在标准中分为，for和for-In、for-of、for-await-of。</p><div class="hint-container important"><p class="hint-container-title">标准中的调用链是这样的：</p><img src="https://www.plantuml.com/plantuml/svg/VP313S8m34NlcIBdN5YXAXHH2G4hMAsB8hLE5KmHDn0Zm10ScO1bE01R41GAL2rS_vFjvnyi62mNcj82If50oTgGl9rsryFnlZyBeUJOc3Ag85_2amcbvD3OcAPP2xn8RvgD4D8FkcosDGXDkcxEA3d1rG2J7ApBAeoeqjPGWSJISpVxveP2vwff7fCp9zRVKXr2FtTxfwQEh7_eY9NiMmJ66TgOqQkqLF_S4m6wZdtF3m00" alt=""></div><p>可以看出分歧为ForInOfLoopEvaluation(应用for-In、for-of、for-await-of)、ForLoopEvaluation(应用for)。</p><h4 id="for求值-1" tabindex="-1"><a class="header-anchor" href="#for求值-1"><span><strong>for求值</strong></span></a></h4><div class="hint-container important"><p class="hint-container-title">ForLoopEvaluation语义应用的其中一个代换式</p><p><em>ForStatement</em> : for ( <em>LexicalDeclaration</em> <em>Expression</em><sub>opt</sub> ; <em>Expression</em><sub>opt</sub> )<br>   <em>Statement</em></p><p>那他很有可能是这样的<br> for(let i;i&lt;10;i++){}</p></div><p>当在for中使用let、const时，有以下简述步骤：</p><ol><li>保存当前上下文的词法环境<strong>oldEnv</strong>，创建新的环境记录器<strong>loopEnv</strong>。</li><li>对标识符进行对应的绑定，设置当前上下文的词法环境为<strong>loopEnv</strong></li><li>调用<strong>ForBodyEvaluation</strong>(，，，<strong>perIterationLets</strong>，)。 <ol><li>调用<strong>CreatePerIterationEnvironment</strong>语义，创建记录器，绑定标识符。</li><li>重复 <ol><li>如果<strong>test</strong>(条件)不为空，对其求值，当false，返回v</li><li>求值for块中的<strong>语句</strong>为result，<strong>LoopContinues</strong>为false(循环终止)，返回result。</li><li>将v值给予result，执行<strong>CreatePerIterationEnvironment</strong>，创建记录器，绑定标识符。</li></ol></li></ol></li><li>恢复词法环境为<strong>oldEnv</strong>。</li></ol><div class="hint-container important"><p class="hint-container-title">重要</p><p>总来来说，为词法声明创建一次环境记录器，接着对for块不断创建环境(复制上一个记录器中的绑定和值，然后递增)记录器，直到条件达成或循环终止条件。</p></div><figure><img src="'+r+'" alt="调用栈" tabindex="0" loading="lazy"><figcaption>调用栈</figcaption></figure>',42)),a(` #### **for-In、for-of、for-await-of**
三种都是同样的依次调用**ForIn/OfHeadEvaluation**、**ForIn/OfBodyEvaluation**。
ForIn/OfHeadEvaluation接受(let、const的标识符，参数表达式，标记enumerate，iterate，或 async-iterate)，
1. 保存当前上下文的词法环境oldenv
   1.如果标识符不为空，创建新环境记录器newenv，怪异的是无论let、const都是可变绑定。
   2.更改当前执行上下文为newenv
2. 对参数表达式求值，恢复执行上下文oldenv（==？？？==）。
3. 如果是标记是enumerate枚举
   1. 参数表达式为undefined、null
      1. 返回break完成记录，字段值都为空
   2. 将值转为一个对象obj，使用EnumerateObjectProperties 返回一个迭代器，获取他的neext方法
   3.  返回迭代器记录
4. 如果是async-iterate，更改迭代器种类
5. 返回GetIterator(参数表达式值，标记种类)
   1. 如果标记是异步，获取对象上的返回asyncIterator迭代器
      2. 如果获取不到，则获取默认迭代器
      3.  创建一个异步迭代器
6. 获取迭代器，从方法里面获取一个迭代器
最终返回枚举迭代器，break完成记录，异步、普通迭代器记录
ForIn/OfBodyEvaluation接受
**ForIn/OfBodyEvaluation**接受一个表达式，语句，迭代器，迭代器标记，表达式的类型标记（声明、变量、参数表达式）
1. 默认是同步标记,保存当前上下文的词法环境oldenv
2. 表达式是否是构造器，如果是。且是assignment
3.  `),i[1]||(i[1]=s(`<h3 id="函数求值" tabindex="-1"><a class="header-anchor" href="#函数求值"><span>函数求值</span></a></h3><p>函数被调用时会触发函数的内部方法[[Call]]方法。简述步骤:</p><ol><li>创建函数的执行上下文以及函数环境记录器，并把执行上下文的词法环境指向该记录器。</li><li>对函数进行声明实例化。</li><li>执行函数体中的语句。<br> 实例化</li><li>对参数标识符进行实例化<br> 2. 普通参数：如果函数调用的时候有赋值，则初始化为这个值，否则为undefined。<br> 3. 表达式参数：如果函数调用的时候有赋值，则初始化为这个值，否则为表达式中的默认值。<br> 此外，为了避免参数表达式的标识符与函数体变量声明的标识符发生“碰撞”，会在函数环境记录器上再创建一个声明式环境记录器，并把变量声明的标识符绑定在这个环境当中，从而实现两种类型标识符的隔离。</li><li>创建arguments对象，以下情况不需要创建： <ol><li>函数是箭头函数。</li><li>参数中有名为arguments的参数。</li><li>函数体内有名为arguments的函数或标识符为arguments的词法声明语句。</li></ol></li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 全局代码</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">fn_example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn_example</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">normal_arg</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">expression_arg</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">  console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">arguments</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fn_let</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> fn_var</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> fn_const</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Fn_class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> fn_fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+h+`" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><p>关于函数的环境记录器的指向问题。</p><ol><li>函数定义处进行声明实例化的时候，会<a href="https://ecma262.com/2024/#sec-ordinaryfunctioncreate" target="_blank" rel="noopener noreferrer">OrdinaryFunctionCreate</a>创建函数对象,并且 F.[[Environment]] 设置为 env。。</li><li>当函数调用时，创建的函数环境记录器的outenv就会使用这个值。</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;global&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> a</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> target</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;fn_a&quot;</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> b</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">   console</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">log</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">target</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// &quot;global&quot;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><figure><img src="`+o+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure><h3 id="闭包" tabindex="-1"><a class="header-anchor" href="#闭包"><span>闭包</span></a></h3>',10))])}const A=t(p,[["render",d],["__file","Scope.html.vue"]]),B=JSON.parse('{"path":"/posts/ECMA/Scope.html","title":"作用域分析","lang":"zh-CN","frontmatter":{"date":"2025-02-06T00:00:00.000Z","order":2,"category":["ECMA标准"],"description":"作用域分析 标准使用 环境记录器(Environment Record) 来表示作用域。 每个环境记录器都有一个 [[OuterEnv]] 字段指向另一个环境记录器，通过该字段连接起来的所有的环境记录器共同构成一条作用域链。 作用域链例子 alt textalt text ECMAscript执行上下文的词法环境组件指向一个环境记录器，这就是执行上下文...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/ECMA/Scope.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"作用域分析"}],["meta",{"property":"og:description","content":"作用域分析 标准使用 环境记录器(Environment Record) 来表示作用域。 每个环境记录器都有一个 [[OuterEnv]] 字段指向另一个环境记录器，通过该字段连接起来的所有的环境记录器共同构成一条作用域链。 作用域链例子 alt textalt text ECMAscript执行上下文的词法环境组件指向一个环境记录器，这就是执行上下文..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2025-02-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"作用域分析\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"环境记录器","slug":"环境记录器","link":"#环境记录器","children":[{"level":3,"title":"声明式环境记录","slug":"声明式环境记录","link":"#声明式环境记录","children":[]},{"level":3,"title":"函数环境记录","slug":"函数环境记录","link":"#函数环境记录","children":[]},{"level":3,"title":"模块环境记录","slug":"模块环境记录","link":"#模块环境记录","children":[]},{"level":3,"title":"对象环境记录","slug":"对象环境记录","link":"#对象环境记录","children":[]},{"level":3,"title":"全局环境记录器","slug":"全局环境记录器","link":"#全局环境记录器","children":[]}]},{"level":2,"title":"作用域的分析","slug":"作用域的分析","link":"#作用域的分析","children":[{"level":3,"title":"块级求值","slug":"块级求值","link":"#块级求值","children":[]},{"level":3,"title":"for求值","slug":"for求值","link":"#for求值","children":[]},{"level":3,"title":"函数求值","slug":"函数求值","link":"#函数求值","children":[]},{"level":3,"title":"闭包","slug":"闭包","link":"#闭包","children":[]}]}],"git":{},"readingTime":{"minutes":7.89,"words":2366},"filePathRelative":"posts/ECMA/Scope.md","localizedDate":"2025年2月6日","excerpt":"\\n<p>标准使用 <strong>环境记录器(Environment Record)</strong> 来表示作用域。</p>\\n<p>每个环境记录器都有一个 <strong>[[OuterEnv]]</strong> 字段指向另一个环境记录器，通过该字段连接起来的所有的环境记录器共同构成一条作用域链。</p>\\n<div class=\\"hint-container important\\">\\n<p class=\\"hint-container-title\\">作用域链例子</p>\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">for</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> (</span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">var</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> i</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> &lt;</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 5</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">; </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\">++</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">    setTimeout</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(() </span><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">=&gt;</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> {</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#E5C07B\\">        console</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">.</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\">log</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">) </span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">    }, </span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\">i</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> *</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1000</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">)</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div><figure><figcaption>alt text</figcaption></figure>\\n</div>","autoDesc":true}');export{A as comp,B as data};
