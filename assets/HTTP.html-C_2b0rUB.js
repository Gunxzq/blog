import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as p,d as a,o as T}from"./app-C9qP9JtV.js";const l={};function i(n,e){return T(),p("div",null,e[0]||(e[0]=[a('<h1 id="http1-0-1-1-2-0" tabindex="-1"><a class="header-anchor" href="#http1-0-1-1-2-0"><span>HTTP1.0/1.1/2.0</span></a></h1><h2 id="http1-0" tabindex="-1"><a class="header-anchor" href="#http1-0"><span>HTTP1.0</span></a></h2><p>HTTP协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本</p><p>HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接<br> 服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求</p><p>简单来讲，每次与服务器交互，都需要新开一个连接</p><p>例如，解析html文件，当发现文件中存在资源文件的时候，这时候又创建单独的链接</p><p>最终导致，一个html文件的访问包含了多次的请求和响应，每次请求都需要创建连接、关系连接</p><p>这种形式明显造成了性能上的缺陷</p><p>如果需要建立长连接，需要设置一个非标准的Connection字段 Connection: keep-alive</p><h2 id="http1-1" tabindex="-1"><a class="header-anchor" href="#http1-1"><span>HTTP1.1</span></a></h2><p>在HTTP1.1中，默认支持长连接（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟</p><p>建立一次连接，多次请求均由这个连接完成</p><p>这样，在加载html文件的时候，文件中多个请求和响应就可以在一个连接中传输</p><p>同时，HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间</p><p>同时，HTTP1.1在HTTP1.0的基础上，增加更多的请求头和响应头来完善的功能，如下：</p><p>引入了更多的缓存控制策略，如If-Unmodified-Since, If-Match, If-None-Match等缓存头来控制缓存策略<br> 引入range，允许值请求资源某个部分<br> 引入host，实现了在一台WEB服务器上可以在同一个IP地址和端口号上使用不同的主机名来创建多个虚拟WEB站点<br> 并且还添加了其他的请求方法：put、delete、options...</p><h2 id="http2-0" tabindex="-1"><a class="header-anchor" href="#http2-0"><span>HTTP2.0</span></a></h2><p>而HTTP2.0在相比之前版本，性能上有很大的提升，如添加了一个特性：</p><ul><li>多路复用</li><li>二进制分帧</li><li>首部压缩</li><li>服务器推送</li></ul><h3 id="多路复用" tabindex="-1"><a class="header-anchor" href="#多路复用"><span>多路复用</span></a></h3><p>HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”</p><h3 id="二进制分帧" tabindex="-1"><a class="header-anchor" href="#二进制分帧"><span>二进制分帧</span></a></h3><p>帧是HTTP2通信中最小单位信息</p><p>HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，解析起来更高效<br> 将请求和响应数据分割为更小的帧，并且它们采用二进制编码<br> HTTP2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流</p><p>每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装，这也是多路复用同时发送数据的实现条件</p><h3 id="首部压缩" tabindex="-1"><a class="header-anchor" href="#首部压缩"><span>首部压缩</span></a></h3><p>HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送</p><p>首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新</p><h3 id="服务器推送" tabindex="-1"><a class="header-anchor" href="#服务器推送"><span>服务器推送</span></a></h3><p>HTTP2引入服务器推送，允许服务端推送资源给客户端</p><p>服务器会顺便把一些客户端需要的资源一起推送到客户端，如在响应一个页面请求中，就可以随同页面的其它资源</p><p>免得客户端再次创建连接发送请求到服务器端获取</p><p>这种方式非常合适加载静态资源</p><h2 id="总结" tabindex="-1"><a class="header-anchor" href="#总结"><span>总结</span></a></h2><p>HTTP1.0：<br> -浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接<br> HTTP1.1：<br> -引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用</p><ul><li>在同一个TCP连接里面，客户端可以同时发送多个请求</li><li>虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着</li><li>新增了一些请求方法</li><li>新增了一些请求头和响应头<br> HTTP2.0：</li><li>采用二进制格式而非文本格式</li><li>完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行</li><li>使用报头压缩，降低开销</li><li>服务器推送</li></ul>',36)]))}const o=t(l,[["render",i],["__file","HTTP.html.vue"]]),s=JSON.parse('{"path":"/posts/HTTP/HTTP.html","title":"HTTP1.0/1.1/2.0","lang":"zh-CN","frontmatter":{"date":"2025-05-08T00:00:00.000Z","order":2,"category":["React"],"tag":["React"],"description":"HTTP1.0/1.1/2.0 HTTP1.0 HTTP协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本 HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接 服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求 简单来讲，每次与服务器交互，都需要新开一个连接 例如，解析htm...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/HTTP/HTTP.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"HTTP1.0/1.1/2.0"}],["meta",{"property":"og:description","content":"HTTP1.0/1.1/2.0 HTTP1.0 HTTP协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本 HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接 服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求 简单来讲，每次与服务器交互，都需要新开一个连接 例如，解析htm..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-16T16:32:48.000Z"}],["meta",{"property":"article:tag","content":"React"}],["meta",{"property":"article:published_time","content":"2025-05-08T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-16T16:32:48.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"HTTP1.0/1.1/2.0\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-05-08T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-16T16:32:48.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"HTTP1.0","slug":"http1-0","link":"#http1-0","children":[]},{"level":2,"title":"HTTP1.1","slug":"http1-1","link":"#http1-1","children":[]},{"level":2,"title":"HTTP2.0","slug":"http2-0","link":"#http2-0","children":[{"level":3,"title":"多路复用","slug":"多路复用","link":"#多路复用","children":[]},{"level":3,"title":"二进制分帧","slug":"二进制分帧","link":"#二进制分帧","children":[]},{"level":3,"title":"首部压缩","slug":"首部压缩","link":"#首部压缩","children":[]},{"level":3,"title":"服务器推送","slug":"服务器推送","link":"#服务器推送","children":[]}]},{"level":2,"title":"总结","slug":"总结","link":"#总结","children":[]}],"git":{"createdTime":1752683568000,"updatedTime":1752683568000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":1,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":4.35,"words":1304},"filePathRelative":"posts/HTTP/HTTP.md","localizedDate":"2025年5月8日","excerpt":"\\n<h2>HTTP1.0</h2>\\n<p>HTTP协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本</p>\\n<p>HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接<br>\\n服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求</p>\\n<p>简单来讲，每次与服务器交互，都需要新开一个连接</p>\\n<p>例如，解析html文件，当发现文件中存在资源文件的时候，这时候又创建单独的链接</p>\\n<p>最终导致，一个html文件的访问包含了多次的请求和响应，每次请求都需要创建连接、关系连接</p>\\n<p>这种形式明显造成了性能上的缺陷</p>","autoDesc":true}');export{o as comp,s as data};
