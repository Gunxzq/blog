import{_ as s}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as t,b as a,o as e}from"./app-Cpaph37u.js";const n={};function l(h,i){return e(),t("div",null,i[0]||(i[0]=[a(`<h1 id="组件通信" tabindex="-1"><a class="header-anchor" href="#组件通信"><span>组件通信</span></a></h1><p>组件通信主要分为以下几类：</p><ol><li>父子组件通信：props、$emit</li><li>兄弟组件通信：父组件中转（a触发事件，父组件通过props传递b），全局状态管理。</li><li>跨级组件通信：provide/inject</li><li>全局组件通信（非关系组件间通信）:全局状态管理、事件总线（vue2）、全局变量<br> vue中有如下的常规通信方案（8）:</li><li>props</li><li>$emit</li><li>ref实例：通过 ref 属性获取子组件实例，调用其方法或访问属性。</li><li>eventBus（vue2）</li><li>attrs与$ listeners：属性继承与事件转发,在vue3中被统一为attrs<br> attrs透传：用于存储​​父组件通过 v-bind 传递给当前组件的所有非 props 属性​​的对象。这些属性未被当前组件声明为 props（或未被 inheritAttrs 配置排除），因此不会被当前组件直接使用，但可以被透传给子组件。会自动绑定根元素。</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// Wrapper 组件</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">export</span><span style="--shiki-light:#E45649;--shiki-dark:#C678DD;"> default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  inheritAttrs</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 禁用自动绑定到根元素</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // ...</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">};</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 此时，$attrs 仍会存储父组件传递的属性，但不会自动绑定到根元素，需手动通过 v-bind=&quot;$attrs&quot; 传递给子组件。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>listeners 是 Vue2 中用于存储​​父组件通过 v-on 绑定到当前组件的所有事件监听器​​的对象。它的键是事件名（如 click、input），值是对应的回调函数。</p><div class="language-html line-numbers-mode" data-highlighter="shiki" data-ext="html" data-title="html" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- 父组件 Parent.vue --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:white;--shiki-dark:#E06C75;">Wrapper</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> @click</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;handleWrapperClick&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> @input</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;handleInputChange&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">&lt;!-- Wrapper 组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  &lt;!-- 透传属性和事件到 Input 组件 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">Input</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> v-bind</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$attrs&quot;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> v-on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;$listeners&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> /&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">template</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="6"><li>provide/inject</li><li>$parent 或$root:通过共同祖辈$parent或者$root搭建通信桥连</li></ol><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// a</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$emit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;foo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)  </span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// b</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">$parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">$on</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;foo&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">this</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">handle</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ol start="8"><li>Vuex<br><strong>特殊</strong>：路由传参</li></ol>`,9)]))}const k=s(n,[["render",l],["__file","Component-communication.html.vue"]]),d=JSON.parse('{"path":"/posts/Vue/Component-communication.html","title":"组件通信","lang":"zh-CN","frontmatter":{"date":"2025-03-10T00:00:00.000Z","category":["JS框架"],"tag":["Vue"],"description":"组件通信 组件通信主要分为以下几类： 父子组件通信：props、$emit 兄弟组件通信：父组件中转（a触发事件，父组件通过props传递b），全局状态管理。 跨级组件通信：provide/inject 全局组件通信（非关系组件间通信）:全局状态管理、事件总线（vue2）、全局变量 vue中有如下的常规通信方案（8）: props $emit ref实...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/Vue/Component-communication.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"组件通信"}],["meta",{"property":"og:description","content":"组件通信 组件通信主要分为以下几类： 父子组件通信：props、$emit 兄弟组件通信：父组件中转（a触发事件，父组件通过props传递b），全局状态管理。 跨级组件通信：provide/inject 全局组件通信（非关系组件间通信）:全局状态管理、事件总线（vue2）、全局变量 vue中有如下的常规通信方案（8）: props $emit ref实..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T06:14:43.000Z"}],["meta",{"property":"article:tag","content":"Vue"}],["meta",{"property":"article:published_time","content":"2025-03-10T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T06:14:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"组件通信\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-03-10T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-14T06:14:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[],"git":{"createdTime":1752055862000,"updatedTime":1752473683000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":2,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":1.51,"words":452},"filePathRelative":"posts/Vue/Component-communication.md","localizedDate":"2025年3月10日","excerpt":"\\n<p>组件通信主要分为以下几类：</p>\\n<ol>\\n<li>父子组件通信：props、$emit</li>\\n<li>兄弟组件通信：父组件中转（a触发事件，父组件通过props传递b），全局状态管理。</li>\\n<li>跨级组件通信：provide/inject</li>\\n<li>全局组件通信（非关系组件间通信）:全局状态管理、事件总线（vue2）、全局变量<br>\\nvue中有如下的常规通信方案（8）:</li>\\n<li>props</li>\\n<li>$emit</li>\\n<li>ref实例：通过 ref 属性获取子组件实例，调用其方法或访问属性。</li>\\n<li>eventBus（vue2）</li>\\n<li>attrs与$ listeners：属性继承与事件转发,在vue3中被统一为attrs<br>\\nattrs透传：用于存储​​父组件通过 v-bind 传递给当前组件的所有非 props 属性​​的对象。这些属性未被当前组件声明为 props（或未被 inheritAttrs 配置排除），因此不会被当前组件直接使用，但可以被透传给子组件。会自动绑定根元素。</li>\\n</ol>","autoDesc":true}');export{k as comp,d as data};
