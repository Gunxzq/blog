import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,b as e,o as t}from"./app-Cpaph37u.js";const l={};function n(r,s){return t(),a("div",null,s[0]||(s[0]=[e(`<h1 id="loader-转换器" tabindex="-1"><a class="header-anchor" href="#loader-转换器"><span>loader(转换器)</span></a></h1><p>由于 <strong>webpack</strong> 只能理解<strong>JavaScript</strong>和<strong>JSON</strong>文件。对于其他文件需要loader将其他的类型的文件转换为<mark>有效模块</mark>，以供应用程序使用，以及被添加到依赖图中。</p><ul><li>允许在 <strong>JS</strong> 模块中 <strong>import CSS</strong> 文件！</li><li>将文件从不同的语言（如 <strong>TypeScript</strong> ）转换为 <strong>JavaScript</strong></li><li>可以将内联图像转换为 <strong>data URL</strong>。</li></ul><h2 id="特点" tabindex="-1"><a class="header-anchor" href="#特点"><span>特点</span></a></h2><ul><li>loader 支持 <strong>链式调用</strong> 。 <ul><li>链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照从右到左的顺序执行。</li><li>链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。</li><li>最后，链中的最后一个 loader，返回 <strong>webpack</strong> 所期望的 JavaScript。</li></ul></li><li>loader 可以是 <strong>同步</strong> 的，也可以是 <strong>异步</strong> 的。</li><li>loader 运行在 Node.js 中，并且能够执行任何操作。</li><li>loader 可以通过 <strong>options</strong> 对象配置（仍然支持使用 <strong>query</strong> 参数来设置选项，但是这种方式已被废弃）。</li><li>除了常见的通过 package.json 的 main 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 loader 字段直接引用一个模块。</li><li>插件(<strong>plugin</strong>)可以为 loader 带来更多特性。</li><li>loader 能够产生额外的任意文件。<br> 可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：<strong>压缩、打包、语言转译（或编译）</strong> 和 <strong>更多其他特性</strong>。</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>webpack 的其中一个强大的特性就是能通过 import 导入任何类型的模块（例如 <strong>.css</strong> 文件），其他打包程序或任务执行器的可能并不支持。</p></div><h2 id="使用loader" tabindex="-1"><a class="header-anchor" href="#使用loader"><span>使用loader</span></a></h2><p>有两种使用 loader 的方式：</p><ul><li>配置方式（推荐）：在 <strong>webpack.config.js</strong> 文件中指定 <strong>loader</strong> 。</li><li>内联方式：在每个 <strong>import</strong> 语句中显式指定 <strong>loader</strong> 。</li></ul><div class="hint-container important"><p class="hint-container-title">重要</p><p>在 <strong>webpack</strong> v4 版本可以通过 CLI 使用 loader，但是在 <strong>webpack</strong> v5 中被弃用。</p></div><h3 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span>配置方式</span></a></h3><p><strong>module.rules</strong> 允许你在 <strong>webpack</strong> 配置中对一个rules指定多个 loader。<br> loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。<br> 在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">exports</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  module</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">    rules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        test</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;"> /</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\.</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">css</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">$</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">/</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">        use</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> [</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;style-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;css-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">                options</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">modules</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,},},</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            { </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">loader</span><span style="--shiki-light:#0184BC;--shiki-dark:#ABB2BF;">:</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &#39;sass-loader&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            ],</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">      },</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    ],},};</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="hint-container important"><p class="hint-container-title">重要</p><p>警告：请记住，使用正则表达式匹配文件时，你不要为它添加引号。也就是说，/.txt$/ 与 &#39;/.txt$/&#39; 或 &quot;/.txt$/&quot; 不一样。</p><p>前者指示 <strong>webpack</strong> 匹配任何以 .txt 结尾的文件，后者指示 <strong>webpack</strong> 匹配具有绝对路径 &#39;.txt&#39; 的单个文件; 这可能不符合你的意图。</p></div><h3 id="内联方式" tabindex="-1"><a class="header-anchor" href="#内联方式"><span>内联方式</span></a></h3><p>可以在 import 语句或任何 与 &quot;import&quot; 方法同等的引用方式 中指定 loader。使用 ! （后缀）将资源中的 loader 分开。每个部分都会相对于当前目录解析。</p><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import Styles from &#39;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">css-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?modules!</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">./styles</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.css&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>通过为内联 import 语句添加前缀，可以覆盖 配置 中的所有 loader, preLoader 和 postLoader：</p><ul><li>使用 ! 前缀，将禁用所有已配置的 normal loader(普通 loader)</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import Styles from &#39;!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">css-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?modules!</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">./styles</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.css&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用 !! 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import Styles from &#39;!!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">css-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?modules!</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">./styles</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.css&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>使用 -! 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders</li></ul><div class="language-css line-numbers-mode" data-highlighter="shiki" data-ext="css" data-title="css" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import Styles from &#39;-!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">style-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">css-loader</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?modules!</span><span style="--shiki-light:white;--shiki-dark:#FFFFFF;">./styles</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">.css&#39;;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>选项可以传递查询参数，例如 <strong>?key=value&amp;foo=bar</strong> ，或者一个 <strong>JSON</strong> 对象，例如 <strong>?{&quot;key&quot;:&quot;value&quot;,&quot;foo&quot;:&quot;bar&quot;}</strong> 。</p><div class="hint-container important"><p class="hint-container-title">重要</p><p>尽可能使用 module.rules，因为这样可以减少源码中样板文件的代码量，并且可以在出错时，更快地调试和定位 loader 中的问题。</p></div>`,26)]))}const o=i(l,[["render",n],["__file","loader.html.vue"]]),d=JSON.parse('{"path":"/posts/webpack/loader.html","title":"loader(转换器)","lang":"zh-CN","frontmatter":{"date":"2024-08-15T00:00:00.000Z","category":["构建工具"],"tag":["webpack"],"description":"loader(转换器) 由于 webpack 只能理解JavaScript和JSON文件。对于其他文件需要loader将其他的类型的文件转换为有效模块，以供应用程序使用，以及被添加到依赖图中。 允许在 JS 模块中 import CSS 文件！ 将文件从不同的语言（如 TypeScript ）转换为 JavaScript 可以将内联图像转换为 data...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/webpack/loader.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"loader(转换器)"}],["meta",{"property":"og:description","content":"loader(转换器) 由于 webpack 只能理解JavaScript和JSON文件。对于其他文件需要loader将其他的类型的文件转换为有效模块，以供应用程序使用，以及被添加到依赖图中。 允许在 JS 模块中 import CSS 文件！ 将文件从不同的语言（如 TypeScript ）转换为 JavaScript 可以将内联图像转换为 data..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-07-14T06:14:43.000Z"}],["meta",{"property":"article:tag","content":"webpack"}],["meta",{"property":"article:published_time","content":"2024-08-15T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-07-14T06:14:43.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"loader(转换器)\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2024-08-15T00:00:00.000Z\\",\\"dateModified\\":\\"2025-07-14T06:14:43.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"特点","slug":"特点","link":"#特点","children":[]},{"level":2,"title":"使用loader","slug":"使用loader","link":"#使用loader","children":[{"level":3,"title":"配置方式","slug":"配置方式","link":"#配置方式","children":[]},{"level":3,"title":"内联方式","slug":"内联方式","link":"#内联方式","children":[]}]}],"git":{"createdTime":1752055862000,"updatedTime":1752473683000,"contributors":[{"name":"Gunxzq","username":"Gunxzq","email":"3219988985@qq.com","commits":2,"url":"https://github.com/Gunxzq"}]},"readingTime":{"minutes":3.16,"words":949},"filePathRelative":"posts/webpack/loader.md","localizedDate":"2024年8月15日","excerpt":"\\n<p>由于 <strong>webpack</strong> 只能理解<strong>JavaScript</strong>和<strong>JSON</strong>文件。对于其他文件需要loader将其他的类型的文件转换为<mark>有效模块</mark>，以供应用程序使用，以及被添加到依赖图中。</p>\\n<ul>\\n<li>允许在 <strong>JS</strong> 模块中 <strong>import CSS</strong> 文件！</li>\\n<li>将文件从不同的语言（如 <strong>TypeScript</strong> ）转换为 <strong>JavaScript</strong></li>\\n<li>可以将内联图像转换为 <strong>data URL</strong>。</li>\\n</ul>","autoDesc":true}');export{o as comp,d as data};
