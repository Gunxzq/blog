import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as a,a as e,d as n,e as t,o as l}from"./app-Cy-YzZJf.js";const h={};function r(d,s){return l(),a("div",null,[s[0]||(s[0]=e("p",null,"数据渲染优化，针对大量数据，通过分页、虚拟列表、虚拟表格，canvas优化性能",-1)),n(" more "),s[1]||(s[1]=t(`<h1 id="数据渲染优化" tabindex="-1"><a class="header-anchor" href="#数据渲染优化"><span><strong>数据渲染优化</strong></span></a></h1><h2 id="组件、模块按需加载" tabindex="-1"><a class="header-anchor" href="#组件、模块按需加载"><span>组件、模块按需加载</span></a></h2><p>在应用启动时只加载必要的资源，而将其他资源延迟加载，直到它们被实际需要。</p><ol><li><strong>减少初始加载时间</strong>：通过按需加载，只需要加载用户当前需要的资源，减少了初始加载时间。</li><li><strong>降低服务器负载</strong>：按需加载可以减少服务器的请求次数和数据传输量，降低服务器负载。</li><li><strong>提升用户体验</strong>：用户在需要时才加载相关资源，减少了等待时间，提高了用户体验。</li></ol><h3 id="动态导入" tabindex="-1"><a class="header-anchor" href="#动态导入"><span>动态导入</span></a></h3><p>动态导入是ES6提供的新特性，允许在运行时动态的导入模块。使用**import()**函数。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 当按钮点击时，才会动态导入module模块</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">button</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addEventListener</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;click&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">async</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> () </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> module</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> await</span><span style="--shiki-light:#0184BC;--shiki-dark:#61AFEF;"> import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./module.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">  module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">});</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="条件加载" tabindex="-1"><a class="header-anchor" href="#条件加载"><span>条件加载</span></a></h3><p>条件加载是一种根据特定条件加载资源的方式。例如，你可以根据用户的设备类型、网络状况或其他条件来决定是否加载某个模块。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (</span><span style="--shiki-light:#383A42;--shiki-dark:#E5C07B;">navigator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">connection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">saveData</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 如果用户开启了数据节省模式，则不加载某些资源</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">else</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#61AFEF;">  import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;./heavy-module.js&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">).</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">then</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">module</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> =&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    module</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">default</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  });</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="代码分割" tabindex="-1"><a class="header-anchor" href="#代码分割"><span>代码分割</span></a></h3><p>代码分割是一种将代码拆分为多个小块（chunk）的方法，以便按需加载。Webpack等构建工具提供了代码分割的支持。</p><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h2 id="延迟加载、懒加载" tabindex="-1"><a class="header-anchor" href="#延迟加载、懒加载"><span>延迟加载、懒加载</span></a></h2><p>延迟加载非关键资源，仅在用户需要时菜进行加载。减少不必要的网络流量和服务器负载，从而优化用户体验。</p><h2 id="http缓存" tabindex="-1"><a class="header-anchor" href="#http缓存"><span><strong>HTTP缓存</strong></span></a></h2><p>通过缓存资源，减少对服务器的重复请求。根据HTTP<strong>响应头</strong>内容的不同分两种：</p><ol><li><strong>强缓存</strong>：当缓存过期时，强制向服务器请求资源。</li><li><strong>协商缓存</strong>：当缓存过期时，协商服务器是否更新资源。</li></ol><h3 id="强缓存" tabindex="-1"><a class="header-anchor" href="#强缓存"><span>强缓存</span></a></h3><p>当web应用获取资源时，先从本地获取，如果有就直接用，否则，重新发起请求。控制强缓存的标头分别是<strong>Expires</strong>和<strong>Cache-Control</strong>，<strong>Cache-Control</strong>的优先级高于<strong>Expires</strong>。</p><h4 id="expires标头" tabindex="-1"><a class="header-anchor" href="#expires标头"><span>Expires标头</span></a></h4><p>在<strong>HTTP/1.0</strong>中，有效期是通过<strong>Expires</strong>来指定的。<br><strong>Expires</strong>标头使用明确的时间，而不是经过的时间来指定<strong>缓存</strong>的生命周期。</p><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Expires: Wed, 21 Oct 2015 07:28:00 GMT</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>由于<strong>HTTP/1.1</strong>已被广泛使用，无需特地提供 Expires。</p><h4 id="cahe-control标头" tabindex="-1"><a class="header-anchor" href="#cahe-control标头"><span>Cahe-Control标头</span></a></h4><p>此字段拥有强大的缓存控制能力。常见的字段有：</p><ol><li><strong>max-age</strong>：设置缓存的最大有效期，单位s。资源会缓存到本地。</li><li><strong>no-cache</strong>：不强制缓存，每次都会协商缓存，确定资源是否有变更。资源会缓存到本地。</li><li><strong>no-store</strong>：不进行强缓存、协商缓存，直接拉取最新的资源。资源不会缓存到本地。</li><li><strong>private</strong>：私有缓存，针对特定客户端的缓存，例如个性化内容。</li><li><strong>public</strong>：CDN、客户端、代理服务器都可以缓存。</li></ol><div class="language- line-numbers-mode" data-highlighter="shiki" data-ext="" data-title="" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>Cache-Control: max-age=604800</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h3 id="协商缓存" tabindex="-1"><a class="header-anchor" href="#协商缓存"><span>协商缓存</span></a></h3><p>又称为对比缓存、弱缓存。当资源到期时，会协商服务器资源是否修改，若无修改过则使用本地资源，并更新资源的有效期。<br> 控制协商缓存的标头分别是<strong>Last-Modified/If-Modified-Since</strong>和<strong>Etag/If-None-Match</strong>。</p><h4 id="last-modified-if-modified-since-上一次的修改时间" tabindex="-1"><a class="header-anchor" href="#last-modified-if-modified-since-上一次的修改时间"><span><strong>Last-Modified/If-Modified-Since</strong>：上一次的修改时间</span></a></h4><p>当缓存过期时，<strong>Last-Modified</strong>值放入<strong>If-Modified-Since</strong>标头发送到服务器。服务器会核对资源的修改时间是否一致，资源未修改返回<strong>304 Not Modified</strong>。<br> 收到该响应后，客户端将过期缓存恢复为有效的。替代方案是<strong>Etag/If-None-Match</strong>。</p><h4 id="etag-if-none-match-文件指纹" tabindex="-1"><a class="header-anchor" href="#etag-if-none-match-文件指纹"><span><strong>Etag/If-None-Match</strong>：文件指纹</span></a></h4><p><strong>Etag</strong>标头的值是服务器生成的任意值。当文件被修改后，<strong>Etag</strong>会得到更新。<br> 当缓存过期时，<strong>Etag</strong>的值放入<strong>If-None-Match</strong>标头发送到服务器。服务器会核对资源的<strong>Etag</strong>与<strong>If-None-Match</strong>是否一致，资源未修改返回<strong>304 Not Modified</strong>。</p><h2 id="浏览器缓存" tabindex="-1"><a class="header-anchor" href="#浏览器缓存"><span><strong>浏览器缓存</strong></span></a></h2><p>当浏览器请求一个网站的时候，会加载各种各样的资源，比如：HTML文档、图片、CSS和JS等文件。<br> 对于一些不经常变的内容，浏览器会将他们保存在本地的文件中，下次访问相同网站的时候，直接加载这些资源，加速访问。<br> 优点：</p><ol><li>减少页面加载时间；</li><li>减少服务器负载；</li></ol><h3 id="dns缓存" tabindex="-1"><a class="header-anchor" href="#dns缓存"><span>DNS缓存</span></a></h3><p>解析IP地址的方式，就是查询DNS映射表。<br> DNS查询过程大约消耗20毫秒，在DNS查询过程中，浏览器什么都不会做，保持空白。如果DNS查询很多，网页性能会受到很大影响，因此需要用到DNS缓存。<br> 不同浏览器的缓存机制不同： IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟。</p><ol><li>缓存时间长：减少DNS的重复查找，节省时间。</li><li>缓存时间短：及时检测服务器的IP变化，保证访问的正确性。</li></ol><h3 id="cdn缓存" tabindex="-1"><a class="header-anchor" href="#cdn缓存"><span>CDN缓存</span></a></h3>`,41))])}const k=i(h,[["render",r],["__file","LoadingOpt copy.html.vue"]]),g=JSON.parse('{"path":"/posts/LoadingOpt%20copy.html","title":"数据渲染优化","lang":"zh-CN","frontmatter":{"date":"2025-02-01T00:00:00.000Z","category":["性能优化"],"tag":["按需加载","延迟加载","缓存"],"description":"数据渲染优化，针对大量数据，通过分页、虚拟列表、虚拟表格，canvas优化性能","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/LoadingOpt%20copy.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"数据渲染优化"}],["meta",{"property":"og:description","content":"数据渲染优化，针对大量数据，通过分页、虚拟列表、虚拟表格，canvas优化性能"}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:tag","content":"按需加载"}],["meta",{"property":"article:tag","content":"延迟加载"}],["meta",{"property":"article:tag","content":"缓存"}],["meta",{"property":"article:published_time","content":"2025-02-01T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"数据渲染优化\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-01T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"组件、模块按需加载","slug":"组件、模块按需加载","link":"#组件、模块按需加载","children":[{"level":3,"title":"动态导入","slug":"动态导入","link":"#动态导入","children":[]},{"level":3,"title":"条件加载","slug":"条件加载","link":"#条件加载","children":[]},{"level":3,"title":"代码分割","slug":"代码分割","link":"#代码分割","children":[]}]},{"level":2,"title":"延迟加载、懒加载","slug":"延迟加载、懒加载","link":"#延迟加载、懒加载","children":[]},{"level":2,"title":"HTTP缓存","slug":"http缓存","link":"#http缓存","children":[{"level":3,"title":"强缓存","slug":"强缓存","link":"#强缓存","children":[]},{"level":3,"title":"协商缓存","slug":"协商缓存","link":"#协商缓存","children":[]}]},{"level":2,"title":"浏览器缓存","slug":"浏览器缓存","link":"#浏览器缓存","children":[{"level":3,"title":"DNS缓存","slug":"dns缓存","link":"#dns缓存","children":[]},{"level":3,"title":"CDN缓存","slug":"cdn缓存","link":"#cdn缓存","children":[]}]}],"git":{},"readingTime":{"minutes":4.52,"words":1356},"filePathRelative":"posts/LoadingOpt copy.md","localizedDate":"2025年2月1日","excerpt":"<p>数据渲染优化，针对大量数据，通过分页、虚拟列表、虚拟表格，canvas优化性能</p>\\n","autoDesc":true}');export{k as comp,g as data};
