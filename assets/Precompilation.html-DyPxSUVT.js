import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{c as n,b as l,o as t}from"./app-BWDYifJJ.js";const e="/blog/assets/image-1-BHP5DMQl.png",s="/blog/assets/image-2-CE18AtNS.png",h={};function r(p,i){return t(),n("div",null,i[0]||(i[0]=[l(`<h1 id="程序执行过程" tabindex="-1"><a class="header-anchor" href="#程序执行过程"><span><strong>程序执行过程</strong></span></a></h1><div class="language-js line-numbers-mode" data-highlighter="shiki" data-ext="js" data-title="js" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 全局代码</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">const</span><span style="--shiki-light:#986801;--shiki-dark:#E5C07B;"> glo_const</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> </span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> glo_let</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 2</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> glo_var</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 3</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">class</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Glo_class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> glo_fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ③</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 位于函数体内声明语句</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> inner_fn_let</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> inner_fn_var</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 5</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">){ </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ④</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 位于块内的声明语句</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  let</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> block_let</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 6</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ⑤</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  var</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> block_var</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 7</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // ⑥</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  function</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> block_fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(){} </span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// ⑦</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="初始化realm环境-initializehostdefinedrealm" tabindex="-1"><a class="header-anchor" href="#初始化realm环境-initializehostdefinedrealm"><span><strong>初始化Realm环境：InitializeHostDefinedRealm</strong></span></a></h2><p><a href="https://ecma262.com/2024/#sec-initializehostdefinedrealm" target="_blank" rel="noopener noreferrer">标准</a></p><p>创建全局执行上下文、realm记录器。realm记录器包含全局对象、全局环境记录器、固有对象。</p><div class="hint-container important"><p class="hint-container-title">图示</p><figure><img src="`+e+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure></div><h2 id="解析脚本" tabindex="-1"><a class="header-anchor" href="#解析脚本"><span><strong>解析脚本</strong></span></a></h2><p><a href="https://ecma262.com/2024/#sec-parse-script" target="_blank" rel="noopener noreferrer">标准</a></p><p>每一段脚本执行前，需要先解析脚本，将其转换为解析树。返回一个脚本记录器。</p><h2 id="脚本求值" tabindex="-1"><a class="header-anchor" href="#脚本求值"><span><strong>脚本求值</strong></span></a></h2><p><a href="https://ecma262.com/2024/#sec-runtime-semantics-scriptevaluation" target="_blank" rel="noopener noreferrer">标准</a></p><ol><li>创建<strong>ECMAScript代码执行上下文(scriptContext)</strong> ，设置<strong>scriptContext</strong>的词法环境、变量环境指向全局环境记录器等。</li><li>接着推送到执行上下文栈，使其成为运行中的执行上下文。</li><li>然后进行<strong>全局声明实例化</strong>，最后对脚本语句求值。</li></ol><div class="hint-container important"><p class="hint-container-title">全局声明实例化以后的调用栈。</p><figure><img src="'+s+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure></div><h3 id="全局声明实例化" tabindex="-1"><a class="header-anchor" href="#全局声明实例化"><span><strong>全局声明实例化</strong></span></a></h3><p>声明实例化，不等于初始化，只有执行到对应的位置，才能知道确切的值。</p><p><a href="https://ecma262.com/2024/#sec-globaldeclarationinstantiation" target="_blank" rel="noopener noreferrer">GlobalDeclarationInstantiation</a></p><ol><li>调用<strong>LexicallyDeclaredNames</strong> 、<strong>VarDeclaredNames</strong>语义收集标识符。 <ol><li>从结果来看<strong>LexicallyDeclaredNames</strong>只会收集let、const声明语句(只会处理Declaration)的标识符，会忽略所有的函数声明。</li><li><strong>VarDeclaredNames</strong>对语句递归的调用，收集可见var声明、函数声明的标识符。不会处理<strong>函数和类中的</strong>。</li><li>如果词法声明和变量声明的连接有重复项，则抛出 <strong>SyntaxError</strong> 异常。</li></ol></li><li>调用<strong>VarScopedDeclarations</strong>语义收集变量声明语句<strong>varDeclarations</strong>，调用<strong>LexicallyScopedDeclarations</strong> 语义收集词法声明语句 <strong>lexDeclarations</strong>。</li><li>最后得到三个列表：<strong>lexDeclarations、varDeclarations、functionsToInitialize</strong>。根据标识符的类型进行绑定 <ol><li>对于<strong>lexDeclarations</strong>中的标识符，绑定到全局环境记录器的[[DeclarativeRecord]]字段上。</li><li>对于<strong>functionsToInitialize</strong>，实例化相应的函数对象，并绑定到全局环境记录器的[[ObjectRecord]]字段上((实际上是成为全局对象的属性))。</li><li>对于<strong>varDeclarations</strong>中的标识符，绑定到全局环境记录器的[[ObjectRecord]]字段上((实际上是成为全局对象的属性))。</li></ol></li></ol><div class="hint-container important"><p class="hint-container-title">关于严格模式</p><p>非严格模式函数标识符会被实例化并初始化为undefined，严格模式下函数不会被实例化。</p></div><div class="hint-container important"><p class="hint-container-title">全局声明实例化以后的调用栈。</p><figure><img src="'+s+'" alt="alt text" tabindex="0" loading="lazy"><figcaption>alt text</figcaption></figure></div>',19)]))}const c=a(h,[["render",r],["__file","Precompilation.html.vue"]]),o=JSON.parse('{"path":"/posts/ECMA/Precompilation.html","title":"程序执行过程","lang":"zh-CN","frontmatter":{"date":"2025-02-06T00:00:00.000Z","order":2,"category":["ECMA标准"],"description":"程序执行过程 初始化Realm环境：InitializeHostDefinedRealm 标准 创建全局执行上下文、realm记录器。realm记录器包含全局对象、全局环境记录器、固有对象。 图示 alt textalt text 解析脚本 标准 每一段脚本执行前，需要先解析脚本，将其转换为解析树。返回一个脚本记录器。 脚本求值 标准 创建ECMASc...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/ECMA/Precompilation.html"}],["meta",{"property":"og:site_name","content":"个人博客"}],["meta",{"property":"og:title","content":"程序执行过程"}],["meta",{"property":"og:description","content":"程序执行过程 初始化Realm环境：InitializeHostDefinedRealm 标准 创建全局执行上下文、realm记录器。realm记录器包含全局对象、全局环境记录器、固有对象。 图示 alt textalt text 解析脚本 标准 每一段脚本执行前，需要先解析脚本，将其转换为解析树。返回一个脚本记录器。 脚本求值 标准 创建ECMASc..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"article:published_time","content":"2025-02-06T00:00:00.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"程序执行过程\\",\\"image\\":[\\"\\"],\\"datePublished\\":\\"2025-02-06T00:00:00.000Z\\",\\"dateModified\\":null,\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"xzq\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"初始化Realm环境：InitializeHostDefinedRealm","slug":"初始化realm环境-initializehostdefinedrealm","link":"#初始化realm环境-initializehostdefinedrealm","children":[]},{"level":2,"title":"解析脚本","slug":"解析脚本","link":"#解析脚本","children":[]},{"level":2,"title":"脚本求值","slug":"脚本求值","link":"#脚本求值","children":[{"level":3,"title":"全局声明实例化","slug":"全局声明实例化","link":"#全局声明实例化","children":[]}]}],"git":{},"readingTime":{"minutes":2.17,"words":652},"filePathRelative":"posts/ECMA/Precompilation.md","localizedDate":"2025年2月6日","excerpt":"\\n<div class=\\"language-js line-numbers-mode\\" data-highlighter=\\"shiki\\" data-ext=\\"js\\" data-title=\\"js\\" style=\\"--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34\\"><pre class=\\"shiki shiki-themes one-light one-dark-pro vp-code\\"><code><span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// 全局代码</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">const</span><span style=\\"--shiki-light:#986801;--shiki-dark:#E5C07B\\"> glo_const</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 1</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\"> </span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> glo_let</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 2</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">var</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> glo_var</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 3</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">class</span><span style=\\"--shiki-light:#C18401;--shiki-dark:#E5C07B\\"> Glo_class</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">{}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">function</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> glo_fn</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(){ </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// ③</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  // 位于函数体内声明语句</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> inner_fn_let</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 4</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  var</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> inner_fn_var</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 5</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span>\\n<span class=\\"line\\"></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">if</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\">true</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">){ </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// ④</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">  // 位于块内的声明语句</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  let</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> block_let</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 6</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // ⑤</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  var</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#E06C75\\"> block_var</span><span style=\\"--shiki-light:#0184BC;--shiki-dark:#56B6C2\\"> =</span><span style=\\"--shiki-light:#986801;--shiki-dark:#D19A66\\"> 7</span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\"> // ⑥</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#A626A4;--shiki-dark:#C678DD\\">  function</span><span style=\\"--shiki-light:#4078F2;--shiki-dark:#61AFEF\\"> block_fn</span><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">(){} </span><span style=\\"--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic\\">// ⑦</span></span>\\n<span class=\\"line\\"><span style=\\"--shiki-light:#383A42;--shiki-dark:#ABB2BF\\">}</span></span></code></pre>\\n<div class=\\"line-numbers\\" aria-hidden=\\"true\\" style=\\"counter-reset:line-number 0\\"><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div><div class=\\"line-number\\"></div></div></div>","autoDesc":true}');export{c as comp,o as data};
