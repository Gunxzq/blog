[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:$}=Object,{fromEntries:st}=Object,nt="ENTRIES",D="KEYS",W="VALUES",_="";class F{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(typeof t!="string")return n;const o=t.length+1,r=o+s,i=new Uint8Array(r*o).fill(s+1);for(let c=0;c<o;++c)i[c]=c;for(let c=1;c<r;++c)i[c*o]=c;return q(e,t,s,n,i,1,o,""),n},q=(e,t,s,n,o,r,i,c)=>{const h=r*i;t:for(const u of e.keys())if(u===_){const d=o[h-1];d<=s&&n.set(c,[e.get(u),d])}else{let d=r;for(let a=0;a<u.length;++a,++d){const m=u[a],g=i*d,y=g-i;let l=o[g];const f=Math.max(0,d-s-1),w=Math.min(i-1,d+s);for(let p=f;p<w;++p){const C=m!==t[p],S=o[y+p]+ +C,I=o[y+p+1]+1,x=o[g+p]+1,k=o[g+p+1]=Math.min(S,I,x);k<l&&(l=k)}if(l>s)continue t}q(e.get(u),t,s,n,o,d,i,c+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=M(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const i of o.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),o.get(i)),new z(c,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,rt(this._tree,t)}entries(){return new F(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=v(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return v(this._tree,t)?.has(_)??!1}keys(){return new F(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new F(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const M=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),M(e.get(n),t.slice(n.length),s);return s.push([e,t]),M(void 0,"",s)},v=(e,t)=>{if(t.length===0||!e)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return v(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const i=Math.min(s-n,r.length);let c=1;for(;c<i&&t[n+c]===r[c];)++c;const h=e.get(r);if(c===r.length)e=h;else{const u=new Map;u.set(r.slice(c),h),e.set(t.slice(n,n+c),u),e.delete(r),e=u}n+=c;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},rt=(e,t)=>{const[s,n]=M(e,t);if(s!==void 0){if(s.delete(_),s.size===0)A(n);else if(s.size===1){const[o,r]=s.entries().next().value;R(n,o,r)}}},A=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)A(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&R(e.slice(0,-1),n,o)}},R=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ut="and_not",dt=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,ht=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,H={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:i,match:c}=t.get(n);B(o.terms,i),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,c)})}return s},[ut]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},lt=(e,t,s,n,o,r)=>{const{k:i,b:c,d:h}=r;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-c+c*n/o)))},ft=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},at=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,ht),r=o.get(t),i=r?.get(s);!r||typeof i>"u"?J(e,s,t,n):i<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,i-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},Y={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},U=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const i=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Q=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase();if(!(s in H))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(H[s])},T=(e,t,s,n,o,r,i,c,h,u=new Map)=>{if(r==null)return u;for(const d of Object.keys(i)){const a=i[d],m=e._fieldIds[d],g=r.get(m);if(g==null)continue;let y=g.size;const l=e._avgFieldLength[m];for(const f of g.keys()){if(!e._documentIds.has(f)){at(e,m,f,s),y-=1;continue}const w=c?c(e._documentIds.get(f),s,e._storedFields.get(f)):1;if(!w)continue;const p=g.get(f),C=e._fieldLength.get(f)[m],S=lt(p,y,e._documentCount,C,l,h),I=n*o*a*w*S,x=u.get(f);if(x){x.score+=I,dt(x.terms,t);const k=G(x.match,s);k?k.push(d):x.match[s]=[d]}else u.set(f,{score:I,terms:[t],match:{[s]:[d]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:h}=n,{fuzzy:u,prefix:d}={...Y.weights,...i},a=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,a,o,r,h);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(c,Math.round(t.term.length*l)):l;f&&(y=e._index.fuzzyGet(t.term,f))}if(g)for(const[l,f]of g){const w=l.length-t.term.length;if(!w)continue;y?.delete(l);const p=d*l.length/(l.length+.3*w);T(e,t.term,l,p,t.termBoost,f,o,r,h,m)}if(y)for(const l of y.keys()){const[f,w]=y.get(l);if(!w)continue;const p=u*l.length/(l.length+w);T(e,t.term,l,p,t.termBoost,f,o,r,h,m)}return m},X=(e,t,s={})=>{if(t===U)return wt(e,s);if(typeof t!="string"){const d={...s,...t,queries:void 0},a=t.queries.map(m=>X(e,m,d));return Q(a,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,i={tokenize:n,processTerm:o,...r,...s},{tokenize:c,processTerm:h}=i,u=c(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>xt(e,d,i));return Q(u,i.combineWith)},Z=(e,t,s={})=>{const{searchOptions:n}=e._options,o={...n,...s},r=X(e,t,s),i=[];for(const[c,{score:h,terms:u,match:d}]of r){const a=u.length||1,m={id:e._documentIds.get(c),score:h*a,terms:Object.keys(d),queryTerms:u,match:d};Object.assign(m,e._storedFields.get(c)),(o.filter==null||o.filter(m))&&i.push(m)}return t===U&&o.boostDocument==null||i.sort(P),i},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:i}of Z(e,t,s)){const c=i.join(" "),h=n.get(c);h!=null?(h.score+=r,h.count+=1):n.set(c,{score:r,terms:i,count:1})}const o=[];for(const[r,{score:i,terms:c,count:h}]of n)o.push({suggestion:r,terms:c,score:i/h});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...Y,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,i]of n)o[r]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const kt=e=>new bt(e),It=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=kt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=s,c._avgFieldLength=n,c._dirtCount=o??0,c._index=new z,c},Mt=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,i=It(e,t);i._documentIds=O(n),i._fieldLength=O(o),i._storedFields=O(r);for(const[c,h]of i._documentIds)i._idToShortId.set(h,c);for(const[c,h]of s){const u=new Map;for(const d of Object.keys(h))u.set(parseInt(d,10),O(h[d]));i._index.set(c,u)}return i},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,i=0;const c=(u,d=!1)=>{let a;i===0?a=u.length>20?`… ${u.slice(-20)}`:u:d?a=u.length+i>100?`${u.slice(0,100-i)}… `:u:a=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,a&&o.push(a),i+=a.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,r);if(h===-1)return null;for(;h>=0;){const u=h+n.length;if(c(e.slice(r,h)),r=u,i>100)break;h=s.indexOf(n,r)}return i<100&&c(e.slice(r),!0),o},Ot=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ct=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:i,score:c}=o,h=r.includes("@"),u=r.includes("#"),[d,a]=r.split(/[#@]/),m=Number(d),g=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(w=>!w.includes(l))),{contents:y}=n[m]??={title:"",contents:[]};if(h)y.push([{type:"customField",id:m,index:a,display:g.map(l=>o.c.map(f=>V(f,l))).flat().filter(l=>l!==null)},c]);else{const l=g.map(f=>V(o.h,f)).filter(f=>f!==null);if(l.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:a},display:l},c]),"t"in o&&o.t)for(const f of o.t){const w=g.map(p=>V(f,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:a},display:w},c])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Ot(o,r):Ct(o,r)).map(([o,{title:r,contents:i}])=>{if(!r){const c=it(t,o);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},et=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},St=st($(JSON.parse("{\"/\":{\"documentCount\":1021,\"nextId\":1021,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3@0\",\"5\":\"4\",\"6\":\"4#实现\",\"7\":\"4#background-attachment\",\"8\":\"4#transform-translate3d\",\"9\":\"4@0\",\"10\":\"5\",\"11\":\"5#transition-实现渐变动画\",\"12\":\"5#transform-转变动画\",\"13\":\"5#animation-实现自定义动画\",\"14\":\"5@0\",\"15\":\"6\",\"16\":\"6#标准盒子模型\",\"17\":\"6#ie-怪异盒子模型\",\"18\":\"6#box-sizing\",\"19\":\"6#bfc\",\"20\":\"6#触发条件\",\"21\":\"6#应用场景\",\"22\":\"6@0\",\"23\":\"7\",\"24\":\"7#实现\",\"25\":\"7#利用定位-margin-auto\",\"26\":\"7#利用定位-margin-负值\",\"27\":\"7#利用定位-transform\",\"28\":\"7#table布局\",\"29\":\"7#flex弹性布局\",\"30\":\"7#grid网格布局\",\"31\":\"7#根据元素标签的性质-可以分为\",\"32\":\"7#内联元素居中布局\",\"33\":\"7#块级元素居中布局\",\"34\":\"7@0\",\"35\":\"8\",\"36\":\"8#优先级\",\"37\":\"8#继承属性\",\"38\":\"8@0\",\"39\":\"9\",\"40\":\"9#样式\",\"41\":\"9#边框\",\"42\":\"9#背景\",\"43\":\"9#background-clip\",\"44\":\"9#background-origin\",\"45\":\"9#background-size\",\"46\":\"9#background-break\",\"47\":\"9#文字\",\"48\":\"9#颜色\",\"49\":\"9#transition-过渡\",\"50\":\"9#transform-转换\",\"51\":\"9#animation-动画\",\"52\":\"9#渐变\",\"53\":\"9@0\",\"54\":\"10\",\"55\":\"10#实现\",\"56\":\"10#媒体查询\",\"57\":\"10#百分比\",\"58\":\"10#vw-vh\",\"59\":\"10#rem\",\"60\":\"10@0\",\"61\":\"11\",\"62\":\"11@0\",\"63\":\"12\",\"64\":\"12@0\",\"65\":\"13\",\"66\":\"13#实现\",\"67\":\"13#display-none\",\"68\":\"13#visibility-hidden\",\"69\":\"13#opacity-0\",\"70\":\"13#设置height、width属性为0\",\"71\":\"13#position-absolute\",\"72\":\"13#clip-path\",\"73\":\"13@0\",\"74\":\"14\",\"75\":\"14#双栏布局\",\"76\":\"14#flex弹性布局\",\"77\":\"14#三栏布局\",\"78\":\"14#两边使用-float-中间使用-margin\",\"79\":\"14#两边使用-absolute-中间使用-margin\",\"80\":\"14#两边使用-float-和负-margin\",\"81\":\"14#使用-display-table-实现\",\"82\":\"14#使用flex实现\",\"83\":\"14#grid网格布局\",\"84\":\"14@0\",\"85\":\"15\",\"86\":\"15#实现\",\"87\":\"15#单行文本溢出省略\",\"88\":\"15#多行文本溢出省略\",\"89\":\"15#基于高度截断\",\"90\":\"15#基于行数截断\",\"91\":\"15@0\",\"92\":\"16\",\"93\":\"16#agent-程序的执行环境\",\"94\":\"16#执行上下文栈-调用栈\",\"95\":\"16#执行上下文-代码的执行环境\",\"96\":\"16#realm-执行所需的资源总和\",\"97\":\"16@0\",\"98\":\"17\",\"99\":\"17#宿主提供的资源\",\"100\":\"17#宿主内置对象\",\"101\":\"17#宿主对全局对象的扩展\",\"102\":\"17@0\",\"103\":\"18\",\"104\":\"18#初始化realm环境-initializehostdefinedrealm\",\"105\":\"18#解析脚本\",\"106\":\"18#脚本求值\",\"107\":\"18#全局声明实例化\",\"108\":\"18@0\",\"109\":\"19\",\"110\":\"19@0\",\"111\":\"20\",\"112\":\"20#环境记录器\",\"113\":\"20#声明式环境记录\",\"114\":\"20#函数环境记录\",\"115\":\"20#模块环境记录\",\"116\":\"20#对象环境记录\",\"117\":\"20#全局环境记录器\",\"118\":\"20#作用域的分析\",\"119\":\"20#块级求值\",\"120\":\"20#blockdeclarationinstantiation\",\"121\":\"20#for求值\",\"122\":\"20#for求值-1\",\"123\":\"20#函数求值\",\"124\":\"20#闭包\",\"125\":\"20@0\",\"126\":\"20@1\",\"127\":\"21\",\"128\":\"21#产生式、非终结-production\",\"129\":\"21#文法参数-grammatical-parameters\",\"130\":\"21#伪代码\",\"131\":\"21@0\",\"132\":\"22\",\"133\":\"22#原理\",\"134\":\"22#负载均衡系统\",\"135\":\"22#缓存代理\",\"136\":\"22@0\",\"137\":\"22@1\",\"138\":\"23\",\"139\":\"23#域名\",\"140\":\"23#查询方式\",\"141\":\"23#域名缓存\",\"142\":\"23#查询过程\",\"143\":\"23@0\",\"144\":\"23@1\",\"145\":\"24\",\"146\":\"24#http1-0\",\"147\":\"24#http1-1\",\"148\":\"24#http2-0\",\"149\":\"24#多路复用\",\"150\":\"24#二进制分帧\",\"151\":\"24#首部压缩\",\"152\":\"24#服务器推送\",\"153\":\"24#总结\",\"154\":\"24@0\",\"155\":\"24@1\",\"156\":\"25\",\"157\":\"25#划分\",\"158\":\"25#应用层\",\"159\":\"25#表示层\",\"160\":\"25#会话层\",\"161\":\"25#传输层\",\"162\":\"25#网络层\",\"163\":\"25#数据链路层\",\"164\":\"25#物理层\",\"165\":\"25#传输过程\",\"166\":\"25@0\",\"167\":\"25@1\",\"168\":\"26\",\"169\":\"26#划分\",\"170\":\"26#五层体系\",\"171\":\"26#应用层\",\"172\":\"26#传输层\",\"173\":\"26#网络层\",\"174\":\"26#数据链路层\",\"175\":\"26#物理层\",\"176\":\"26#四层体系\",\"177\":\"26#总结\",\"178\":\"26@0\",\"179\":\"26@1\",\"180\":\"27\",\"181\":\"27#udp\",\"182\":\"27#tcp\",\"183\":\"27#区别\",\"184\":\"27@0\",\"185\":\"27@1\",\"186\":\"28\",\"187\":\"28#url解析\",\"188\":\"28#dns查询\",\"189\":\"28#tcp连接\",\"190\":\"28#发送-http-请求\",\"191\":\"28#响应请求\",\"192\":\"28#页面渲染\",\"193\":\"28@0\",\"194\":\"28@1\",\"195\":\"29\",\"196\":\"29#特点\",\"197\":\"29#全双工\",\"198\":\"29#二进制帧\",\"199\":\"29#协议名\",\"200\":\"29#握手\",\"201\":\"29#优点\",\"202\":\"29#应用场景\",\"203\":\"29@0\",\"204\":\"29@1\",\"205\":\"30\",\"206\":\"30#分类\",\"207\":\"30#_1xx\",\"208\":\"30#_2xx\",\"209\":\"30#_3xx\",\"210\":\"30#_4xx\",\"211\":\"30#_5xx\",\"212\":\"30#适用场景\",\"213\":\"30@0\",\"214\":\"30@1\",\"215\":\"31\",\"216\":\"31#区别\",\"217\":\"31#参数位置\",\"218\":\"31#参数长度\",\"219\":\"31#安全\",\"220\":\"31#数据包\",\"221\":\"31@0\",\"222\":\"31@1\",\"223\":\"32\",\"224\":\"32#分类\",\"225\":\"32#场景\",\"226\":\"32#协商缓存\",\"227\":\"32#会话状态\",\"228\":\"32@0\",\"229\":\"32@1\",\"230\":\"33\",\"231\":\"33#https\",\"232\":\"33#区别\",\"233\":\"33#https为何安全\",\"234\":\"33#ssl实现\",\"235\":\"33#对称加密\",\"236\":\"33#非对称加密\",\"237\":\"33#混合加密\",\"238\":\"33#摘要算法\",\"239\":\"33#数字签名\",\"240\":\"33#ca验证机构\",\"241\":\"33@0\",\"242\":\"33@1\",\"243\":\"34\",\"244\":\"34#挥手\",\"245\":\"34@0\",\"246\":\"34@1\",\"247\":\"35\",\"248\":\"35#垃圾回收机制\",\"249\":\"35#标记清除\",\"250\":\"35#引用计数\",\"251\":\"35#常见内存泄露情况\",\"252\":\"35@0\",\"253\":\"36\",\"254\":\"36#应用场景\",\"255\":\"36@0\",\"256\":\"37\",\"257\":\"37#实现\",\"258\":\"37#原型链继承\",\"259\":\"37#构造函数继承\",\"260\":\"37#组合继承\",\"261\":\"37#原型式继承\",\"262\":\"37#寄生式继承\",\"263\":\"37#寄生组合式继承\",\"264\":\"37#es6-中的extends\",\"265\":\"37@0\",\"266\":\"38\",\"267\":\"38#对象的原型、原型链\",\"268\":\"38#原型链\",\"269\":\"38#this\",\"270\":\"38#this表达式的求值\",\"271\":\"38#显示绑定-bind、call、apply的区别\",\"272\":\"38#实现\",\"273\":\"38#事件模型\",\"274\":\"38#类型转换\",\"275\":\"38#浅拷贝、深拷贝\",\"276\":\"38#浅拷贝\",\"277\":\"38#深拷贝\",\"278\":\"38#函数缓存\",\"279\":\"38#场景\",\"280\":\"38#本地存储方式\",\"281\":\"38#大文件断点续传、分片上传\",\"282\":\"38#分片上传\",\"283\":\"38#断点续传\",\"284\":\"38#元素是否在可视区域中\",\"285\":\"38#实现-1\",\"286\":\"38#单点登录\",\"287\":\"38#实现-2\",\"288\":\"38#流程\",\"289\":\"38#下拉刷新和上拉加载\",\"290\":\"38#上拉加载\",\"291\":\"38#下拉刷新\",\"292\":\"38#第三方库\",\"293\":\"38#函数式编程\",\"294\":\"38#纯函数\",\"295\":\"38#高阶函数\",\"296\":\"38#柯里化\",\"297\":\"38#组合与管道\",\"298\":\"38#web的常见攻击方式有哪些、如何防御\",\"299\":\"38#xss\",\"300\":\"38#csrf跨站请求伪造\",\"301\":\"38#sql注入攻击\",\"302\":\"38@0\",\"303\":\"39\",\"304\":\"39#解决\",\"305\":\"39@0\",\"306\":\"40\",\"307\":\"40#预定义常量\",\"308\":\"40#魔术常量\",\"309\":\"40@0\",\"310\":\"40@1\",\"311\":\"41\",\"312\":\"41#替代语法\",\"313\":\"41#match-php8\",\"314\":\"41#declare-php-4-php-5-php-7-php-8\",\"315\":\"41#ticks\",\"316\":\"41#encoding\",\"317\":\"41@0\",\"318\":\"41@1\",\"319\":\"42\",\"320\":\"42#函数参数\",\"321\":\"42#引用传递\",\"322\":\"42#默认参数\",\"323\":\"42#可变数量的参数值列表\",\"324\":\"42#命名参数-ph8\",\"325\":\"42#可变函数\",\"326\":\"42#匿名函数\",\"327\":\"42@0\",\"328\":\"42@1\",\"329\":\"43\",\"330\":\"43#php标记\",\"331\":\"43#与html文档的混合\",\"332\":\"43#指令分隔符\",\"333\":\"43#注释\",\"334\":\"43@0\",\"335\":\"43@1\",\"336\":\"44\",\"337\":\"44#new实例化\",\"338\":\"44#属性和方法\",\"339\":\"44#构造函数\",\"340\":\"44#继承\",\"341\":\"44#签名覆盖规则\",\"342\":\"44#readonly\",\"343\":\"44#class-1\",\"344\":\"44#访问符\",\"345\":\"44#属性\",\"346\":\"44#类型声明\",\"347\":\"44#只读-地址\",\"348\":\"44#动态属性\",\"349\":\"44#属性钩子-拦截器、代理\",\"350\":\"44#类常量\",\"351\":\"44#类自动引入\",\"352\":\"44@0\",\"353\":\"44@1\",\"354\":\"45\",\"355\":\"45#位运算\",\"356\":\"45#比较运算\",\"357\":\"45#三元表达式\",\"358\":\"45#null合并\",\"359\":\"45#错误控制\",\"360\":\"45#执行运算符\",\"361\":\"45#数组运算符\",\"362\":\"45#类型运算符\",\"363\":\"45@0\",\"364\":\"45@1\",\"365\":\"46\",\"366\":\"46#类型系统\",\"367\":\"46#原子类型\",\"368\":\"46#复合类型\",\"369\":\"46#类型别名\",\"370\":\"46#null\",\"371\":\"46#boolean布尔类型\",\"372\":\"46#int整型\",\"373\":\"46#溢出\",\"374\":\"46#整数除法\",\"375\":\"46#float浮点型\",\"376\":\"46#比较\",\"377\":\"46#nan\",\"378\":\"46#string\",\"379\":\"46#单引号\",\"380\":\"46#双引号\",\"381\":\"46#heredoc结构\",\"382\":\"46#nowdoc结构\",\"383\":\"46#array数组\",\"384\":\"46#访问\",\"385\":\"46#数组解构\",\"386\":\"46#数组展开\",\"387\":\"46#拷贝\",\"388\":\"46#object\",\"389\":\"46#枚举-php-8-8-1-0\",\"390\":\"46#resource-资源类型\",\"391\":\"46#callback-callable-类型\",\"392\":\"46#mixed\",\"393\":\"46#void\",\"394\":\"46#never\",\"395\":\"46#可迭代c-c-c-c-cccccc\",\"396\":\"46@0\",\"397\":\"46@1\",\"398\":\"47\",\"399\":\"47#引用赋值\",\"400\":\"47#预定义变量\",\"401\":\"47#作用域\",\"402\":\"47#global\",\"403\":\"47#static\",\"404\":\"47#可变变量名\",\"405\":\"47#来自php之外的变量\",\"406\":\"47#html表单-get-和-post\",\"407\":\"47#http-cookie\",\"408\":\"47#变量名中的点\",\"409\":\"47#确定变量类型\",\"410\":\"47@0\",\"411\":\"47@1\",\"412\":\"48\",\"413\":\"48#父组件向子组件传递\",\"414\":\"48#子组件向父组件传递\",\"415\":\"48#兄弟组件之间的通信\",\"416\":\"48#父组件向后代组件传递\",\"417\":\"48#非关系组件传递\",\"418\":\"48#总结\",\"419\":\"48@0\",\"420\":\"48@1\",\"421\":\"49\",\"422\":\"49#区别\",\"423\":\"49#优缺点\",\"424\":\"49@0\",\"425\":\"49@1\",\"426\":\"50\",\"427\":\"50#背景\",\"428\":\"50#fiber\",\"429\":\"50#解决\",\"430\":\"50@0\",\"431\":\"50@1\",\"432\":\"51\",\"433\":\"51#流程\",\"434\":\"51#创建阶段\",\"435\":\"51#constructor\",\"436\":\"51#getderivedstatefromprops\",\"437\":\"51#render\",\"438\":\"51#componentdidmount\",\"439\":\"51#更新阶段\",\"440\":\"51#shouldcomponentupdate\",\"441\":\"51#getsnapshotbeforeupdate\",\"442\":\"51#componentdidupdate\",\"443\":\"51#卸载阶段\",\"444\":\"51#componentwillunmount\",\"445\":\"51#总结\",\"446\":\"51@0\",\"447\":\"51@1\",\"448\":\"52\",\"449\":\"52#实现\",\"450\":\"52#原理\",\"451\":\"52@0\",\"452\":\"52@1\",\"453\":\"53\",\"454\":\"53#类组件\",\"455\":\"53#函数组件\",\"456\":\"53#区别\",\"457\":\"53#编写形式\",\"458\":\"53#状态管理\",\"459\":\"53#生命周期\",\"460\":\"53#调用方式\",\"461\":\"53#获取渲染的值\",\"462\":\"53@0\",\"463\":\"53@1\",\"464\":\"54\",\"465\":\"54#受控组件\",\"466\":\"54#非受控组件\",\"467\":\"54#应用场景\",\"468\":\"54@0\",\"469\":\"54@1\",\"470\":\"55\",\"471\":\"55#构建方式\",\"472\":\"55#函数式创建\",\"473\":\"55#通过-react-createclass-方法创建\",\"474\":\"55#继承-react-component-创建\",\"475\":\"55#区别\",\"476\":\"55@0\",\"477\":\"55@1\",\"478\":\"56\",\"479\":\"56#编写方式\",\"480\":\"56#应用场景\",\"481\":\"56@0\",\"482\":\"56@1\",\"483\":\"57\",\"484\":\"57#方式\",\"485\":\"57#在组件内直接使用\",\"486\":\"57#组件中引入css文件\",\"487\":\"57#组件中引入-module-css-文件\",\"488\":\"57#css-in-js\",\"489\":\"57#区别\",\"490\":\"57@0\",\"491\":\"57@1\",\"492\":\"58\",\"493\":\"58#原理\",\"494\":\"58#tree层级\",\"495\":\"58#conponent层级\",\"496\":\"58#element层级\",\"497\":\"58#注意事项\",\"498\":\"58@0\",\"499\":\"58@1\",\"500\":\"59\",\"501\":\"59@0\",\"502\":\"59@1\",\"503\":\"60\",\"504\":\"60#合成事件\",\"505\":\"60#执行顺序\",\"506\":\"60@0\",\"507\":\"60@1\",\"508\":\"61\",\"509\":\"61#绑定方法\",\"510\":\"61#render方法中使用bind\",\"511\":\"61#render方法中使用箭头函数\",\"512\":\"61#constructor中bind\",\"513\":\"61#定义阶段使用箭头函数绑定\",\"514\":\"61#区别\",\"515\":\"61@0\",\"516\":\"61@1\",\"517\":\"62\",\"518\":\"62#常见hooks\",\"519\":\"62#usestate\",\"520\":\"62#useeffect\",\"521\":\"62#其它-hooks\",\"522\":\"62#解决什么\",\"523\":\"62@0\",\"524\":\"62@1\",\"525\":\"63\",\"526\":\"63#使用\",\"527\":\"63#应用\",\"528\":\"63@0\",\"529\":\"63@1\",\"530\":\"64\",\"531\":\"64#特性\",\"532\":\"64#声明式编程\",\"533\":\"64#component\",\"534\":\"64#优势\",\"535\":\"64@0\",\"536\":\"64@1\",\"537\":\"65\",\"538\":\"65#过程\",\"539\":\"65#总结\",\"540\":\"65@0\",\"541\":\"65@1\",\"542\":\"66\",\"543\":\"66#总结\",\"544\":\"66@0\",\"545\":\"66@1\",\"546\":\"67\",\"547\":\"67#避免不必要的渲染\",\"548\":\"67#shouldcomponentupdate\",\"549\":\"67#purecomponent\",\"550\":\"67#react-memo\",\"551\":\"67#总结\",\"552\":\"67@0\",\"553\":\"67@1\",\"554\":\"68\",\"555\":\"68#避免使用内联函数\",\"556\":\"68#使用-react-fragments-避免额外标记\",\"557\":\"68#事件绑定方式\",\"558\":\"68#使用-immutable\",\"559\":\"68#懒加载组件\",\"560\":\"68#服务端渲染\",\"561\":\"68@0\",\"562\":\"68@1\",\"563\":\"69\",\"564\":\"69#provider\",\"565\":\"69#connection\",\"566\":\"69#mapstatetoprops\",\"567\":\"69#mapdispatchtoprops\",\"568\":\"69#项目结构\",\"569\":\"69#按角色组织-mvc\",\"570\":\"69#按功能组织\",\"571\":\"69#中间件\",\"572\":\"69#常用的中间件\",\"573\":\"69#redux-thunk\",\"574\":\"69#redux-logger\",\"575\":\"69#原理\",\"576\":\"69@0\",\"577\":\"69@1\",\"578\":\"70\",\"579\":\"70#创建refs\",\"580\":\"70#传入字符串\",\"581\":\"70#传入对象\",\"582\":\"70#传入函数\",\"583\":\"70#传入hook\",\"584\":\"70#应用场景\",\"585\":\"70@0\",\"586\":\"70@1\",\"587\":\"71\",\"588\":\"71#触发时机\",\"589\":\"71#总结\",\"590\":\"71@0\",\"591\":\"71@1\",\"592\":\"72\",\"593\":\"72#常用api\",\"594\":\"72#browserrouter、hashrouter\",\"595\":\"72#route\",\"596\":\"72#link、navlink\",\"597\":\"72#redirect\",\"598\":\"72#switch\",\"599\":\"72#usehistory\",\"600\":\"72#useparams\",\"601\":\"72#uselocation\",\"602\":\"72#参数传递\",\"603\":\"72#动态路由\",\"604\":\"72#search传递参数\",\"605\":\"72#to传入对象\",\"606\":\"72#路由模式\",\"607\":\"72#实现原理\",\"608\":\"72#hashrouter\",\"609\":\"72#router\",\"610\":\"72@0\",\"611\":\"72@1\",\"612\":\"73\",\"613\":\"73#更新类型\",\"614\":\"73#异步更新\",\"615\":\"73#同步更新\",\"616\":\"73#批量更新\",\"617\":\"73@0\",\"618\":\"73@1\",\"619\":\"74\",\"620\":\"74#state\",\"621\":\"74#props\",\"622\":\"74#区别\",\"623\":\"74@0\",\"624\":\"74@1\",\"625\":\"75\",\"626\":\"75#es6类\",\"627\":\"75#类组件\",\"628\":\"75#总结\",\"629\":\"75@0\",\"630\":\"75@1\",\"631\":\"76\",\"632\":\"76#实现\",\"633\":\"76#csstransition\",\"634\":\"76#switchtransition\",\"635\":\"76#transitiongroup\",\"636\":\"76@0\",\"637\":\"76@1\",\"638\":\"77\",\"639\":\"77#特性\",\"640\":\"77#数据类型\",\"641\":\"77#高级类型\",\"642\":\"77#交叉类型\",\"643\":\"77#联合类型\",\"644\":\"77#类型别名\",\"645\":\"77#类型索引\",\"646\":\"77#映射类型\",\"647\":\"77#条件类型\",\"648\":\"77#类\",\"649\":\"77#定义\",\"650\":\"77#继承\",\"651\":\"77#修饰符\",\"652\":\"77#静态属性-es自带能力\",\"653\":\"77#抽象类\",\"654\":\"77#枚举\",\"655\":\"77#原理\",\"656\":\"77#ts函数\",\"657\":\"77#可选参数\",\"658\":\"77#剩余参数\",\"659\":\"77#函数重载\",\"660\":\"77#泛型\",\"661\":\"77#装饰器\",\"662\":\"77#使用\",\"663\":\"77#执行顺序\",\"664\":\"77#命名空间和模块\",\"665\":\"77#命名空间\",\"666\":\"77#区别\",\"667\":\"77#在vue中使用\",\"668\":\"77#component\",\"669\":\"77#computed、data、methods\",\"670\":\"77#props\",\"671\":\"77#watch\",\"672\":\"77#emit\",\"673\":\"77@0\",\"674\":\"77@1\",\"675\":\"78\",\"676\":\"78#分类\",\"677\":\"78#本地版本控制系统\",\"678\":\"78#集中式版本控制系统\",\"679\":\"78#svn\",\"680\":\"78#cvs\",\"681\":\"78#分布式版本控制系统\",\"682\":\"78#git\",\"683\":\"78#hg\",\"684\":\"78#git-1\",\"685\":\"78#工作原理\",\"686\":\"78#命令\",\"687\":\"78#配置命令\",\"688\":\"78#启动命令\",\"689\":\"78#日常基本操作\",\"690\":\"78#分支操作\",\"691\":\"78@0\",\"692\":\"78@1\",\"693\":\"79\",\"694\":\"79@0\",\"695\":\"79@1\",\"696\":\"80\",\"697\":\"80@0\",\"698\":\"80@1\",\"699\":\"81\",\"700\":\"81@0\",\"701\":\"81@1\",\"702\":\"82\",\"703\":\"82@0\",\"704\":\"82@1\",\"705\":\"83\",\"706\":\"83@0\",\"707\":\"83@1\",\"708\":\"84\",\"709\":\"84#为什么需要\",\"710\":\"84@0\",\"711\":\"84@1\",\"712\":\"85\",\"713\":\"85#原理\",\"714\":\"85#解决\",\"715\":\"85@0\",\"716\":\"85@1\",\"717\":\"86\",\"718\":\"86#区别\",\"719\":\"86#场景\",\"720\":\"86@0\",\"721\":\"86@1\",\"722\":\"87\",\"723\":\"87#方法\",\"724\":\"87@0\",\"725\":\"87@1\",\"726\":\"88\",\"727\":\"88#区别\",\"728\":\"88#原理\",\"729\":\"88@0\",\"730\":\"88@1\",\"731\":\"89\",\"732\":\"89#原理\",\"733\":\"89#总结\",\"734\":\"89@0\",\"735\":\"89@1\",\"736\":\"90\",\"737\":\"90#实现\",\"738\":\"90#场景\",\"739\":\"90@0\",\"740\":\"90@1\",\"741\":\"91\",\"742\":\"91@0\",\"743\":\"91@1\",\"744\":\"92\",\"745\":\"92#使用\",\"746\":\"92#定义\",\"747\":\"92#应用场景\",\"748\":\"92#原理\",\"749\":\"92@0\",\"750\":\"92@1\",\"751\":\"93\",\"752\":\"93#v-if和v-for的优先级\",\"753\":\"93#当v-if和v-for置于不同的标签中\",\"754\":\"93#注意和结论\",\"755\":\"93#v-if和v-show\",\"756\":\"93#共同点\",\"757\":\"93#不同点\",\"758\":\"93#解析原理\",\"759\":\"93#v-show原理\",\"760\":\"93#v-if原理\",\"761\":\"93@0\",\"762\":\"93@1\",\"763\":\"94\",\"764\":\"94#场景\",\"765\":\"94#获取缓存后组件的数据\",\"766\":\"94@0\",\"767\":\"94@1\",\"768\":\"95\",\"769\":\"95#设置key与不设置key的差异\",\"770\":\"95#原理\",\"771\":\"95@0\",\"772\":\"95@1\",\"773\":\"96\",\"774\":\"96#beforecreate\",\"775\":\"96#created-options\",\"776\":\"96#bedoremounted\",\"777\":\"96#mounted\",\"778\":\"96#beforeupdate\",\"779\":\"96#updated\",\"780\":\"96#beforedestroy\",\"781\":\"96#destroyed\",\"782\":\"96#activated\",\"783\":\"96#deactivated\",\"784\":\"96#父子组件渲染顺序\",\"785\":\"96@0\",\"786\":\"96@1\",\"787\":\"97\",\"788\":\"97#vue中的mixin\",\"789\":\"97#局部混入\",\"790\":\"97#全局混入\",\"791\":\"97#注意\",\"792\":\"97#源码\",\"793\":\"97#合并策略\",\"794\":\"97@0\",\"795\":\"97@1\",\"796\":\"98\",\"797\":\"98#结论\",\"798\":\"98@0\",\"799\":\"98@1\",\"800\":\"99\",\"801\":\"99#场景\",\"802\":\"99@0\",\"803\":\"99@1\",\"804\":\"100\",\"805\":\"100#场景\",\"806\":\"100#分类\",\"807\":\"100#原理\",\"808\":\"100@0\",\"809\":\"100@1\",\"810\":\"101\",\"811\":\"101#他的核心特性与技术原理如下\",\"812\":\"101#他的生态体系完善覆盖全开发流程\",\"813\":\"101#vue3的关键更新\",\"814\":\"101@0\",\"815\":\"101@1\",\"816\":\"102\",\"817\":\"102#新特性\",\"818\":\"102#vue3优化\",\"819\":\"102#响应式系统\",\"820\":\"102@0\",\"821\":\"102@1\",\"822\":\"103\",\"823\":\"103#生命周期\",\"824\":\"103#应用的生命周期\",\"825\":\"103#页面的生命周期\",\"826\":\"103#组件的生命周期\",\"827\":\"103#组件所在页面的生命周期\",\"828\":\"103#执行过程\",\"829\":\"103#登录流程\",\"830\":\"103#检验登录状态是否过期\",\"831\":\"103#路由跳转\",\"832\":\"103#跳转方式\",\"833\":\"103#发布流程\",\"834\":\"103#支付流程\",\"835\":\"103#实现原理\",\"836\":\"103#通信\",\"837\":\"103#运行机制\",\"838\":\"103#优化手段\",\"839\":\"103#加载\",\"840\":\"103#渲染\",\"841\":\"103@0\",\"842\":\"103@1\",\"843\":\"104\",\"844\":\"104#防抖-debounce\",\"845\":\"104#最佳实践\",\"846\":\"104#应用场景\",\"847\":\"104#节流-throttle\",\"848\":\"104#最佳实践-1\",\"849\":\"104#应用场景-1\",\"850\":\"104#事件委托-事件代理-event-delegation\",\"851\":\"104#最佳实践-2\",\"852\":\"104#应用场景-2\",\"853\":\"104#分时函数\",\"854\":\"104@0\",\"855\":\"104@1\",\"856\":\"105\",\"857\":\"105#按需加载-lazy-loading、on-demand-loading\",\"858\":\"105#动态导入模块\",\"859\":\"105#代码分割、分包\",\"860\":\"105#延迟加载、懒加载\",\"861\":\"105#html5的loading属性\",\"862\":\"105#intersection-observer-api\",\"863\":\"105#http缓存\",\"864\":\"105#强缓存\",\"865\":\"105#expires标头\",\"866\":\"105#cahe-control标头\",\"867\":\"105#协商缓存\",\"868\":\"105#last-modified-if-modified-since-上一次的修改时间\",\"869\":\"105#etag-if-none-match-文件指纹\",\"870\":\"105#浏览器缓存\",\"871\":\"105#dns缓存\",\"872\":\"105#cdn缓存\",\"873\":\"105@0\",\"874\":\"105@1\",\"875\":\"106\",\"876\":\"106#性能优化指标\",\"877\":\"106#fcp-first-contentful-paint\",\"878\":\"106#在js中衡量fcp\",\"879\":\"106#lcp-largest-contentful-paint\",\"880\":\"106#cls-cumulative-layout-shift\",\"881\":\"106#fid-first-input-delay\",\"882\":\"106#inp-interaction-to-next-paint\",\"883\":\"106#ttfb-time-to-first-byte\",\"884\":\"106#在js中衡量ttfb\",\"885\":\"106#tbt-total-blocking-time\",\"886\":\"106#fmp-first-meaningful-paint\",\"887\":\"106#性能分析工具\",\"888\":\"106#ligthouse\",\"889\":\"106#perfance选项卡\",\"890\":\"106#web-vitals库\",\"891\":\"106@0\",\"892\":\"107\",\"893\":\"107#gizp压缩\",\"894\":\"107#配置流程\",\"895\":\"107#最佳实践\",\"896\":\"107#图片优化\",\"897\":\"107@0\",\"898\":\"107@1\",\"899\":\"108\",\"900\":\"108@0\",\"901\":\"108@1\",\"902\":\"109\",\"903\":\"109@0\",\"904\":\"109@1\",\"905\":\"110\",\"906\":\"110#预加载\",\"907\":\"110#构建工具支持\",\"908\":\"110#预渲染\",\"909\":\"110#webpack方案\",\"910\":\"110#骨架屏\",\"911\":\"110#ui库方案\",\"912\":\"110@0\",\"913\":\"110@1\",\"914\":\"111\",\"915\":\"111#时间分片-分时渲染\",\"916\":\"111#使用定时器\",\"917\":\"111#requestanimationframe\",\"918\":\"111#documentfragment\",\"919\":\"111#虚拟列表、表格\",\"920\":\"111#实现要点\",\"921\":\"111#最佳实践\",\"922\":\"111#canvas\",\"923\":\"111@0\",\"924\":\"111@1\",\"925\":\"112\",\"926\":\"112#基本配置\",\"927\":\"112#使用不同的配置文件\",\"928\":\"112#设置一个新的-webpack-项目\",\"929\":\"112@0\",\"930\":\"112@1\",\"931\":\"113\",\"932\":\"113#打包过程\",\"933\":\"113#浏览器兼容性-browser-compatibility\",\"934\":\"113#环境-environment\",\"935\":\"113#模块-modules、chunk\",\"936\":\"113#依赖关系\",\"937\":\"113#支持的模块类型\",\"938\":\"113#打包结果-bundle\",\"939\":\"113#打包过程-1\",\"940\":\"113#设置bundle\",\"941\":\"113#运行时-runtime\",\"942\":\"113#数据集合-manifest\",\"943\":\"113@0\",\"944\":\"113@1\",\"945\":\"114\",\"946\":\"114#特点\",\"947\":\"114#使用loader\",\"948\":\"114#配置方式\",\"949\":\"114#内联方式\",\"950\":\"114@0\",\"951\":\"114@1\",\"952\":\"115\",\"953\":\"115#插件-plugin\",\"954\":\"115#配置方式\",\"955\":\"115#使用node-api-方式配置\",\"956\":\"115#剖析\",\"957\":\"115@0\",\"958\":\"115@1\",\"959\":\"116\",\"960\":\"116@0\",\"961\":\"117\",\"962\":\"117@0\",\"963\":\"118\",\"964\":\"118@0\",\"965\":\"119\",\"966\":\"119@0\",\"967\":\"120\",\"968\":\"120#完成-completion\",\"969\":\"120#抛出异常-throw-an-exception\",\"970\":\"120#returnifabrupt\",\"971\":\"120#符号-returnifabrupt-简写\",\"972\":\"120#符号\",\"973\":\"120#隐式正常完成-implicit-normal-completion\",\"974\":\"120@0\",\"975\":\"121\",\"976\":\"121#抽象操作-abstract-operations\",\"977\":\"121#语法导向操作-syntax-directed-operations\",\"978\":\"121#静态语义-static-semantics\",\"979\":\"121#数学运算\",\"980\":\"121#值表示法-value-notation\",\"981\":\"121#标识-identity\",\"982\":\"121@0\",\"983\":\"122\",\"984\":\"122#文法参数的含义\",\"985\":\"122#文法前缀参数的含义\",\"986\":\"122#例子\",\"987\":\"122@0\",\"988\":\"123\",\"989\":\"123@0\",\"990\":\"124\",\"991\":\"124#终结符\",\"992\":\"124#非终结符与产生式规则\",\"993\":\"124#opt符号\",\"994\":\"124#one-of短语\",\"995\":\"124#but-not短语\",\"996\":\"124#empty-短语\",\"997\":\"124#前瞻限制短语\",\"998\":\"124#no-lineterminator-here\",\"999\":\"124#描述性短语\",\"1000\":\"124@0\",\"1001\":\"124@1\",\"1002\":\"125\",\"1003\":\"125@0\",\"1004\":\"126\",\"1005\":\"126@0\",\"1006\":\"127\",\"1007\":\"127@0\",\"1008\":\"128\",\"1009\":\"128#语法\",\"1010\":\"128#转义字符\",\"1011\":\"128#转义序列-escapesequence\",\"1012\":\"128#先觉错误\",\"1013\":\"128#在代码块内使用严格模式\",\"1014\":\"128@0\",\"1015\":\"129\",\"1016\":\"130\",\"1017\":\"131\",\"1018\":\"132\",\"1019\":\"133\",\"1020\":\"134\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[null,null,1],\"3\":[1],\"4\":[null,null,1],\"5\":[2,13],\"6\":[1,5],\"7\":[2,71],\"8\":[2,92],\"9\":[null,null,1],\"10\":[1,20],\"11\":[2,77],\"12\":[2,62],\"13\":[2,79],\"14\":[null,null,1],\"15\":[1,57],\"16\":[1,22],\"17\":[2,16],\"18\":[2,39],\"19\":[1,21],\"20\":[1,22],\"21\":[1,12],\"22\":[null,null,1],\"23\":[1,5],\"24\":[1,8],\"25\":[2,42],\"26\":[2,29],\"27\":[1,30],\"28\":[1,31],\"29\":[1,32],\"30\":[1,28],\"31\":[3,2],\"32\":[1,21],\"33\":[1,27],\"34\":[null,null,1],\"35\":[1,111],\"36\":[1,42],\"37\":[1,103],\"38\":[null,null,1],\"39\":[1],\"40\":[1],\"41\":[1,22],\"42\":[1,7],\"43\":[2,17],\"44\":[2,16],\"45\":[2,16],\"46\":[2,15],\"47\":[1,33],\"48\":[1,8],\"49\":[2,25],\"50\":[2,27],\"51\":[2,30],\"52\":[1,17],\"53\":[null,null,1],\"54\":[1,17],\"55\":[1,29],\"56\":[1,35],\"57\":[1,30],\"58\":[2,9],\"59\":[1,59],\"60\":[null,null,1],\"61\":[2],\"62\":[null,null,1],\"63\":[1],\"64\":[null,null,1],\"65\":[1,4],\"66\":[1,13],\"67\":[2,16],\"68\":[2,14],\"69\":[2,30],\"70\":[2,18],\"71\":[2,10],\"72\":[2,34],\"73\":[null,null,1],\"74\":[1,19],\"75\":[1,41],\"76\":[1,29],\"77\":[1,12],\"78\":[4,47],\"79\":[4,44],\"80\":[4,49],\"81\":[4,49],\"82\":[1,56],\"83\":[1,30],\"84\":[null,null,1],\"85\":[2,4],\"86\":[1],\"87\":[1,51],\"88\":[1,4],\"89\":[1,53],\"90\":[1,98],\"91\":[null,null,1],\"92\":[1,13],\"93\":[1,4],\"94\":[1,12],\"95\":[1,34],\"96\":[1,26],\"97\":[null,null,1],\"98\":[1,9],\"99\":[1,18],\"100\":[1,8],\"101\":[1,22],\"102\":[null,null,1],\"103\":[1,29],\"104\":[1,9],\"105\":[1,6],\"106\":[1,12],\"107\":[1,44],\"108\":[null,null,1],\"109\":[1],\"110\":[null,null,1],\"111\":[1,31],\"112\":[1,14],\"113\":[1,8],\"114\":[1,34],\"115\":[1,6],\"116\":[1,12],\"117\":[1,27],\"118\":[1,24],\"119\":[1,11],\"120\":[1,11],\"121\":[1,11],\"122\":[1,46],\"123\":[1,64],\"124\":[1],\"125\":[null,null,1],\"126\":[null,null,1],\"127\":[1,16],\"128\":[1,15],\"129\":[1,15],\"130\":[1,39],\"131\":[null,null,1],\"132\":[1,27],\"133\":[1,18],\"134\":[1,22],\"135\":[1,29],\"136\":[null,null,1],\"137\":[null,null,1],\"138\":[1,19],\"139\":[1,6],\"140\":[1,18],\"141\":[1,12],\"142\":[1,35],\"143\":[null,null,1],\"144\":[null,null,1],\"145\":[4],\"146\":[2,26],\"147\":[2,43],\"148\":[2,8],\"149\":[1,9],\"150\":[1,20],\"151\":[1,9],\"152\":[1,7],\"153\":[1,27],\"154\":[null,null,1],\"155\":[null,null,1],\"156\":[1,13],\"157\":[1,3],\"158\":[1,15],\"159\":[1,9],\"160\":[1,4],\"161\":[1,9],\"162\":[1,14],\"163\":[1,26],\"164\":[1,11],\"165\":[1,21],\"166\":[null,null,1],\"167\":[null,null,1],\"168\":[2,16],\"169\":[1,18],\"170\":[1],\"171\":[1,13],\"172\":[1,14],\"173\":[1,4],\"174\":[1,3],\"175\":[1,2],\"176\":[1,49],\"177\":[1,24],\"178\":[null,null,1],\"179\":[null,null,1],\"180\":[2],\"181\":[1,34],\"182\":[1,39],\"183\":[1,61],\"184\":[null,null,1],\"185\":[null,null,1],\"186\":[2,11],\"187\":[1,7],\"188\":[1,3],\"189\":[1,4],\"190\":[3,9],\"191\":[1,12],\"192\":[1,38],\"193\":[null,null,1],\"194\":[null,null,1],\"195\":[1,26],\"196\":[1],\"197\":[1,7],\"198\":[1,19],\"199\":[1,14],\"200\":[1,53],\"201\":[1,21],\"202\":[1,8],\"203\":[null,null,1],\"204\":[null,null,1],\"205\":[1,18],\"206\":[1,12],\"207\":[1,18],\"208\":[1,27],\"209\":[1,41],\"210\":[1,31],\"211\":[1,28],\"212\":[1,47],\"213\":[null,null,1],\"214\":[null,null,1],\"215\":[2,6],\"216\":[1,24],\"217\":[1,49],\"218\":[1,20],\"219\":[1,14],\"220\":[1,13],\"221\":[null,null,1],\"222\":[null,null,1],\"223\":[1,78],\"224\":[1,135],\"225\":[1,3],\"226\":[1,29],\"227\":[1,28],\"228\":[null,null,1],\"229\":[null,null,1],\"230\":[1,47],\"231\":[1,35],\"232\":[1,19],\"233\":[1,12],\"234\":[1,10],\"235\":[1,4],\"236\":[1,12],\"237\":[1,12],\"238\":[1,18],\"239\":[1,18],\"240\":[1,24],\"241\":[null,null,1],\"242\":[null,null,1],\"243\":[1,66],\"244\":[1,52],\"245\":[null,null,1],\"246\":[null,null,1],\"247\":[1,43],\"248\":[1,15],\"249\":[1,17],\"250\":[1,40],\"251\":[1,73],\"252\":[null,null,1],\"253\":[1,59],\"254\":[1,75],\"255\":[null,null,1],\"256\":[1,23],\"257\":[1,9],\"258\":[1,40],\"259\":[1,34],\"260\":[1,40],\"261\":[1,33],\"262\":[1,25],\"263\":[1,41],\"264\":[2,30],\"265\":[null,null,1],\"266\":[1],\"267\":[2,17],\"268\":[1,4],\"269\":[1,6],\"270\":[1,80],\"271\":[4,10],\"272\":[1,27],\"273\":[1,43],\"274\":[1,3],\"275\":[2],\"276\":[1,12],\"277\":[1,44],\"278\":[1,25],\"279\":[1,4],\"280\":[1,30],\"281\":[2],\"282\":[1,15],\"283\":[1,17],\"284\":[1,4],\"285\":[1,83],\"286\":[1,15],\"287\":[1,74],\"288\":[1,2],\"289\":[1],\"290\":[1,10],\"291\":[1,58],\"292\":[1,78],\"293\":[1,9],\"294\":[1,5],\"295\":[1,1],\"296\":[1,1],\"297\":[1,18],\"298\":[2,5],\"299\":[1,29],\"300\":[1,6],\"301\":[1,16],\"302\":[null,null,1],\"303\":[1,28],\"304\":[1,22],\"305\":[null,null,1],\"306\":[1,69],\"307\":[1,7],\"308\":[1,54],\"309\":[null,null,1],\"310\":[null,null,1],\"311\":[1],\"312\":[1,43],\"313\":[3,67],\"314\":[7,23],\"315\":[1,39],\"316\":[1,9],\"317\":[null,null,1],\"318\":[null,null,1],\"319\":[1],\"320\":[1,34],\"321\":[1,24],\"322\":[1,18],\"323\":[1,23],\"324\":[3,67],\"325\":[1,36],\"326\":[1,68],\"327\":[null,null,1],\"328\":[null,null,1],\"329\":[1,18],\"330\":[1,83],\"331\":[1,71],\"332\":[1,54],\"333\":[1,61],\"334\":[null,null,1],\"335\":[null,null,1],\"336\":[1,37],\"337\":[1,11],\"338\":[1,26],\"339\":[1,31],\"340\":[1,35],\"341\":[1,8],\"342\":[1,15],\"343\":[2,22],\"344\":[2,30],\"345\":[1,38],\"346\":[1,30],\"347\":[3,33],\"348\":[1,22],\"349\":[3,49],\"350\":[1,39],\"351\":[1,47],\"352\":[null,null,1],\"353\":[null,null,1],\"354\":[1],\"355\":[1,43],\"356\":[1,41],\"357\":[1,49],\"358\":[1,14],\"359\":[1,59],\"360\":[1,24],\"361\":[1,28],\"362\":[1,22],\"363\":[null,null,1],\"364\":[null,null,1],\"365\":[1],\"366\":[1,5],\"367\":[1,32],\"368\":[1,103],\"369\":[1,13],\"370\":[1,13],\"371\":[1,19],\"372\":[1,50],\"373\":[1,9],\"374\":[1,28],\"375\":[1,28],\"376\":[1,27],\"377\":[1,19],\"378\":[1,19],\"379\":[1,50],\"380\":[1,26],\"381\":[1,41],\"382\":[1,26],\"383\":[1,41],\"384\":[1,44],\"385\":[1,51],\"386\":[1,49],\"387\":[1,19],\"388\":[1,14],\"389\":[7,18],\"390\":[2,9],\"391\":[3,14],\"392\":[1,5],\"393\":[1,13],\"394\":[1,16],\"395\":[3,23],\"396\":[null,null,1],\"397\":[null,null,1],\"398\":[1,17],\"399\":[1,21],\"400\":[1,16],\"401\":[1,25],\"402\":[1,32],\"403\":[1,34],\"404\":[1,14],\"405\":[1],\"406\":[5,123],\"407\":[2,63],\"408\":[1,25],\"409\":[1,37],\"410\":[null,null,1],\"411\":[null,null,1],\"412\":[1,7],\"413\":[1,27],\"414\":[1,44],\"415\":[1,32],\"416\":[1,45],\"417\":[1,5],\"418\":[1,8],\"419\":[null,null,1],\"420\":[null,null,1],\"421\":[1,71],\"422\":[1,24],\"423\":[1,29],\"424\":[null,null,1],\"425\":[null,null,1],\"426\":[2],\"427\":[1,28],\"428\":[1,123],\"429\":[1,62],\"430\":[null,null,1],\"431\":[null,null,1],\"432\":[1,7],\"433\":[1,6],\"434\":[1,5],\"435\":[1,4],\"436\":[1,15],\"437\":[1,9],\"438\":[1,4],\"439\":[1,6],\"440\":[1,10],\"441\":[1,18],\"442\":[1,6],\"443\":[1],\"444\":[1,6],\"445\":[1,19],\"446\":[null,null,1],\"447\":[null,null,1],\"448\":[2,13],\"449\":[1,215],\"450\":[1,26],\"451\":[null,null,1],\"452\":[null,null,1],\"453\":[1],\"454\":[1,26],\"455\":[1,13],\"456\":[1,7],\"457\":[1,21],\"458\":[1,33],\"459\":[1,30],\"460\":[1,25],\"461\":[1,51],\"462\":[null,null,1],\"463\":[null,null,1],\"464\":[1],\"465\":[1,39],\"466\":[1,52],\"467\":[1,23],\"468\":[null,null,1],\"469\":[null,null,1],\"470\":[1,7],\"471\":[1,10],\"472\":[1,19],\"473\":[4,18],\"474\":[4,44],\"475\":[1,14],\"476\":[null,null,1],\"477\":[null,null,1],\"478\":[1,21],\"479\":[1,89],\"480\":[1,80],\"481\":[null,null,1],\"482\":[null,null,1],\"483\":[1,27],\"484\":[1,9],\"485\":[1,58],\"486\":[1,44],\"487\":[4,56],\"488\":[3,88],\"489\":[1,26],\"490\":[null,null,1],\"491\":[null,null,1],\"492\":[1,7],\"493\":[1,5],\"494\":[1,12],\"495\":[1,12],\"496\":[1,75],\"497\":[1,40],\"498\":[null,null,1],\"499\":[null,null,1],\"500\":[1,99],\"501\":[null,null,1],\"502\":[null,null,1],\"503\":[1,6],\"504\":[1,51],\"505\":[1,87],\"506\":[null,null,1],\"507\":[null,null,1],\"508\":[1,36],\"509\":[1,5],\"510\":[1,26],\"511\":[1,22],\"512\":[1,24],\"513\":[1,26],\"514\":[1,15],\"515\":[null,null,1],\"516\":[null,null,1],\"517\":[2,31],\"518\":[1,4],\"519\":[1,66],\"520\":[1,95],\"521\":[2,7],\"522\":[1,15],\"523\":[null,null,1],\"524\":[null,null,1],\"525\":[1,31],\"526\":[1,85],\"527\":[1,86],\"528\":[null,null,1],\"529\":[null,null,1],\"530\":[1,50],\"531\":[1,7],\"532\":[1,38],\"533\":[1,54],\"534\":[1,9],\"535\":[null,null,1],\"536\":[null,null,1],\"537\":[1,49],\"538\":[1,160],\"539\":[1,27],\"540\":[null,null,1],\"541\":[null,null,1],\"542\":[1,62],\"543\":[1,14],\"544\":[null,null,1],\"545\":[null,null,1],\"546\":[1,16],\"547\":[1,14],\"548\":[1,10],\"549\":[1,66],\"550\":[2,29],\"551\":[1,12],\"552\":[null,null,1],\"553\":[null,null,1],\"554\":[1,10],\"555\":[1,46],\"556\":[4,35],\"557\":[1,5],\"558\":[2,11],\"559\":[1,32],\"560\":[1,44],\"561\":[null,null,1],\"562\":[null,null,1],\"563\":[1,16],\"564\":[1,12],\"565\":[1,15],\"566\":[1,31],\"567\":[1,28],\"568\":[1,2],\"569\":[3,17],\"570\":[1,39],\"571\":[1,29],\"572\":[1,18],\"573\":[2,34],\"574\":[2,14],\"575\":[1,55],\"576\":[null,null,1],\"577\":[null,null,1],\"578\":[1,13],\"579\":[1,28],\"580\":[1,24],\"581\":[1,32],\"582\":[1,27],\"583\":[1,27],\"584\":[1,27],\"585\":[null,null,1],\"586\":[null,null,1],\"587\":[1,62],\"588\":[1,69],\"589\":[1,32],\"590\":[null,null,1],\"591\":[null,null,1],\"592\":[1,21],\"593\":[1,11],\"594\":[2,38],\"595\":[1,56],\"596\":[2,54],\"597\":[1,28],\"598\":[1,27],\"599\":[1,27],\"600\":[1,26],\"601\":[1,26],\"602\":[1,4],\"603\":[1,30],\"604\":[1,23],\"605\":[1,28],\"606\":[1,54],\"607\":[1,32],\"608\":[1,54],\"609\":[1,47],\"610\":[null,null,1],\"611\":[null,null,1],\"612\":[1,85],\"613\":[1,4],\"614\":[1,19],\"615\":[1,30],\"616\":[1,39],\"617\":[null,null,1],\"618\":[null,null,1],\"619\":[1],\"620\":[1,45],\"621\":[1,42],\"622\":[1,21],\"623\":[null,null,1],\"624\":[null,null,1],\"625\":[4],\"626\":[1,47],\"627\":[1,60],\"628\":[1,10],\"629\":[null,null,1],\"630\":[null,null,1],\"631\":[1,8],\"632\":[1,22],\"633\":[1,74],\"634\":[1,75],\"635\":[1,76],\"636\":[null,null,1],\"637\":[null,null,1],\"638\":[1],\"639\":[1,19],\"640\":[1,10],\"641\":[1,2],\"642\":[1,2],\"643\":[1,5],\"644\":[1,12],\"645\":[1,48],\"646\":[1,46],\"647\":[1,7],\"648\":[1,5],\"649\":[1,13],\"650\":[1,11],\"651\":[1,11],\"652\":[3,9],\"653\":[1,13],\"654\":[1,16],\"655\":[1,10],\"656\":[1,1],\"657\":[1,8],\"658\":[1,10],\"659\":[1,24],\"660\":[1,7],\"661\":[1,5],\"662\":[1,80],\"663\":[1,20],\"664\":[1,13],\"665\":[1,17],\"666\":[1,4],\"667\":[1,11],\"668\":[2,23],\"669\":[3,25],\"670\":[2,35],\"671\":[2,27],\"672\":[2,30],\"673\":[null,null,1],\"674\":[null,null,1],\"675\":[1,37],\"676\":[1,4],\"677\":[1,10],\"678\":[1,10],\"679\":[1,2],\"680\":[1,14],\"681\":[1,13],\"682\":[1,6],\"683\":[1,8],\"684\":[1,28],\"685\":[1,59],\"686\":[1,8],\"687\":[1,16],\"688\":[1,9],\"689\":[1,53],\"690\":[1,36],\"691\":[null,null,1],\"692\":[null,null,1],\"693\":[1,6],\"694\":[null,null,1],\"695\":[null,null,1],\"696\":[1,93],\"697\":[null,null,1],\"698\":[null,null,1],\"699\":[1,47],\"700\":[null,null,1],\"701\":[null,null,1],\"702\":[1,44],\"703\":[null,null,1],\"704\":[null,null,1],\"705\":[1,3],\"706\":[null,null,1],\"707\":[null,null,1],\"708\":[1,13],\"709\":[1,13],\"710\":[null,null,1],\"711\":[null,null,1],\"712\":[1,2],\"713\":[1,4],\"714\":[1,21],\"715\":[null,null,1],\"716\":[null,null,1],\"717\":[1,30],\"718\":[1,5],\"719\":[1,2],\"720\":[null,null,1],\"721\":[null,null,1],\"722\":[1,7],\"723\":[1,16],\"724\":[null,null,1],\"725\":[null,null,1],\"726\":[1,2],\"727\":[1,7],\"728\":[1,7],\"729\":[null,null,1],\"730\":[null,null,1],\"731\":[1,29],\"732\":[1,58],\"733\":[1,22],\"734\":[null,null,1],\"735\":[null,null,1],\"736\":[1,2],\"737\":[1,42],\"738\":[1,3],\"739\":[null,null,1],\"740\":[null,null,1],\"741\":[1,5],\"742\":[null,null,1],\"743\":[null,null,1],\"744\":[1,4],\"745\":[1,3],\"746\":[1,2],\"747\":[1,4],\"748\":[1,8],\"749\":[null,null,1],\"750\":[null,null,1],\"751\":[4],\"752\":[3,43],\"753\":[3,83],\"754\":[1,22],\"755\":[3],\"756\":[1,10],\"757\":[1,19],\"758\":[1,7],\"759\":[2,41],\"760\":[2,67],\"761\":[null,null,1],\"762\":[null,null,1],\"763\":[2,10],\"764\":[1,13],\"765\":[1,8],\"766\":[null,null,1],\"767\":[null,null,1],\"768\":[1,11],\"769\":[1,82],\"770\":[1,129],\"771\":[null,null,1],\"772\":[null,null,1],\"773\":[1,19],\"774\":[1,8],\"775\":[2,18],\"776\":[1,7],\"777\":[1,9],\"778\":[1,7],\"779\":[1,8],\"780\":[2,12],\"781\":[2,4],\"782\":[1,11],\"783\":[1,10],\"784\":[1,9],\"785\":[null,null,1],\"786\":[null,null,1],\"787\":[1,4],\"788\":[1,4],\"789\":[1,16],\"790\":[1,10],\"791\":[1,7],\"792\":[1,62],\"793\":[1,48],\"794\":[null,null,1],\"795\":[null,null,1],\"796\":[1,40],\"797\":[1,20],\"798\":[null,null,1],\"799\":[null,null,1],\"800\":[1,8],\"801\":[1,15],\"802\":[null,null,1],\"803\":[null,null,1],\"804\":[1,4],\"805\":[1,7],\"806\":[1,4],\"807\":[1,4],\"808\":[null,null,1],\"809\":[null,null,1],\"810\":[1,3],\"811\":[2,115],\"812\":[1,39],\"813\":[1,34],\"814\":[null,null,1],\"815\":[null,null,1],\"816\":[1,11],\"817\":[1,11],\"818\":[1,23],\"819\":[1,18],\"820\":[null,null,1],\"821\":[null,null,1],\"822\":[1,10],\"823\":[1],\"824\":[1,19],\"825\":[1,18],\"826\":[1,14],\"827\":[1,6],\"828\":[1,50],\"829\":[1,40],\"830\":[1,10],\"831\":[1,3],\"832\":[1,28],\"833\":[1,3],\"834\":[1,7],\"835\":[1,17],\"836\":[1,28],\"837\":[1,20],\"838\":[1,13],\"839\":[1,15],\"840\":[1,17],\"841\":[null,null,1],\"842\":[null,null,1],\"843\":[1,5],\"844\":[1,32],\"845\":[1,27],\"846\":[1,11],\"847\":[1,13],\"848\":[1,23],\"849\":[1,13],\"850\":[4,16],\"851\":[1,34],\"852\":[1,3],\"853\":[1],\"854\":[null,null,1],\"855\":[null,null,3],\"856\":[1,5],\"857\":[1,4],\"858\":[1,59],\"859\":[1,24],\"860\":[1,5],\"861\":[1,11],\"862\":[1,22],\"863\":[1,9],\"864\":[1,10],\"865\":[1,19],\"866\":[1,28],\"867\":[1,13],\"868\":[2,15],\"869\":[2,13],\"870\":[1,15],\"871\":[1,20],\"872\":[1],\"873\":[null,null,1],\"874\":[null,null,3],\"875\":[1],\"876\":[1],\"877\":[1,7],\"878\":[1,29],\"879\":[1,31],\"880\":[1,10],\"881\":[1,28],\"882\":[1,17],\"883\":[1,18],\"884\":[1,42],\"885\":[1,26],\"886\":[1,27],\"887\":[1],\"888\":[1,8],\"889\":[1],\"890\":[2,31],\"891\":[null,null,1],\"892\":[1,5],\"893\":[1,7],\"894\":[1,4],\"895\":[1,161],\"896\":[1,10],\"897\":[null,null,1],\"898\":[null,null,1],\"899\":[1],\"900\":[null,null,1],\"901\":[null,null,1],\"902\":[1],\"903\":[null,null,1],\"904\":[null,null,2],\"905\":[1,5],\"906\":[1,32],\"907\":[1,34],\"908\":[1,29],\"909\":[1,68],\"910\":[1,6],\"911\":[1,14],\"912\":[null,null,1],\"913\":[null,null,3],\"914\":[1,8],\"915\":[1,5],\"916\":[1,55],\"917\":[1,46],\"918\":[1,52],\"919\":[1,4],\"920\":[1,15],\"921\":[1],\"922\":[1],\"923\":[null,null,1],\"924\":[null,null,3],\"925\":[1,43],\"926\":[1,31],\"927\":[1,13],\"928\":[3,119],\"929\":[null,null,1],\"930\":[null,null,1],\"931\":[1,29],\"932\":[1,102],\"933\":[4,22],\"934\":[3,10],\"935\":[4,13],\"936\":[1,33],\"937\":[1,30],\"938\":[3,7],\"939\":[1,23],\"940\":[1,13],\"941\":[3,72],\"942\":[3,58],\"943\":[null,null,1],\"944\":[null,null,1],\"945\":[3,21],\"946\":[1,71],\"947\":[1,23],\"948\":[1,48],\"949\":[1,52],\"950\":[null,null,1],\"951\":[null,null,1],\"952\":[3,9],\"953\":[3,48],\"954\":[1,47],\"955\":[3,31],\"956\":[1,36],\"957\":[null,null,1],\"958\":[null,null,1],\"959\":[1],\"960\":[null,null,1],\"961\":[1],\"962\":[null,null,2],\"963\":[1],\"964\":[null,null,1],\"965\":[3],\"966\":[null,null,1],\"967\":[3,13],\"968\":[1,16],\"969\":[1,13],\"970\":[1,32],\"971\":[1,7],\"972\":[1,19],\"973\":[1,14],\"974\":[null,null,1],\"975\":[1],\"976\":[1],\"977\":[1,24],\"978\":[1,23],\"979\":[1],\"980\":[1,5],\"981\":[1,16],\"982\":[null,null,1],\"983\":[1,16],\"984\":[1,15],\"985\":[1,15],\"986\":[1,36],\"987\":[null,null,1],\"988\":[1],\"989\":[null,null,1],\"990\":[1],\"991\":[1,8],\"992\":[1,21],\"993\":[1,15],\"994\":[1,17],\"995\":[1,12],\"996\":[1,11],\"997\":[1,17],\"998\":[1,14],\"999\":[1,7],\"1000\":[null,null,1],\"1001\":[null,null,1],\"1002\":[1],\"1003\":[null,null,1],\"1004\":[1],\"1005\":[null,null,1],\"1006\":[1],\"1007\":[null,null,1],\"1008\":[1,35],\"1009\":[1,8],\"1010\":[1,10],\"1011\":[1,19],\"1012\":[1,9],\"1013\":[1,14],\"1014\":[null,null,1],\"1015\":[1,3],\"1016\":[1],\"1017\":[1],\"1018\":[1],\"1019\":[2],\"1020\":[1]},\"averageFieldLength\":[1.2329683458398881,27.133269398233228,0.7863496039927853],\"storedFields\":{\"0\":{\"h\":\"介绍页\"},\"1\":{\"h\":\"H5\"},\"2\":{\"c\":[\"HTNL\"]},\"3\":{\"h\":\"HTML5\"},\"4\":{\"c\":[\"h5\"]},\"5\":{\"h\":\"CSS 滚动视差效果\",\"t\":[\"视差滚动（Parallax Scrolling）是指多层背景以不同的速度移动，形成立体的运动效果，带来非常出色的视觉体验\",\"我们可以把网页解刨成：背景层、内容层、悬浮层 当滚动鼠标滑轮的时候，各个图层以不同的速度移动，形成视觉差的效果\"]},\"6\":{\"h\":\"实现\",\"t\":[\"使用css形式实现视觉差滚动效果的方式有：\",\"background-attachment\",\"transform:translate3D\"]},\"7\":{\"h\":\"background-attachment\",\"t\":[\"作用是设置背景图像是否固定或者随着页面的其余部分滚动 值分别有如下：\",\"scroll：默认值，背景图像会随着页面其余部分的滚动而移动\",\"fixed：当页面的其余部分滚动时，背景图像不会移动\",\"inherit：继承父元素background-attachment属性的值\",\"完成滚动视觉差就需要将background-attachment属性设置为fixed，让背景相对于视口固定。即使一个元素有滚动机制，背景也不会随着元素的内容而滚动\",\"也就是说，背景一开始就已经被固定在初始的位置\",\"核心的css代码如下：\",\"section { height: 100vh; } .g-img { background-image: url(...); background-attachment: fixed; background-size: cover; background-position: center center; }\",\"整体例子如下：\",\"<style> div { height: 100vh; background: rgba(0, 0, 0, .7); color: #fff; line-height: 100vh; text-align: center; font-size: 20vh; } .a-img1 { background-image: url(https://images.pexels.com/photos/1097491/pexels-photo-1097491.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; } .a-img2 { background-image: url(https://images.pexels.com/photos/2437299/pexels-photo-2437299.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; } .a-img3 { background-image: url(https://images.pexels.com/photos/1005417/pexels-photo-1005417.jpeg); background-attachment: fixed; background-size: cover; background-position: center center; } </style> <div class=\\\"a-text\\\">1</div> <div class=\\\"a-img1\\\">2</div> <div class=\\\"a-text\\\">3</div> <div class=\\\"a-img2\\\">4</div> <div class=\\\"a-text\\\">5</div> <div class=\\\"a-img3\\\">6</div> <div class=\\\"a-text\\\">7</div>\"]},\"8\":{\"h\":\"transform:translate3D\",\"t\":[\"同样，让我们先来看一下两个概念transform和perspective：\",\"transform: css3 属性，可以对元素进行变换(2d/3d)，包括平移 translate,旋转 rotate,缩放 scale,等等\",\"perspective: css3 属性，当元素涉及 3d 变换时，perspective 可以定义我们眼睛看到的 3d 立体效果，即空间感 3D视角示意图如下所示：\",\"alt text\",\"举个例子：\",\"<style> html { overflow: hidden; height: 100% } body { /* 视差元素的父级需要3D视角 */ perspective: 1px; transform-style: preserve-3d; height: 100%; overflow-y: scroll; overflow-x: hidden; } #app{ width: 100vw; height:200vh; background:skyblue; padding-top:100px; } .one{ width:500px; height:200px; background:#409eff; transform: translateZ(0px); margin-bottom: 50px; } .two{ width:500px; height:200px; background:#67c23a; transform: translateZ(-1px); margin-bottom: 150px; } .three{ width:500px; height:200px; background:#e6a23c; transform: translateZ(-2px); margin-bottom: 150px; } </style> <div id=\\\"app\\\"> <div class=\\\"one\\\">one</div> <div class=\\\"two\\\">two</div> <div class=\\\"three\\\">three</div> </div>\",\"而这种方式实现视觉差动的原理如下：\",\"容器设置上 transform-style: preserve-3d 和 perspective: xpx，那么处于这个容器的子元素就将位于3D空间中，\",\"子元素设置不同的 transform: translateZ()，这个时候，不同元素在 3D Z轴方向距离屏幕（我们的眼睛）的距离也就不一样\",\"滚动滚动条，由于子元素设置了不同的 transform: translateZ()，那么他们滚动的上下距离 translateY 相对屏幕（我们的眼睛），也是不一样的，这就达到了滚动视差的效果\"]},\"9\":{\"c\":[\"CSS\"]},\"10\":{\"h\":\"动画\",\"t\":[\"CSS动画（CSS Animations）是为层叠样式表建议的允许可扩展标记语言（XML）元素使用CSS的动画的模块\",\"即指元素从一种样式逐渐过渡为另一种样式的过程\",\"常见的动画效果有很多，如平移、旋转、缩放等等，复杂动画则是多个简单动画的组合\",\"css实现动画的方式，有如下几种：\",\"transition 实现渐变动画\",\"transform 转变动画\",\"animation 实现自定义动画\"]},\"11\":{\"h\":\"transition 实现渐变动画\",\"t\":[\"transition的属性如下：\",\"property:填写需要变化的css属性\",\"duration:完成过渡效果需要的时间单位(s或者ms)\",\"timing-function:完成效果的速度曲线\",\"delay: 动画效果的延迟触发时间 其中timing-function的值有如下：\",\"值\",\"描述\",\"linear\",\"匀速（等于 cubic-bezier(0,0,1,1)）\",\"ease\",\"从慢到快再到慢（cubic-bezier(0.25,0.1,0.25,1)）\",\"ease-in\",\"慢慢变快（等于 cubic-bezier(0.42,0,1,1)）\",\"ease-out\",\"慢慢变慢（等于 cubic-bezier(0,0,0.58,1)）\",\"ease-in-out\",\"先变快再到慢（等于 cubic-bezier(0.42,0,0.58,1)），渐显渐隐效果\",\"cubic-bezier(n,n,n,n)\",\"在 cubic-bezier 函数中定义自己的值。可能的值是 0 至 1 之间的数值\",\"注意：并不是所有的属性都能使用过渡的，如display:none<->display:block\",\"举个例子，实现鼠标移动上去发生变化动画效果\",\"<style> .base { width: 100px; height: 100px; display: inline-block; background-color: #0EA9FF; border-width: 5px; border-style: solid; border-color: #5daf34; transition-property: width, height, background-color, border-width; transition-duration: 2s; transition-timing-function: ease-in; transition-delay: 500ms; } /*简写*/ /*transition: all 2s ease-in 500ms;*/ .base:hover { width: 200px; height: 200px; background-color: #5daf34; border-width: 10px; border-color: #3a8ee6; } </style> <div class=\\\"base\\\"></div>\"]},\"12\":{\"h\":\"transform 转变动画\",\"t\":[\"包含四个常用的功能：\",\"translate：位移\",\"scale：缩放\",\"rotate：旋转\",\"skew：倾斜 一般配合transition过度使用\",\"重要\",\"transform不支持inline元素，使用前把它变成block\",\"举个例子\",\"<style> .base { width: 100px; height: 100px; display: inline-block; background-color: #0EA9FF; border-width: 5px; border-style: solid; border-color: #5daf34; transition-property: width, height, background-color, border-width; transition-duration: 2s; transition-timing-function: ease-in; transition-delay: 500ms; } .base2 { transform: none; transition-property: transform; transition-delay: 5ms; } .base2:hover { transform: scale(0.8, 1.5) rotate(35deg) skew(5deg) translate(15px, 25px); } </style> <div class=\\\"base base2\\\"></div>\",\"可以看到盒子发生了旋转，倾斜，平移，放大\"]},\"13\":{\"h\":\"animation 实现自定义动画\",\"t\":[\"animation是由 8 个属性的简写，分别如下：\",\"属性 描述 属性值 animation-duration 指定动画完成一个周期所需要时间，单位秒（s）或毫秒（ms），默认是 0 animation-timing-function 指定动画计时函数，即动画的速度曲线，默认是 \\\"ease\\\" linear、ease、ease-in、ease-out、ease-in-out animation-delay 指定动画延迟时间，即动画何时开始，默认是 0 animation-iteration-count 指定动画播放的次数，默认是 1 animation-direction 指定动画播放的方向 默认是 normal normal、reverse、alternate、alternate-reverse animation-fill-mode 指定动画填充模式。默认是 none forwards、backwards、both animation-play-state 指定动画播放状态，正在运行或暂停。默认是 running running、pauser animation-name 指定 @Keyframes 动画的名称 CSS 动画只需要定义一些关键的帧，而其余的帧，浏览器会根据计时函数插值计算出来，\",\"通过 @keyframes 来定义关键帧\",\"因此，如果我们想要让元素旋转一圈，只需要定义开始和结束两帧即可：\",\"@keyframes rotate{ from{ transform: rotate(0deg); } to{ transform: rotate(360deg); } }\",\"from 表示最开始的那一帧，to 表示结束时的那一帧\",\"也可以使用百分比刻画生命周期\",\"@keyframes rotate{ 0%{ transform: rotate(0deg); } 50%{ transform: rotate(180deg); } 100%{ transform: rotate(360deg); } }\",\"定义好了关键帧后，下来就可以直接用它了：\",\"animation: rotate 2s;\"]},\"14\":{\"c\":[\"CSS\"]},\"15\":{\"h\":\"盒子模型\",\"t\":[\"当对一个文档进行布局（layout）的时候，浏览器的渲染引擎会根据标准之一的 CSS 基础框盒模型（CSS basic box model），将所有元素表示为一个个矩形的盒子（box）\",\"一个盒子由四个部分组成：content、padding、border、margin\",\"content，即实际内容，显示文本和图像\",\"boreder，即边框，围绕元素内容的内边距的一条或多条线，由粗细、样式、颜色三部分组成\",\"padding，即内边距，清除内容周围的区域，内边距是透明的，取值不能为负，受盒子的background属性影响\",\"margin，即外边距，在元素外创建额外的空白，空白通常指不能放其他元素的区域 上述是一个从二维的角度观察盒子，下面再看看看三维图：\",\"<style> .box { width: 200px; height: 100px; padding: 20px; } </style> <div class=\\\"box\\\"> 盒子模型 </div>\",\"当我们在浏览器查看元素时，却发现元素的大小变成了240px\",\"这是因为，在CSS中，盒子模型可以分成：\",\"W3C 标准盒子模型\",\"IE 怪异盒子模型 默认情况下，盒子模型为W3C 标准盒子模型\"]},\"16\":{\"h\":\"标准盒子模型\",\"t\":[\"标准盒子模型，是浏览器默认的盒子模型\",\"下面看看标准盒子模型的模型图：\",\"从上图可以看到：\",\"盒子总宽度 = width + padding + border + margin;\",\"盒子总高度 = height + padding + border + margin 也就是，width/height 只是内容高度，不包含 padding 和 border 值 所以上面问题中，设置width为200px，但由于存在padding，但实际上盒子的宽度有240px\"]},\"17\":{\"h\":\"IE 怪异盒子模型\",\"t\":[\"同样看看IE 怪异盒子模型的模型图： 从上图可以看到：\",\"盒子总宽度 = width + margin;\",\"盒子总高度 = height + margin; 也就是，width/height 包含了 padding 和 border 值\"]},\"18\":{\"h\":\"Box-sizing\",\"t\":[\"CSS 中的 box-sizing 属性定义了引擎应该如何计算一个元素的总宽度和总高度 语法：\",\"box-sizing: content-box|border-box|inherit:\",\"content-box 默认值，元素的 width/height 不包含padding，border，与标准盒子模型表现一致\",\"border-box 元素的 width/height 包含 padding，border，与怪异盒子模型表现一致\",\"inherit 指定 box-sizing 属性的值，应该从父元素继承 回到上面的例子里，设置盒子为 border-box 模型\",\"<style> .box { width: 200px; height: 100px; padding: 20px; box-sizing: border-box; } </style> <div class=\\\"box\\\"> 盒子模型 </div>\",\"这时候，就可以发现盒子的所占据的宽度为200px\"]},\"19\":{\"h\":\"BFC\",\"t\":[\"BFC（Block Formatting Context），即块级格式化上下文，它是页面中的一块渲染区域，并且有一套属于自己的渲染规则：\",\"内部的盒子会在垂直方向上一个接一个的放置\",\"对于同一个BFC的俩个相邻的盒子的margin会发生重叠，与方向无关。\",\"每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此\",\"BFC的区域不会与float的元素区域重叠\",\"计算BFC的高度时，浮动子元素也参与计算\",\"BFC就是页面上的一个隔离的独立容器，容器里面的子元素不会影响到外面的元素，反之亦然 BFC目的是形成一个相对于外界完全独立的空间，让内部的子元素不会影响到外部的元素\"]},\"20\":{\"h\":\"触发条件\",\"t\":[\"触发BFC的条件包含不限于：\",\"根元素，即HTML元素\",\"浮动元素：float值为left、right\",\"overflow值不为 visible，为 auto、scroll、hidden\",\"display的值为inline-block、inltable-cell、table-caption、table、inline-table、flex、inline-flex、grid、inline-grid\",\"position的值为absolute或fixed\"]},\"21\":{\"h\":\"应用场景\",\"t\":[\"利用BFC的特性，我们将BFC应用在以下场景：\",\"防止margin重叠（塌陷） 同一个BFC的俩个相邻的盒子的margin会发生重叠\",\"清除内部浮动 计算BFC的高度时，浮动子元素也参与计算\",\"自适应多栏布局 每个元素的左外边距与包含块的左边界相接触（从左到右），即使浮动元素也是如此\"]},\"22\":{\"c\":[\"CSS\"]},\"23\":{\"h\":\"水平垂直居中\",\"t\":[\"具体是两种情况\",\"居中元素（子元素）的宽高已知\",\"居中元素宽高未知\"]},\"24\":{\"h\":\"实现\",\"t\":[\"实现元素水平垂直居中的方式：\",\"利用定位+margin:auto\",\"利用定位+margin:负值\",\"利用定位+transform\",\"table布局\",\"flex布局\",\"grid布局\"]},\"25\":{\"h\":\"利用定位+margin:auto\",\"t\":[\"<style> .father{ width:500px; height:300px; border:1px solid #0a3b98; position: relative; } .son{ width:100px; height:40px; background: #f0a238; position: absolute; top:0; left:0; right:0; bottom:0; margin:auto; } </style> <div class=\\\"father\\\"> <div class=\\\"son\\\"></div> </div>\",\"父级设置为相对定位，子级绝对定位 ，并且四个定位属性的值都设置了0，那么这时候如果子级没有设置宽高，则会被拉开到和父级一样宽高\",\"这里子元素设置了宽高，所以宽高会按照我们的设置来显示，但是实际上子级的虚拟占位已经撑满了整个父级，这时候再给它一个margin：auto它就可以上下左右都居中了\"]},\"26\":{\"h\":\"利用定位+margin:负值\",\"t\":[\"绝大多数情况下，设置父元素为相对定位， 子元素移动自身50%实现水平垂直居中\",\"<style> .father { position: relative; width: 200px; height: 200px; background: skyblue; } .son { position: absolute; top: 50%; left: 50%; margin-left:-50px; margin-top:-50px; width: 100px; height: 100px; background: red; } </style> <div class=\\\"father\\\"> <div class=\\\"son\\\"></div> </div>\"]},\"27\":{\"h\":\"利用定位+transform\",\"t\":[\"实现代码如下：\",\"<style> .father { position: relative; width: 200px; height: 200px; background: skyblue; } .son { position: absolute; top: 50%; left: 50%; transform: translate(-50%,-50%); width: 100px; height: 100px; background: red; } </style> <div class=\\\"father\\\"> <div class=\\\"son\\\"></div> </div>\",\"translate(-50%, -50%)将会将元素位移自己宽度和高度的-50%\",\"这种方法其实和最上面被否定掉的margin负值用法一样，可以说是margin负值的替代方案，并不需要知道自身元素的宽高\"]},\"28\":{\"h\":\"table布局\",\"t\":[\"设置父元素为display:table-cell，子元素设置 display: inline-block。利用vertical和text-align可以让所有的行内块级元素水平垂直居中\",\"<style> .father { display: table-cell; width: 200px; height: 200px; background: skyblue; vertical-align: middle; text-align: center; } .son { display: inline-block; width: 100px; height: 100px; background: red; } </style> <div class=\\\"father\\\"> <div class=\\\"son\\\"></div> </div>\"]},\"29\":{\"h\":\"flex弹性布局\",\"t\":[\"还是看看实现的整体代码：\",\"<style> .father { display: flex; justify-content: center; align-items: center; width: 200px; height: 200px; background: skyblue; } .son { width: 100px; height: 100px; background: red; } </style> <div class=\\\"father\\\"> <div class=\\\"son\\\"></div> </div>\",\"css3中了flex布局，可以非常简单实现垂直水平居中\",\"这里可以简单看看flex布局的关键属性作用：\",\"display: flex时，表示该容器内部的元素将按照flex进行布局\",\"align-items: center表示这些元素将相对于本容器水平居中\",\"justify-content: center也是同样的道理垂直居中\"]},\"30\":{\"h\":\"grid网格布局\",\"t\":[\"<style> .father { display: grid; align-items:center; justify-content: center; width: 200px; height: 200px; background: skyblue; } .son { width: 10px; height: 10px; border: 1px solid red } </style> <div class=\\\"father\\\"> <div class=\\\"son\\\"></div> </div>\",\"gird网格布局和flex弹性布局都简单粗暴\"]},\"31\":{\"h\":\"根据元素标签的性质，可以分为：\",\"t\":[\"内联元素居中布局\",\"块级元素居中布局\"]},\"32\":{\"h\":\"内联元素居中布局\",\"t\":[\"水平居中\",\"行内元素可设置：text-align: center\",\"flex布局设置父元素：display: flex; justify-content: center 垂直居中\",\"单行文本父元素确认高度：height === line-height\",\"多行文本父元素确认高度：disaply: table-cell; vertical-align: middle\"]},\"33\":{\"h\":\"块级元素居中布局\",\"t\":[\"水平居中\",\"定宽: margin: 0 auto\",\"绝对定位+left:50%+margin:负自身一半 垂直居中\",\"position: absolute设置left、top、margin-left、margin-top(定高)\",\"display: table-cell\",\"transform: translate(x, y)\",\"flex(不定高，不定宽)\",\"grid(不定高，不定宽)，兼容性相对比较差\"]},\"34\":{\"c\":[\"CSS\"]},\"35\":{\"h\":\"选择器\",\"t\":[\"CSS选择器是CSS规则的第一部分\",\"它是元素和其他部分组合起来告诉浏览器哪个HTML元素应当是被选为应用规则中的CSS属性值的方式\",\"选择器所选择的元素，叫做“选择器的对象”\",\"我们从一个Html结构开始\",\"<div id=\\\"box\\\"> <div class=\\\"one\\\"> <p class=\\\"one_1\\\"> </p > <p class=\\\"one_1\\\"> </p > </div> <div class=\\\"two\\\"></div> <div class=\\\"two\\\"></div> <div class=\\\"two\\\"></div> </div>\",\"关于css属性选择器常用的有：\",\"id选择器（#box），选择id为box的元素\",\"类选择器（.one），选择类名为one的所有元素\",\"标签选择器（div），选择标签为div的所有元素\",\"后代选择器（#box div），选择id为box元素内部所有的div元素\",\"子选择器（.one>one_1），选择父元素为.one的所有.one_1的元素\",\"相邻同胞选择器（.one+.two），选择紧接在.one之后的所有.two元素\",\"群组选择器（div,p），选择div、p的所有元素\",\"还有一些使用频率相对没那么多的选择器：\",\"伪类选择器\",\":link ：选择未被访问的链接 :visited：选取已被访问的链接 :active：选择活动链接 :hover ：鼠标指针浮动在上面的元素 :focus ：选择具有焦点的 :first-child：父元素的首个子元素\",\"伪元素选择器\",\":first-letter ：用于选取指定选择器的首字母 :first-line ：选取指定选择器的首行 :before : 选择器在被选元素的内容前面插入内容 :after : 选择器在被选元素的内容后面插入内容\",\"属性选择器\",\"[attribute] 选择带有attribute属性的元素 [attribute=value] 选择所有使用attribute=value的元素 [attribute~=value] 选择attribute属性包含value的元素 [attribute|=value]：选择attribute属性以value开头的元素\",\"在CSS3中新增的选择器有如下：\",\"层次选择器（p~ul），选择前面有p元素的每个ul元素\",\"伪类选择器\",\":first-of-type 父元素的首个元素 :last-of-type 父元素的最后一个元素 :only-of-type 父元素的特定类型的唯一子元素 :only-child 父元素中唯一子元素 :nth-child(n) 选择父元素中第N个子元素 :nth-last-of-type(n) 选择父元素中第N个子元素，从后往前 :last-child 父元素的最后一个元素 :root 设置HTML文档 :empty 指定空的元素 :enabled 选择被禁用元素 :disabled 选择被禁用元素 :checked 选择选中的元素 :not(selector) 选择非 <selector> 元素的所有元素\",\"属性选择器\",\"[attribute*=value]：选择attribute属性值包含value的所有元素 [attribute^=value]：选择attribute属性开头为value的所有元素 [attribute$=value]：选择attribute属性结尾为value的所有元素\"]},\"36\":{\"h\":\"优先级\",\"t\":[\"相信大家对CSS选择器的优先级都不陌生：\",\"内联 > ID选择器 > 类选择器 > 标签选择器\",\"到具体的计算层⾯，优先级是由 A 、B、C、D 的值来决定的，其中它们的值计算规则如下：\",\"如果存在内联样式，那么 A = 1, 否则 A = 0\",\"B的值等于 ID选择器出现的次数\",\"C的值等于 类选择器 和 属性选择器 和 伪类 出现的总次数\",\"D 的值等于 标签选择器 和 伪元素 出现的总次数\",\"知道了优先级是如何计算之后，就来看看比较规则：\",\"从左往右依次进行比较 ，较大者优先级更高\",\"如果相等，则继续往右移动一位进行比较\",\"如果4位全部相等，则后面的会覆盖前面的 经过上面的优先级计算规则，我们知道内联样式的优先级最高，如果外部样式需要覆盖内联样式，就需要使用!important\"]},\"37\":{\"h\":\"继承属性\",\"t\":[\"在css中，继承是指的是给父元素设置一些属性，后代元素会自动拥有这些属性\",\"关于继承属性，可以分成：\",\"字体系列属性\",\"font:组合字体 font-family:规定元素的字体系列 font-weight:设置字体的粗细 font-size:设置字体的尺寸 font-style:定义字体的风格 font-variant:偏大或偏小的字体\",\"文本系列属性\",\"text-indent：文本缩进 text-align：文本水平对刘 line-height：行高 word-spacing：增加或减少单词间的空白 letter-spacing：增加或减少字符间的空白 text-transform：控制文本大小写 direction：规定文本的书写方向 color：文本颜色\",\"元素可见性\",\"visibility\",\"表格布局属性\",\"caption-side：定位表格标题位置 border-collapse：合并表格边框 border-spacing：设置相邻单元格的边框间的距离 empty-cells：单元格的边框的出现与消失 table-layout：表格的宽度由什么决定\",\"列表属性\",\"list-style-type：文字前面的小点点样式 list-style-position：小点点位置 list-style：以上的属性可通过这属性集合\",\"引用\",\"quotes：设置嵌套引用的引号类型\",\"光标属性\",\"cursor：箭头可以变成需要的形状\",\"继承中比较特殊的几点：\",\"a 标签的字体颜色不能被继承\",\"h1-h6标签字体的大下也是不能被继承的\",\"无继承的属性\",\"display\",\"文本属性：vertical-align、text-decoration\",\"盒子模型的属性：宽度、高度、内外边距、边框等\",\"背景属性：背景图片、颜色、位置等\",\"定位属性：浮动、清除浮动、定位position等\",\"生成内容属性：content、counter-reset、counter-increment\",\"轮廓样式属性：outline-style、outline-width、outline-color、outline\",\"页面样式属性：size、page-break-before、page-break-after\"]},\"38\":{\"c\":[\"CSS\"]},\"39\":{\"h\":\"css3新特性\"},\"40\":{\"h\":\"样式\"},\"41\":{\"h\":\"边框\",\"t\":[\"css3新增了三个边框属性，分别是：\",\"border-radius：创建圆角边框\",\"box-shadow：为元素添加阴影\",\"border-image：使用图片来绘制边框 box-shadow 设置元素阴影，设置属性如下：\",\"水平阴影\",\"垂直阴影\",\"模糊距离(虚实)\",\"阴影尺寸(影子大小)\",\"阴影颜色\",\"内/外阴影\",\"其中水平阴影和垂直阴影是必须设置的\"]},\"42\":{\"h\":\"背景\",\"t\":[\"新增了几个关于背景的属性，分别是background-clip、background-origin、background-size和background-break\"]},\"43\":{\"h\":\"background-clip\",\"t\":[\"用于确定背景画区，有以下几种可能的属性：\",\"background-clip: border-box; 背景从border开始显示\",\"background-clip: padding-box; 背景从padding开始显示\",\"background-clip: content-box; 背景显content区域开始显示\",\"background-clip: no-clip; 默认属性，等同于border-box 通常情况，背景都是覆盖整个元素的，利用这个属性可以设定背景颜色或图片的覆盖范围\"]},\"44\":{\"h\":\"background-origin\",\"t\":[\"当我们设置背景图片时，图片是会以左上角对齐，但是是以border的左上角对齐还是以padding的左上角或者content的左上角对齐? border-origin正是用来设置这个的\",\"background-origin: border-box; 从border开始计算background-position\",\"background-origin: padding-box; 从padding开始计算background-position\",\"background-origin: content-box; 从content开始计算background-position 默认情况是padding-box，即以padding的左上角为原点\"]},\"45\":{\"h\":\"background-size\",\"t\":[\"background-size属性常用来调整背景图片的大小，主要用于设定图片本身。有以下可能的属性：\",\"background-size: contain; 缩小图片以适合元素（维持像素长宽比）\",\"background-size: cover; 扩展元素以填补元素（维持像素长宽比）\",\"background-size: 100px 100px; 缩小图片至指定的大小\",\"background-size: 50% 100%; 缩小图片至指定的大小，百分比是相对包 含元素的尺寸\"]},\"46\":{\"h\":\"background-break\",\"t\":[\"元素可以被分成几个独立的盒子（如使内联元素span跨越多行），background-break 属性用来控制背景怎样在这些不同的盒子中显示\",\"background-break: continuous; 默认值。忽略盒之间的距离（也就是像元素没有分成多个盒子，依然是一个整体一样）\",\"background-break: bounding-box; 把盒之间的距离计算在内；\",\"background-break: each-box; 为每个盒子单独重绘背景\"]},\"47\":{\"h\":\"文字\",\"t\":[\"word-wrap 语法：word-wrap: normal|break-word\",\"normal：使用浏览器默认的换行\",\"break-all：允许在单词内换行 text-overflow text-overflow设置或检索当当前行超过指定容器的边界时如何显示，属性有两个值选择：\",\"clip：修剪文本\",\"ellipsis：显示省略符号来代表被修剪的文本\",\"text-shadow text-shadow可向文本应用阴影。能够规定水平阴影、垂直阴影、模糊距离，以及阴影的颜色\",\"text-decoration CSS3里面开始支持对文字的更深层次的渲染，具体有三个属性可供设置：\",\"text-fill-color: 设置文字内部填充颜色\",\"text-stroke-color: 设置文字边界填充颜色\",\"text-stroke-width: 设置文字边界宽度\"]},\"48\":{\"h\":\"颜色\",\"t\":[\"css3新增了新的颜色表示方式rgba与hsla\",\"rgba分为两部分，rgb为颜色值，a为透明度\",\"hala分为四部分，h为色相，s为饱和度，l为亮度，a为透明度\"]},\"49\":{\"h\":\"transition 过渡\",\"t\":[\"transition属性可以被指定为一个或多个CSS属性的过渡效果，多个属性之间用逗号进行分隔，必须规定两项内容：\",\"过度效果\",\"持续时间 语法如下：\",\"transition： CSS属性，花费时间，效果曲线(默认ease)，延迟时间(默认0)\",\"上面为简写模式，也可以分开写各个属性\",\"transition-property: width; transition-duration: 1s; transition-timing-function: linear; transition-delay: 2s;\"]},\"50\":{\"h\":\"transform 转换\",\"t\":[\"transform属性允许你旋转，缩放，倾斜或平移给定元素\",\"transform-origin：转换元素的位置（围绕那个点进行转换），默认值为(x,y,z):(50%,50%,0)\",\"使用方式：\",\"transform: translate(120px, 50%)：位移 transform: scale(2, 0.5)：缩放 transform: rotate(0.5turn)：旋转 transform: skew(30deg, 20deg)：倾斜\"]},\"51\":{\"h\":\"animation 动画\",\"t\":[\"动画这个平常用的也很多，主要是做一个预设的动画。和一些页面交互的动画效果，结果和过渡应该一样，让页面不会那么生硬\",\"animation也有很多的属性\",\"animation-name：动画名称\",\"animation-duration：动画持续时间\",\"animation-timing-function：动画时间函数\",\"animation-delay：动画延迟时间\",\"animation-iteration-count：动画执行次数，可以设置为一个整数，也可以设置为infinite，意思是无限循环\",\"animation-direction：动画执行方向\",\"animation-paly-state：动画播放状态\",\"animation-fill-mode：动画填充模式\"]},\"52\":{\"h\":\"渐变\",\"t\":[\"颜色渐变是指在两个颜色之间平稳的过渡，css3渐变包括\",\"linear-gradient：线性渐变\",\"background-image: linear-gradient(direction, color-stop1, color-stop2, ...);\",\"radial-gradient：径向渐变\",\"linear-gradient(0deg, red, green);\"]},\"53\":{\"c\":[\"CSS\"]},\"54\":{\"h\":\"响应式\",\"t\":[\"响应式网站设计（Responsive Web design）是一种网络页面设计布局，页面的设计与开发应当根据用户行为以及设备环境(系统平台、屏幕尺寸、屏幕定向等)进行相应的响应和调整\",\"响应式网站常见特点：\",\"同时适配PC + 平板 + 手机等\",\"标签导航在接近手持终端设备时改变为经典的抽屉式导航\",\"网站的布局会根据视口来调整模块的大小和位置\"]},\"55\":{\"h\":\"实现\",\"t\":[\"响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理，为了处理移动端，页面头部必须有meta声明viewport\",\"<meta name=\\\"viewport\\\" content=\\\"width=device-width, initial-scale=1, maximum-scale=1, user-scalable=no”>\",\"属性对应如下：\",\"width=device-width: 是自适应手机屏幕的尺寸宽度\",\"maximum-scale:是缩放比例的最大值\",\"inital-scale:是缩放的初始化\",\"user-scalable:是用户的可以缩放的操作\",\"实现响应式布局的方式有如下：\",\"媒体查询\",\"百分比\",\"vw/vh\",\"rem\"]},\"56\":{\"h\":\"媒体查询\",\"t\":[\"CSS3 中的增加了更多的媒体查询，就像if条件表达式一样，我们可以设置不同类型的媒体条件，并根据对应的条件，给相应符合条件的媒体调用相对应的样式表\",\"使用@Media查询，可以针对不同的媒体类型定义不同的样式，如：\",\"@media screen and (max-width: 1920px) { ... }\",\"当视口在375px - 600px之间，设置特定字体大小18px\",\"@media screen (min-width: 375px) and (max-width: 600px) { body { font-size: 18px; } }\",\"通过媒体查询，可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局，比如我们为不同分辨率的屏幕，设置不同的背景图片\",\"比如给小屏幕手机设置@2x图，为大屏幕手机设置@3x图，通过媒体查询就能很方便的实现\"]},\"57\":{\"h\":\"百分比\",\"t\":[\"通过百分比单位 \\\" % \\\" 来实现响应式的效果\",\"比如当浏览器的宽度或者高度发生变化时，通过百分比单位，可以使得浏览器中的组件的宽和高随着浏览器的变化而变化，从而实现响应式的效果\",\"height、width属性的百分比依托于父标签的宽高，但是其他盒子属性则不完全依赖父元素：\",\"子元素的top/left和bottom/right如果设置百分比，则相对于直接非static定位(默认定位)的父元素的高度/宽度\",\"子元素的padding如果设置百分比，不论是垂直方向或者是水平方向，都相对于直接父亲元素的width，而与父元素的height无关。\",\"子元素的margin如果设置成百分比，不论是垂直方向还是水平方向，都相对于直接父元素的width\",\"border-radius不一样，如果设置border-radius为百分比，则是相对于自身的宽度\",\"可以看到每个属性都使用百分比，会照成布局的复杂度，所以不建议使用百分比来实现响应式\"]},\"58\":{\"h\":\"vw/vh\",\"t\":[\"vw表示相对于视图窗口的宽度，vh表示相对于视图窗口高度。 任意层级元素，在使用vw单位的情况下，1vw都等于视图宽度的百分之一\",\"与百分比布局很相似，在以前文章提过与%的区别，这里就不再展开述说\"]},\"59\":{\"h\":\"rem\",\"t\":[\"rem是相对于根元素html的font-size属性，默认情况下浏览器字体大小为16px，此时1rem = 16px\",\"可以利用前面提到的媒体查询，针对不同设备分辨率改变font-size的值，如下：\",\"@media screen and (max-width: 414px) { html { font-size: 18px } } @media screen and (max-width: 375px) { html { font-size: 16px } } @media screen and (max-width: 320px) { html { font-size: 12px } }\",\"为了更准确监听设备可视窗口变化，我们可以在css之前插入script标签，内容如下：\",\"//动态为根元素设置字体大小 function init () { // 获取屏幕宽度 var width = document.documentElement.clientWidth // 设置根元素字体大小。此时为宽的10等分 document.documentElement.style.fontSize = width / 10 + 'px' } //首次加载应用，设置一次 init() // 监听手机旋转的事件的时机，重新设置 window.addEventListener('orientationchange', init) // 监听手机窗口变化，重新设置 window.addEventListener('resize', init)\",\"无论设备可视窗口如何变化，始终设置rem为width的1/10，实现了百分比布局\",\"除此之外，我们还可以利用主流UI框架，如：element ui、antd提供的栅格布局实现响应式\"]},\"60\":{\"c\":[\"CSS\"]},\"61\":{\"h\":\"弹性布局 Flex\"},\"62\":{\"c\":[\"CSS\"]},\"63\":{\"h\":\"Grid\"},\"64\":{\"c\":[\"CSS\"]},\"65\":{\"h\":\"隐藏元素\",\"t\":[\"通过css隐藏元素的方法有很多种，它们看起来实现的效果是一致的\",\"但实际上每一种方法都有一丝轻微的不同，这些不同决定了在一些特定场合下使用哪一种方法\"]},\"66\":{\"h\":\"实现\",\"t\":[\"通过css实现隐藏元素方法有如下：\",\"display:none\",\"visibility:hidden\",\"opacity:0\",\"设置height、width模型属性为0\",\"position:absolute\",\"clip-path\"]},\"67\":{\"h\":\"display:none\",\"t\":[\"设置元素的display为none是最常用的隐藏元素的方法\",\".hide { display:none; }\",\"将元素设置为display:none后，元素在页面上将彻底消失 元素本身占有的空间就会被其他元素占有，也就是说它会导致浏览器的重排和重绘 消失后，自身绑定的事件不会触发，也不会有过渡效果 特点：元素不可见，不占据空间，无法响应点击事件\"]},\"68\":{\"h\":\"visibility:hidden\",\"t\":[\"设置元素的visibility为hidden也是一种常用的隐藏元素的方法\",\"从页面上仅仅是隐藏该元素，DOM结果均会存在，只是当时在一个不可见的状态，不会触发重排，但是会触发重绘\",\".hidden{ visibility:hidden }\",\"给人的效果是隐藏了，所以他自身的事件不会触发\",\"特点：元素不可见，占据页面空间，无法响应点击事件\"]},\"69\":{\"h\":\"opacity:0\",\"t\":[\"opacity属性表示元素的透明度，将元素的透明度设置为0后，在我们用户眼中，元素也是隐藏的\",\"不会引发重排，一般情况下也会引发重绘\",\"如果利用 animation 动画，对 opacity 做变化（animation会默认触发GPU加速），则只会触发 GPU 层面的 composite，不会触发重绘\",\".transparent { opacity:0; }\",\"由于其仍然是存在于页面上的，所以他自身的的事件仍然是可以触发的，但被他遮挡的元素是不能触发其事件的\",\"需要注意的是：其子元素不能设置opacity来达到显示的效果 特点：改变元素透明度，元素不可见，占据页面空间，可以响应点击事件\"]},\"70\":{\"h\":\"设置height、width属性为0\",\"t\":[\"将元素的margin，border，padding，height和width等影响元素盒模型的属性设置成0，如果元素内有子元素或内容，还应该设置其overflow:hidden来隐藏其子元素\",\".hiddenBox { margin:0; border:0; padding:0; height:0; width:0; overflow:hidden; }\",\"特点：元素不可见，不占据页面空间，无法响应点击事件\"]},\"71\":{\"h\":\"position:absolute\",\"t\":[\"将元素移出可视区域\",\".hide { position: absolute; top: -9999px; left: -9999px; }\",\"特点：元素不可见，不影响页面布局\"]},\"72\":{\"h\":\"clip-path\",\"t\":[\"通过裁剪的形式\",\".hide { clip-path: polygon(0px 0px,0px 0px,0px 0px,0px 0px); }\",\"特点：元素不可见，占据页面空间，无法响应点击事件\",\"display: none\",\"visibility: hidden\",\"opacity: 0\",\"页面中\",\"不存在\",\"存在\",\"存在\",\"重排\",\"会\",\"不会\",\"不会\",\"重绘\",\"会\",\"会\",\"不一定\",\"自身绑定事件\",\"不触发 不触发\",\"可触发\",\"transition\",\"不支持\",\"支持\",\"支持\",\"子元素可复原\",\"不能\",\"能\",\"不能\",\"被遮挡的元素可触发事件\",\"能\",\"能\",\"不能\"]},\"73\":{\"c\":[\"CSS\"]},\"74\":{\"h\":\"布局\",\"t\":[\"两栏布局 两栏布局实现效果就是将页面分割成左右宽度不等的两列，宽度较小的列设置为固定宽度，剩余宽度由另一列撑满， 比如 Ant Design 文档，蓝色区域为主要内容布局容器，侧边栏为次要内容布局容器 这里称宽度较小的列父元素为次要布局容器，宽度较大的列父元素为主要布局容器 这种布局适用于内容上具有明显主次关系的网页\",\"三栏布局 三栏布局按照左中右的顺序进行排列，通常中间列最宽，左右两列次之 大家最常见的就是github：\"]},\"75\":{\"h\":\"双栏布局\",\"t\":[\"双栏布局非常常见，往往是以一个定宽栏和一个自适应的栏并排展示存在\",\"实现思路也非常的简单：\",\"使用 float 左浮左边栏\",\"右边模块使用 margin-left 撑出内容块做内容展示\",\"为父级元素添加BFC，防止下方元素飞到上方内容\",\"代码如下：\",\"<style> .box{ overflow: hidden; 添加BFC } .left { float: left; width: 200px; background-color: gray; height: 400px; } .right { /* 留出左边浮动元素的宽度 + 一点间距 */ margin-left: 210px; background-color: lightgray; height: 200px; } </style> <div class=\\\"box\\\"> <div class=\\\"left\\\">左边</div> <div class=\\\"right\\\">右边</div> </div>\",\"还有一种更为简单的使用则是采取：flex弹性布局\"]},\"76\":{\"h\":\"flex弹性布局\",\"t\":[\"<style> .box{ display: flex; } .left { width: 100px; } .right { flex: 1; } </style> <div class=\\\"box\\\"> <div class=\\\"left\\\">左边</div> <div class=\\\"right\\\">右边</div> </div>\",\"flex可以说是最好的方案了，代码少，使用简单 注意的是，flex容器的一个默认属性值:align-items: stretch; 这个属性导致了列等高的效果。 为了让两个盒子高度自动，需要设置: align-items: flex-start\"]},\"77\":{\"h\":\"三栏布局\",\"t\":[\"实现三栏布局中间自适应的布局方式有：\",\"两边使用 float，中间使用 margin\",\"两边使用 absolute，中间使用 margin\",\"两边使用 float 和负 margin\",\"display: table 实现\",\"flex实现\",\"grid网格布局\"]},\"78\":{\"h\":\"两边使用 float，中间使用 margin\",\"t\":[\"需要将中间的内容放在html结构最后，否则右侧会臣在中间内容的下方\",\"实现代码如下：\",\"<style> .wrap { background: #eee; overflow: hidden; <!-- 生成BFC，计算高度时考虑浮动的元素 --> padding: 20px; height: 200px; } .left { width: 200px; height: 200px; float: left; background: coral; } .right { width: 120px; height: 200px; float: right; background: lightblue; } .middle { margin-left: 220px; height: 200px; background: lightpink; margin-right: 140px; } </style> <div class=\\\"wrap\\\"> <div class=\\\"left\\\">左侧</div> <div class=\\\"right\\\">右侧</div> <div class=\\\"middle\\\">中间</div> </div>\",\"原理如下：\",\"两边固定宽度，中间宽度自适应。 利用中间元素的margin值控制两边的间距 宽度小于左右部分宽度之和时，右侧部分会被挤下去 这种实现方式存在缺陷：\",\"主体内容是最后加载的。\",\"右边在主体内容之前，如果是响应式设计，不能简单的换行展示\"]},\"79\":{\"h\":\"两边使用 absolute，中间使用 margin\",\"t\":[\"基于绝对定位的三栏布局：注意绝对定位的元素脱离文档流，相对于最近的已经定位的祖先元素进行定位。无需考虑HTML中结构的顺序\",\"<style> .container { position: relative; } .left, .right, .main { height: 200px; line-height: 200px; text-align: center; } .left { position: absolute; top: 0; left: 0; width: 100px; background: green; } .right { position: absolute; top: 0; right: 0; width: 100px; background: green; } .main { margin: 0 110px; background: black; color: white; } </style> <div class=\\\"container\\\"> <div class=\\\"left\\\">左边固定宽度</div> <div class=\\\"right\\\">右边固定宽度</div> <div class=\\\"main\\\">中间自适应</div> </div>\",\"实现流程：\",\"左右两边使用绝对定位，固定在两侧。\",\"中间占满一行，但通过 margin和左右两边留出10px的间隔\"]},\"80\":{\"h\":\"两边使用 float 和负 margin\",\"t\":[\"<style> .left, .right, .main { height: 200px; line-height: 200px; text-align: center; } .main-wrapper { float: left; width: 100%; } .main { margin: 0 110px; background: black; color: white; } .left, .right { float: left; width: 100px; margin-left: -100%; background: green; } .right { margin-left: -100px; /* 同自身宽度 */ } </style> <div class=\\\"main-wrapper\\\"> <div class=\\\"main\\\">中间自适应</div> </div> <div class=\\\"left\\\">左边固定宽度</div> <div class=\\\"right\\\">右边固定宽度</div>\",\"实现过程：\",\"中间使用了双层标签，外层是浮动的，以便左中右能在同一行展示\",\"左边通过使用负 margin-left:-100%，相当于中间的宽度，所以向上偏移到左侧\",\"右边通过使用负 margin-left:-100px，相当于自身宽度，所以向上偏移到最右侧 缺点：\",\"增加了 .main-wrapper 一层，结构变复杂\",\"使用负 margin，调试也相对麻烦\"]},\"81\":{\"h\":\"使用 display: table 实现\",\"t\":[\"<\\\\table> 标签用于展示行列数据，不适合用于布局。但是可以使用 display: table 来实现布局的效果\",\"<style> .container { height: 200px; line-height: 200px; text-align: center; display: table; table-layout: fixed; width: 100%; } .left, .right, .main { display: table-cell; } .left, .right { width: 100px; background: green; } .main { background: black; color: white; width: 100%; } </style> <div class=\\\"container\\\"> <div class=\\\"left\\\">左边固定宽度</div> <div class=\\\"main\\\">中间自适应</div> <div class=\\\"right\\\">右边固定宽度</div> </div>\",\"实现原理：\",\"外层通过 display: table设置为表格，设置 table-layout: fixed`表示列宽自身宽度决定，而不是自动计算。\",\"内层的左中右通过 display: table-cell设置为表格单元。\",\"左右设置固定宽度，中间设置 width: 100% 填充剩下的宽度\"]},\"82\":{\"h\":\"使用flex实现\",\"t\":[\"利用flex弹性布局，可以简单实现中间自适应\",\"代码如下：\",\"<style type=\\\"text/css\\\"> .wrap { display: flex; justify-content: space-between; } .left, .right, .middle { height: 100px; } .left { width: 200px; background: coral; } .right { width: 120px; background: lightblue; } .middle { background: #555; width: 100%; margin: 0 20px; } </style> <div class=\\\"wrap\\\"> <div class=\\\"left\\\">左侧</div> <div class=\\\"middle\\\">中间</div> <div class=\\\"right\\\">右侧</div> </div>\",\"实现过程：\",\"仅需将容器设置为display:flex;，\",\"盒内元素两端对其，将中间元素设置为100%宽度，或者设为flex:1，即可填充空白\",\"盒内元素的高度撑开容器的高度 优点：\",\"结构简单直观\",\"可以结合 flex的其他功能实现更多效果，例如使用 order属性调整显示顺序，让主体内容优先加载，但展示在中间\"]},\"83\":{\"h\":\"grid网格布局\",\"t\":[\"代码如下：\",\"<style> .wrap { display: grid; width: 100%; grid-template-columns: 300px auto 300px; } .left, .right, .middle { height: 100px; } .left { background: coral; } .right { width: 300px; background: lightblue; } .middle { background: #555; } </style> <div class=\\\"wrap\\\"> <div class=\\\"left\\\">左侧</div> <div class=\\\"middle\\\">中间</div> <div class=\\\"right\\\">右侧</div> </div>\",\"跟flex弹性布局一样的简单\"]},\"84\":{\"c\":[\"CSS\"]},\"85\":{\"h\":\"单行/多行文本溢出\",\"t\":[\"对于文本的溢出，我们可以分成两种形式：\",\"单行文本溢出\",\"多行文本溢出\"]},\"86\":{\"h\":\"实现\"},\"87\":{\"h\":\"单行文本溢出省略\",\"t\":[\"理解也很简单，即文本在一行内显示，超出部分以省略号的形式展现\",\"实现方式也很简单，涉及的css属性有：\",\"text-overflow：规定当文本溢出时，显示省略符号来代表被修剪的文本\",\"white-space：设置文字在一行显示，不能换行\",\"overflow：文字长度超出限定宽度，则隐藏超出的内容\",\"overflow设为hidden，普通情况用在块级元素的外层隐藏内部溢出元素，或者配合下面两个属性实现文本溢出省略\",\"white-space:nowrap，作用是设置文本不换行，是overflow:hidden和text-overflow：ellipsis生效的基础\",\"text-overflow属性值有如下：\",\"clip：当对象内文本溢出部分裁切掉\",\"ellipsis：当对象内文本溢出时显示省略标记（...）\",\"text-overflow只有在设置了overflow:hidden和white-space:nowrap才能够生效的\",\"<style> p{ overflow: hidden; line-height: 40px; width:400px; height:40px; border:1px solid red; text-overflow: ellipsis; white-space: nowrap; } </style> <p 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本</p >\",\"可以看到，设置单行文本溢出较为简单，并且省略号显示的位置较好\"]},\"88\":{\"h\":\"多行文本溢出省略\",\"t\":[\"多行文本溢出的时候，我们可以分为两种情况：\",\"基于高度截断\",\"基于行数截断\"]},\"89\":{\"h\":\"基于高度截断\",\"t\":[\"伪元素 + 定位 核心的css代码结构如下：\",\"position: relative：为伪元素绝对定位\",\"overflow: hidden：文本溢出限定的宽度就隐藏内容）\",\"position: absolute：给省略号绝对定位\",\"line-height: 20px：结合元素高度,高度固定的情况下,设定行高, 控制显示行数\",\"height: 40px：设定当前元素高度\",\"::after {} ：设置省略号样式 代码如下所示：\",\"<style> .demo { position: relative; line-height: 20px; height: 40px; overflow: hidden; } .demo::after { content: \\\"...\\\"; position: absolute; bottom: 0; right: 0; padding: 0 20px 0 10px; } </style> <body> <div class='demo'>这是一段很长的文本</div> </body>\",\"实现原理很好理解，就是通过伪元素绝对定位到行尾并遮住文字，再通过 overflow: hidden 隐藏多余文字\",\"这种实现具有以下优点：\",\"兼容性好，对各大主流浏览器有好的支持\",\"响应式截断，根据不同宽度做出调整\",\"一般文本存在英文的时候，可以设置word-break: break-all使一个单词能够在换行时进行拆分\"]},\"90\":{\"h\":\"基于行数截断\",\"t\":[\"纯css实现也非常简单，核心的css代码如下：\",\"-webkit-line-clamp: 2：用来限制在一个块元素显示的文本的行数，为了实现该效果，它需要组合其他的WebKit属性）\",\"display: -webkit-box：和1结合使用，将对象作为弹性伸缩盒子模型显示\",\"-webkit-box-orient: vertical：和1结合使用 ，设置或检索伸缩盒对象的子元素的排列方式\",\"overflow: hidden：文本溢出限定的宽度就隐藏内容\",\"text-overflow: ellipsis：多行文本的情况下，用省略号“…”隐藏溢出范围的文本\",\"<style> p { width: 400px; border-radius: 1px solid red; -webkit-line-clamp: 2; display: -webkit-box; -webkit-box-orient: vertical; overflow: hidden; text-overflow: ellipsis; } </style> <p> 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本 这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本 </p >\",\"可以看到，上述使用了webkit的CSS属性扩展，所以兼容浏览器范围是PC端的webkit内核的浏览器，由于移动端大多数是使用webkit，所以移动端常用该形式\",\"需要注意的是，如果文本为一段很长的英文或者数字，则需要添加word-wrap: break-word属性\",\"还能通过使用javascript实现配合css，实现代码如下所示：\",\"css结构如下：\",\"p { position: relative; width: 400px; line-height: 20px; overflow: hidden; } .p-after:after{ content: \\\"...\\\"; position: absolute; bottom: 0; right: 0; padding-left: 40px; background: -webkit-linear-gradient(left, transparent, #fff 55%); background: -moz-linear-gradient(left, transparent, #fff 55%); background: -o-linear-gradient(left, transparent, #fff 55%); background: linear-gradient(to right, transparent, #fff 55%); }\",\"javascript代码如下：\",\"$(function(){ //获取文本的行高，并获取文本的高度，假设我们规定的行数是五行，那么对超过行数的部分进行限制高度，并加上省略号 $('p').each(function(i, obj){ var lineHeight = parseInt($(this).css(\\\"line-height\\\")); var height = parseInt($(this).height()); if((height / lineHeight) >3 ){ $(this).addClass(\\\"p-after\\\") $(this).css(\\\"height\\\",\\\"60px\\\"); }else{ $(this).removeClass(\\\"p-after\\\"); } }); })\"]},\"91\":{\"c\":[\"CSS\"]},\"92\":{\"h\":\"执行环境\",\"t\":[\"JavaScript必须依赖一个宿主环境才能实现完整的功能。\",\"宿主环境中有多个Agent，每个Agent对于一个js程序，也就是说Agent是程序的执行环境。\",\"Agent集群中的agent可以共享内存。\",\"每个Agent包含一个执行上下文栈，一个执行线程。\",\"执行上下文是代码的执行环境，包含一个Realm，代码创建的执行上下文还有一个词法环境。\",\"Realm提供了代码执行需要的基础资源，词法环境是作用域链的起点。\"]},\"93\":{\"h\":\"\",\"t\":[\"Agent是程序的执行环境，包括一个执行上下文栈、一个Agent记录器和一个执行线程。\"]},\"94\":{\"h\":\"\",\"t\":[\"执行上下文栈用于跟踪执行上下文。正在运行的执行上下文始终是该栈顶部元素。\",\"以下情况会创建执行上下文：\",\"程序初始化：程序初始化操作\",\"脚本执行：脚本求值\",\"模块环境初始化：模块环境初始化\",\"模块执行：模块执行\",\"函数执行：\",\"会创建迭代器的内置对象方法：\"]},\"95\":{\"h\":\"\",\"t\":[\"用于跟踪运行时执行的代码。在任何时候，每个agent至多只有一个正在实际执行代码的执行上下文。\",\"组件\",\"作用\",\"code evaluation state\",\"执行、暂停、恢复与此执行上下文的关联代码所需的任何状态。\",\"Function\",\"如果正在求值函数对象的代码，值为该函数对象。如果正在求值脚本、模块，则值为null。\",\"Realm\",\"执行上下文的关联代码所需的资源的Realm记录器。(不同的执行上下文可能有不同的realm)\",\"ScriptOrModule\",\"关联代码来源的模块记录器、脚本记录器（源文本解析结果）。\",\"ECMAScript代码的执行上下文还有额外的三个组件\",\"组件\",\"作用\",\"LexicalEnvironment\",\"指向代码中创建的标识符引用(存放在环境记录器)。\",\"VariableEnvironment\",\"指向代码中创建的变量声明(存放在环境记录器)\",\"PrivateEnvironment\",\"指向包含类中的类元素创建的私有名称(存放在私有环境记录)\"]},\"96\":{\"h\":\"\",\"t\":[\"一个Realm由一组内置对象、一个ECMAscript全局环境、该全局环境范围内加载的所有ECMAscript代码、以及其他相关状态和资源组成。 Realm包含了代码需要执行的最小资源。\",\"字段\",\"值\",\"含义\",\"[[AgentSignifier]]\",\"Agent标识符\",\"拥有此Realm的Agent代理\",\"[[Intrinsics]]\",\"记录器\",\"关联代码使用的内置值\",\"[[GlobalObject]]\",\"全局对象\",\"此范围使用的全局对象\",\"[[GlobalEnv]]\",\"全局环境记录器\",\"范围的全局环境\",\"[[TemplateMap]]\",\"列表\",\"[[LoadedModules]]\",\"列表\",\"[[HostDefined]]\",\"默认值为undefined\",\"宿主环境保留字段\"]},\"97\":{\"c\":[\"ECMA标准\"]},\"98\":{\"h\":\"宿主环境\",\"t\":[\"ECMAScript并不是一门能够独立运行的编程语言，它必须要接入到一个宿主环境（host environment） 中才能发挥作用。\",\"ECMAScript有两种常见的宿主：\",\"web客户端的浏览器。\",\"web服务端的Node.Js\"]},\"99\":{\"h\":\"\",\"t\":[\"标准中宿主可以提高的内容\",\"在程序运行前，环境会初始化一系列的内置对象（Built-in Objects） ，这些内置对象至少包括一个全局对象以及所有标准定义的固有对象（如Array、Object、Number等）。这些内置对象会帮助实现最基础的语言功能。 宿主环境，则可以依据自身的业务需求，增加环境中的内置对象（俗称“宿主对象”）并扩展全局对象的属性和方法。\"]},\"100\":{\"h\":\"\",\"t\":[\"浏览器，会提供两类重要的宿主对象：DOM、BOM。\",\"服务端，Node.js则会提供与服务端操作相关的对象。\"]},\"101\":{\"h\":\"\",\"t\":[\"标准关于全局对象的定义\",\"浏览器宿主的全局对象window，就新增了许多访问页面尺寸和位置的属性，如window.screenX、window.scrollY，以及许多事件监听方法，如window.ondrag、window.onblur等等。\",\"Node.js宿主，则在全局对象上新增了进程属性globalThis.process、缓冲区构造器属性globalThis.Buffer、以及一些特别的定时器方法globalThis.setImmediate()、globalThis.clearImmediate()等等。\"]},\"102\":{\"c\":[\"ECMA标准\"]},\"103\":{\"h\":\"程序执行过程\",\"t\":[\"// 全局代码 const glo_const = 1 let glo_let = 2 var glo_var = 3 class Glo_class{} function glo_fn(){ // ③ // 位于函数体内声明语句 let inner_fn_let = 4 var inner_fn_var = 5 } if(true){ // ④ // 位于块内的声明语句 let block_let = 6 // ⑤ var block_var = 7 // ⑥ function block_fn(){} // ⑦ }\"]},\"104\":{\"h\":\"\",\"t\":[\"标准\",\"创建全局执行上下文、realm记录器。realm记录器包含全局对象、全局环境记录器、固有对象。\",\"图示\",\"alt text\"]},\"105\":{\"h\":\"\",\"t\":[\"标准\",\"每一段脚本执行前，需要先解析脚本，将其转换为解析树。返回一个脚本记录器。\"]},\"106\":{\"h\":\"\",\"t\":[\"标准\",\"创建ECMAScript代码执行上下文(scriptContext) ，设置scriptContext的词法环境、变量环境指向全局环境记录器等。\",\"接着推送到执行上下文栈，使其成为运行中的执行上下文。\",\"然后进行全局声明实例化，最后对脚本语句求值。\",\"全局声明实例化以后的调用栈。\",\"alt text\"]},\"107\":{\"h\":\"\",\"t\":[\"声明实例化，不等于初始化，只有执行到对应的位置，才能知道确切的值。\",\"GlobalDeclarationInstantiation\",\"调用LexicallyDeclaredNames 、VarDeclaredNames语义收集标识符。 \",\"从结果来看LexicallyDeclaredNames只会收集let、const声明语句(只会处理Declaration)的标识符，会忽略所有的函数声明。\",\"VarDeclaredNames对语句递归的调用，收集可见var声明、函数声明的标识符。不会处理函数和类中的。\",\"如果词法声明和变量声明的连接有重复项，则抛出 SyntaxError 异常。\",\"调用VarScopedDeclarations语义收集变量声明语句varDeclarations，调用LexicallyScopedDeclarations 语义收集词法声明语句 lexDeclarations。\",\"最后得到三个列表：lexDeclarations、varDeclarations、functionsToInitialize。根据标识符的类型进行绑定 \",\"对于lexDeclarations中的标识符，绑定到全局环境记录器的[[DeclarativeRecord]]字段上。\",\"对于functionsToInitialize，实例化相应的函数对象，并绑定到全局环境记录器的[[ObjectRecord]]字段上((实际上是成为全局对象的属性))。\",\"对于varDeclarations中的标识符，绑定到全局环境记录器的[[ObjectRecord]]字段上((实际上是成为全局对象的属性))。\",\"关于严格模式\",\"非严格模式函数标识符会被实例化并初始化为undefined，严格模式下函数不会被实例化。\",\"全局声明实例化以后的调用栈。\",\"alt text\"]},\"108\":{\"c\":[\"ECMA标准\"]},\"109\":{\"h\":\"ECMA标准\"},\"110\":{\"c\":[\"ECMA标准\"]},\"111\":{\"h\":\"作用域分析\",\"t\":[\"标准使用 环境记录器(Environment Record) 来表示作用域。\",\"每个环境记录器都有一个 [[OuterEnv]] 字段指向另一个环境记录器，通过该字段连接起来的所有的环境记录器共同构成一条作用域链。\",\"作用域链例子\",\"for (var i = 1; i < 5; i++) { setTimeout(() => { console.log(i) }, i * 1000) }\",\"alt text\",\"ECMAscript执行上下文的词法环境组件指向一个环境记录器，这就是执行上下文的代码查找变量的起点，也就是作用域链的起点。\",\"调用栈上有几个ECMAScript代码执行上下文，运行环境中就有几条作用域链。\"]},\"112\":{\"h\":\"\",\"t\":[\"环境记录器存放着标识符的绑定，标准中有五种环境记录器：\",\"全局环境记录器：绑定全局顶层代码的标识符。\",\"声明式环境记录器：常用于绑定块级语句内的标识符。\",\"函数环境记录器：绑定函数体内的标识符。\",\"模块环境记录器：绑定模块顶层代码的标识符。\",\"对象环境记录器：把一个对象中的属性方法抽取出来作为标识符绑定在环境中，这是with语句和全局对象所使用的记录器。\"]},\"113\":{\"h\":\"\",\"t\":[\"声明式环境记录绑定其范围内包含的声明所定义的一组标识符。 这些标识符可能是变量、常量、let、class、模块、import和/或函数声明\"]},\"114\":{\"h\":\"\",\"t\":[\"一种声明式环境记录，表示函数的顶级作用域，并且如果函数不是一个箭头函数，则提供一个 this绑定。\",\"附加字段\",\"字段\",\"值\",\"说明\",\"[[ThisValue]]\",\"ES语言值\",\"函数调用中使用的this值\",\"[[ThisBindingStatus]]\",\"lexical, initialized或 uninitialized\",\"如果值是lexical，则这是一个箭头函数，并且没有本地的this值。\",\"[[FunctionObject]]\",\"函数对象\",\"创建此环境记录的函数对象\",\"[[NewTarget]]\",\"对象、undefined\",\"如果此环境记录是由[[Construct]]内部方法创建的， 则[[NewTarget]]是[[Construct]]的newTarget参数的值。 否则，其值为undefined。\"]},\"115\":{\"h\":\"\",\"t\":[\"一种声明式环境记录，用于表示 ECMAScript 模块 的外部作用域。\"]},\"116\":{\"h\":\"\",\"t\":[\"对象环境记录绑定一组字符串标识符名称，这些名称直接对应于其绑定对象的属性名称。\",\"附加字段\",\"字段\",\"值\",\"说明\",\"[[BindingObject]]\",\"对象\",\"环境记录绑定的对象\",\"[[IsWithEnvironment]]\",\"boolean\",\"此环境记录是否为with语句创建\"]},\"117\":{\"h\":\"\",\"t\":[\"全局环境记录用于表示所有在同一个realm中处理的ECMAScript script共享的最外层作用域。\",\"附加字段\",\"字段\",\"值\",\"说明\",\"[[ObjectRecord]]\",\"对象环境记录\",\"全局对象，包含内置绑定、全局代码中的函数声明、变量声明绑定，针对相关的Realm\",\"[[GlobalThisValue]]\",\"对象\",\"全局作用域中this返回的值。宿主可以提供任何ECMAScript对象值。\",\"[[DeclarativeRecord]]\",\"声明式环境记录器\",\"包含所有在相关领域代码中的全局代码声明的绑定，除了[[ObjectRecord]]中的绑定\",\"[[VarNames]]\",\"字符串列表\",\"在相关领域代码的全局代码中，函数声明和变量声明的绑定名称。\"]},\"118\":{\"h\":\"作用域的分析\",\"t\":[\"有的语句的求值过程中，需要创建环境记录器(并使他指向旧有的)，然后进行声明实例化，之后对每个子语句进行求值。 实例化的过程中，会收集自身区域的标识符并绑定到相应的环境记录器。 如果层层嵌套，很自然的就组成了一个作用域链。\",\"在标准中可以找到六种声明实例化操作，都需要环境记录器。\",\"GlobalDeclarationInstantiation：全局声明实例化。\",\"FunctionDeclarationInstantiation：函数声明实例化。\",\"BlockDeclarationInstantiation：块级声明实例化。\",\"ForDeclarationBindingInstantiation：for声明实例化。\",\"InitializeEnvironment：模块声明实例化。\",\"EvalDeclarationInstantiation：eval函数声明实例化。\"]},\"119\":{\"h\":\"\",\"t\":[\"简述步骤：\",\"保存当前指向上下文的词法环境oldEnv ，创建新的声明式环境记录器blockEnv(blockEnv.[[OuterEnv]]=OldEnv)。\",\"执行BlockDeclarationInstantiation。\",\"设置当前上下文的词法环境为blockEnv。\",\"对块中语句挨个执行。\",\"当前上下文的词法环境恢复为oldEnv。\"]},\"120\":{\"h\":\"\",\"t\":[\"收集标识符，并完成环境记录器的绑定。\",\"调用LexicallyScopedDeclarations收集词法声明declarations。\",\"对declarations中的元素，进行相应的绑定。 \",\"let、const做相应的可变、不可变的绑定。\",\"实例化函数对象，初始化绑定。\"]},\"121\":{\"h\":\"\",\"t\":[\"for循环在标准中分为，for和for-In、for-of、for-await-of。\",\"标准中的调用链是这样的：\",\"可以看出分歧为ForInOfLoopEvaluation(应用for-In、for-of、for-await-of)、ForLoopEvaluation(应用for)。\"]},\"122\":{\"h\":\"\",\"t\":[\"ForLoopEvaluation语义应用的其中一个代换式\",\"ForStatement : for ( LexicalDeclarationExpressionopt ; Expressionopt )Statement\",\"那他很有可能是这样的 for(let i;i<10;i++){}\",\"当在for中使用let、const时，有以下简述步骤：\",\"保存当前上下文的词法环境oldEnv，创建新的环境记录器loopEnv。\",\"对标识符进行对应的绑定，设置当前上下文的词法环境为loopEnv\",\"调用ForBodyEvaluation(，，，perIterationLets，)。 \",\"调用CreatePerIterationEnvironment语义，创建记录器，绑定标识符。\",\"重复 \",\"如果test(条件)不为空，对其求值，当false，返回v\",\"求值for块中的语句为result，LoopContinues为false(循环终止)，返回result。\",\"将v值给予result，执行CreatePerIterationEnvironment，创建记录器，绑定标识符。\",\"恢复词法环境为oldEnv。\",\"重要\",\"总来来说，为词法声明创建一次环境记录器，接着对for块不断创建环境(复制上一个记录器中的绑定和值，然后递增)记录器，直到条件达成或循环终止条件。\",\"调用栈\"]},\"123\":{\"h\":\"函数求值\",\"t\":[\"函数被调用时会触发函数的内部方法[[Call]]方法。简述步骤:\",\"创建函数的执行上下文以及函数环境记录器，并把执行上下文的词法环境指向该记录器。\",\"对函数进行声明实例化。\",\"执行函数体中的语句。 实例化\",\"对参数标识符进行实例化 2. 普通参数：如果函数调用的时候有赋值，则初始化为这个值，否则为undefined。 3. 表达式参数：如果函数调用的时候有赋值，则初始化为这个值，否则为表达式中的默认值。 此外，为了避免参数表达式的标识符与函数体变量声明的标识符发生“碰撞”，会在函数环境记录器上再创建一个声明式环境记录器，并把变量声明的标识符绑定在这个环境当中，从而实现两种类型标识符的隔离。\",\"创建arguments对象，以下情况不需要创建： \",\"函数是箭头函数。\",\"参数中有名为arguments的参数。\",\"函数体内有名为arguments的函数或标识符为arguments的词法声明语句。\",\"// 全局代码 fn_example(1) function fn_example(normal_arg, expression_arg = 2){ console.log(arguments) let fn_let = 3; var fn_var = 4; const fn_const = 5 class Fn_class{} function fn_fn(){} }\",\"alt text\",\"关于函数的环境记录器的指向问题。\",\"函数定义处进行声明实例化的时候，会OrdinaryFunctionCreate创建函数对象,并且 F.[[Environment]] 设置为 env。。\",\"当函数调用时，创建的函数环境记录器的outenv就会使用这个值。\",\"let target = \\\"global\\\" a() function a(){ let target = \\\"fn_a\\\" b() } function b(){ console.log(target) // \\\"global\\\" }\",\"alt text\"]},\"124\":{\"h\":\"闭包\"},\"125\":{\"c\":[\"ECMA标准\"]},\"126\":{\"c\":[\"作用域\"]},\"127\":{\"h\":\"如何阅读ECMA标准\",\"t\":[\"ECMA是一个js标准，他只提供抽象定义，具体实现取决于实际环境。例如Node和浏览器环境就有不同的全局对象。\",\"阅读ECMA有以下难点：\",\"概念：大量的概念横跨整个文档。\",\"产生式的上下标：简略的表达了各种含义。\",\"伪代码：只提供抽象定义。\",\"省略语义：有很多的操作序列被简化成简单的词汇存在于各种代换式中。\",\"本文只对ECMA的内容进行简单的介绍，具体需要看术语部分。\"]},\"128\":{\"h\":\"\",\"t\":[\"ECMA中的产生式(也称为非终结符号)如下所示，产生式用于说明或定义句子的组成结构。非终结符号在ECMA中显示为斜体类型。\",\"参数列表的产生式\",\"ArgumentList:AssignmentExpressionArgumentList,AssignmentExpression\",\"这说明一个参数列表(ArgumentList)可以表达为一个参数表达式(AssignmentExpression)或一个参数列表通过逗号(,)与参数列表(ArgumentList)的组合。\"]},\"129\":{\"h\":\"\",\"t\":[\"ECMA中的携带文法参数产生式如下所示，参数化的产生式是一组产生式的简写。产生式的下标如果是 [] 包括的，显然他是语法参数。\",\"参数化的产生式\",\"StatementList[Return,In]:ReturnStatementExpressionStatement\",\"该产生式是以下的缩写：\",\"参数化产生式的完整样子\",\"StatementList:ReturnStatementExpressionStatement\",\"StatementList_Return:ReturnStatementExpressionStatement\",\"StatementList_In:ReturnStatementExpressionStatement\",\"StatementList_Return_In:ReturnStatementExpressionStatement\",\"可以看出 [] 中的每个参数都经过组合。\"]},\"130\":{\"h\":\"\",\"t\":[\"ECMA在抽象操作(或称为算法)的定义时，就会展示如下的伪代码。ECMA中的语言值以粗体表示，如以下中的underfined。\",\"ToBoolean方法的抽象定义\",\"If argument is a Boolean, return argument.\",\"If argument is one of undefined, null, +0𝔽, -0𝔽, NaN, 0ℤ, or the empty String,return false.\",\"NOTE: This step is replaced in section B.3.6.1.\",\"Return true.\"]},\"131\":{\"c\":[\"ECMA标准\"]},\"132\":{\"h\":\"CDN\",\"t\":[\"CDN (全称 Content Delivery Network)，即内容分发网络\",\"构建在现有网络基础之上的智能虚拟网络，依靠部署在各地的边缘服务器，通过中心平台的负载均衡、内容分发、调度等功能模块，使用户就近获取所需内容，降低网络拥塞，提高用户访问响应速度和命中率。CDN 的关键技术主要有内容存储和分发技术\",\"简单来讲，CDN就是根据用户位置分配最近的资源\",\"于是，用户在上网的时候不用直接访问源站，而是访问离他“最近的”一个 CDN 节点，术语叫边缘节点，其实就是缓存了源站内容的代理服务器。如下图：\"]},\"133\":{\"h\":\"原理\",\"t\":[\"在没有应用CDN时，我们使用域名访问某一个站点时的路径为\",\"用户提交域名→浏览器对域名进行解释→DNS 解析得到目的主机的IP地址→根据IP地址访问发出请求→得到请求数据并回复\",\"应用CDN后，DNS 返回的不再是 IP 地址，而是一个CNAME(Canonical Name ) 别名记录，指向CDN的全局负载均衡\",\"CNAME实际上在域名解析的过程中承担了中间人（或者说代理）的角色，这是CDN实现的关键\"]},\"134\":{\"h\":\"负载均衡系统\",\"t\":[\"由于没有返回IP地址，于是本地DNS会向负载均衡系统再发送请求 ，则进入到CDN的全局负载均衡系统进行智能调度：\",\"看用户的 IP 地址，查表得知地理位置，找相对最近的边缘节点\",\"看用户所在的运营商网络，找相同网络的边缘节点\",\"检查边缘节点的负载情况，找负载较轻的节点 其他，比如节点的“健康状况”、服务能力、带宽、响应时间等 结合上面的因素，得到最合适的边缘节点，然后把这个节点返回给用户，用户就能够就近访问CDN的缓存代理\"]},\"135\":{\"h\":\"缓存代理\",\"t\":[\"缓存系统是 CDN 的另一个关键组成部分，缓存系统会有选择地缓存那些最常用的那些资源\",\"其中有两个衡量CDN服务质量的指标：\",\"命中率：用户访问的资源恰好在缓存系统里，可以直接返回给用户，命中次数与所有访问次数之比\",\"回源率：缓存里没有，必须用代理的方式回源站取，回源次数与所有访问次数之比\",\"缓存系统也可以划分出层次，分成一级缓存节点和二级缓存节点。一级缓存配置高一些，直连源站，二级缓存配置低一些，直连用户\",\"回源的时候二级缓存只找一级缓存，一级缓存没有才回源站，可以有效地减少真正的回源\",\"现在的商业 CDN命中率都在 90% 以上，相当于把源站的服务能力放大了 10 倍以上\"]},\"136\":{\"c\":[\"React\"]},\"137\":{\"c\":[\"React\"]},\"138\":{\"h\":\"DNS\",\"t\":[\"DNS（Domain Names System），域名系统，是互联网一项服务，是进行域名和与之相对应的 IP 地址进行转换的服务器 简单来讲，DNS相当于一个翻译官，负责将域名翻译成ip地址\",\"IP 地址：一长串能够唯一地标记网络上的计算机的数字\",\"域名：是由一串用点分隔的名字组成的 Internet 上某一台计算机或计算机组的名称，用于在数据传输时对计算机的定位标识\"]},\"139\":{\"h\":\"域名\",\"t\":[\"域名是一个具有层次的结构，从上到下一次为根域名、顶级域名、二级域名、三级域名...\"]},\"140\":{\"h\":\"查询方式\",\"t\":[\"DNS 查询的方式有两种：\",\"递归查询：如果 A 请求 B，那么 B 作为请求的接收者一定要给 A 想要的答案\",\"迭代查询：如果接收者 B 没有请求者 A 所需要的准确内容，接收者 B 将告诉请求者 A，如何去获得这个内容，但是自己并不去发出请求\"]},\"141\":{\"h\":\"域名缓存\",\"t\":[\"在域名服务器解析的时候，使用缓存保存域名和IP地址的映射 计算机中DNS的记录也分成了两种缓存方式：\",\"浏览器缓存：浏览器在获取网站域名的实际 IP 地址后会对其进行缓存，减少网络请求的损耗\",\"操作系统缓存：操作系统的缓存其实是用户自己配置的 hosts 文件\"]},\"142\":{\"h\":\"查询过程\",\"t\":[\"解析域名的过程如下：\",\"首先搜索浏览器的 DNS 缓存，缓存中维护一张域名与 IP 地址的对应表\",\"若没有命中，则继续搜索操作系统的 DNS 缓存\",\"若仍然没有命中，则操作系统将域名发送至本地域名服务器，本地域名服务器采用递归查询自己的 DNS 缓存，查找成功则返回结果\",\"若本地域名服务器的 DNS 缓存没有命中，则本地域名服务器向上级域名服务器进行迭代查询\",\"首先本地域名服务器向根域名服务器发起请求，根域名服务器返回顶级域名服务器的地址给本地服务器\",\"本地域名服务器拿到这个顶级域名服务器的地址后，就向其发起请求，获取权限域名服务器的地址\",\"本地域名服务器根据权限域名服务器的地址向其发起请求，最终得到该域名对应的 IP 地址\",\"本地域名服务器将得到的 IP 地址返回给操作系统，同时自己将 IP 地址缓存起来\",\"操作系统将 IP 地址返回给浏览器，同时自己也将 IP 地址缓存起\",\"至此，浏览器就得到了域名对应的 IP 地址，并将 IP 地址缓存起\"]},\"143\":{\"c\":[\"React\"]},\"144\":{\"c\":[\"React\"]},\"145\":{\"h\":\"HTTP1.0/1.1/2.0\"},\"146\":{\"h\":\"HTTP1.0\",\"t\":[\"HTTP协议的第二个版本，第一个在通讯中指定版本号的HTTP协议版本\",\"HTTP 1.0 浏览器与服务器只保持短暂的连接，每次请求都需要与服务器建立一个TCP连接 服务器完成请求处理后立即断开TCP连接，服务器不跟踪每个客户也不记录过去的请求\",\"简单来讲，每次与服务器交互，都需要新开一个连接\",\"例如，解析html文件，当发现文件中存在资源文件的时候，这时候又创建单独的链接\",\"最终导致，一个html文件的访问包含了多次的请求和响应，每次请求都需要创建连接、关系连接\",\"这种形式明显造成了性能上的缺陷\",\"如果需要建立长连接，需要设置一个非标准的Connection字段 Connection: keep-alive\"]},\"147\":{\"h\":\"HTTP1.1\",\"t\":[\"在HTTP1.1中，默认支持长连接（Connection: keep-alive），即在一个TCP连接上可以传送多个HTTP请求和响应，减少了建立和关闭连接的消耗和延迟\",\"建立一次连接，多次请求均由这个连接完成\",\"这样，在加载html文件的时候，文件中多个请求和响应就可以在一个连接中传输\",\"同时，HTTP 1.1还允许客户端不用等待上一次请求结果返回，就可以发出下一次请求，但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果，以保证客户端能够区分出每次请求的响应内容，这样也显著地减少了整个下载过程所需要的时间\",\"同时，HTTP1.1在HTTP1.0的基础上，增加更多的请求头和响应头来完善的功能，如下：\",\"引入了更多的缓存控制策略，如If-Unmodified-Since, If-Match, If-None-Match等缓存头来控制缓存策略 引入range，允许值请求资源某个部分 引入host，实现了在一台WEB服务器上可以在同一个IP地址和端口号上使用不同的主机名来创建多个虚拟WEB站点 并且还添加了其他的请求方法：put、delete、options...\"]},\"148\":{\"h\":\"HTTP2.0\",\"t\":[\"而HTTP2.0在相比之前版本，性能上有很大的提升，如添加了一个特性：\",\"多路复用\",\"二进制分帧\",\"首部压缩\",\"服务器推送\"]},\"149\":{\"h\":\"多路复用\",\"t\":[\"HTTP/2 复用TCP连接，在一个连接里，客户端和浏览器都可以同时发送多个请求或回应，而且不用按照顺序一一对应，这样就避免了”队头堵塞”\"]},\"150\":{\"h\":\"二进制分帧\",\"t\":[\"帧是HTTP2通信中最小单位信息\",\"HTTP/2 采用二进制格式传输数据，而非 HTTP 1.x 的文本格式，解析起来更高效 将请求和响应数据分割为更小的帧，并且它们采用二进制编码 HTTP2 中，同域名下所有通信都在单个连接上完成，该连接可以承载任意数量的双向数据流\",\"每个数据流都以消息的形式发送，而消息又由一个或多个帧组成。多个帧之间可以乱序发送，根据帧首部的流标识可以重新组装，这也是多路复用同时发送数据的实现条件\"]},\"151\":{\"h\":\"首部压缩\",\"t\":[\"HTTP/2在客户端和服务器端使用“首部表”来跟踪和存储之前发送的键值对，对于相同的数据，不再通过每次请求和响应发送\",\"首部表在HTTP/2的连接存续期内始终存在，由客户端和服务器共同渐进地更新\"]},\"152\":{\"h\":\"服务器推送\",\"t\":[\"HTTP2引入服务器推送，允许服务端推送资源给客户端\",\"服务器会顺便把一些客户端需要的资源一起推送到客户端，如在响应一个页面请求中，就可以随同页面的其它资源\",\"免得客户端再次创建连接发送请求到服务器端获取\",\"这种方式非常合适加载静态资源\"]},\"153\":{\"h\":\"总结\",\"t\":[\"HTTP1.0： -浏览器与服务器只保持短暂的连接，浏览器的每次请求都需要与服务器建立一个TCP连接 HTTP1.1： -引入了持久连接，即TCP连接默认不关闭，可以被多个请求复用\",\"在同一个TCP连接里面，客户端可以同时发送多个请求\",\"虽然允许复用TCP连接，但是同一个TCP连接里面，所有的数据通信是按次序进行的，服务器只有处理完一个请求，才会接着处理下一个请求。如果前面的处理特别慢，后面就会有许多请求排队等着\",\"新增了一些请求方法\",\"新增了一些请求头和响应头 HTTP2.0：\",\"采用二进制格式而非文本格式\",\"完全多路复用，而非有序并阻塞的、只需一个连接即可实现并行\",\"使用报头压缩，降低开销\",\"服务器推送\"]},\"154\":{\"c\":[\"React\"]},\"155\":{\"c\":[\"React\"]},\"156\":{\"h\":\"OSI模型\",\"t\":[\"OSI （Open System Interconnect）模型全称为开放式通信系统互连参考模型，是国际标准化组织 ( ISO ) 提出的一个试图使各种计算机在世界范围内互连为网络的标准框架 OSI 将计算机网络体系结构划分为七层，每一层实现各自的功能和协议，并完成与相邻层的接口通信。即每一层扮演固定的角色，互不打扰\"]},\"157\":{\"h\":\"划分\",\"t\":[\"OSI主要划分了七层，如下图所示：\"]},\"158\":{\"h\":\"应用层\",\"t\":[\"应用层位于 OSI 参考模型的第七层，其作用是通过应用程序间的交互来完成特定的网络应用\",\"该层协议定义了应用进程之间的交互规则，通过不同的应用层协议为不同的网络应用提供服务。例如域名系统 DNS，支持万维网应用的 HTTP 协议，电子邮件系统采用的 SMTP 协议等\",\"在应用层交互的数据单元称之为报文\"]},\"159\":{\"h\":\"表示层\",\"t\":[\"表示层的作用是使通信的应用程序能够解释交换数据的含义，其位于 OSI 参考模型的第六层，向上为应用层提供服务，向下接收来自会话层的服务 该层提供的服务主要包括数据压缩，数据加密以及数据描述，使应用程序不必担心在各台计算机中表示和存储的内部格式差异\"]},\"160\":{\"h\":\"会话层\",\"t\":[\"会话层就是负责建立、管理和终止表示层实体之间的通信会话 该层提供了数据交换的定界和同步功能，包括了建立检查点和恢复方案的方法\"]},\"161\":{\"h\":\"传输层\",\"t\":[\"传输层的主要任务是为两台主机进程之间的通信提供服务，处理数据包错误、数据包次序，以及其他一些关键传输问题 传输层向高层屏蔽了下层数据通信的细节。因此，它是计算机通信体系结构中关键的一层 其中，主要的传输层协议是TCP和UDP\"]},\"162\":{\"h\":\"网络层\",\"t\":[\"两台计算机之间传送数据时其通信链路往往不止一条，所传输的信息甚至可能经过很多通信子网 网络层的主要任务就是选择合适的网间路由和交换节点，确保数据按时成功传送 在发送数据时，网络层把传输层产生的报文或用户数据报封装成分组和包，向下传输到数据链路层 在网络层使用的协议是无连接的网际协议（Internet Protocol）和许多路由协议，因此我们通常把该层简单地称为 IP 层\"]},\"163\":{\"h\":\"数据链路层\",\"t\":[\"数据链路层通常也叫做链路层，在物理层和网络层之间。两台主机之间的数据传输，总是在一段一段的链路上传送的，这就需要使用专门的链路层协议\",\"在两个相邻节点之间传送数据时，数据链路层将网络层交下来的 IP 数据报组装成帧，在两个相邻节点间的链路上传送帧\",\"每一帧的数据可以分成：报头head和数据data两部分:\",\"head 标明数据发送者、接受者、数据类型，如 MAC地址\",\"data 存储了计算机之间交互的数据 通过控制信息我们可以知道一个帧的起止比特位置，此外，也能使接收端检测出所收到的帧有无差错，如果发现差错，数据链路层能够简单的丢弃掉这个帧，以避免继续占用网络资源\"]},\"164\":{\"h\":\"物理层\",\"t\":[\"作为 OSI 参考模型中最低的一层，物理层的作用是实现计算机节点之间比特流的透明传送 该层的主要任务是确定与传输媒体的接口的一些特性（机械特性、电气特性、功能特性，过程特性） 该层主要是和硬件有关，与软件关系不大\"]},\"165\":{\"h\":\"传输过程\",\"t\":[\"数据在各层之间的传输如下图所示：\",\"应用层报文被传送到运输层\",\"在最简单的情况下，运输层收取到报文并附上附加信息，该首部将被接收端的运输层使用\",\"应用层报文和运输层首部信息一道构成了运输层报文段。附加的信息可能包括：允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息。该信息让接收端能够判断报文中的比特是否在途中已被改变\",\"运输层则向网络层传递该报文段，网络层增加了如源和目的端系统地址等网络层首部信息，生成了网络层数据报\",\"网络层数据报接下来被传递给链路层，在数据链路层数据包添加发送端 MAC 地址和接收端 MAC 地址后被封装成数据帧\",\"在物理层数据帧被封装成比特流，之后通过传输介质传送到对端\",\"对端再一步步解开封装，获取到传送的数据\"]},\"166\":{\"c\":[\"React\"]},\"167\":{\"c\":[\"React\"]},\"168\":{\"h\":\"TCP/IP\",\"t\":[\"TCP/IP，传输控制协议/网际协议，是指能够在多个不同网络间实现信息传输的协议簇\",\"TCP（传输控制协议）:一种面向连接的、可靠的、基于字节流的传输层通信协议\",\"IP（网际协议）:用于封包交换数据网络的协议\",\"TCP/IP协议不仅仅指的是TCP 和IP两个协议，而是指一个由FTP、SMTP、TCP、UDP、IP等协议构成的协议簇。\"]},\"169\":{\"h\":\"划分\",\"t\":[\"TCP/IP协议族按层次分别了五层体系或者四层体系\",\"五层体系的协议结构是综合了 OSI 和 TCP/IP 优点的一种协议，包括应用层、传输层、网络层、数据链路层和物理层\",\"五层协议的体系结构只是为介绍网络原理而设计的，实际应用还是 TCP/IP 四层体系结构，包括应用层、传输层、网络层（网际互联层）、网络接口层\",\"如下图所示：\"]},\"170\":{\"h\":\"五层体系\"},\"171\":{\"h\":\"应用层\",\"t\":[\"TCP/IP 模型将 OSI 参考模型中的会话层、表示层和应用层的功能合并到一个应用层实现，通过不同的应用层协议为不同的应用提供服务 如：FTP、Telnet、DNS、SMTP 等\"]},\"172\":{\"h\":\"传输层\",\"t\":[\"该层对应于 OSI 参考模型的传输层，为上层实体提供源端到对端主机的通信功能\",\"传输层定义了两个主要协议：传输控制协议（TCP）和用户数据报协议（UDP）\",\"其中面向连接的 TCP 协议保证了数据的传输可靠性，面向无连接的 UDP 协议能够实现数据包简单、快速地传输\"]},\"173\":{\"h\":\"网络层\",\"t\":[\"负责为分组网络中的不同主机提供通信服务，并通过选择合适的路由将数据传递到目标主机\",\"在发送数据时，网络层把运输层产生的报文段或用户数据封装成分组或包进行传送\"]},\"174\":{\"h\":\"数据链路层\",\"t\":[\"数据链路层在两个相邻节点传输数据时，将网络层交下来的IP数据报组装成帧，在两个相邻节点之间的链路上传送帧\"]},\"175\":{\"h\":\"物理层\",\"t\":[\"保数据可以在各种物理媒介上进行传输，为数据的传输提供可靠的环境\"]},\"176\":{\"h\":\"四层体系\",\"t\":[\"TCP/IP 的四层结构则如下表所示：\",\"层次名称\",\"单位\",\"功能\",\"协议\",\"网络接口层\",\"帧\",\"负责实际数据的传输，对应OSI参考模型的下两层\",\"HDLC（高级链路控制协议）PPP（点对点协议） SLIP（串行线路接口协议）\",\"网络层\",\"数据报\",\"负责网络间的寻址数据传输，对应OSI参考模型的第三层\",\"IP（网际协议） ICMP（网际控制消息协议）ARP（地址解析协议） RARP（反向地址解析协议）\",\"传输层\",\"报文段\",\"负责提供可靠的传输服务，对应OSI参考模型的第四层\",\"TCP（控制传输协议） UDP（用户数据报协议）\",\"应用层\",\"负责实现一切与应用程序相关的功能，对应OSI参考模型的上三层\",\"FTP（文件传输协议） HTTP（超文本传输协议）DNS（域名服务器协议）SMTP（简单邮件传输协议）NFS（网络文件系统协议）\"]},\"177\":{\"h\":\"总结\",\"t\":[\"OSI 参考模型与 TCP/IP 参考模型区别如下：\",\"相同点：\",\"OSI 参考模型与 TCP/IP 参考模型都采用了层次结构\",\"都能够提供面向连接和无连接两种通信服务机制 不同点：\",\"OSI 采用的七层模型； TCP/IP 是四层或五层结构\",\"TCP/IP 参考模型没有对网络接口层进行细分，只是一些概念性的描述； OSI 参考模型对服务和协议做了明确的区分\",\"OSI 参考模型虽然网络划分为七层，但实现起来较困难。TCP/IP 参考模型作为一种简化的分层结构是可以的\",\"TCP/IP协议去掉表示层和会话层的原因在于会话层、表示层、应用层都是在应用程序内部实现的，最终产出的是一个应用数据包，而应用程序之间是几乎无法实现代码的抽象共享的，这也就造成 OSI 设想中的应用程序维度的分层是无法实现的\"]},\"178\":{\"c\":[\"React\"]},\"179\":{\"c\":[\"React\"]},\"180\":{\"h\":\"UDP、TCP\"},\"181\":{\"h\":\"UDP\",\"t\":[\"UDP（User Datagram Protocol），用户数据包协议，是一个简单的面向数据报的通信协议，即对应用层交下来的报文，不合并，不拆分，只是在其上面加上首部后就交给了下面的网络层\",\"也就是说无论应用层交给UDP多长的报文，它统统发送，一次发送一个报文\",\"而对接收方，接到后直接去除首部，交给上面的应用层就完成任务\",\"UDP报头包括4个字段，每个字段占用2个字节（即16个二进制位），标题短，开销小 特点如下：\",\"UDP 不提供复杂的控制机制，利用 IP 提供面向无连接的通信服务\",\"传输途中出现丢包，UDP 也不负责重发\",\"当包的到达顺序出现乱序时，UDP没有纠正的功能。\",\"并且它是将应用程序发来的数据在收到的那一刻，立即按照原样发送到网络上的一种机制。即使是出现网络拥堵的情况，UDP 也无法进行流量控制等避免网络拥塞行为\"]},\"182\":{\"h\":\"TCP\",\"t\":[\"TCP（Transmission Control Protocol），传输控制协议，是一种可靠、面向字节流的通信协议，把上面应用层交下来的数据看成无结构的字节流来发送\",\"可以想象成流水形式的，发送方TCP会将数据放入“蓄水池”（缓存区），等到可以发送的时候就发送，不能发送就等着，TCP会根据当前网络的拥塞状态来确定每个报文段的大小 TCP报文首部有20个字节，额外开销大 特点如下：\",\"TCP充分地实现了数据传输时各种控制功能，可以进行丢包时的重发控制，还可以对次序乱掉的分包进行顺序控制。而这些在 UDP 中都没有。\",\"此外，TCP 作为一种面向有连接的协议，只有在确认通信对端存在时才会发送数据，从而可以控制通信流量的浪费。\",\"根据 TCP 的这些机制，在 IP 这种无连接的网络上也能够实现高可靠性的通信（ 主要通过检验和、序列号、确认应答、重发控制、连接管理以及窗口控制等机制实现）\"]},\"183\":{\"h\":\"区别\",\"t\":[\"UDP与TCP两者的都位于传输层 两者区别如下表所示：\",\"TCP\",\"UDP\",\"可靠性\",\"可靠\",\"不可靠\",\"连接性\",\"面向连接\",\"无连接\",\"报文\",\"面向字节流\",\"面向报文\",\"效率\",\"传输效率低\",\"传输效率高\",\"双共性\",\"全双工\",\"一对一、一对多、多对一、多对多\",\"流量控制\",\"滑动窗口\",\"无\",\"拥塞控制\",\"慢开始、拥塞避免、快重传、快恢复\",\"无\",\"传输效率\",\"慢\",\"快\",\"TCP 是面向连接的协议，建立连接3次握手、断开连接四次挥手，UDP是面向无连接，数据传输前后不连接，发送端只负责将数据发送到网络，接收端从消息队列读取\",\"TCP 提供可靠的服务，传输过程采用流量控制、编号与确认、计时器等手段确保数据无差错，不丢失。UDP 则尽可能传递数据，但不保证传递交付给对方\",\"TCP 面向字节流，将应用层报文看成一串无结构的字节流，分解为多个TCP报文段传输后，在目的站重新装配。UDP协议面向报文，不拆分应用层报文，只保留报文边界，一次发送一个报文，接收方去除报文首部后，原封不动将报文交给上层应用\",\"TCP 只能点对点全双工通信。UDP 支持一对一、一对多、多对一和多对多的交互通信\",\"alt text\"]},\"184\":{\"c\":[\"React\"]},\"185\":{\"c\":[\"React\"]},\"186\":{\"h\":\"地址栏输入 URL的行为\",\"t\":[\"从输入 URL到回车后发生的行为如下：\",\"URL解析\",\"DNS 查询\",\"TCP 连接\",\"HTTP 请求\",\"响应请求\",\"页面渲染\"]},\"187\":{\"h\":\"URL解析\",\"t\":[\"首先判断你输入的是一个合法的 URL 还是一个待搜索的关键词，并且根据你输入的内容进行对应操作 URL的解析第过程中的第一步，一个url的结构解析如下：\"]},\"188\":{\"h\":\"DNS查询\",\"t\":[\"整个查询过程如下图所示： 最终，获取到了域名对应的目标服务器IP地址\"]},\"189\":{\"h\":\"TCP连接\",\"t\":[\"在确定目标服务器服务器的IP地址后，则经历三次握手建立TCP连接，流程如下：\"]},\"190\":{\"h\":\"发送 http 请求\",\"t\":[\"当建立tcp连接之后，就可以在这基础上进行通信，浏览器发送 http 请求到目标服务器 请求的内容包括：\",\"请求行\",\"请求头\",\"请求主体\"]},\"191\":{\"h\":\"响应请求\",\"t\":[\"当服务器接收到浏览器的请求之后，就会进行逻辑操作，处理完成之后返回一个HTTP响应消息，包括：\",\"状态行\",\"响应头\",\"响应正文 在服务器响应之后，由于现在http默认开始长连接keep-alive，当页面关闭之后，tcp链接则会经过四次挥手完成断开\"]},\"192\":{\"h\":\"页面渲染\",\"t\":[\"当浏览器接收到服务器响应的资源后，首先会对资源进行解析：\",\"查看响应头的信息，根据不同的指示做对应处理，比如重定向，存储cookie，解压gzip，缓存资源等等\",\"查看响应头的 Content-Type的值，根据不同的资源类型采用不同的解析方式 关于页面的渲染过程如下：\",\"解析HTML，构建 DOM 树\",\"解析 CSS ，生成 CSS 规则树\",\"合并 DOM 树和 CSS 规则，生成 render 树\",\"布局 render 树（ Layout / reflow ），负责各元素尺寸、位置的计算\",\"绘制 render 树（ paint ），绘制页面像素信息\",\"浏览器会将各层的信息发送给 GPU，GPU 会将各层合成（ composite ），显示在屏幕上\"]},\"193\":{\"c\":[\"React\"]},\"194\":{\"c\":[\"React\"]},\"195\":{\"h\":\"WebSocket\",\"t\":[\"WebSocket，是一种网络传输协议，位于OSI模型的应用层。可在单个TCP连接上进行全双工通信，能更好的节省服务器资源和带宽并达到实时通迅\",\"客户端和服务器只需要完成一次握手，两者之间就可以创建持久性的连接，并进行双向数据传输 websocket服务器与客户端通过握手连接，连接成功后，两者都能主动的向对方发送或接受数据\",\"而在websocket出现之前，开发实时web应用的方式为轮询\",\"不停地向服务器发送 HTTP 请求，问有没有数据，有数据的话服务器就用响应报文回应。如果轮询的频率比较高，那么就可以近似地实现“实时通信”的效果\",\"轮询的缺点也很明显，反复发送无效查询请求耗费了大量的带宽和 CPU 资源\"]},\"196\":{\"h\":\"特点\"},\"197\":{\"h\":\"全双工\",\"t\":[\"通信允许数据在两个方向上同时传输，它在能力上相当于两个单工通信方式的结合 例如指 A→B 的同时 B→A ，是瞬时同步的\"]},\"198\":{\"h\":\"二进制帧\",\"t\":[\"采用了二进制帧结构，语法、语义与 HTTP 完全不兼容，相比http/2，WebSocket 更侧重于“实时通信”，而HTTP/2 更侧重于提高传输效率，所以两者的帧结构也有很大的区别 不像 HTTP/2 那样定义流，也就不存在多路复用、优先级等特性 自身就是全双工，也不需要服务器推送\"]},\"199\":{\"h\":\"协议名\",\"t\":[\"引入ws和wss分别代表明文和密文的websocket协议，且默认端口使用80或443，几乎与http一致\",\"ws://www.chrono.com ws://www.chrono.com:8080/srv wss://www.chrono.com:445/im?user_id=xxx\"]},\"200\":{\"h\":\"握手\",\"t\":[\"WebSocket 也要有一个握手过程，然后才能正式收发数据 客户端发送数据格式如下：\",\"GET /chat HTTP/1.1 Host: server.example.com Upgrade: websocket Connection: Upgrade Sec-WebSocket-Key: dGhlIHNhbXBsZSBub25jZQ== Origin: http://example.com Sec-WebSocket-Protocol: chat, superchat Sec-WebSocket-Version: 13 Connection：必须设置Upgrade，表示客户端希望连接升级 Upgrade：必须设置Websocket，表示希望升级到Websocket协议 Sec-WebSocket-Key：客户端发送的一个 base64 编码的密文，用于简单的认证秘钥。要求服务端必须返回一个对应加密的“Sec-WebSocket-Accept应答，否则客户端会抛出错误，并关闭连接 Sec-WebSocket-Version ：表示支持的Websocket版本\",\"服务端返回的数据格式：\",\"HTTP/1.1 101 Switching Protocols Upgrade: websocket Connection: Upgrade Sec-WebSocket-Accept: s3pPLMBiTxaQ9kYGzzhZRbK+xOo=Sec-WebSocket-Protocol: chat HTTP/1.1 101 Switching\",\"Protocols：表示服务端接受 WebSocket 协议的客户端连接\",\"Sec-WebSocket-Accep：验证客户端请求报文，同样也是为了防止误连接。具体做法是把请求头里“Sec-WebSocket-Key”的值，加上一个专用的 UUID，再计算摘要\"]},\"201\":{\"h\":\"优点\",\"t\":[\"较少的控制开销：数据包头部协议较小，不同于http每次请求需要携带完整的头部\",\"更强的实时性：相对于HTTP请求需要等待客户端发起请求服务端才能响应，延迟明显更少\",\"保持创连接状态：创建通信后，可省略状态信息，不同于HTTP每次请求需要携带身份验证\",\"更好的二进制支持：定义了二进制帧，更好处理二进制内容\",\"支持扩展：用户可以扩展websocket协议、实现部分自定义的子协议\",\"更好的压缩效果：Websocket在适当的扩展支持下，可以沿用之前内容的上下文，在传递类似的数据时，可以显著地提高压缩率\"]},\"202\":{\"h\":\"应用场景\",\"t\":[\"基于websocket的事实通信的特点，其存在的应用场景大概有：\",\"弹幕\",\"媒体聊天\",\"协同编辑\",\"基于位置的应用\",\"体育实况更新\",\"股票基金报价实时更新\"]},\"203\":{\"c\":[\"React\"]},\"204\":{\"c\":[\"React\"]},\"205\":{\"h\":\"状态码\",\"t\":[\"HTTP状态码（英语：HTTP Status Code），用以表示网页服务器超文本传输协议响应状态的3位数字代码\",\"它由 RFC 2616规范定义的，并得到 RFC 2518、RFC 2817、RFC 2295、RFC 2774与 RFC 4918等规范扩展\",\"简单来讲，http状态码的作用是服务器告诉客户端当前请求响应的状态，通过状态码就能判断和分析服务器的运行状态\"]},\"206\":{\"h\":\"分类\",\"t\":[\"状态码第一位数字决定了不同的响应状态，有如下：\",\"1 表示消息\",\"2 表示成功\",\"3 表示重定向\",\"4 表示请求错误\",\"5 表示服务器错误\"]},\"207\":{\"h\":\"1xx\",\"t\":[\"代表请求已被接受，需要继续处理。这类响应是临时响应，只包含状态行和某些可选的响应头信息，并以空行结束\",\"常见的有：\",\"100（客户端继续发送请求，这是临时响应）：这个临时响应是用来通知客户端它的部分请求已经被服务器接收，且仍未被拒绝。客户端应当继续发送请求的剩余部分，或者如果请求已经完成，忽略这个响应。服务器必须在请求完成后向客户端发送一个最终响应\",\"101：服务器根据客户端的请求切换协议，主要用于websocket或http2升级\"]},\"208\":{\"h\":\"2xx\",\"t\":[\"代表请求已成功被服务器接收、理解、并接受 常见的有：\",\"200（成功）：请求已成功，请求所希望的响应头或数据体将随此响应返回\",\"201（已创建）：请求成功并且服务器创建了新的资源\",\"202（已创建）：服务器已经接收请求，但尚未处理\",\"203（非授权信息）：服务器已成功处理请求，但返回的信息可能来自另一来源\",\"204（无内容）：服务器成功处理请求，但没有返回任何内容\",\"205（重置内容）：服务器成功处理请求，但没有返回任何内容\",\"206（部分内容）：服务器成功处理了部分请求\"]},\"209\":{\"h\":\"3xx\",\"t\":[\"表示要完成请求，需要进一步操作。 通常，这些状态代码用来重定向\",\"常见的有：\",\"300（多种选择）：针对请求，服务器可执行多种操作。 服务器可根据请求者 (user agent) 选择一项操作，或提供操作列表供请求者选择\",\"301（永久移动）：请求的网页已永久移动到新位置。 服务器返回此响应（对 GET 或 HEAD 请求的响应）时，会自动将请求者转到新位置\",\"302（临时移动）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求\",\"303（查看其他位置）：请求者应当对不同的位置使用单独的 GET 请求来检索响应时，服务器返回此代码\",\"305 （使用代理）： 请求者只能使用代理访问请求的网页。 如果服务器返回此响应，还表示请求者应使用代理\",\"307 （临时重定向）： 服务器目前从不同位置的网页响应请求，但请求者应继续使用原有位置来进行以后的请求\"]},\"210\":{\"h\":\"4xx\",\"t\":[\"代表了客户端看起来可能发生了错误，妨碍了服务器的处理\",\"常见的有：\",\"400（错误请求）： 服务器不理解请求的语法\",\"401（未授权）： 请求要求身份验证。 对于需要登录的网页，服务器可能返回此响应。\",\"403（禁止）： 服务器拒绝请求\",\"404（未找到）： 服务器找不到请求的网页\",\"405（方法禁用）： 禁用请求中指定的方法\",\"406（不接受）： 无法使用请求的内容特性响应请求的网页\",\"407（需要代理授权）： 此状态代码与 401（未授权）类似，但指定请求者应当授权使用代理\",\"408（请求超时）： 服务器等候请求时发生超时\"]},\"211\":{\"h\":\"5xx\",\"t\":[\"表示服务器无法完成明显有效的请求。这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生\",\"常见的有：\",\"500（服务器内部错误）：服务器遇到错误，无法完成请求\",\"501（尚未实施）：服务器不具备完成请求的功能。 例如，服务器无法识别请求方法时可能会返回此代码\",\"502（错误网关）： 服务器作为网关或代理，从上游服务器收到无效响应\",\"503（服务不可用）： 服务器目前无法使用（由于超载或停机维护）\",\"504（网关超时）： 服务器作为网关或代理，但是没有及时从上游服务器收到请求\",\"505（HTTP 版本不受支持）： 服务器不支持请求中所用的 HTTP 协议版本\"]},\"212\":{\"h\":\"适用场景\",\"t\":[\"下面给出一些状态码的适用场景：\",\"100：客户端在发送POST数据给服务器前，征询服务器情况，看服务器是否处理POST的数据，如果不处理，客户端则不上传POST数据，如果处理，则POST上传数据。常用于POST大数据传输\",\"206：一般用来做断点续传，或者是视频文件等大文件的加载\",\"301：永久重定向会缓存。新域名替换旧域名，旧的域名不再使用时，用户访问旧域名时用301就重定向到新的域名\",\"302：临时重定向不会缓存，常用 于未登陆的用户访问用户中心重定向到登录页面\",\"304：协商缓存，告诉客户端有缓存，直接使用缓存中的数据，返回页面的只有头部信息，是没有内容部分\",\"400：参数有误，请求无法被服务器识别\",\"403：告诉客户端进制访问该站点或者资源，如在外网环境下，然后访问只有内网IP才能访问的时候则返回\",\"404：服务器找不到资源时，或者服务器拒绝请求又不想说明理由时\",\"503：服务器停机维护时，主动用503响应请求或 nginx 设置限速，超过限速，会返回503\",\"504：网关超时\"]},\"213\":{\"c\":[\"React\"]},\"214\":{\"c\":[\"React\"]},\"215\":{\"h\":\"GET、POST\",\"t\":[\"GET：GET方法请求一个指定资源的表示形式，使用GET的请求应该只被用于获取数据\",\"POST：POST方法用于将实体提交到指定的资源，通常导致在服务器上的状态变化或副作用\"]},\"216\":{\"h\":\"区别\",\"t\":[\"从w3schools得到的标准答案的区别如下：\",\"GET在浏览器回退时是无害的，而POST会再次提交请求。\",\"GET产生的URL地址可以被Bookmark(书签)，而POST不可以。\",\"GET请求会被浏览器主动cache，而POST不会，除非手动设置。\",\"GET请求只能进行url编码，而POST支持多种编码方式。\",\"GET请求参数会被完整保留在浏览器历史记录里，而POST中的参数不会被保留。\",\"GET请求在URL中传送的参数是有长度限制的，而POST没有。\",\"对参数的数据类型，GET只接受ASCII字符，而POST没有限制。\",\"GET比POST更不安全，因为参数直接暴露在URL上，所以不能用来传递敏感信息。\",\"GET参数通过URL传递，POST放在Request body中\"]},\"217\":{\"h\":\"参数位置\",\"t\":[\"貌似从上面看到GET与POST请求区别非常大，但两者实质并没有区别 无论 GET 还是 POST，用的都是同一个传输层协议，所以在传输上没有区别 当不携带参数的时候，两者最大的区别为第一行方法名不同\",\"POST /uri HTTP/1.1 \\\\r\\\\n GET /uri HTTP/1.1 \\\\r\\\\n\",\"当携带参数的时候，我们都知道GET请求是放在url中，POST则放在body中 GET 方法简约版报文是这样的\",\"GET /index.html?name=qiming.c&age=22 HTTP/1.1 Host: localhost\",\"POST 方法简约版报文是这样的\",\"POST /index.html HTTP/1.1 Host: localhost Content-Type: application/x-www-form-urlencoded name=qiming.c&age=22\",\"重要\",\"这里只是约定，并不属于HTTP规范，相反的，我们可以在POST请求中url中写入参数，或者GET请求中的body携带参数\",\"HTTP/1.0中没有明确指出GET请求不能携带请求体。\",\"HTTP/1.1协议也没有明确禁止GET请求包含请求体。\",\"HTTP协议规范（RFC 7231）中，明确指出GET请求中的有效负载（payload）没有定义的语义，而且在GET请求中发送有效负载可能会导致一些现有的实现拒绝该请求\"]},\"218\":{\"h\":\"参数长度\",\"t\":[\"HTTP 协议没有Body和 URL 的长度限制，对 URL 限制的大多是浏览器和服务器的原因 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系统的支持\",\"这里限制的是整个URL长度，而不仅仅是参数值的长度\",\"服务器处理长 URL 要消耗比较多的资源，为了性能和安全考虑，会给 URL 长度加限制\"]},\"219\":{\"h\":\"安全\",\"t\":[\"POST 比 GET 安全，因为数据在地址栏上不可见 然而，从传输的角度来说，他们都是不安全的，因为 HTTP 在网络上是明文传输的，只要在网络节点上捉包，就能完整地获取数据报文 只有使用HTTPS才能加密安全\"]},\"220\":{\"h\":\"数据包\",\"t\":[\"对于GET方式的请求，浏览器会把http header和data一并发送出去，服务器响应200（返回数据） 对于POST，浏览器先发送header，服务器响应100 continue，浏览器再发送data，服务器响应200 ok\",\"并不是所有浏览器都会在POST中发送两次包，Firefox就只发送一次\"]},\"221\":{\"c\":[\"React\"]},\"222\":{\"c\":[\"React\"]},\"223\":{\"h\":\"请求头\",\"t\":[\"HTTP头字段（HTTP header fields）,是指在超文本传输协议（HTTP）的请求和响应消息中的消息头部分\",\"它们定义了一个超文本传输协议事务中的操作参数\",\"HTTP头部字段可以自己根据需要定义，因此可能在 Web 服务器和浏览器上发现非标准的头字段\",\"下面是一个HTTP请求的请求头：\",\"GET /home.html HTTP/1.1 Host: developer.mozilla.org User-Agent: Mozilla/5.0 (Macintosh; Intel Mac OS X 10.9; rv:50.0) Gecko/20100101 Firefox/50.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: en-US,en;q=0.5 Accept-Encoding: gzip, deflate, br Referer: https://developer.mozilla.org/testpage.html Connection: keep-alive Upgrade-Insecure-Requests: 1 If-Modified-Since: Mon, 18 Jul 2016 02:36:04 GMT If-None-Match: \\\"c561c68d0ba92bbeb8b0fff2a9199f722e3a621a\\\" Cache-Control: max-age=0\"]},\"224\":{\"h\":\"分类\",\"t\":[\"常见的请求字段如下表所示：\",\"字段名\",\"说明\",\"示例\",\"Accept\",\"能够接受的回应内容类型（Content-Types）\",\"Accept: text/plain\",\"Accept-Charset\",\"能够接受的字符集\",\"Accept-Charset: utf-8\",\"Accept-Encoding\",\"能够接受的编码方式列表\",\"Accept-Encoding: gzip, deflate\",\"Accept-Language\",\"能够接受的回应内容的自然语言列表\",\"Accept-Language: en-US\",\"Authorization\",\"用于超文本传输协议的认证的认证信息\",\"Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==\",\"Cache-Control\",\"用来指定在这次的请求/响应链中的所有缓存机制 都必须 遵守的指令\",\"Cache-Control: no-cache\",\"Connection\",\"该浏览器想要优先使用的连接类型\",\"Connection: keep-alive Connection: Upgrade\",\"Cookie\",\"服务器通过 Set- Cookie （下文详述）发送的一个 超文本传输协议Cookie\",\"Cookie: $Version=1; Skin=new;\",\"Content-Length\",\"以 八位字节数组 （8位的字节）表示的请求体的长度\",\"Content-Length: 348\",\"Content-Type\",\"请求体的 多媒体类型\",\"Content-Type: application/x-www-form-urlencoded\",\"Date\",\"发送该消息的日期和时间\",\"Date: Tue, 15 Nov 1994 08:12:31 GMT\",\"Expect\",\"表明客户端要求服务器做出特定的行为\",\"Expect: 100-continue\",\"Host\",\"服务器的域名(用于虚拟主机 )，以及服务器所监听的传输控制协议端口号\",\"Host: en.wikipedia.org:80 Host: en.wikipedia.org\",\"If-Match\",\"仅当客户端提供的实体与服务器上对应的实体相匹配时，才进行对应的操作。主要作用时，用作像 PUT 这样的方法中，仅当从用户上次更新某个资源以来，该资源未被修改的情况下，才更新该资源\",\"If-Match: \\\"737060cd8c284d8af7ad3082f209582d\\\"\",\"If-Modified-Since\",\"允许在对应的内容未被修改的情况下返回304未修改\",\"If-Modified-Since: Sat, 29 Oct 1994 19:43:31 GMT\",\"If-None-Match\",\"允许在对应的内容未被修改的情况下返回304未修改\",\"If-None-Match: \\\"737060cd8c284d8af7ad3082f209582d\\\"\",\"If-Range\",\"如果该实体未被修改过，则向我发送我所缺少的那一个或多个部分；否则，发送整个新的实体\",\"If-Range: \\\"737060cd8c284d8af7ad3082f209582d\\\"\",\"Range\",\"仅请求某个实体的一部分\",\"Range: bytes=500-999\",\"User-Agent\",\"浏览器的浏览器身份标识字符串\",\"User-Agent: Mozilla/5.0 (X11; Linux x86_64; rv:12.0) Gecko/20100101 Firefox/21.0\",\"Origin\",\"发起一个针对 跨来源资源共享 的请求\",\"Origin: http://www.example-social-network.com\"]},\"225\":{\"h\":\"场景\",\"t\":[\"通过配合请求头和响应头，可以满足一些场景的功能实现：\"]},\"226\":{\"h\":\"协商缓存\",\"t\":[\"协商缓存是利用的是【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对请求头响应头来管理的\",\"Last-Modified 表示本地文件最后修改日期，浏览器会在request header加上If-Modified-Since（上次返回的Last-Modified的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来\",\"Etag就像一个指纹，资源变化都会导致ETag变化，跟最后修改时间没有关系，ETag可以保证每一个资源是唯一的\",\"If-None-Match的header会将上次返回的Etag发送给服务器，询问该资源的Etag是否有更新，有变动就会发送新的资源回来\",\"而强制缓存不需要发送请求到服务端，根据请求头expires和cache-control判断是否命中强缓存\",\"强制缓存与协商缓存的流程图如下所示：\"]},\"227\":{\"h\":\"会话状态\",\"t\":[\"cookie，类型为「小型文本文件」，指某些网站为了辨别用户身份而储存在用户本地终端上的数据，通过响应头set-cookie决定\",\"作为一段一般不超过 4KB 的小型文本数据，它由一个名称（Name）、一个值（Value）和其它几个用于控制 Cookie 有效期、安全性、使用范围的可选属性组成\",\"Cookie 主要用于以下三个方面：\",\"会话状态管理（如用户登录状态、购物车、游戏分数或其它需要记录的信息）\",\"个性化设置（如用户自定义设置、主题等）\",\"浏览器行为跟踪（如跟踪分析用户行为等\"]},\"228\":{\"c\":[\"React\"]},\"229\":{\"c\":[\"React\"]},\"230\":{\"h\":\"HTTP和HTTPS\",\"t\":[\"HTTP (HyperText Transfer Protocol)，即超文本运输协议，是实现网络通信的一种规范。即将数据由A传到B或将B传输到A，并且 A 与 B 之间能够存放很多第三方，如： A<=>X<=>Y<=>Z<=>B\",\"传输的数据并不是计算机底层中的二进制包，而是完整的、有意义的数据，如HTML 文件, 图片文件, 查询结果等超文本，能够被上层应用识别\",\"在实际应用中，HTTP常被用于在Web浏览器和网站服务器之间传递信息，以明文方式发送内容，不提供任何方式的数据加密\",\"特点如下：\",\"支持客户/服务器模式\",\"简单快速：客户向服务器请求服务时，只需传送请求方法和路径。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快\",\"灵活：HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记\",\"无连接：无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间\",\"无状态：HTTP协议无法根据之前的状态进行本次的请求处理\"]},\"231\":{\"h\":\"HTTPS\",\"t\":[\"HTTPS出现是为了解决HTTP不安全的特性。 为了保证这些隐私数据能加密传输，让HTTP运行安全的SSL/TLS协议上，即 HTTPS = HTTP + SSL/TLS，通过 SSL证书来验证服务器的身份，并为浏览器和服务器之间的通信进行加密 SSL 协议位于 TCP/IP 协议与各种应用层协议之间，浏览器和服务器在使用 SSL 建立连接时需要选择一组恰当的加密算法来实现安全通信，为数据通讯提供安全支持\",\"流程图如下所示：\",\"首先客户端通过URL访问服务器建立SSL连接\",\"服务端收到客户端请求后，会将网站支持的证书信息（证书中包含公钥）传送一份给客户端\",\"客户端的服务器开始协商SSL连接的安全等级，也就是信息加密的等级\",\"客户端的浏览器根据双方同意的安全等级，建立会话密钥，然后利用网站的公钥将会话密钥加密，并传送给网站\",\"服务器利用自己的私钥解密出会话密钥\",\"服务器利用会话密钥加密与客户端之间的通信\"]},\"232\":{\"h\":\"区别\",\"t\":[\"HTTPS是HTTP协议的安全版本，HTTP协议的数据传输是明文的，是不安全的，HTTPS使用了SSL/TLS协议进行了加密处理，相对更安全\",\"HTTP 和 HTTPS 使用连接方式不同，默认端口也不一样，HTTP是80，HTTPS是443\",\"HTTPS 由于需要设计加密以及多次握手，性能方面不如 HTTP\",\"HTTPS需要SSL，SSL 证书需要钱，功能越强大的证书费用越高\"]},\"233\":{\"h\":\"HTTPS为何安全\",\"t\":[\"HTTP安全隐患：\",\"通信使用明文（不加密），内容可能被窃听\",\"不验证通信方的身份，因此有可能遭遇伪装 而HTTPS的出现正是解决这些问题，HTTPS是建立在SSL之上，其安全性由SSL来保证\",\"在采用SSL后，HTTP就拥有了HTTPS的加密、证书和完整性保护这些功能\"]},\"234\":{\"h\":\"SSL实现\",\"t\":[\"SSL 的实现这些功能主要依赖于以下手段：\",\"对称加密：采用协商的密钥对数据加密\",\"非对称加密：实现身份认证和密钥协商\",\"摘要算法：验证信息的完整性\",\"数字签名：身份验证\"]},\"235\":{\"h\":\"对称加密\",\"t\":[\"对称加密指的是加密和解密使用的秘钥都是同一个，是对称的。只要保证了密钥的安全，那整个通信过程就可以说具有了机密性\"]},\"236\":{\"h\":\"非对称加密\",\"t\":[\"非对称加密，存在两个秘钥，一个叫公钥，一个叫私钥。两个秘钥是不同的，公钥可以公开给任何人使用，私钥则需要保密\",\"公钥和私钥都可以用来加密解密，但公钥加密后只能用私钥解 密，反过来，私钥加密后也只能用公钥解密\"]},\"237\":{\"h\":\"混合加密\",\"t\":[\"在HTTPS通信过程中，采用的是对称加密+非对称加密，也就是混合加密\",\"在对称加密中讲到，如果能够保证了密钥的安全，那整个通信过程就可以说具有了机密性\",\"而HTTPS采用非对称加密解决秘钥交换的问题\",\"具体做法是发送密文的一方使用对方的公钥进行加密处理“对称的密钥”，然后对方用自己的私钥解密拿到“对称的密钥”\",\"这样可以确保交换的密钥是安全的前提下，使用对称加密方式进行通信\"]},\"238\":{\"h\":\"摘要算法\",\"t\":[\"实现完整性的手段主要是摘要算法，也就是常说的散列函数、哈希函数\",\"可以理解成一种特殊的压缩算法，它能够把任意长度的数据“压缩”成固定长度、而且独一无二的“摘要”字符串，就好像是给这段数据生成了一个数字“指纹”\",\"摘要算法保证了“数字摘要”和原文是完全等价的。所以，我们只要在原文后附上它的摘要，就能够保证数据的完整性\"]},\"239\":{\"h\":\"数字签名\",\"t\":[\"数字签名能确定消息确实是由发送方签名并发出来的，因为别人假冒不了发送方的签名\",\"原理其实很简单，就是用私钥加密，公钥解密\",\"签名和公钥一样完全公开，任何人都可以获取。但这个签名只有用私钥对应的公钥才能解开，拿到摘要后，再比对原文验证完整性，就可以像签署文件一样证明消息确实是你发的\",\"和消息本身一样，因为谁都可以发布公钥，我们还缺少防止黑客伪造公钥的手段，也就是说，怎么判断这个公钥就是你的公钥\",\"这时候就需要一个第三方，就是证书验证机构\"]},\"240\":{\"h\":\"CA验证机构\",\"t\":[\"数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场\",\"CA 对公钥的签名认证要求包括序列号、用途、颁发者、有效时间等等，把这些打成一个包再签名，完整地证明公钥关联的各种信息，形成“数字证书”\",\"流程如下：\",\"服务器的运营人员向数字证书认证机构提出公开密钥的申请\",\"数字证书认证机构在判明提出申请者的身份之后，会对已申请的公开密钥做数字签名\",\"然后分配这个已签名的公开密钥，并将该公开密钥放入公钥证书后绑定在一起\",\"服务器会将这份由数字证书认证机构颁发的数字证书发送给客户端，以进行非对称加密方式通信\",\"接到证书的客户端可使用数字证书认证机构的公开密钥，对那张证书上的数字签名进行验证，一旦验证通过，则证明：\",\"认证服务器的公开密钥的是真实有效的数字证书认证机构 服务器的公开密钥是值得信赖的\"]},\"241\":{\"c\":[\"React\"]},\"242\":{\"c\":[\"React\"]},\"243\":{\"h\":\"TCP握手\",\"t\":[\"三次握手（Three-way Handshake）其实就是指建立一个TCP连接时，需要客户端和服务器总共发送3个包\",\"主要作用就是为了确认双方的接收能力和发送能力是否正常、指定自己的初始化序列号为后面的可靠性传送做准备\",\"过程如下：\",\"第一次握手：客户端给服务端发一个 SYN(同步序列号) 报文，并指明客户端的 ISN(初始化序列号 c )，此时客户端处于 SYN_SENT 状态\",\"第二次握手：服务器收到客户端的 SYN 报文之后，会以自己的 SYN 报文作为应答，为了确认客户端的 SYN，将客户端的 ISN+1作为ACK(确认)的值(SYN-ACK)，此时服务器处于 SYN_RCVD 的状态\",\"第三次握手：客户端收到 SYN 报文之后，会发送一个 ACK 报文，值为服务器的ISN+1。此时客户端处于 ESTABLISHED(已建立连接) 状态。服务器收到 ACK 报文之后，也处于 ESTABLISHED 状态，此时，双方已建立起了连接\",\" 上述每一次握手的作用如下：\",\"第一次握手：客户端发送网络包，服务端收到了。 这样服务端就能得出结论：客户端的发送能力、服务端的接收能力是正常的。\",\"第二次握手：服务端发包，客户端收到了。 这样客户端就能得出结论：服务端的接收、发送能力，客户端的接收、发送能力是正常的。 不过此时服务器并不能确认客户端的接收能力是否正常\",\"第三次握手：客户端发包，服务端收到了。这样服务端就能得出结论：客户端的接收、发送能力正常，服务器自己的发送、接收能力也正常 通过三次握手，就能确定双方的接收和发送能力是正常的。之后就可以正常通信了\"]},\"244\":{\"h\":\"挥手\",\"t\":[\"tcp终止一个连接，需要经过四次挥手 过程如下：\",\"第一次挥手：客户端发送一个 FIN 报文，报文中会指定一个序列号。此时客户端处于 FIN_WAIT1 状态，停止发送数据，等待服务端的确认\",\"第二次挥手：服务端收到 FIN 之后，会发送 ACK 报文，且把客户端的序列号值 +1 作为 ACK 报文的序列号值，表明已经收到客户端的报文了，此时服务端处于 CLOSE_WAIT状态\",\"第三次挥手：如果服务端也想断开连接了，和客户端的第一次挥手一样，发给 FIN 报文，且指定一个序列号。此时服务端处于 LAST_ACK 的状态\",\"第四次挥手：客户端收到 FIN 之后，一样发送一个 ACK 报文作为应答，且把服务端的序列号值 +1 作为自己 ACK 报文的序列号值，此时客户端处于 TIME_WAIT状态。需要过一阵子以确保服务端收到自己的 ACK 报文之后才会进入 CLOSED 状态，服务端收到 ACK 报文之后，就处于关闭连接了，处于 CLOSED 状态\",\"服务端在收到客户端断开连接Fin报文后，并不会立即关闭连接，而是先发送一个ACK包先告诉客户端收到关闭连接的请求，只有当服务器的所有报文发送完毕之后，才发送FIN报文断开连接，因此需要四次挥手\"]},\"245\":{\"c\":[\"React\"]},\"246\":{\"c\":[\"React\"]},\"247\":{\"h\":\"内存泄漏\",\"t\":[\"内存泄漏（Memory leak）是在计算机科学中，由于疏忽或错误造成程序未能释放已经不再使用的内存\",\"并非指内存在物理上的消失，而是应用程序分配某段内存后，由于设计错误，导致在释放该段内存之前就失去了对该段内存的控制，从而造成了内存的浪费\",\"程序的运行需要内存。只要程序提出要求，操作系统或者运行时就必须供给内存\",\"对于持续运行的服务进程，必须及时释放不再用到的内存。否则，内存占用越来越高，轻则影响系统性能，重则导致进程崩溃\",\"在C语言中，因为是手动管理内存，内存泄露是经常出现的事情。\",\"char * buffer; buffer = (char*) malloc(42); // Do something with buffer free(buffer);\",\"上面是 C 语言代码，malloc方法用来申请内存，使用完毕之后，必须自己用free方法释放内存。\",\"这很麻烦，所以大多数语言提供自动内存管理，减轻程序员的负担，这被称为\\\"垃圾回收机制\\\"\"]},\"248\":{\"h\":\"垃圾回收机制\",\"t\":[\"Javascript 具有自动垃圾回收机制（GC：Garbage Collecation），也就是说，执行环境会负责管理代码执行过程中使用的内存 原理：垃圾收集器会定期（周期性）找出那些不在继续使用的变量，然后释放其内存\",\"通常情况下有两种实现方式：\",\"标记清除\",\"引用计数\"]},\"249\":{\"h\":\"标记清除\",\"t\":[\"JavaScript最常用的垃圾收回机制\",\"当变量进入执行环境是，就标记这个变量为“进入环境“。进入环境的变量所占用的内存就不能释放，当变量离开环境时，则将其标记为“离开环境“\",\"垃圾回收程序运行的时候，会标记内存中存储的所有变量。然后，它会将所有在上下文中的变量，以及被在上下文中的变量引用的变量的标记去掉\",\"在此之后再被加上标记的变量就是待删除的了，原因是任何在上下文中的变量都访问不到它们了\",\"随后垃圾回收程序做一次内存清理，销毁带标记的所有值并收回它们的内存\"]},\"250\":{\"h\":\"引用计数\",\"t\":[\"语言引擎有一张\\\"引用表\\\"，保存了内存里面所有的资源（通常是各种值）的引用次数。如果一个值的引用次数是0，就表示这个值不再用到了，因此可以将这块内存释放\",\"如果一个值不再需要了，引用数却不为0，垃圾回收机制无法释放这块内存，从而导致内存泄漏\",\"const arr = [1, 2, 3, 4]; console.log('hello world');\",\"上面代码中，数组[1, 2, 3, 4]是一个值，会占用内存。变量arr是仅有的对这个值的引用，因此引用次数为1。尽管后面的代码没有用到arr，它还是会持续占用内存\",\"如果需要这块内存被垃圾回收机制释放，只需要设置如下：\",\"arr = null\",\"通过设置arr为null，就解除了对数组[1,2,3,4]的引用，引用次数变为 0，就被垃圾回收了\"]},\"251\":{\"h\":\"常见内存泄露情况\",\"t\":[\"意外的全局变量\",\"function foo(arg) { // 误以为是存在的变量 // 逐级向上寻找，找不到则创建为隐式的全局变量 // var 有函数作用域，不会提升 bar = \\\"this is a hidden global variable\\\"; }\",\"另一种意外的全局变量可能由 this 创建：\",\"function foo() { this.variable = \\\"potential accidental global\\\"; } // 作为函数调用，this 为全局对象 foo();\",\"上述使用严格模式，可以避免意外的全局变量\",\"定时器也常会造成内存泄露\",\"var someResource = getData(); // 定时器没有被清除，因此它内部的所有引用都不会释放。 setInterval(function() { var node = document.getElementById('Node'); if(node) { // 处理 node 和 someResource node.innerHTML = JSON.stringify(someResource)); } }, 1000);\",\"如果id为Node的元素从DOM中移除，该定时器仍会存在，同时，因为回调函数中包含对someResource的引用，定时器外面的someResource也不会被释放\",\"包括我们之前所说的闭包，维持函数内局部变量，使其得不到释放\",\"function bindEvent() { var obj = document.createElement('XXX'); var unused = function () { console.log(obj, '闭包内引用obj obj不会被释放'); }; obj = null; // 解决方法 }\",\"没有清理对DOM元素的引用同样造成内存泄露\",\"const refA = document.getElementById('refA'); document.body.removeChild(refA); // dom删除了 console.log(refA, 'refA'); // 但是还存在引用能console出整个div 没有被回收 refA = null; console.log(refA, 'refA'); // 解除引用\",\"包括使用事件监听addEventListener监听的时候，在不监听的情况下使用removeEventListener取消对事件监听\"]},\"252\":{\"c\":[\"JavaScript\"]},\"253\":{\"h\":\"尾递归\",\"t\":[\"尾递归，即在函数尾位置调用自身（或是一个尾调用本身的其他函数等等）。尾递归也是递归的一种特殊情形。尾递归是一种特殊的尾调用，即在尾部直接调用自身的递归函数\",\"尾递归在普通尾调用的基础上，多出了2个特征：\",\"在尾部调用的是函数自身\",\"可通过优化，使得计算仅占用常量栈空间\",\"在递归调用的过程当中系统为每一层的返回点、局部量等开辟了栈来存储，递归次数过多容易造成栈溢出 这时候，就可以使用尾递归，即一个函数中所有递归形式的调用都出现在函数的末尾，对于尾递归来说，由于只存在一个调用记录，所以永远不会发生\\\"栈溢出\\\"错误\",\"实现一下阶乘，如果用普通的递归，如下：\",\"function factorial(n) { if (n === 1) return 1; return n * factorial(n - 1); } factorial(5) // 120\",\"调用栈\",\"factorial(5) 5 * factorial(4) 5 * (4 * factorial(3)) 5 * (4 * (3 * factorial(2))) 5 * (4 * (3 * (2 * factorial(1)))) 5 * (4 * (3 * (2 * 1))) // 回溯开始计算\",\"如果n等于5，这个方法要执行5次，才返回最终的计算表达式，这样每次都要保存这个方法，就容易造成栈溢出，复杂度为O(n)\",\"如果我们使用尾递归，则如下：\",\"function factorial(n, total) { if (n === 1) return total; return factorial(n - 1, n * total); } factorial(5) // 120\",\"调用栈\",\"factorial(5, 1) → factorial(4, 5) factorial(4, 5) → factorial(3, 20) factorial(3, 20) → factorial(2, 60) factorial(2, 60) → factorial(1, 120) factorial(1, 120) → return 120\",\"可以看到，每一次返回的就是一个新的函数，不带上一个函数的参数，也就不需要储存上一个函数了。尾递归只需要保存一个调用栈，复杂度 O(1)\"]},\"254\":{\"h\":\"应用场景\",\"t\":[\"数组求和\",\"function sumArray(arr, total) { if(arr.length === 1) { return total } return sum(arr, total + arr.pop()) } 使用尾递归优化求斐波那契数列 function factorial2 (n, start = 1, total = 1) { if(n <= 2){ return total } return factorial2 (n -1, total, total + start) }\",\"数组扁平化\",\"let a = [1,2,3, [1,2,3, [1,2,3]]] // 变成 let a = [1,2,3,1,2,3,1,2,3] // 具体实现 function flat(arr = [], result = []) { arr.forEach(v => { if(Array.isArray(v)) { result = result.concat(flat(v, [])) }else { result.push(v) } }) return result }\",\"数组对象格式化\",\"let obj = { a: '1', b: { c: '2', D: { E: '3' } } } // 转化为如下： let obj = { a: '1', b: { c: '2', d: { e: '3' } } }\",\"// 代码实现 function keysLower(obj) { let reg = new RegExp(\\\"([A-Z]+)\\\", \\\"g\\\"); for (let key in obj) { if (obj.hasOwnProperty(key)) { let temp = obj[key]; if (reg.test(key.toString())) { // 将修改后的属性名重新赋值给temp，并在对象obj内添加一个转换后的属性 temp = obj[key.replace(reg, function (result) { return result.toLowerCase() })] = obj[key]; // 将之前大写的键属性删除 delete obj[key]; } // 如果属性是对象或者数组，重新执行函数 if (typeof temp === 'object' || Object.prototype.toString.call(temp) === '[object Array]') { keysLower(temp); } } } return obj; };\"]},\"255\":{\"c\":[\"JavaScript\"]},\"256\":{\"h\":\"继承\",\"t\":[\"继承（inheritance）是面向对象软件技术当中的一个概念。 如果一个类别B“继承自”另一个类别A，就把这个B称为“A的子类”，而把A称为“B的父类别”也可以称“A是B的超类”\",\"继承的优点 继承可以使得子类具有父类别的各种属性和方法，而不需要再次编写相同的代码\",\"在子类别继承父类别的同时，可以重新定义某些属性，并重写某些方法，即覆盖父类别的原有属性和方法，使其获得与父类别不同的功能\",\"虽然JavaScript并不是真正的面向对象语言，但它天生的灵活性，使应用场景更加丰富\"]},\"257\":{\"h\":\"实现\",\"t\":[\"下面给出JavaScripy常见的继承方式：\",\"原型链继承\",\"构造函数继承（借助 call）\",\"组合继承\",\"原型式继承\",\"寄生式继承\",\"寄生组合式继承\"]},\"258\":{\"h\":\"原型链继承\",\"t\":[\"原型链继承是比较常见的继承方式之一，其中涉及的构造函数、原型和实例，三者之间存在着一定的关系，即每一个构造函数都有一个原型对象，原型对象又包含一个指向构造函数的指针，而实例则包含一个原型对象的指针\",\" function Parent() { this.name = 'parent1'; this.play = [1, 2, 3] } function Child() { this.type = 'child2'; } //问题在于，继承的是实例对象 Child1.prototype = new Parent(); console.log(new Child())\",\"上面代码看似没问题，实际存在潜在问题\",\"// 共享了同一个父类实例对象 var s1 = new Child2(); var s2 = new Child2(); s1.play.push(4); console.log(s1.play, s2.play); // [1,2,3,4]\",\"改变s1的play属性，会发现s2也跟着发生变化了，这是因为两个实例使用的是同一个原型对象，内存空间是共享的\"]},\"259\":{\"h\":\"构造函数继承\",\"t\":[\"借助 call 调用Parent函数\",\"function Parent(){ this.name = 'parent1'; } // getName() 是定义在 Parent.prototype 上的，而不是构造函数内部。 Parent.prototype.getName = function () { return this.name; } function Child(){ // 构造函数继承 Parent1.call(this); this.type = 'child' } let child = new Child(); console.log(child); // 没问题 console.log(child.getName()); // 会报错\",\"可以看到，父类原型对象中一旦存在父类之前自己定义的方法，那么子类将无法继承这些方法 相比第一种原型链继承方式，父类的引用属性不会被共享，优化了第一种继承方式的弊端，但是只能继承父类的实例属性和方法，不能继承原型属性或者方法\"]},\"260\":{\"h\":\"组合继承\",\"t\":[\"前面我们讲到两种继承方式，各有优缺点。组合继承则将前两种方式继承起来\",\"function Parent3 () { this.name = 'parent3'; this.play = [1, 2, 3]; } Parent3.prototype.getName = function () { return this.name; } function Child3() { // 第二次调用 Parent3() Parent3.call(this); this.type = 'child3'; } // 第一次调用 Parent3() Child3.prototype = new Parent3(); // 手动挂上构造器，指向自己的构造函数 Child3.prototype.constructor = Child3; var s3 = new Child3(); var s4 = new Child3(); s3.play.push(4); console.log(s3.play, s4.play); // 不互相影响 console.log(s3.getName()); // 正常输出'parent3' console.log(s4.getName()); // 正常输出'parent3'\",\"这种方式看起来就没什么问题，方式一和方式二的问题都解决了，但是从上面代码我们也可以看到 Parent3 执行了两次，造成了多构造一次的性能开销\"]},\"261\":{\"h\":\"原型式继承\",\"t\":[\"这里主要借助Object.create方法实现普通对象的继承(创建新对象)\",\"同样举个例子\",\"let parent4 = { name: \\\"parent4\\\", friends: [\\\"p1\\\", \\\"p2\\\", \\\"p3\\\"], getName: function() { return this.name; } }; let person4 = Object.create(parent4); person4.name = \\\"tom\\\"; person4.friends.push(\\\"jerry\\\"); let person5 = Object.create(parent4); person5.friends.push(\\\"lucy\\\"); console.log(person4.name); // tom console.log(person4.name === person4.getName()); // true console.log(person5.name); // parent4 console.log(person4.friends); // [\\\"p1\\\", \\\"p2\\\", \\\"p3\\\",\\\"jerry\\\",\\\"lucy\\\"] console.log(person5.friends); // [\\\"p1\\\", \\\"p2\\\", \\\"p3\\\",\\\"jerry\\\",\\\"lucy\\\"]\",\"这种继承方式的缺点也很明显，因为Object.create 方法实现的是浅拷贝，多个实例的引用类型属性指向相同的内存，存在篡改的可能\"]},\"262\":{\"h\":\"寄生式继承\",\"t\":[\"寄生式继承在上面继承基础上进行优化，利用这个浅拷贝的能力再进行增强，添加一些方法\",\"let parent5 = { name: \\\"parent5\\\", friends: [\\\"p1\\\", \\\"p2\\\", \\\"p3\\\"], getName: function() { return this.name; } }; function clone(original) { let clone = Object.create(original); clone.getFriends = function() { return this.friends; }; return clone; } let person5 = clone(parent5); console.log(person5.getName()); // parent5 console.log(person5.getFriends()); // [\\\"p1\\\", \\\"p2\\\", \\\"p3\\\"]\",\"其优缺点也很明显，跟上面讲的原型式继承一样\"]},\"263\":{\"h\":\"寄生组合式继承\",\"t\":[\"寄生组合式继承，借助解决普通对象的继承问题的 Object.create 方法，在亲全面几种继承方式的优缺点基础上进行改造，这也是所有继承方式里面相对最优的继承方式\",\"function clone (parent, child) { // 这里改用 Object.create 就可以减少组合继承中多进行一次构造的过程 child.prototype = Object.create(parent.prototype); child.prototype.constructor = child; } function Parent6() { this.name = 'parent6'; this.play = [1, 2, 3]; } Parent6.prototype.getName = function () { return this.name; } function Child6() { Parent6.call(this); this.friends = 'child5'; } clone(Parent6, Child6); Child6.prototype.getFriends = function () { return this.friends; } let person6 = new Child6(); console.log(person6); //{friends:\\\"child5\\\",name:\\\"child5\\\",play:[1,2,3],__proto__:Parent6} console.log(person6.getName()); // parent6 console.log(person6.getFriends()); // child5\",\"可以看到 person6 打印出来的结果，属性都得到了继承，方法也没问题\"]},\"264\":{\"h\":\"ES6 中的extends\",\"t\":[\"class Person { constructor(name) { this.name = name } // 原型方法 // 即 Person.prototype.getName = function() { } // 下面可以简写为 getName() {...} getName = function () { console.log('Person:', this.name) } } class Gamer extends Person { constructor(name, age) { // 子类中存在构造函数，则需要在使用“this”之前首先调用 super()。 super(name) this.age = age } } const asuna = new Gamer('Asuna', 20) asuna.getName() // 成功访问到父类的方法\",\"利用babel工具进行转换，我们会发现extends实际采用的也是寄生组合继承方式，因此也证明了这种方式是较优的解决继承的方式\"]},\"265\":{\"c\":[\"JavaScript\"]},\"266\":{\"h\":\"JavaScript\"},\"267\":{\"h\":\"对象的原型、原型链\",\"t\":[\"每一个对象都是被构造函数new出来的，函数也是对象。 当试图访问一个对象的属性时，不仅仅在该对象上搜寻，还会搜寻该对象的原型，以及原型的原型，直至找到属性或到达原型链的末尾 这些方法和属性要定义在Object的构造器函数之上的prototype属性上，而非示例对象本身 原型对象有一个自有属性constructor，这个属性指向该函数\",\"原型prototype属性 指向对象的构造器函数\",\"隐式原型_proto_属性 指向构造器函数的原型\"]},\"268\":{\"h\":\"原型链\",\"t\":[\"原型对象也可能有原型，并从中继承方法和属性。 _proto_属性构建了对象的原型链\"]},\"269\":{\"h\":\"this\",\"t\":[\"在严格模式和非严格模式下，this的行为有一定区别\",\"this所在的作用域类型\",\"函数的类型\",\"函数是否处于严格模式\",\"函数的调用方式\"]},\"270\":{\"h\":\"this表达式的求值\",\"t\":[\"从作用域链上寻找第一个有绑定this值的环境记录器，然后获取该环境记录器上的this值\",\"作用域类型\",\"this指向\",\"全局\",\"全局对象\",\"模块\",\"undefined\",\"块级\",\"无\",\"with\",\"无\",\"函数\",\"返回 [[ThisValue]] 字段的值\",\"函数作用域的this解析\",\"调用方法\",\"this指向\",\"方法\",\"显示绑定\",\"严格模式：this参数的值，非严格模式：this参数转化为对象\",\"apply、bind、Array.prototype.map等可显式绑定this值的API\",\"对象方法\",\"对象自身\",\"call\",\"new构造器\",\"以prototype属性为原型创建的对象\",\"new\",\"普通调用\",\"严格模式：undefined，非严格模式：globalThis\",\"call\",\"重要\",\"// 需要注意的是：以下的情况是普通调用，而不是作为方法调用： const trick = obj.ordinaryMethod trick() // global\",\"const object = { who: 'World', greet() { return `Hello, ${this.who}!`; }, farewell: () => { return `Goodbye, ${this.who}!`; } }; console.log(object.greet()); console.log(object.farewell()); // farewell，this在函数作用域，外层是全局作用域\",\"var length = 4; function callback() { console.log(this.length); } const object = { length: 5, method(callback) { // 普通调用，指向undefined，转化为全局对象 callback(); } }; object.method(callback, 1, 2);\",\"var length = 4; function callback() { console.log(this.length); } const object = { length: 5, method() { // 参数对象arguments //相当于arguments.callback() // 对象方法调用，this指向argument arguments[0](); } }; object.method(callback, 1, 2);\"]},\"271\":{\"h\":\"显示绑定：bind、call、apply的区别\",\"t\":[\"call、bind、apply作用是改变函数执行时的上下文\",\"apply：this指向、参数数组\",\"call：this指向，参数列表\",\"bind：this指向，参数列表，永久改变this指向，不会立即执行 返回一个this指向改变的函数\"]},\"272\":{\"h\":\"实现\",\"t\":[\"Function.prototype.myBind = function (context) { if (typeof this !== \\\"function\\\") { throw new TypeError(\\\"Error\\\"); } const args = [...arguments].slice(1), // 取决于调用方式 fn = this; // return function Fn() { return fn.apply(this instanceof Fn ? new fn(...arguments) : context, args.concat(...arguments)); } }\"]},\"273\":{\"h\":\"事件模型\",\"t\":[\"用于DOM是一个树结构，如果在父子节点绑定事件的时候，当触发子节点，就会存在一个顺序问题，也就是事件流。 事件流都会经历三个阶段：\",\"事件捕获阶段：事件向下捕获依次触发\",\"处于目标阶段\",\"事件冒泡阶段：将事件向上传递依次触发 事件模型有三种：\",\"原始事件模型(DOM0级) 具备很好的跨浏览器优势，最快的绑定速度，只支持冒泡\",\"var btn = document.getElementById('.btn'); btn.onclick = fun2;\",\"标准事件模型(DOM2级) 事件有三个阶段：捕获阶段、处理阶段、冒泡阶段 useCapture用于指定是否在捕获阶段处理\",\"addEventListener(eventType, handler, useCapture) removeEventListener(eventType, handler, useCapture)\",\"IE事件模型(不使用) 有两个阶段：事件处理、事件冒泡\",\"attachEvent(eventType, handler)\"]},\"274\":{\"h\":\"类型转换\",\"t\":[\"parseInt()函数逐个解析字符，遇到不能转换的字符就停下来\"]},\"275\":{\"h\":\"浅拷贝、深拷贝\"},\"276\":{\"h\":\"浅拷贝\",\"t\":[\"创建新的数据，拷贝一层。拷贝基本类型的值，引用类型的内存地址。\",\"Obejct.assign\",\"Array.prototype.slice()\",\"Array.prototype.concat()\",\"使用...扩展运算符实现的复制\"]},\"277\":{\"h\":\"深拷贝\",\"t\":[\"开辟一个新的栈，对象属性完全相同，但是地址不同\",\"lodash的_.cloneDeep()\",\"jQuery.extend()\",\"JSON.stringify() 忽略undefined、symbol、函数\",\"手写递归实现\",\"function deepClone(obj,hash=new WeakMap()){ if(obj==null) return obj; if(obj instanceof Date) return new Date(obj); if(obj instanceof RegExp) return new RegExp(obj); if(typeof obj !== 'Object') return obj; if(hash.get(obj)) return hash.get(obj); // 空对象 let cloneObj=new obj.constructor(); // 暂存 hash.set(obj,cloneObj); // for(let key in obj){ if(obj.hasOwnProperty(key)){ // 递归 cloneObj[key]=deepClone(obj[key],hash) } } return cloneObj; }\"]},\"278\":{\"h\":\"函数缓存\",\"t\":[\"将函数的运算结果进行缓存，将参数和对应结果存在一个对象中，判断参数对应的数据是否存在，如果存在则返回对应的结果数据。\",\"const memoize = function(func,content){ let cache=Object.create(null); content=content || this; return (...key)=>{ if(!cache[key]){ cache[key]=func.apply(content,key) } return cache[key] } }\"]},\"279\":{\"h\":\"场景\",\"t\":[\"复杂计算的函数\",\"有限且输入高度重复的函数\",\"重复输入值的递归函数\",\"纯函数\"]},\"280\":{\"h\":\"本地存储方式\",\"t\":[\"cookie 不超过4kb，每次请求中都会被发送\",\"document.cookie='name=value'\",\"sessionStorage 与localStorage基本一致，但页面关闭，sessionStorage将会删除数据。\",\"localStorage 持久化本地存储、信息同域共享、受同源策略影响、当本页操作localStorage，其他页面会触发storage事件 缺点：无法设置过期时间、只能存入字符串(使用JSON转换)\",\"indexedDB 用于客户端存储大量结构化数据(包括文件、blobs) 存储量理论上没有上限、操作异步、支持存储JS对象、数据库 缺点：操作繁琐、高门槛\"]},\"281\":{\"h\":\"大文件断点续传、分片上传\"},\"282\":{\"h\":\"分片上传\",\"t\":[\"将所要上传的文件，按照一定的大小，将整个文件分隔成多个数据块来进行分片上传 流程：\",\"分割数据块\",\"初始化一个分片上传任务，返回本次分片上传唯一标识\",\"按照策略(串行、并行)发生各个分片数据块\",\"上传完成后，服务端根据数据上传是否完整，合并数据块得到原始文件。\"]},\"283\":{\"h\":\"断点续传\",\"t\":[\"将下载、上传任务划分为几个部分，每个部分使用一个线程进行上传、下载 实现方式：\",\"服务器端返回，告知从哪开始\",\"浏览器端自行处理 上传过程中将文件在服务器端写为临时文件，等全部完成后，重命名为正式文件即可。 如果中途上传中断过，下次上传的时候根据当前临时文件大小，作为在客户端读取文件的偏移量，从此位置继续读取文件数据块，上传到服务器从此偏移量继续写入文件即可。\"]},\"284\":{\"h\":\"元素是否在可视区域中\",\"t\":[\"图片懒加载\",\"列表无限滚动\",\"计算广告元素的曝光情况\",\"可点击链接的预加载\"]},\"285\":{\"h\":\"实现\",\"t\":[\"offsetTop顶部距离、scrollTop滚动条距离\",\"function isInViewPortOfOne(el){ const viewPortHeight=window.innerHeight||document.documentElement.clientHeight||document.body.clientHeight; const offsetTop=el.offsetTop; const scrollTop=document.documentElement.scrollTop; const top=offsetTop - scrollTop; return top <= viewPortHeight; }\",\"getBoundingClientRect 返回值是一个DOMRect对象，拥有left、top、right、bottom、x、y、width、height属性，基本上是相对视口的属性。\",\"function isInViewPort(element) { const viewWidth = window.innerWidth || document.documentElement.clientWidth; const viewHeight = window.innerHeight || document.documentElement.clientHeight; const {top,right,bottom,left,} = element.getBoundingClientRect(); return ( top >= 0 &&left >= 0 &&right <= viewWidth &&bottom <= viewHeight ); }\",\"intersection Observer 判断两个元素是否重叠的api 创建观察者\",\"const options={ // 1表示被完全包含 threshold：1.0, // 必须是目标元素的父级元素 root:document.querySelector('#scrollArea') } const callback=(entries,observer)=>{ entries.forEach(entry=>{ // 触发时间 entry.time // 根元素位置矩形 entry.rootBounds // 被观察者的位置矩形 entry.boundingClientRect // 重叠区域的位置矩形 entry.intersectionRect // 重叠区域占被观察者面积的比例 entry.intersectionRatio // 被观察者 entry.target }) } const oberver=new IntersectionObserver(callback,options)\",\"传入被观察者\",\"const target=document.querySelector('.target') observer.observer(target)\"]},\"286\":{\"h\":\"单点登录\",\"t\":[\"单点登录(SSO),在多个应用系统中，用户只需要登陆一次就可以访问所有相互信任的应用系统 SSO一般需要一个独立的认证中心，子系统的登录均通过passport，子系统本身不参与登录操作 当一个系统成功登录以后，passport将会颁发一个令牌给各个子系统，子系统可以拿着令牌获取各自受保护的资源，为了减少频繁认证，各个子系统在被passport授权以后，会建立一个局部会话，在一段时间内无需再次向passport发起认证。\"]},\"287\":{\"h\":\"实现\",\"t\":[\"同域名下的单点登录 cookie的domain属性设置为当前域的父域，并且父域的cookie会被子域所共享。path属性默认为web应用的上下文路径。 将SessionID(或token)保存到父域中，这样所有的子域应用都可以访问到这个cookie。\",\"不同域名下的单点登录，使用cookie 部署一个认证中心，专门处理登录请求的独立web服务。 用户统一在认证中心登录，登陆成功后，认证中心记录用户的登陆状态，将token写入cookie(应用系统无法访问)。 应用系统检查当前请求有没有token，如果没有，说明用户在当前系统中尚未登录，那么就将页面跳转至认证中心。 这个操作会把认证中心的cookie自动带过去，因此认证中心能够根据cookie知道用户是否已经登陆过了。 用户登陆过了用户，跳转回目标URL，并在跳转前生成一个token，拼接在目标URL的后面，回转给目标应用系统。 应用系统拿到token之后，还需要向认证中心确认token的合法性，防止用户伪造。确认无误后，记录用户的登陆状态，并将token写入cookie(当前应用系统的cookie)\",\"使用localStorage 将SessionID(或Token)保存到浏览器的localStorage中，让前端在每次向后端发送请求时，主动将localStorage的数据传递给服务端。\",\"// token var token = result.data.token; // var iframe = document.createElement(\\\"iframe\\\"); iframe.src = \\\"http://app1.com/localstorage.html\\\"; document.body.append(iframe); // setTimeout(function () { iframe.contentWindow.postMessage(token, \\\"http://app1.com\\\"); }, 4000); setTimeout(function () { iframe.remove(); }, 6000); // window.addEventListener('message', function (event) { localStorage.setItem('token', event.data) }, false);\",\"通过iframe+postMessage()方式，将同一份token写入到了多个域下的localStorage中。\"]},\"288\":{\"h\":\"流程\",\"t\":[\"alt text\"]},\"289\":{\"h\":\"下拉刷新和上拉加载\"},\"290\":{\"h\":\"上拉加载\",\"t\":[\"页面触底或快要触底的操作\",\"scrollTop：滚动视窗的高度距离window顶部的距离\",\"clientHeight：表示可视区域的高度，固定值\",\"scrollHeight：表示body的所有元素的总长度\",\"scrollTop + clientHeight >= scrollHeight\"]},\"291\":{\"h\":\"下拉刷新\",\"t\":[\"页面置于顶部时，用户下拉刷新需要触发的动作\",\"监听原生touchstart事件，记录其初始位置的值，e.touches[0].pageY\",\"var _element = document.getElementById('refreshContainer'), _refreshText = document.querySelector('.refreshText'), _startPos = 0, _transitionHeight = 0; _element.addEventListener('touchstart', function(e) { _startPos = e.touches[0].pageY; _element.style.position = 'relative'; _element.style.transition = 'transform 0s'; }, false);\",\"监听原生touchmove事件，记录并计算当前滑动的位置与初始位置的差值，大于0为向下滑动，并借助CSS3的translateY属性使元素跟随手势向下滑动对应的差值，同时也应设置一个允许滑动的最大值\",\"_element.addEventListener('touchmove', function(e) { _transitionHeight = e.touches[0].pageY - _startPos; if (_transitionHeight > 0 && _transitionHeight < 60) { _refreshText.innerText = '下拉刷新'; _element.style.transform = 'translateY('+_transitionHeight+'px)'; if (_transitionHeight > 55) { _refreshText.innerText = '释放更新'; } } }, false);\",\"监听原生touched事件，若此时元素滑动达到最大值，则触发callback，同时将translateY重设为0，元素回到初始位置\",\"_element.addEventListener('touchend', function(e) { _element.style.transition = 'transform 0.5s ease 1s'; _element.style.transform = 'translateY(0px)'; _refreshText.innerText = ' ...'; // todo... }, false);\"]},\"292\":{\"h\":\"第三方库\",\"t\":[\"import BScroll from \\\"@better-scroll/core\\\"; import PullDown from \\\"@better-scroll/pull-down\\\"; import PullUp from '@better-scroll/pull-up'; BScroll.use(PullDown); BScroll.use(PullUp); let pageNo = 1,pageSize = 10,dataList = [],isMore = true; var scroll= new BScroll(\\\"#position-wrapper\\\",{ scrollY:true, //默认垂直方向 click:true, //true不阻止浏览器原生的click事件 pullUpLoad:true, //上拉加载更多 pullDownRefresh:{ threshold:50, // 触发pullingDown事件的位置 stop:0 //下拉回弹后停留的位置 } }); //监听下拉刷新 scroll.on(\\\"pullingDown\\\",pullingDownHandler); //监测实时滚动 scroll.on(\\\"scroll\\\",scrollHandler); //上拉加载更多 scroll.on(\\\"pullingUp\\\",pullingUpHandler); async function pullingDownHandler(){ dataList=[]; pageNo=1; isMore=true; $(\\\".more\\\").text(\\\" \\\"); await getlist(); scroll.finishPullDown(); scroll.refresh(); } async function pullingUpHandler(){ if(!isMore){ $(\\\".more\\\").text(\\\"没有更多数据了\\\"); scroll.finishPullUp(); return; } pageNo++; await this.getlist();// scroll.finishPullUp();// scroll.refresh();// dom } function scrollHandler(){ if(this.y>50) $('.refresh').text(\\\"松手开始加载\\\"); else $('.refresh').text(\\\"下拉刷新\\\"); } function getlist(){ // let result=....; dataList=dataList.concat(result); // if(result.length<pageSize) isMore=false; // dataList html }\"]},\"293\":{\"h\":\"函数式编程\",\"t\":[\"主要的编程范式有三种：命令式编程、声明式编程、函数式编程 函数式编程更加强调程序执行的结果而非执行的过程，利用若干简单的执行单元让计算结果不断渐进，逐层推导复杂运算，而非设计一个复杂的执行过程。\"]},\"294\":{\"h\":\"纯函数\",\"t\":[\"函数式编程旨在尽可能的提高代码的无状态性和不变性。 纯函数是对给定的输入返回相同输出的函数，并且要求所有的数据都是不可变的，即纯函数=无状态+数据不可变。\"]},\"295\":{\"h\":\"高阶函数\",\"t\":[\"以函数为输入或者输出的函数被称为高阶函数\"]},\"296\":{\"h\":\"柯里化\",\"t\":[\"把一个多参函数转化为一个嵌套的一元函数的过程\"]},\"297\":{\"h\":\"组合与管道\",\"t\":[\"组合函数，目的是将多个函数组合成一个函数，来完成更复杂的逻辑。 组合函数执行是从右到左的\",\"const compose = (...fns)=>val=>fns.reverse().reduce((acc,fn)=>fn(acc),val);\",\"管道函数是从左到右的\",\"const pipe = (...fns)=>val=>fns.reduce((acc,fn)=>fn(acc),val);\"]},\"298\":{\"h\":\"web的常见攻击方式有哪些、如何防御\",\"t\":[\"如植入恶意代码、修改网站权限，获取网站用户隐私信息等 常见web攻击方式有：\"]},\"299\":{\"h\":\"XSS\",\"t\":[\"跨站脚本攻击，允许攻击者将恶意代码植入到提供给其他用户使用的页面中 涉及到三方，即攻击者、客户端和web应用 攻击目标是盗取存储在客户端的cookie或者其他网站用于识别客户端身份的敏感信息 根据攻击的来源，XSS攻击可以分为：存储型、反射型、DOM型\",\"存储型 将恶意代码提交到目标网站的数据库中 用户打开目标网站时，网站服务端将恶意代码从数据库中取出，拼接在HTML中返回给浏览器 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作\",\"反射型 攻击者构造出特殊的URL，其中包含恶意代码 用户打开带有恶意代码的URL时，网站服务器将恶意代码从URL中取出，拼接在HTML中返回给浏览器 用户浏览器接收到响应后解析执行，混在其中的恶意代码也被执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作\",\"DOM型 攻击者构造出特殊的URL，其中包含恶意代码 用户打开带有恶意代码的URL 用户浏览器接收到响应后解析执行，前端取出URL中的恶意代码并执行 恶意代码窃取用户数据并发送到攻击者的网站，或者冒充用户的行为，调用目标网站接口执行攻击者指定的操作\",\"预防 过滤用户输入的恶劣代码，数据库过滤输入\"]},\"300\":{\"h\":\"CSRF跨站请求伪造\",\"t\":[\"攻击者诱导受害者进入第三方网站，在第三方网站中，向被攻击者发送跨站请求 利用受害者在被攻击网站已经获取的注册凭证，绕过后台的用户验证，达到冒充用户对被攻击网站执行某些操作的目的\"]},\"301\":{\"h\":\"SQL注入攻击\",\"t\":[\"Sql 注入攻击，是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击\",\"流程如下所示：\",\"找出SQL漏洞的注入点\",\"判断数据库的类型以及版本\",\"猜解用户名和密码\",\"利用工具查找Web后台管理入口\",\"入侵和破坏\",\"预防方式如下：\",\"严格检查输入变量的类型和格式\",\"过滤和转义特殊字符\",\"对访问数据库的Web应用程序采用Web应用防火墙\"]},\"302\":{\"c\":[\"JavaScript\"]},\"303\":{\"h\":\"数字精度丢失\",\"t\":[\"在JavaScript中，现在主流的数值类型是Number，而Number采用的是IEEE754规范中64位双精度浮点数编码 存储二进制时小数点的偏移量最大为52位，最多可以表达的位数是2^53=9007199254740992，对应科学计数尾数是 9.007199254740992，这也是 JS 最多能表示的精度\",\"它的长度是 16，所以可以使用 toPrecision(16) 来做精度运算，超过的精度会自动做凑整处理\",\".10000000000000000555.toPrecision(16) // 返回 0.1000000000000000，去掉末尾的零后正好为 0.1\",\"超出这个精度，数值就不准确\",\"0.1.toPrecision(21) = 0.100000000000000005551\"]},\"304\":{\"h\":\"解决\",\"t\":[\"考虑到每次浮点数运算的偏差非常小(其实不然)，可以对结果进行指定精度的四舍五入，比如可以parseFloat(result.toFixed(12));\",\"将浮点数转为整数运算，再对结果做除法。比如0.1 + 0.2，可以转化为(1*2)/3。\",\"把浮点数转化为字符串，模拟实际运算的过程。 比如bignumber.js，decimal.js，以及big.js\"]},\"305\":{\"c\":[\"JavaScript\"]},\"306\":{\"h\":\"常量\",\"t\":[\"可以使用 const 关键字或 define() 函数两种方法来定义一个常量。个常量一旦被定义，就不能再改变或者取消定义。\",\"重要\",\"在 PHP 8.0.0 之前，使用 define() 定义的常量可能不区分大小写且可以包含保留字或非常规名称的常量。 这类常量可以通过 constant() 函数来获取名称，但是非常不推荐这种用法。\",\"常量不需要使用 $ 来访问。\",\"如果常量名是动态的，也可以用函数 constant() 来获取常量的值。\",\"用 get_defined_constants() 可以获得所有已定义的常量列表。\",\"如果要检查是否定义了某常量，请使用 defined() 函数。\",\"define(\\\"CONSTANT\\\", \\\"Hello world.\\\"); echo CONSTANT; // 输出 \\\"Hello world.\\\" echo Constant; // 抛出错误：未定义的常量 \\\"Constant\\\" // 在 PHP 8.0.0 之前，输出 \\\"Constant\\\" 并发出一个提示级别错误信息 // 简单的标量值 const CONSTANT = 'Hello World'; // .是替代性的 字符连接符号 const ANOTHER_CONST = CONSTANT.'; Goodbye World'; // 常量数组 define('ANIMALS', array( 'dog', 'cat', 'bird' ));\",\"重要\",\"和使用 define() 来定义常量相反的是，使用 const 关键字定义常量必须处于最顶端的作用域，因为用此方法是在编译时定义的。这就意味着不能在函数内，循环内以及 if 或 try/catch 语句之内用 const 来定义常量。\"]},\"307\":{\"h\":\"预定义常量\",\"t\":[\"PHP 向它运行的任何脚本提供了大量的预定义常量。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。\"]},\"308\":{\"h\":\"魔术常量\",\"t\":[\"一些魔术常量会根据使用位置而变化。例如 _LINE_ 的值取决于它在脚本中使用的行。所有这些“魔术”常量都在编译时解析，而常规常量则在运行时解析。这些特殊的常量不区分大小写，如下：\",\"名字\",\"说明\",\"_LINE_\",\"文件中的当前行号。\",\"_FILE_\",\"文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。\",\"_DIR_\",\"文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(_FILE_)。除非是根目录，否则目录中名不包括末尾的斜杠。\",\"_FUNCTION_\",\"当前函数的名称。匿名函数则为 {closure}。\",\"_CLASS_\",\"当前类的名称。类名包括其被声明的作用域（例如 Foo\\\\Bar）。当用在 trait 方法中时，_CLASS_ 是调用 trait 方法的类的名字。\",\"_TRAIT_\",\"Trait 的名字。Trait 名包括其被声明的作用域（例如 Foo\\\\Bar）。\",\"_METHOD_\",\"类的方法名。\",\"_PROPERTY_\",\"仅在属性挂钩内有效。等同于属性的名称。\",\"_NAMESPACE_\",\"当前命名空间的名称。\",\"ClassName::class\",\"完整的类名。\"]},\"309\":{\"c\":[\"PHP\"]},\"310\":{\"c\":[\"PHP\"]},\"311\":{\"h\":\"流程控制\"},\"312\":{\"h\":\"替代语法\",\"t\":[\"PHP 提供了一些流程控制的替代语法，包括 if，while，for，foreach 和 switch。 替代语法的基本形式是把左花括号（{）换成冒号（:），把右花括号（}）分别换成 endif;，endwhile;，endfor;，endforeach; 以及 endswitch;。\",\"<?php if ($a == 5): ?> A is equal to 5 <?php endif; ?>\",\"替代语法同样可以用在 else 和 elseif 中。下面是一个包括 elseif 和 else 的 if 结构用替代语法格式写的例子：\",\"if ($a == 5): echo \\\"a equals 5\\\"; echo \\\"...\\\"; elseif ($a == 6): echo \\\"a equals 6\\\"; echo \\\"!!!\\\"; else: echo \\\"a is neither 5 nor 6\\\"; endif;\"]},\"313\":{\"h\":\"match(php8)\",\"t\":[\"match 表达式基于值的一致性进行分支计算。 match表达式和 switch 语句类似， 都有一个表达式主体，可以和多个可选项进行比较。 与 switch 不同点是，它会像三元表达式一样求值。 且他的比较是严格比较. match 表达式结构\",\"$return_value = match (subject_expression) { single_conditional_expression => return_expression, conditional_expression1, conditional_expression2 => return_expression, // 之前的条件都匹配时运行 default =>return_expression, };\",\"与比较运算符的例子\",\"$age = 18; $output = match (true) { $age < 2 => \\\"Baby\\\", $age < 13 => \\\"Child\\\", $age <= 19 => \\\"Teenager\\\", $age >= 40 => \\\"Old adult\\\", $age > 19 => \\\"Young adult\\\", }; var_dump($output); // 输出 string(8) \\\"Teenager\\\"\",\"当多个分支表达式右侧相同时，就可以用这种缩写。\",\"$result = match ($x) { // 匹配分支： $a, $b, $c => 5, // 等同于以下三个分支： $a => 5, $b => 5, $c => 5, };\",\"重要\",\"match 表达式必须详尽列出所有情况(起码要有一个满足的)。 如果主体表达式不能被任意分支条件处理， 会抛出 UnhandledMatchError。\"]},\"314\":{\"h\":\"declare(PHP 4, PHP 5, PHP 7, PHP 8)\",\"t\":[\"declare 结构用来设定一段代码的执行指令。 directive 部分允许设定 declare 代码段的行为。 目前只认识三个指令：\",\"ticks\",\"encoding\",\"strict_types 因为本指令是在文件编译时处理的，所以指令只接受字面量的值。 无法使用变量和常量。\",\"// 这样是有效的： declare(ticks=1); // 这样是无效的： const TICK_VALUE = 1; declare(ticks=TICK_VALUE);\"]},\"315\":{\"h\":\"Ticks\",\"t\":[\"Tick（时钟周期）是一个在 declare 代码段中解释器每执行 N 条可计时的低级语句就会发生的事件。N 的值是在 declare 中的 directive 部分用 ticks=N 来指定的。 在每个 tick 中出现的事件是由 register_tick_function() 来指定的。\",\"declare(ticks=1); // 不是所有语句都可计时。通常条件表达式和参数表达式都不可计时。 // 每次 tick 事件都会调用该函数 function tick_handler() { echo \\\"tick_handler() called\\\\n\\\"; } register_tick_function('tick_handler'); // 引起 tick 事件 $a = 1; // 引起 tick 事件 if ($a > 0) { $a += 2; // 引起 tick 事件 print $a; // 引起 tick 事件 }\"]},\"316\":{\"h\":\"Encoding\",\"t\":[\"用 encoding 指令来对每段脚本指定其编码方式。\",\"declare(encoding='ISO-8859-1'); // 在这里写代码\"]},\"317\":{\"c\":[\"PHP\"]},\"318\":{\"c\":[\"PHP\"]},\"319\":{\"h\":\"函数\"},\"320\":{\"h\":\"函数参数\",\"t\":[\"函数在实际调用之前，值参数( 实参 )是从左向右求值的（及早求值），并将结果赋值给函数的参数( 形参 )。 函数参数使用尾部逗号\",\"function takes_many_args( $first_arg, $second_arg, $a_very_long_argument_name, $arg_with_default = 5, // 在 8.0.0 之前，这个尾部的逗号是不允许的。 $again = 'a default string', ) {}\"]},\"321\":{\"h\":\"引用传递\",\"t\":[\"默认情况下，函数参数值通过值传递（因而即使在函数内部改变参数值，它并不会改变函数外部的值）。如果希望允许函数修改它的参数值，必须通过引用传递。 如果想要函数的参数值始终通过引用传递，可以在函数定义中该参数的前面加上符号 &：\",\"function add_some_extra(&$string) { $string .= 'and something extra.'; } $str = 'This is a string, '; add_some_extra($str); echo $str; // 输出“This is a string, and something extra.”\"]},\"322\":{\"h\":\"默认参数\",\"t\":[\"使用类似分配变量的语法定义参数的默认值。仅当参数未传递值时才使用默认值；注意传递null不会分配默认值 。\",\"unction makeyogurt($flavour, $container = \\\"bowl\\\") { return \\\"Making a $container of $flavour yogurt.\\\\n\\\"; } echo makeyogurt(\\\"raspberry\\\"); // \\\"raspberry\\\" 是 $flavour\"]},\"323\":{\"h\":\"可变数量的参数值列表\",\"t\":[\"参数列表可能包含 ... 记号，表示该函数接受可变数量的参数值。参数值将作为 array 传递到指定变量中：\",\"function sum(...$numbers) { $acc = 0; foreach ($numbers as $n) { $acc += $n; } return $acc; } echo sum(1, 2, 3, 4);\"]},\"324\":{\"h\":\"命名参数(ph8)\",\"t\":[\"PHP 8.0.0 开始引入了命名参数作为现有位置参数的扩展。命名参数允许根据参数名而不是参数位置向函数传参。这使得参数的含义自成体系，参数与顺序无关，并允许任意跳过默认值。 命名参数通过在参数名前加上冒号来传递。允许使用保留关键字作为参数名。\",\"// 参数名必须是一个标识符，不允许动态指定。 myFunction(paramName: $value); array_foobar(array: $value); // 不支持。 function_name($variableStoringParamName: $value);\",\"命名参数也可以与位置参数相结合使用。此种情况下，命名参数必须在位置参数之后。也可以只指定一个函数的部分可选参数，而不考虑它们的顺序。\",\"htmlspecialchars($string, double_encode: false); // 等价于 htmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, 'UTF-8', false);\",\"自 PHP 8.1.0 起，可以在解包参数后面使用命名参数。命名参数不能覆盖已解包的参数。\",\"function foo($a, $b, $c = 3, $d = 4) { return $a + $b + $c + $d; } var_dump(foo(...[1, 2], d: 40)); // 46 var_dump(foo(...['b' => 2, 'a' => 1], d: 40)); // 46 var_dump(foo(...[1, 2], b: 20)); // Fatal error。命名参数 $b 覆盖之前的参数\"]},\"325\":{\"h\":\"可变函数\",\"t\":[\"如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。\",\"class Foo { function Variable(){ $name = 'Bar'; $this->$name(); // 调用 Bar() 方法 } function Bar(){ echo \\\"This is Bar\\\"; } } $foo = new Foo(); $funcname = \\\"Variable\\\"; $foo->$funcname(); // 调用 $foo->Variable()\",\"当调用静态方法时，函数调用要比静态属性优先：\",\"class Foo { static $variable = 'static property'; static function Variable() { echo 'Method Variable called'; } } echo Foo::$variable; // 打印 'static property'。在该作用域中需要 $variable。 $variable = \\\"Variable\\\"; Foo::$variable(); // 在该作用域中读取 $variable 调用 $foo->Variable()。\"]},\"326\":{\"h\":\"匿名函数\",\"t\":[\"匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数 callable参数的值。当然，也有其它应用的情况。\",\"$greet = function($name) { printf(\\\"Hello %s\\\\r\\\\n\\\", $name); }; $greet('World'); $greet('PHP');\",\"闭包可以从父作用域中继承变量。 任何此类变量都应该用 use 语言结构传递进去。 PHP 7.1 起，不能传入此类变量： superglobals、 $this 或者和参数重名。 返回类型声明必须放在 use 子句的 后面 。\",\"$message = 'hello'; // 没有 \\\"use\\\" $example = function () { var_dump($message); }; $example(); //Notice: Undefined variable: message in /example.php on line 6 NULL // 继承 $message $example = function () use ($message) { var_dump($message); }; $example(); //string(5) \\\"hello\\\" // 当函数被定义而不是被调用的时候继承变量的值 $message = 'world'; $example(); //string(5) \\\"hello\\\" // 重置 message $message = 'hello'; // 通过引用继承 $example = function () use (&$message) { var_dump($message); }; $example(); //string(5) \\\"hello\\\" // 父级作用域改变的值反映在函数调用中 $message = 'world'; $example(); //string(5) \\\"world\\\" // 闭包函数也可以接受常规参数 $example = function ($arg) use ($message) { var_dump($arg . ' ' . $message); }; $example(\\\"hello\\\"); string(11) \\\"hello world\\\" // 返回类型在 use 子句的后面 $example = function () use ($message): string { return \\\"hello $message\\\"; }; var_dump($example()); //string(11) \\\"hello world\\\"\"]},\"327\":{\"c\":[\"PHP\"]},\"328\":{\"c\":[\"PHP\"]},\"329\":{\"h\":\"PHP\",\"t\":[\"PHP 不仅限于输出 HTML。PHP 的功能包括输出丰富的文件类型，例如图像或 PDF 文件、加密数据和发送电子邮件。还可以轻松输出任何文本，例如 JSON 或 XML。PHP 可以自动生成这些文件，并将它们保存在文件系统中，而不是将其打印出来，从而形成动态内容的服务器端缓存。\"]},\"330\":{\"h\":\"PHP标记\",\"t\":[\"PHP标记表示了一段可以被PHP解析器解析的代码。\",\"当解析一个文件时，PHP 会寻找起始和结束标记，也就是 <?php 和 ?> ，这告诉 PHP 开始和停止解析二者之间的代码。\",\"此种解析方式使得 PHP 可以被嵌入到各种不同的文档中去，而任何起始和结束标记之外的部分都会被 PHP 解析器忽略。\",\"三种PHP标记\",\"// 标准 <?php ?> 1. <?php echo 'if you want to serve PHP code in XHTML or XML documents,use these tags'; ?> // <?= ?> 是 <?php echo ?>的简写 2. You can use the short echo tag to <?= 'print this string' ?>. It's equivalent to <?php echo 'print this string' ?>. // 短标记 <? ?> 3. <? echo 'this code is within short tags, but will only work '. 'if short_open_tag is enabled'; ?>\",\"短标记是被默认开启的，但是也可以通过 short_open_tag( php.ini ) 来直接禁用。如果 PHP 在被安装时使用了 --disable-short-tags 的配置，该功能则是被默认禁用的。 如果文件内容仅仅包含 PHP 代码，最好在文件末尾删除 PHP 结束标记。这可以避免在 PHP 结束标记之后万一意外加入了空格或者换行符，会导致 PHP 开始输出这些空白，而脚本中此时并无输出的意图。\",\"<?php echo \\\"Hello world\\\"; // ... 更多代码 echo \\\"Last statement\\\"; // 脚本在此处结束，没有 PHP 结束标记\"]},\"331\":{\"h\":\"与HTML文档的混合\",\"t\":[\"在PHP标记以外的内容都会被PHP解析器忽略，这可以使php混合其他内容。\",\"混合HTML\",\"<p>This is going to be ignored by PHP and displayed by the browser.</p> <?php echo 'While this is going to be parsed.'; ?> <p>This will also be ignored by PHP and displayed by the browser.</p>\",\"这将如预期中的运行，因为当 PHP 解释器碰到 ?> 结束标记时就简单地将其后内容原样输出（除非马上紧接换行 - 见 指令分隔符）直到碰到下一个开始标记；例外是处于条件语句中间时，此时 PHP 解释器会根据条件判断来决定哪些输出，哪些跳过。见下例。 使用条件结构：\",\"<?php if ($expression == true): ?> This will show if the expression is true. <?php else: ?> Otherwise this will show. <?php endif; ?>\",\"上例中 PHP 将跳过条件语句未达成的段落，即使该段落位于 PHP 开始和结束标记之外。由于 PHP 解释器会在条件未达成时直接跳过该段条件语句块，因此 PHP 会根据条件来忽略之。 要输出大段文本时，跳出 PHP 解析模式通常比将文本通过 echo 或 print 输出更有效率。 注意: 此外注意如果将 PHP 嵌入到 XML 或 XHTML 中则需要使用 <?php?> 标记以保持符合标准。\"]},\"332\":{\"h\":\"指令分隔符\",\"t\":[\"同 C 或 Perl 一样，PHP 需要在每个语句后用分号结束指令。一段 PHP 代码中的结束标记隐含表示了一个分号；在一个 PHP 代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。 示例 #1 包含末尾换行符的结束标记的例子\",\"<?php echo \\\"Some text\\\"; ?> No newline <?= \\\"But newline now\\\" ?>\",\"以上示例会输出：\",\"Some textNo newline But newline now\",\"进入和退出 PHP 解析的例子：\",\"<?php echo 'This is a test'; ?> <?php echo 'This is a test' ?> <?php echo 'We omitted the last closing tag';\",\"注意: 文件末尾的 PHP 代码段结束标记可以不要，有些情况下当使用 include 或者 require 时省略掉会更好些，这样不期望的空白符就不会出现在文件末尾，之后仍然可以输出响应标头。在使用输出缓冲时也很便利，就不会看到由包含文件生成的不期望的空白符。\"]},\"333\":{\"h\":\"注释\",\"t\":[\"PHP 支持 C，C++ 和 Unix Shell 风格（Perl 风格）的注释。例如:\",\"<?php echo 'This is a test'; // 这是单行 c++ 样式注释 /* 这是一条多行注释 另一行也是注释 */ echo 'This is yet another test'; echo 'One Final Test'; # 这是单行 shell 风格的注释 ?>\",\"单行注释仅仅注释到行末或者当前的 PHP 代码块，视乎哪个首先出现。这意味着在 // ... ?> 或者 # ... ?> 之后的 HTML 代码将被显示出来：?> 跳出了 PHP 模式并返回了 HTML 模式，// 或 # 并不能影响到这一点。\",\"<h1>This is an <?php # echo 'simple';?> example</h1> <p>The header above will say 'This is an example'.</p>\",\"C 风格的注释在碰到第一个 */ 时结束。要确保不要嵌套 C 风格的注释。试图注释掉一大块代码时很容易出现该错误。\",\"<?php /* echo 'This is a test'; /* 这个注释会引发问题 */ */ ?>\"]},\"334\":{\"c\":[\"PHP\"]},\"335\":{\"c\":[\"PHP\"]},\"336\":{\"h\":\"class\",\"t\":[\"自 PHP 8.4.0 起，弃用使用单个下划线 _ 作为类名。一个类可以包含有属于自己的 常量，变量（称为“属性”）以及函数（称为“方法”）。\",\"<?php class SimpleClass { // 声明属性 public $var = 'a default value'; // 声明方法 public function displayVar() { echo $this->var; } } ?>\",\"当一个方法在类定义内部被调用时，有一个可用的伪变量 $this。$this 是一个到当前对象的引用。\"]},\"337\":{\"h\":\"new实例化\",\"t\":[\"如果一个变量包含一个类名的 string 和 new 时，将创建该类的一个新实例。 如果该类属于一个命名空间，则必须使用其完整名称。如果没有参数要传递给类的构造函数，类名后的括号则可以省略掉。\"]},\"338\":{\"h\":\"属性和方法\",\"t\":[\"类的属性和方法存在于不同的“命名空间”中，这意味着同一个类的属性和方法可以使用同样的名字。 如果你的类属性被分配给一个 匿名函数 你将无法直接调用它。因为访问类属性的优先级要更高，在此场景下需要用括号包裹起来调用。\",\"class Foo { public $bar; public function __construct() { $this->bar = function() { return 42; }; } } $obj = new Foo(); echo ($obj->bar)(), PHP_EOL;\"]},\"339\":{\"h\":\"构造函数\",\"t\":[\"PHP 允许开发者在一个类中定义一个方法作为构造函数（ 本质上他只是个普通函数 ）。 具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。\",\"重要\",\"如果子类中定义了构造函数则不会隐式调用其父类的构造函数。要执行父类的构造函数，需要在子类的构造函数中调用 parent::__construct()。如果子类没有定义构造函数则会如同一个普通的类方法一样从父类继承（假如没有被定义为 private 的话）。\",\"class BaseClass { function __construct() { print \\\"In BaseClass constructor\\\\n\\\"; } } class SubClass extends BaseClass { function __construct() { parent::__construct(); print \\\"In SubClass constructor\\\\n\\\"; } } class OtherSubClass extends BaseClass { // 继承 BaseClass 的构造函数 } // In BaseClass constructor $obj = new BaseClass(); // In BaseClass constructor // In SubClass constructor $obj = new SubClass(); // In BaseClass constructor $obj = new OtherSubClass();\"]},\"340\":{\"h\":\"继承\",\"t\":[\"一个类可以在声明中用 extends 关键字继承另一个类的方法和属性。PHP 不支持多重继承，一个类只能继承一个基类。\",\"被继承的方法和属性可以通过用同样的名字重新声明被覆盖。但是如果父类定义方法或者常量时使用了 final，则不可被覆盖。可以通过 parent:: 来访问被覆盖的方法或属性。\",\"重要\",\"从 PHP 8.1.0 起，常量可以声明为 final。\",\"class ExtendClass extends SimpleClass { // 同样名称的方法，将会覆盖父类的方法 function displayVar() { echo \\\"Extending class\\\\n\\\"; parent::displayVar(); } } $extended = new ExtendClass(); $extended->displayVar();\"]},\"341\":{\"h\":\"签名覆盖规则\",\"t\":[\"当覆盖（override）方法时，签名必须兼容父类方法。强制参数可以改为可选参数；添加的新参数只能是可选；放宽可见性而不是继续限制。除了构造方法和私有方法\"]},\"342\":{\"h\":\"readonly\",\"t\":[\"自 PHP 8.2.0 起，可以使用 readonly 修饰符来标记类。将类标记为 readonly 只会向每个声明的属性添加 readonly 修饰符并禁止创建动态属性。\",\"重要\",\"无类型的属性和静态属性不能用 readonly 修饰符\"]},\"343\":{\"h\":\"::class\",\"t\":[\"使用 ClassName::class 可以获取包含类 ClassName 的完全限定名称。这对使用了 命名空间 的类尤其有用。\",\"namespace NS { class ClassName { } echo ClassName::class; }\",\"自 PHP 8.0.0 起，::class 也可用于对象。\",\"namespace NS { class ClassName { } } $c = new ClassName(); print $c::class;\"]},\"344\":{\"h\":\"?>访问符\",\"t\":[\"自 PHP 8.0.0 起，类属性和方法可以通过 \\\"nullsafe\\\" 操作符访问： ?->。 对象引用解析（dereference）为 null 时不抛出异常，而是返回 null。 并且如果是链式调用中的一部分，剩余链条会直接跳过。\",\"// 自 PHP 8.0.0 起可用 $result = $repository?->getUser(5)?->name; // 上边那行代码等价于以下代码 if (is_null($repository)) { $result = null; } else { $user = $repository->getUser(5); if (is_null($user)) { $result = null; } else { $result = $user->name; } }\"]},\"345\":{\"h\":\"属性\",\"t\":[\"类的变量成员叫做属性，或者叫字段。 属性开头至少使用一个修饰符（比如 访问控制（可见性）、静态（static）关键字或者自 PHP 8.1.0 起支持的 readonly）， 除了 readonly 属性之外都是可选的，然后自 PHP 7.4 起可以跟一个类型声明，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但是初始化的值必须是 常量值。\",\"重要\",\"没有声明访问控制（可见性）修饰符的属性将默认声明为public。\",\"->\",\"->（对象运算符）：$this->property（其中 property 是该属性名）这种方式来访问非静态属性。 静态属性则是用 \"]},\"346\":{\"h\":\"类型声明\",\"t\":[\"从 PHP 7.4.0 开始，属性定义可以包含类型声明，但 callable 除外。\",\"class User { public int $id; public ?string $name; public function __construct(int $id, ?string $name) { $this->id = $id; $this->name = $name; } } $user = new User(1234, null); var_dump($user->id); var_dump($user->name);\"]},\"347\":{\"h\":\"只读(地址)\",\"t\":[\"自 PHP 8.1.0 起，可以使用 readonly 修饰符声明属性，防止初始化后修改属性。 不支持静态属性，且必须在他的声明作用域内初始化。 然而，只读属性并不会妨碍内部可变性。存储在只读属性中的对象（或资源）仍然可以在内部修改：\",\"class Test { public function __construct(public readonly object $obj) {} } $test = new Test(new stdClass); // 内部可变正常。 $test->obj->foo = 1; // 赋值异常。 $test->obj = new stdClass;\"]},\"348\":{\"h\":\"动态属性\",\"t\":[\"如果尝试在 object 上赋值不存在的属性，PHP 将会自动创建相应的属性。动态创建的属性将仅能在此类实例上使用。\",\"重要\",\"自 PHP 8.2.0 起弃用动态属性。建议更改为属性声明。要处理任意属性名称，类应该实现魔术方法 __get() 和 __set()。最后可以使用 #[\\\\AllowDynamicProperties] 注解标记此类。\"]},\"349\":{\"h\":\"属性钩子（拦截器、代理\",\"t\":[\"属性钩子是拦截和覆盖属性的读写行为的一种方法。 这个功能有两个目的：\",\"它允许直接使用属性，而不需要get和set方法， 同时为将来添加其他行为留有余地。 这使得大多数样板get/set方法变得不必要， 即使不使用钩子\",\"它允许不需要存储就能描述对象的属性 直接一个值。 在非静态属性上有两个钩子： get 和 set 。 它们分别允许重写属性的读和写行为。 钩子可用于类型化和非类型化属性。\",\"重要\",\"属性挂钩是在PHP 8.4中引入的。属性挂钩与 readonly 属性不兼容。\",\"class Example { private bool $modified = false; public string $foo = 'default value' { get { if ($this->modified) { return $this->foo . ' (modified)'; } return $this->foo; } set(string $value) { $this->foo = strtolower($value); $this->modified = true; } } } $example = new Example(); $example->foo = 'changed'; print $example->foo;\"]},\"350\":{\"h\":\"类常量\",\"t\":[\"类常量的默认可见性是 public。\",\"重要\",\"类常量可以通过子类重新定义。PHP 8.1.0 起，如果类常量定义为 final，则不能被子类重新定义。\",\"class MyClass { const CONSTANT = 'constant value'; function showConstant() { echo self::CONSTANT . \\\"\\\\n\\\"; } } echo MyClass::CONSTANT . \\\"\\\\n\\\"; $classname = \\\"MyClass\\\"; echo $classname::CONSTANT . \\\"\\\\n\\\"; $class = new MyClass(); $class->showConstant(); echo $class::CONSTANT.\\\"\\\\n\\\";\",\"重要\",\"自 PHP 8.3.0 起，可以使用变量动态获取类常量。\",\"class Foo { public const BAR = 'bar'; private const BAZ = 'baz'; } $name = 'BAR'; echo Foo::{$name}, PHP_EOL; // bar\"]},\"351\":{\"h\":\"类自动引入\",\"t\":[\"spl_autoload_register() 函数可以注册任意数量的自动加载器，当使用尚未被定义的类（class）和接口（interface）时自动去加载。通过注册自动加载器，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。 像 class 一样的结构都可以以相同方式自动加载。包括类、接口、trait 和枚举。\",\"重要\",\"PHP 8.0.0 之前，可以使用 __autoload() 自动加载类和接口。然而，它是 spl_autoload_register() 的一种不太灵活的替代方法，并且 __autoload() 在 PHP 7.2.0 起弃用，在 PHP 8.0.0 起移除。\",\"spl_autoload_register(function ($class_name) { require_once $class_name . '.php'; }); $obj = new MyClass1(); $obj2 = new MyClass2();\"]},\"352\":{\"c\":[\"PHP\"]},\"353\":{\"c\":[\"PHP\"]},\"354\":{\"h\":\"运算符\"},\"355\":{\"h\":\"位运算\",\"t\":[\"例子\",\"名称\",\"结果\",\"$a & $b\",\"And（按位与）\",\"将把 $a 和 $b 中都为 1 的位设为 1。\",\"$a | $b\",\"Or（按位或）\",\"将把 $a 和 $b 中任何一个为 1 的位设为 1。\",\"$a ^ $b\",\"Xor（按位异或）\",\"将把 $a 和 $b 中一个为 1 另一个为 0 的位设为 1。\",\"~ $a\",\"Not（按位取反）\",\"将 $a 中为 0 的位设为 1，反之亦然。\",\"$a << $b\",\"Shift left（左移）\",\"将 $a 中的位向左移动 $b 次（每一次移动都表示“乘以 2”）。\",\"$a >> $b\",\"Shift right（右移）\",\"将 $a 中的位向右移动 $b 次（每一次移动都表示“除以 2”）。\"]},\"356\":{\"h\":\"比较运算\",\"t\":[\"例子\",\"名称\",\"结果\",\"$a == $b\",\"等于\",\"true，如果类型转换后 $a 等于 $b。\",\"$a === $b\",\"全等\",\"true，如果 $a 等于 $b，并且它们的类型也相同。\",\"$a != $b\",\"不等\",\"true，如果类型转换后 $a 不等于 $b。\",\"$a <> $b\",\"不等\",\"true，如果类型转换后 $a 不等于 $b。\",\"$a !== $b\",\"不全等\",\"true，如果 $a 不等于 $b，或者它们的类型不同。\",\"$a < $b\",\"小于\",\"true，如果 $a 严格小于 $b。\",\"$a > $b\",\"大于\",\"true，如果 $a 严格大于 $b。\",\"$a <= $b\",\"小于等于\",\"true，如果 $a 小于或者等于 $b。\",\"$a >= $b\",\"大于等于\",\"true，如果 $a 大于或者等于 $b。\",\"$a <=> $b\",\"太空船运算符（组合比较符）\",\"当$a小于、等于、大于 $b时 分别返回一个小于、等于、大于0的 int 值。\"]},\"357\":{\"h\":\"三元表达式\",\"t\":[\"“?:”（或三元）运算符 。\",\"// 三元运算符的例子 $action = (empty($_POST['action'])) ? 'default' : $_POST['action']; // 以上等同于以下的 if/else 语句 if (empty($_POST['action'])) { $action = 'default'; } else { $action = $_POST['action']; }\",\"重要\",\"表达式 expr1 ?: expr3 等同于如果 expr1 求值为 true 时返回 expr1 的结果，否则返回 expr3。expr1 在这里仅执行一次。\",\"在 PHP 8.0.0 之前，三元运算符是从左到右执行的， 而大多数其他编程语言是从右到左的。 自 PHP 7.4.0 起，弃用依靠左联。 PHP 8.0.0 起，三元运算符是非关联的。\",\"// 乍看起来下面的输出是 'true',实际输出是't'，因为在 PHP 8.0.0 之前三元运算符是左联的 echo (true ? 'true' : false ? 't' : 'f'); // 下面是与上面等价的语句，但更清晰 echo ((true ? 'true' : 'false') ? 't' : 'f');\"]},\"358\":{\"h\":\"NULL合并\",\"t\":[\"// NULL 合并运算符的例子 $action = $_POST['action'] ?? 'default'; // 以上例子等同于于以下 if/else 语句 if (isset($_POST['action'])) { $action = $_POST['action']; } else { $action = 'default'; }\"]},\"359\":{\"h\":\"错误控制\",\"t\":[\"PHP 支持一个错误控制运算符：@。当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误诊断都被抑制。 如果用 set_error_handler() 设定了自定义的错误处理函数，即使诊断信息被抑制，也仍然会被调用。 error_get_last() 返回数组中的 \\\"message\\\" 元素储存了表达式产生的任意错误信息。 此函数的返回结果会随着每次错误的发生而相应变化，所以需要尽早检查。\",\"/* 故意文件错误 */ $my_file = @file ('non_existent_file') or die (\\\"Failed opening file: error was '\\\" . error_get_last()['message'] . \\\"'\\\"); // 这适用于所有表达式，而不仅仅是函数： $value = @$cache[$key]; // 如果索引 $key 不存在，则不会发出通知。\",\"重要\",\"@ 运算符只对 表达式 有效。 对新手来说一个简单的规则就是：如果能从某处获得值，就能在它前面加上 @ 运算符。 例如，可以把它放在变量，函数调用，某些语言构造调用（例如 include ）等等之前。 不能把它放在函数或类的定义之前，也不能用于条件结构例如 if 和 foreach 等。\"]},\"360\":{\"h\":\"执行运算符\",\"t\":[\"PHP 支持一个执行运算符：反引号（``）。 PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回。 使用反引号运算符“`”的效果与函数 shell_exec() 相同。\",\"$output = `ls -al`; echo \\\"<pre>$output</pre>\\\";\",\"重要\",\"关闭了 shell_exec() 时反引号运算符是无效的。\"]},\"361\":{\"h\":\"数组运算符\",\"t\":[\"例子\",\"名称\",\"结果\",\"$a + $b\",\"联合\",\"把b的数组元素附加到a的数组后面，对于系统的键值对，使用a的\",\"$a == $b\",\"相等\",\"如果 $a 和 $b 具有相同的键／值对则为 true。\",\"$a === $b\",\"全等\",\"如果 $a 和 $b 具有相同的键／值对并且顺序和类型都相同则为 true。\",\"$a != $b\",\"不等\",\"如果 $a 不等于 $b 则为 true。\",\"$a <> $b\",\"不等\",\"如果 $a 不等于 $b 则为 true。\",\"$a !== $b\",\"不全等\",\"如果 $a 不全等于 $b 则为 true。\"]},\"362\":{\"h\":\"类型运算符\",\"t\":[\"instanceof 用于确定一个 PHP 变量是否属于某一类 class 的实例（即对象）\",\"class MyClass{} class NotMyClass{} $a = new MyClass; var_dump($a instanceof MyClass); var_dump($a instanceof NotMyClass);\",\"instanceof 也可用来确定一个变量是不是继承自某一父类的子类的实例：\",\"class ParentClass{} class MyClass extends ParentClass{} $a = new MyClass; var_dump($a instanceof MyClass); var_dump($a instanceof ParentClass);\",\"instanceof也可用于确定一个变量是不是实现了某个接口的对象的实例:\",\"interface MyInterface{} class MyClass implements MyInterface{} $a = new MyClass; var_dump($a instanceof MyClass); var_dump($a instanceof MyInterface);\"]},\"363\":{\"c\":[\"PHP\"]},\"364\":{\"c\":[\"PHP\"]},\"365\":{\"h\":\"类型\"},\"366\":{\"h\":\"类型系统\",\"t\":[\"PHP 的类型系统支持各种原子类型，可以组合在一起创建更加复杂的类型。其中一些类型可以写成类型声明。\"]},\"367\":{\"h\":\"原子类型\",\"t\":[\"内置类型\",\"标量类型： 1. bool类型 2. int类型 3. float类型 4. string类型\",\"array类型：引用类型\",\"object类型\",\"resource类型\",\"never类型\",\"void类型\",\"相对类的类型：self、parent、static\",\"单例类型：false和true\",\"单值类型：null\",\"用户定义的类型：使用interface、class、枚举定义的自定义类型\",\"接口\",\"类\",\"枚举\",\"callable类型\"]},\"368\":{\"h\":\"复合类型\",\"t\":[\"交集类型:通过实现多个接口、泛型或类型约束来实现\",\"<?php declare(strict_types=1); // 定义两个接口 interface Flyable { public function fly(): void; } interface Swimmable { public function swim(): void; } // 实现交集的类（同时实现两个接口） class Duck implements Flyable, Swimmable { public function fly(): void { echo \\\"Duck is flying!\\\"; } public function swim(): void { echo \\\"Duck is swimming!\\\"; } } // 使用交集类型（通过类型检查） function checkCapabilities(object $object): void { if ($object instanceof Flyable && $object instanceof Swimmable) { echo \\\"This object can both fly and swim!\\\"; } else { echo \\\"Not a valid capability!\\\"; } } // 测试 $duck = new Duck(); checkCapabilities($duck); // 输出：This object can both fly and swim! ?>\",\"联合类型：接受多个不同类型的值，可接受的类型之间使用 | 符号 连接。如果其中一种类型是交集类型，需要使用括号括起来，在 DNF 中写成：T|(X&Y) 。\",\"<?php declare(strict_types=1); class User { // 定义属性，使用联合类型（string | int | null） public string|int|null $id; public string $name; public float|int $age; // age 可以是整数或浮点数 // 构造函数，强制类型约束 public function __construct( string|int|null $id, string $name, float|int $age ) { $this->id = $id; $this->name = $name; $this->age = $age; } // 方法：根据 id 类型输出不同信息 public function printId(): void { if (is_int($this->id)) { echo \\\"ID (int): \\\" . $this->id; } elseif (is_string($this->id)) { echo \\\"ID (string): \\\" . $this->id; } else { echo \\\"ID is null\\\"; } } } // 使用示例 $user1 = new User(123, \\\"Alice\\\", 25); // int 类型的 id $user2 = new User(\\\"user_456\\\", \\\"Bob\\\", 30.5); // string 类型的 id，float 类型的 age $user1->printId(); // 输出：ID (int): 123 $user2->printId(); // 输出：ID (string): user_456 ?>\"]},\"369\":{\"h\":\"类型别名\",\"t\":[\"PHP 支持两种类型别名：mixed 和 iterable，分别对应 object|resource|array|string|float|int|bool|null 和 Traversable|array 的 联合类型。 注意: PHP 不支持用户定义类型别名。\"]},\"370\":{\"h\":\"NULL\",\"t\":[\"未定义和 unset() 的变量都将解析为值 null。 null 类型只有一个值，就是不区分大小写的常量 null。\",\"// 不区分大小写 <?php $var = NULL; ?>\"]},\"371\":{\"h\":\"Boolean布尔类型\",\"t\":[\"bool 仅有两个值，用于表达真（truth）值，不是 true 就是 false。同样的不区分大小写。\",\"<?php $foo = True; // 设置 $foo 为 TRUE ?>\"]},\"372\":{\"h\":\"int整型\",\"t\":[\"Int 可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。 可以用负运算符 来表示一个负的 int。\",\"<?php $a = 1234; // 十进制数 $a = 0123; // 八进制数 (等于十进制 83) $a = 0o123; // 八进制数 (PHP 8.1.0 起) $a = 0x1A; // 十六进制数 (等于十进制 26) $a = 0b11111111; // 二进制数字 (等于十进制 255) $a = 1_234_567; // 整型数值 (PHP 7.4.0 以后) ?>\",\"PHP 不支持无符号的 int。int 值的字长可以用常量 PHP_INT_SIZE来表示， 最大值可以用常量 PHP_INT_MAX 来表示， 最小值可以用常量 PHP_INT_MIN 表示。\"]},\"373\":{\"h\":\"溢出\",\"t\":[\"如果给定的一个数超出了 int 的范围，将会被解释为 float。同样如果执行的运算结果超出了 int 范围，也会返回 float。\"]},\"374\":{\"h\":\"整数除法\",\"t\":[\"PHP 没有 int 除法取整运算符，要使用 intdiv() 实现。 1/2 产生出 float 0.5。 值可以舍弃小数部分，强制转换为 int，或者使用 round() 函数可以更好地进行四舍五入。\",\"<?php var_dump(25/7); // float(3.5714285714286) var_dump((int) (25/7)); // int(3) var_dump(round(25/7)); // float(4) ?>\"]},\"375\":{\"h\":\"Float浮点型\",\"t\":[\"浮点型（也叫浮点数 float，双精度数 double 或实数 real）可以用以下任一语法定义：\",\"<?php $a = 1.234; $b = 1.2e3; $c = 7E-10; $d = 1_234.567; // 从 PHP 7.4.0 开始支持 ?>\"]},\"376\":{\"h\":\"比较\",\"t\":[\"由于内部表达方式的原因，比较两个浮点数是否相等是有问题的。不过还是有迂回的方法来比较浮点数值的。 要测试浮点数是否相等，要使用一个仅比该数值大一丁点的最小误差值。该值也被称为机器极小值（epsilon）或最小单元取整数，是计算中所能接受的最小的差别值。 $a 和 $b 在小数点后五位精度内都是相等的。\",\"<?php $a = 1.23456789; $b = 1.23456780; $epsilon = 0.00001; if(abs($a-$b) < $epsilon) { echo \\\"true\\\"; } ?>\"]},\"377\":{\"h\":\"NaN\",\"t\":[\"某些数学运算会产生一个由常量 NAN 所代表的结果。此结果代表着一个在浮点数运算中未定义或不可表述的值。任何拿此值与其它任何值（除了 true）进行的松散或严格比较的结果都是 false。 由于 NAN 代表着任何不同值，不应拿 NAN 去和其它值进行比较，包括其自身，应该用 is_nan() 来检查。\"]},\"378\":{\"h\":\"string\",\"t\":[\"一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode 。 一个字符串可以用 4 种方式表达：\",\"单引号\",\"双引号\",\"heredoc 语法结构\",\"nowdoc 语法结构\"]},\"379\":{\"h\":\"单引号\",\"t\":[\"在单引号字符串中的 变量 和 特殊字符 的转义序列将不会被替换。\",\"<?php echo 'this is a simple string'; // 可以断行 echo 'You can also have embedded newlines in strings this way as it is okay to do'; // 对单引号转义 echo 'Arnold once said: \\\"I\\\\'ll be back\\\"'; // 反斜杠转义 echo 'You deleted C:\\\\\\\\*.*?'; // 输出： You deleted C:\\\\*.*? echo 'You deleted C:\\\\*.*?'; // 输出： This will not expand: \\\\n a newline echo 'This will not expand: \\\\n a newline'; // 输出： Variables do not $expand $either echo 'Variables do not $expand $either'; ?>\"]},\"380\":{\"h\":\"双引号\",\"t\":[\"PHP会对双引号中的特殊字符进行解析,对于包含的变量，具备模板字符串的能力\",\"序列\",\"含义\",\"\\\\n\",\"换行\",\"\\\\r\",\"回车\",\"\\\\t\",\"水平制表符\",\"\\\\v\",\"垂直制表符\",\"\\\\e\",\"Escape\",\"\\\\f\",\"换页\",\"\\\\\\\\\",\"反斜线\",\"$\",\"美元标记\",\"\\\\\\\"\",\"双引号\",\"\\\\\",\"八进制\",\"\\\\x\",\"十六进制\",\"\\\\u\",\"Unicode\"]},\"381\":{\"h\":\"Heredoc结构\",\"t\":[\"由 <<< 标识符 内容 标识符包裹的内容。 在 heredoc 结构中单引号不用被转义，但是上文中列出的转义序列还可以使用。变量将被替换，但在 heredoc 结构中含有复杂的变量时要像 string 一样格外小心。\",\"<?php $name = 'MyName'; echo <<<EOT My name is \\\"$name\\\". I am printing some. Now, I am printing some. This should print a capital 'A': \\\\x41 EOT; ?> // 输出 // My name is \\\"MyName\\\". I am printing some Foo. // Now, I am printing some Bar2. // This should print a capital 'A': A\"]},\"382\":{\"h\":\"Nowdoc结构\",\"t\":[\"类似于单引号，不会发生转义和插值。\",\"<?php echo <<<'EOD' Example of string spanning multiple lines using nowdoc syntax. Backslashes are always treated literally, e.g. \\\\\\\\ and \\\\'. EOD; // 以上示例会输出： Example of string spanning multiple lines using nowdoc syntax. Backslashes are always treated literally, e.g. \\\\\\\\ and \\\\'.\"]},\"383\":{\"h\":\"array数组\",\"t\":[\"PHP 中的 array 实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。\",\"声明\",\"// 关联数组 $array = [\\\"foo\\\" => \\\"bar\\\",\\\"bar\\\" => \\\"foo\\\",]; // 键值只支持int和string，且转换后的键值后者覆盖前者 $array = array(1=> \\\"a\\\",\\\"1\\\" => \\\"b\\\",1.5 => \\\"c\\\",true => \\\"d\\\",); // 未提供键值，为上一个+1 $array = array(\\\"a\\\",\\\"b\\\",6 => \\\"c\\\",\\\"d\\\",); // 对于负数键值也成立，PHP 8.3.0 之前，分配负整数 key n 会将下一个 key 分配给 0 $array = []; $array[-5] = 1; $array[] = 2;\"]},\"384\":{\"h\":\"访问\",\"t\":[\"使用 [] 来访问键值对\",\"$arr = array(5 => 1, 12 => 2); // 添加 $arr[] = 56; // 添加 $arr[\\\"x\\\"] = 42; unset($arr[5]); // 从数组中删除元素 unset($arr);\",\"最大整数键名目前不需要存在于 array 中。 它只要在上次 array 重新生成索引后曾经存在于 array 就行了\",\"<?php // 创建一个简单的数组 $array = array(1, 2, 3, 4, 5); print_r($array); // 现在删除其中的所有元素，但保持数组本身不变: foreach ($array as $i => $value) { unset($array[$i]); } print_r($array); // 添加一个单元（注意新的键名是 5，而不是你可能以为的 0） $array[] = 6; print_r($array); // 重新索引： $array = array_values($array); $array[] = 7; print_r($array); ?>\"]},\"385\":{\"h\":\"数组解构\",\"t\":[\"使用 []或者 list() 语言结构解包数组\",\"<?php $source_array = ['foo', 'bar', 'baz']; [$foo, $bar, $baz] = $source_array; echo $foo; // 打印 \\\"foo\\\" echo $bar; // 打印 \\\"bar\\\" echo $baz; // 打印 \\\"baz\\\" ?>\",\"多维数组\",\"$source_array = [[1, 'John'],[2, 'Jane'],]; foreach ($source_array as [$id, $name]) { // 这里是 $id 和 $name 的逻辑 }\",\"如果变量未提供，数组元素将会被忽略。数组解包始终从索引 0 开始。\",\"$source_array = ['foo', 'bar', 'baz']; // 将索引 2 的元素分配给变量 $baz [, , $baz] = $source_array; echo $baz; // 打印 \\\"baz\\\"\",\"自 PHP 7.1.0 起，也可以解包关联数组。这在数字索引数组中更容易选择正确的元素，因为可以显式指定索引。\",\"$source_array = ['foo' => 1, 'bar' => 2, 'baz' => 3]; // 将索引 'baz' 处的元素分配给变量 $three ['baz' => $three] = $source_array; echo $three; // 打印 3 $source_array = ['foo', 'bar', 'baz']; // 将索引 2 处的元素分配给变量 $baz [2 => $baz] = $source_array; echo $baz; // 打印 \\\"baz\\\"\",\"数组解包可以方便的用于两个变量交换。\",\"<?php $a = 1; $b = 2; [$b, $a] = [$a, $b]; echo $a; // 打印 2 echo $b; // 打印 1 ?>\"]},\"386\":{\"h\":\"数组展开\",\"t\":[\"在 array 定义时，用 ... 前缀的一个 array 可以被展开到当前位置。 只有实现了 Traversable 的数组和对象才能被展开。\",\"<?php // 使用简短的数组语法。 // 亦可用于 array() 语法 $arr1 = [1, 2, 3]; $arr2 = [...$arr1]; //[1, 2, 3] $arr3 = [0, ...$arr1]; //[0, 1, 2, 3] $arr4 = [...$arr1, ...$arr2, 111]; //[1, 2, 3, 1, 2, 3, 111] $arr5 = [...$arr1, ...$arr1]; //[1, 2, 3, 1, 2, 3] function getArr() { return ['a', 'b']; } $arr6 = [...getArr(), 'c' => 'd']; //['a', 'b', 'c' => 'd'] ?>\",\"key 为字符时，后面的字符键会覆盖之前的字符键；key 为 integer 时则会重新编号：\",\"三种PHP标记\",\"在 PHP 8.1 之前，带有 string 键的 array 无法解包\"]},\"387\":{\"h\":\"拷贝\",\"t\":[\"可以通过引用传递 array 的值来直接更改数组的值。\",\"<?php foreach ($colors as &$color) { // $clolor $color = mb_strtoupper($color); } unset($color); /* 确保后面对$color 的写入不会修改最后一个数组元素 */ print_r($colors); ?>\"]},\"388\":{\"h\":\"object\",\"t\":[\"使用 class 定义类， new 关键字实例化为对象。\",\"class foo { function do_foo() { echo \\\"Doing foo.\\\"; } } $bar = new foo; $bar->do_foo();\"]},\"389\":{\"h\":\"枚举(PHP 8 >= 8.1.0)\",\"t\":[\"枚举是在类、类常量基础上的约束层， 目标是提供一种能力：定义包含可能值的封闭集合类型。\",\"<?php enum Suit { case Hearts; case Diamonds; case Clubs; case Spades; } function do_stuff(Suit $s) { // ... } do_stuff(Suit::Spades); ?>\"]},\"390\":{\"h\":\"Resource 资源类型\",\"t\":[\"资源 resource 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。 资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄。\"]},\"391\":{\"h\":\"Callback / Callable 类型\",\"t\":[\"回调可以通过 callable 类型声明来表示。 一些函数如 call_user_func() 或 usort() 可以接受用户自定义的回调函数作为参数。回调函数不止可以是简单函数，还可以是对象的方法，包括静态类方法。\"]},\"392\":{\"h\":\"Mixed\",\"t\":[\"在类型理论中，mixed 是顶级类型。这意味着其它所有类型都是它的子类型。\"]},\"393\":{\"h\":\"void\",\"t\":[\"void 是仅用于返回类型，表示函数不返回值，但该函数仍可能会终止。因此，它不能成为联合类型声明的一部分。自 PHP 7.1.0 起可用。\"]},\"394\":{\"h\":\"Never\",\"t\":[\"never 是仅用于返回的类型，表示函数不会终止。这意味着它要么调用 exit()，要么抛出异常，要么无限循环。因此，它不能是联合类型声明的一部分。自 PHP 8.1.0 起可用。\"]},\"395\":{\"h\":\"可迭代c'c'c'c'cccccc\",\"t\":[\"Iterable 是内置编译时 array|Traversable 的类型别名。从 PHP 7.1.0 到 PHP 8.2.0 之间的描述来看，iterable 是内置伪类型，充当上述类型别名，也可以用于类型声明。iterable 类型可用于 foreach 或在生成器中使用 yield from。\"]},\"396\":{\"c\":[\"PHP\"]},\"397\":{\"c\":[\"PHP\"]},\"398\":{\"h\":\"变量\",\"t\":[\"变量用一个美元符号后面跟变量名来表示。变量名是区分大小写的。 有效的变量名由字母（A-Z、a-z 或 128 到 255 之间的字节）或者下划线开头，后面跟上任意数量的字母，数字，或者下划线。\"]},\"399\":{\"h\":\"引用赋值\",\"t\":[\"新的变量简单的引用了原始变量。改动新的变量将影响到原始变量，反之亦然。\",\"<?php $foo = 'Bob'; // 将 'Bob' 赋给 $foo $bar = &$foo; // 通过 $bar 引用 $foo $bar = \\\"My name is $bar\\\"; // 修改 $bar 变量 echo $bar; echo $foo; // $foo 的值也被修改 ?>\"]},\"400\":{\"h\":\"预定义变量\",\"t\":[\"PHP 提供了许多 预定义变量。PHP 提供了一套附加的预定数组，这些数组变量包含了来自 web 服务器（如果可用），运行环境，和用户输入的数据。这些数组在每个作用域内自动可用。因此通常被称为自动全局变量（autoglobals）或者超全局变量（superglobals）。\"]},\"401\":{\"h\":\"作用域\",\"t\":[\"PHP 有函数作用域和全局作用域。在函数之外定义的任何变量都仅限于全局作用域。 当包含文件时，该文件中的代码继承了包含语句所在行的变量作用域。\",\"<?php $a = 1; include 'b.inc'; // 变量 $a 将在 b.inc 内可用 ?>\",\"在命名函数或匿名函数内创建的任何变量都仅限于函数主体的作用域。然而，箭头函数会绑定父级作用域中的变量，使其在函数体内可用。 如果在函数内部 include 文件，那么包含文件中的变量将如同在调用函数内部定义一样可用。\"]},\"402\":{\"h\":\"global\",\"t\":[\"global 关键字用于将变量从全局作用域绑定到局部作用域。该关键字可以与变量列表或单个变量一起使用。 将创建引用同名全局变量的局部变量。如果全局变量不存在，则将在全局作用域内创建该变量并赋值为 null。\",\"$a = 1; $b = 2; function Sum() { global $a, $b; $b = $a + $b; } Sum(); echo $b;\",\"访问变量的第二个办法，是用特殊的 PHP 自定义 $GLOBALS 数组。\",\"$a = 1; $b = 2; function Sum() { $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b']; } Sum(); echo $b;\",\"$GLOBALS 是一个关联数组，每一个变量为一个元素，键名对应变量名，值对应变量的内容。$GLOBALS 之所以在全局作用域内存在，是因为 $GLOBALS 是一个超全局变量。\"]},\"403\":{\"h\":\"static\",\"t\":[\"变量作用域的另一个重要特性是 static 变量。静态变量仅在局部函数作用域中存在，但当程序执行离开此作用域时，其值并不丢失。\",\"function test() { // a有着局部作用域，但生命周期极长 static $a = 0; echo $a; $a++; }\",\"在 PHP 8.3.0 之前，静态变量只能使用常量表达式进行初始化。自 PHP 8.3.0 起，还允许使用动态表达式（例如函数调用）：\",\"function foo(){ static $int = 0; // 正确 static $int = 1+2; // 正确 static $int = sqrt(121); // 自 PHP 8.3.0 起正确 $int++; echo $int; }\"]},\"404\":{\"h\":\"可变变量名\",\"t\":[\"有时候使用可变变量名是很方便的。就是说，一个变量的变量名可以动态的设置和使用。 一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。\",\"// $a 的内容是“hello”并且 $hello 的内容是“world” $a = 'hello'; $$a = 'world'; // echo \\\"$a {$$a}\\\"; echo \\\"$a $hello\\\";\"]},\"405\":{\"h\":\"来自PHP之外的变量\"},\"406\":{\"h\":\"HTML表单（GET 和 POST）\",\"t\":[\"当一个表单提交给 PHP 脚本时，表单中的信息会自动在脚本中可用。有几个方法访问此信息，例如：\",\"<form action=\\\"foo.php\\\" method=\\\"POST\\\"> Name: <input type=\\\"text\\\" name=\\\"username\\\"><br /> Email: <input type=\\\"text\\\" name=\\\"email\\\"><br /> <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"Submit me!\\\" /> </form>\",\"只有两种方法可以访问 HTML 表单中的数据。以下列出了当前有效的方法：\",\"echo $_POST['username']; echo $_REQUEST['username'];\",\"使用 GET 表单也类似，只不过要用适当的 GET 预定义变量。GET 也适用于 QUERY_STRING（URL 中在“?”之后的信息）。 因此，举例说，http://www.example.com/test.php?id=3 包含有可用 $_GET['id'] 来访问的 GET 数据。\",\"重要\",\"变量名中的点和空格被转换成下划线。例如 变成了 $_REQUEST[\\\"a_b\\\"]。\",\"PHP 也理解表单变量上下文中的数组。例如可以将相关的变量编成组，或者用此功能从多选输入框中取得值。例如，将表单 POST 给自己并在提交时显示数据：\",\"<?php if ($_POST) { echo '<pre>'; // htmlspecialchars将特定的·html字符转为HTML实体字符 echo htmlspecialchars(print_r($_POST, true)); echo '</pre>'; } ?> <form action=\\\"\\\" method=\\\"post\\\"> Name: <input type=\\\"text\\\" name=\\\"personal[name]\\\" /><br /> Email: <input type=\\\"text\\\" name=\\\"personal[email]\\\" /><br /> Beer: <br /> <select multiple name=\\\"beer[]\\\"> <option value=\\\"warthog\\\">Warthog</option> <option value=\\\"guinness\\\">Guinness</option> <option value=\\\"stuttgarter\\\">Stuttgarter Schwabenbräu</option> </select><br /> <input type=\\\"submit\\\" value=\\\"submit me!\\\" /> </form>\",\"重要\",\"如果外部变量名以有效的数组语法开头，则将会忽略尾随字符。例如， <\\\\input name=\\\"foo[\\\\bar]baz\\\"> 变为 $_REQUEST ['foo']['bar']。\",\"IMAGE SUBMIT 变量名 当提交表单时，可以用一幅图像代替标准的提交按钮，用类似这样的标记：\",\"<input type=\\\"image\\\" src=\\\"image.gif\\\" name=\\\"sub\\\" />\",\"当用户点击到图像中的某处时，相应的表单会被传送到服务器，并加上两个变量 sub_x 和 sub_y。 它们包含了用户点击图像的坐标。有经验的用户可能会注意到被浏览器发送的实际变量名包含的是一个点而不是下划线（即 sub.x 和 sub.y），但 PHP 自动将点转换成了下划线。\"]},\"407\":{\"h\":\"HTTP Cookie\",\"t\":[\"Cookies 是一种在远端浏览器端存储数据并能追踪或识别再次访问的用户的机制。可以用 setcookie() 函数设定 cookies。 Cookies 是 HTTP 信息头中的一部分，因此 SetCookie 函数必须在向浏览器发送任何输出之前调用。 对于 header() 函数也有同样的限制。Cookie 数据会在相应的 cookie 数据数组中可用，例如 $_COOKIE 和 $_REQUEST。\",\"如果要将多个值赋给单个 cookie 变量，可以将其赋成数组。例如：\",\"<?php setcookie(\\\"MyCookie[foo]\\\", 'Testing 1', time()+3600); setcookie(\\\"MyCookie[bar]\\\", 'Testing 2', time()+3600); ?>\",\"尽管 MyCookie 在脚本中是单个数组，这将会建立两个单独的 cookie。如果只需为一个 cookie 设定多个值，考虑先在值上使用 serialize() 或 explode()。\",\"注意，除非路径或者域不同，cookie 将替换浏览器中先前的同名 cookie。因此对于购物车程序，可以保留一个计数器并一起传递，即\",\"if (isset($_COOKIE['count'])) { $count = $_COOKIE['count'] + 1; } else { $count = 1; } setcookie('count', $count, time()+3600); setcookie(\\\"Cart[$count]\\\", $item, time()+3600);\"]},\"408\":{\"h\":\"变量名中的点\",\"t\":[\"通常，PHP 不会改变传递给脚本中的变量名。然而应该注意到点（句号）不是 PHP 变量名中的合法字符。\",\"<?php $varname.ext; /* 非法变量名 */ ?>\",\"这时，解析器看到是一个名为 $varname 的变量，后面跟着一个字符串连接运算符，后面跟着一个裸字符串（即没有加引号的字符串，且不匹配任何已知的健名或保留字）'ext'。很明显这不是想要的结果。 出于此原因，要注意 PHP 将会自动将变量名中的点替换成下划线。\"]},\"409\":{\"h\":\"确定变量类型\",\"t\":[\"因为 PHP 会判断变量类型并在需要时进行转换（通常情况下），因此在某一时刻给定的变量是何种类型并不明显。 PHP 包括几个函数可以判断变量的类型，例如：gettype()，is_array()，is_float()，is_int()，is_object() 和 is_string()。\",\"HTTP 是一种文本协议，大多数（可能不是全部）超全局数组中的内容（如 $_POST 和 $_GET）将保留为字符串。PHP 不会尝试将值转换为特定类型。 在下面的示例中，$_GET[\\\"var1\\\"] 将包含字符串“null”，而 $_GET[\\\"var2\\\"] 将包含字符串“123”。\",\"/index.php?var1=null&var2=123\"]},\"410\":{\"c\":[\"PHP\"]},\"411\":{\"c\":[\"PHP\"]},\"412\":{\"h\":\"组件通信\",\"t\":[\"组件传递的方式有很多种，根据传送者和接收者可以分为如下：\",\"父组件向子组件传递\",\"子组件向父组件传递\",\"兄弟组件之间的通信\",\"父组件向后代组件传递\",\"非关系组件传递\"]},\"413\":{\"h\":\"父组件向子组件传递\",\"t\":[\"由于React的数据流动为单向的，父组件向子组件传递是最常见的方式 父组件在调用子组件的时候，只需要在子组件标签内传递参数，子组件通过props属性就能接收父组件传递过来的参数\",\"function EmailInput(props) { return ( <label> {/* 通过props属性接收父组件传递的参数 */} Email: <input value={props.email} /> </label> ); } const element = <EmailInput email=\\\"123124132@163.com\\\" />;\"]},\"414\":{\"h\":\"子组件向父组件传递\",\"t\":[\"子组件向父组件通信的基本思路是，父组件向子组件传一个函数，然后通过这个函数的回调，拿到子组件传过来的值 父组件对应代码如下：\",\"class Parents extends Component { constructor() { super(); this.state = { price: 0 }; } getItemPrice(e) { this.setState({ price: e }); } render() { return ( <div> <div>price: {this.state.price}</div> {/* 向子组件中传入一个函数 */} <Child getPrice={this.getItemPrice.bind(this)} /> </div> ); } }\",\"子组件对应代码如下：\",\"class Child extends Component { clickGoods(e) { // 在此函数中传入值 this.props.getPrice(e); } render() { return ( <div> <button onClick={this.clickGoods.bind(this, 100)}>goods1</button> <button onClick={this.clickGoods.bind(this, 1000)}>goods2</button> </div> ); } }\"]},\"415\":{\"h\":\"兄弟组件之间的通信\",\"t\":[\"如果是兄弟组件之间的传递，则父组件作为中间层来实现数据的互通，通过使用父组件传递\",\"class Parent extends React.Component { constructor(props) { super(props) this.state = {count: 0} } setCount = () => { this.setState({count: this.state.count + 1}) } render() { return ( <div> <SiblingA count={this.state.count} /> <SiblingB onClick={this.setCount} /> </div> ); } }\"]},\"416\":{\"h\":\"父组件向后代组件传递\",\"t\":[\"父组件向后代组件传递数据是一件最普通的事情，就像全局数据一样 使用context提供了组件之间通讯的一种方式，可以共享数据，其他数据都能读取对应的数据\",\"通过使用React.createContext创建一个context\",\" const PriceContext = React.createContext('price')\",\"context创建成功后，其下存在Provider组件用于创建数据源，Consumer组件用于接收数据，使用实例如下： Provider组件通过value属性用于给后代组件传递数据：\",\"<PriceContext.Provider value={100}> </PriceContext.Provider>\",\"如果想要获取Provider传递的数据，可以通过Consumer组件或者或者使用contextType属性接收，对应分别如下：\",\"class MyClass extends React.Component { static contextType = PriceContext; render() { let price = this.context; /* 基于这个值进行渲染工作 */ } }\",\"Consumer组件：\",\"<PriceContext.Consumer> { /*这里是一个函数*/ } { price => <div>price：{price}</div> } </PriceContext.Consumer>\"]},\"417\":{\"h\":\"非关系组件传递\",\"t\":[\"如果组件之间关系类型比较复杂的情况，建议将数据进行一个全局资源管理，从而实现通信，例如redux。\"]},\"418\":{\"h\":\"总结\",\"t\":[\"由于React是单向数据流，主要思想是组件不会改变接收的数据，只会监听数据的变化，当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值 因此，可以看到通信过程中，数据的存储位置都是存放在上级位置中\"]},\"419\":{\"c\":[\"React\"]},\"420\":{\"c\":[\"React\"]},\"421\":{\"h\":\"真实DOM和虚拟DOM\",\"t\":[\"Real DOM，真实DOM， 意思为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构 Virtual Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述 创建虚拟DOM目的就是为了更好将虚拟的节点渲染到页面视图中，虚拟DOM对象的节点与真实DOM的属性一一照应 在React中，JSX是其一大特性，可以让你在JS中通过使用XML的方式去直接声明界面的DOM结构\",\"const vDom = <h1>Hello World</h1> // 创建h1标签，右边千万不能加引号 const root = document.getElementById('root') // 找到<div id=\\\"root\\\"></div>节点 ReactDOM.render(vDom, root) // 把创建的h1标签渲染到root节点上\",\"上述中，ReactDOM.render()用于将你创建好的虚拟DOM节点插入到某个真实节点上，并渲染到页面上 JSX实际是一种语法糖，在使用过程中会被babel进行编译转化成JS代码，上述VDOM转化为如下：\",\"const vDom = React.createElement( 'h1'， { className: 'hClass', id: 'hId' }, 'hello world' )\",\"可以看到，JSX就是为了简化直接调用React.createElement() 方法：\",\"第一个参数是标签名，例如h1、span、table...\",\"第二个参数是个对象，里面存着标签的一些属性，例如id、class等\",\"第三个参数是节点中的文本 通过console.log(VDOM)，则能够得到虚拟VDOM消息 所以可以得到，JSX通过babel的方式转化成React.createElement执行，返回值是一个对象，也就是虚拟DOM\"]},\"422\":{\"h\":\"区别\",\"t\":[\"两者的区别如下：\",\"虚拟DOM不会进行排版与重绘操作，而真实DOM会频繁重排与重绘\",\"虚拟DOM的总损耗是“虚拟DOM增删改+真实DOM差异增删改+排版与重绘”，真实DOM的总损耗是“真实DOM 完全 增删改+排版与重绘”\",\"传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程 当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程 而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算\"]},\"423\":{\"h\":\"优缺点\",\"t\":[\"真实DOM的优势：\",\"易用 缺点：\",\"效率低，解析速度慢，内存占用量过高\",\"性能差：频繁操作真实DOM，易于导致重绘与回流\",\"使用虚拟DOM的优势如下：\",\"简单方便：如果使用手动操作真实DOM来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难\",\"性能方面：使用Virtual DOM，能够有效避免真实DOM数频繁更新，减少多次引起重绘与回流，提高性能\",\"跨平台：React借助虚拟DOM， 带来了跨平台的能力，一套代码多端运行 缺点：\",\"在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化\",\"首次渲染大量DOM时，由于多了一层虚拟DOM的计算，速度比正常稍慢\"]},\"424\":{\"c\":[\"React\"]},\"425\":{\"c\":[\"React\"]},\"426\":{\"h\":\"React Fiber\"},\"427\":{\"h\":\"背景\",\"t\":[\"JavaScript 引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待 如果 JavaScript 线程长时间地占用了主线程，那么渲染层面的更新就不得不长时间地等待，界面长时间不更新，会导致页面响应度变差，用户可能会感觉到卡顿 而这也正是 React 15 的 Stack Reconciler 所面临的问题，当 React 在渲染组件时，从开始到渲染完成整个过程是一气呵成的，无法中断 如果组件较大，那么js线程会一直执行，然后等到整棵VDOM树计算完成后，才会交给渲染的线程 这就会导致一些用户交互、动画等任务无法立即得到处理，导致卡顿的情况\"]},\"428\":{\"h\":\"Fiber\",\"t\":[\"React Fiber 是对 React 核心算法的一次重新实现。 在react中，主要做了以下的操作：\",\"为每个增加了优先级，优先级高的任务可以中断低优先级的任务。然后再重新执行优先级低的任务\",\"增加了异步任务，调用requestIdleCallback api，浏览器空闲的时候执行\",\"dom diff树变成了链表，一个dom对应两个fiber（一个链表），对应两个队列，这都是为找到被中断的任务，重新执行\",\"从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写 从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的 虚拟DOM 一个 fiber 就是一个 JavaScript 对象，包含了元素的信息、该元素的更新操作队列、类型，其数据结构如下：\",\"type Fiber = { // 用于标记fiber的WorkTag类型，主要表示当前fiber代表的组件类型如FunctionComponent、ClassComponent等 tag: WorkTag, // ReactElement里面的key key: null | string, // ReactElement.type，调用`createElement`的第一个参数 elementType: any, // The resolved function/class/ associated with this fiber. // 表示当前代表的节点类型 type: any, // 表示当前FiberNode对应的element组件实例 stateNode: any, // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回 return: Fiber | null, // 指向自己的第一个子节点 child: Fiber | null, // 指向自己的兄弟结构，兄弟节点的return指向同一个父节点 sibling: Fiber | null, index: number, ref: null | (((handle: mixed) => void) & { _stringRef: ?string }) | RefObject, // 当前处理过程中的组件props对象 pendingProps: any, // 上一次渲染完成之后的props memoizedProps: any, // 该Fiber对应的组件产生的Update会存放在这个队列里面 updateQueue: UpdateQueue<any> | null, // 上一次渲染的时候的state memoizedState: any, // 一个列表，存放这个Fiber依赖的context firstContextDependency: ContextDependency<mixed> | null, mode: TypeOfMode, // Effect // 用来记录Side Effect effectTag: SideEffectTag, // 单链表用来快速查找下一个side effect nextEffect: Fiber | null, // 子树中第一个side effect firstEffect: Fiber | null, // 子树中最后一个side effect lastEffect: Fiber | null, // 代表任务在未来的哪个时间点应该被完成，之后版本改名为 lanes expirationTime: ExpirationTime, // 快速确定子树中是否有不在等待的变化 childExpirationTime: ExpirationTime, // fiber的版本池，即记录fiber更新过程，便于恢复 alternate: Fiber | null, }\"]},\"429\":{\"h\":\"解决\",\"t\":[\"Fiber把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候在继续执行\",\"即可以中断与恢复，恢复后也可以复用之前的中间状态，并给不同的任务赋予不同的优先级，其中每个任务更新单元为 React Element 对应的 Fiber 节点\",\"实现的上述方式的是requestIdleCallback方法\",\"window.requestIdleCallback()方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应\",\"首先 React 中任务切割为多个步骤，分批完成。在完成一部分任务之后，将控制权交回给浏览器，让浏览器有时间再进行页面的渲染。等浏览器忙完之后有剩余时间，再继续之前 React 未完成的任务，是一种合作式调度。\",\"该实现过程是基于 Fiber 节点实现，作为静态的数据结构来说，每个 Fiber 节点对应一个 React element，保存了该组件的类型（函数组件/类组件/原生组件等等）、对应的 DOM 节点等信息。\",\"作为动态的工作单元来说，每个 Fiber 节点保存了本次更新中该组件改变的状态、要执行的工作。\",\"每个 Fiber 节点有个对应的 React element，多个 Fiber 节点根据如下三个属性构建一颗树：\",\"// 指向父级Fiber节点 this.return = null // 指向子Fiber节点 this.child = null // 指向右边第一个兄弟Fiber节点 this.sibling = null\",\"通过这些属性就能找到下一个执行目标\"]},\"430\":{\"c\":[\"React\"]},\"431\":{\"c\":[\"React\"]},\"432\":{\"h\":\"生命周期\",\"t\":[\"React整个组件生命周期包括从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程。\"]},\"433\":{\"h\":\"流程\",\"t\":[\"react16.4之后的生命周期，可以分成三个阶段：\",\"创建阶段\",\"更新阶段\",\"卸载阶段\"]},\"434\":{\"h\":\"创建阶段\",\"t\":[\"创建阶段主要分成了以下几个生命周期方法：\",\"constructor\",\"getDerivedStateFromProps\",\"render\",\"componentDidMount\"]},\"435\":{\"h\":\"constructor\",\"t\":[\"实例过程中自动调用的方法，在方法内部通过super关键字获取来自父组件的props 在该方法中，通常的操作为初始化state状态或者在this上挂载方法\"]},\"436\":{\"h\":\"getDerivedStateFromProps\",\"t\":[\"该方法是新增的生命周期方法，是一个静态的方法，因此不能访问到组件的实例 执行时机：组件创建和更新阶段，不论是props变化还是state变化，也会调用 在每次render方法前调用，第一个参数为即将更新的props，第二个参数为上一个状态的state，可以比较props 和 state来加一些限制条件，防止无用的state更新 该方法需要返回一个新的对象作为新的state或者返回null表示state状态不需要更新\"]},\"437\":{\"h\":\"render\",\"t\":[\"类组件必须实现的方法，用于渲染DOM结构，可以访问组件state与prop属性\",\"重要\",\"不要在 render 里面 setState, 否则会触发死循环导致内存崩溃\"]},\"438\":{\"h\":\"componentDidMount\",\"t\":[\"组件挂载到真实DOM节点后执行，其在render方法之后执行 此方法多用于执行一些数据获取，事件监听等操作\"]},\"439\":{\"h\":\"更新阶段\",\"t\":[\"该阶段的函数主要为如下方法：\",\"getDerivedStateFromProps\",\"shouldComponentUpdate\",\"render\",\"getSnapshotBeforeUpdate\",\"componentDidUpdate\"]},\"440\":{\"h\":\"shouldComponentUpdate\",\"t\":[\"用于告知组件本身基于当前的props和state是否需要重新渲染组件，默认情况返回true 执行时机：到新的props或者state时都会调用，通过返回true或者false告知组件更新与否 一般情况，不建议在该周期方法中进行深层比较，会影响效率 同时也不能调用setState，否则会导致无限循环调用更新\"]},\"441\":{\"h\":\"getSnapshotBeforeUpdate\",\"t\":[\"该周期函数在render后执行，执行之时DOM元素还没有被更新 该方法返回的一个Snapshot值，作为componentDidUpdate第三个参数传入\",\"getSnapshotBeforeUpdate(prevProps, prevState) { console.log('#enter getSnapshotBeforeUpdate'); return 'foo'; } componentDidUpdate(prevProps, prevState, snapshot) { console.log('#enter componentDidUpdate snapshot = ', snapshot); }\",\"此方法的目的在于获取组件更新前的一些信息，比如组件的滚动位置之类的，在组件更新后可以根据这些信息恢复一些UI视觉上的状态\"]},\"442\":{\"h\":\"componentDidUpdate\",\"t\":[\"执行时机：组件更新结束后触发 在该方法中，可以根据前后的props和state的变化做相应的操作，如获取数据，修改DOM样式等\"]},\"443\":{\"h\":\"卸载阶段\"},\"444\":{\"h\":\"componentWillUnmount\",\"t\":[\"此方法用于组件卸载前，清理一些注册是监听事件，或者取消订阅的网络请求等 一旦一个组件实例被卸载，其不会被再次挂载，而只可能是被重新创建\"]},\"445\":{\"h\":\"总结\",\"t\":[\"新版生命周期整体流程如下图所示： 旧的生命周期流程图如下： 通过两个图的对比，可以发现新版的生命周期减少了以下三种方法：\",\"componentWillMount\",\"componentWillReceiveProps\",\"componentWillUpdate\",\"其实这三个方法仍然存在，只是在前者加上了UNSAFE_前缀，如UNSAFE_componentWillMount，并不像字面意思那样表示不安全，而是表示这些生命周期的代码可能在未来的 react 版本可能废除\",\"同时也新增了两个生命周期函数：\",\"getDerivedStateFromProps = getSnapshotBeforeUpdate\"]},\"446\":{\"c\":[\"React\"]},\"447\":{\"c\":[\"React\"]},\"448\":{\"h\":\"React SSR\",\"t\":[\"SSR，意为服务端渲染 指由服务侧完成页面的 HTML 结构拼接的页面处理技术，发送到浏览器，然后为其绑定状态与事件，成为完全可交互页面的过程\",\"其解决的问题主要有两个：\",\"SEO，由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面\",\"加速首屏加载，解决首屏白屏问题\"]},\"449\":{\"h\":\"实现\",\"t\":[\"在react中，实现SSR主要有两种形式：\",\"手动搭建一个 SSR 框架\",\"使用成熟的SSR 框架，如 Next.JS\",\"手动搭建一个SSR框架进行实现 首先通过express启动一个app.js文件，用于监听3000端口的请求，当请求根目录时，返回HTML，如下：\",\"const express = require('express') const app = express() app.get('/', (req,res) => res.send(` <html> <head> <title>ssr demo</title> </head> <body> Hello world </body> </html> `)) app.listen(3000, () => console.log('Exampleapp listening on port 3000!'))\",\"然后再服务器中编写react代码，在app.js中进行应引用\",\"import React from 'react' const Home = () =>{ return <div>home</div> } export default Home\",\"为了让服务器能够识别JSX，这里需要使用webpakc对项目进行打包转换，创建一个配置文件webpack.server.js并进行相关配置，如下：\",\"const path = require('path') //node的path模块 const nodeExternals = require('webpack-node-externals') module.exports = { target:'node', mode:'development', //开发模式 entry:'./app.js', //入口 output: { //打包出口 filename:'bundle.js', //打包后的文件名 path:path.resolve(__dirname,'build') //存放到根目录的build文件夹 }, externals: [nodeExternals()], //保持node中require的引用方式 module: { rules: [{ //打包规则 test: /\\\\.js?$/, //对所有js文件进行打包 loader:'babel-loader', //使用babel-loader进行打包 exclude: /node_modules/,//不打包node_modules中的js文件 options: { presets: ['react','stage-0',['env', { //loader时额外的打包规则,对react,JSX，ES6进行转换 targets: { browsers: ['last 2versions'] //对主流浏览器最近两个版本进行兼容 } }]] } }] } }\",\"接着借助react-dom提供了服务端渲染的 renderToString方法，负责把React组件解析成html\",\"import express from 'express' import React from 'react'//引入React以支持JSX的语法 import { renderToString } from 'react-dom/server'//引入renderToString方法 import Home from'./src/containers/Home' const app= express() const content = renderToString(<Home/>) app.get('/',(req,res) => res.send(` <html> <head> <title>ssr demo</title> </head> <body> ${content} </body> </html> `)) app.listen(3001, () => console.log('Exampleapp listening on port 3001!'))\",\"上面的过程中，已经能够成功将组件渲染到了页面上 但是像一些事件处理的方法，是无法在服务端完成，因此需要将组件代码在浏览器中再执行一遍，这种服务器端和客户端共用一套代码的方式就称之为同构\",\"同构通俗讲就是一套React代码在服务器上运行一遍，到达浏览器又运行一遍：\",\"服务端渲染完成页面结构\",\"浏览器端渲染完成事件绑定 浏览器实现事件绑定的方式为让浏览器去拉取JS文件执行，让JS代码来控制，因此需要引入script标签\",\"通过script标签为页面引入客户端执行的react代码，并通过express的static中间件为js文件配置路由，修改如下：\",\"import express from 'express' import React from 'react'//引入React以支持JSX的语法 import { renderToString } from'react-dom/server'//引入renderToString方法 import Home from './src/containers/Home' const app = express() app.use(express.static('public')); //使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹 const content = renderToString(<Home/>) app.get('/',(req,res)=>res.send(` <html> <head> <title>ssr demo</title> </head> <body> ${content} <script src=\\\"/index.js\\\"></script> </body> </html> `)) app.listen(3001, () =>console.log('Example app listening on port 3001!'))\",\"然后再客户端执行以下react代码，新建webpack.client.js作为客户端React代码的webpack配置文件如下：\",\"const path = require('path') //node的path模块 module.exports = { mode:'development', //开发模式 entry:'./src/client/index.js', //入口 output: { //打包出口 filename:'index.js', //打包后的文件名 path:path.resolve(__dirname,'public') //存放到根目录的build文件夹 }, module: { rules: [{ //打包规则 test: /\\\\.js?$/, //对所有js文件进行打包 loader:'babel-loader', //使用babel-loader进行打包 exclude: /node_modules/, //不打包node_modules中的js文件 options: { presets: ['react','stage-0',['env', { //loader时额外的打包规则,这里对react,JSX进行转换 targets: { browsers: ['last 2versions'] //对主流浏览器最近两个版本进行兼容 } }]] } }] } }\",\"这种方法就能够简单实现首页的react服务端渲染，过程对应如下图：\",\"在做完初始渲染的时候，一个应用会存在路由的情况，配置信息如下：\",\"import React from 'react' //引入React以支持JSX import { Route } from 'react-router-dom' //引入路由 import Home from './containers/Home' //引入Home组件 export default ( <div> <Route path=\\\"/\\\" exact component={Home}></Route> </div> )\",\"然后可以通过index.js引用路由信息，如下：\",\"import React from 'react' import ReactDom from 'react-dom' import { BrowserRouter } from'react-router-dom' import Router from'../Routers' const App= () => { return ( <BrowserRouter> {Router} </BrowserRouter> ) } ReactDom.hydrate(<App/>, document.getElementById('root'))\",\"这时候控制台会存在报错信息，原因在于每个Route组件外面包裹着一层div，但服务端返回的代码中并没有这个div 解决方法只需要将路由信息在服务端执行一遍，使用使用StaticRouter来替代BrowserRouter，通过context进行参数传递\",\"import express from 'express' import React from 'react'//引入React以支持JSX的语法 import { renderToString } from 'react-dom/server'//引入renderToString方法 import { StaticRouter } from 'react-router-dom' import Router from '../Routers' const app = express() app.use(express.static('public')); //使用express提供的static中间件,中间件会将所有静态文件的路由指向public文件夹 app.get('/',(req,res)=>{ const content = renderToString(( //传入当前path //context为必填参数,用于服务端渲染参数传递 <StaticRouter location={req.path} context={{}}> {Router} </StaticRouter> )) res.send(` <html> <head> <title>ssr demo</title> </head> <body> <div id=\\\"root\\\">${content}</div> <script src=\\\"/index.js\\\"></script> </body> </html> `) }) app.listen(3001, () => console.log('Exampleapp listening on port 3001!'))\",\"这样也就完成了路由的服务端渲染\"]},\"450\":{\"h\":\"原理\",\"t\":[\"整体react服务端渲染原理并不复杂，具体如下：\",\"node server 接收客户端请求，得到当前的请求url 路径，然后在已有的路由表内查找到对应的组件，拿到需要请求的数据，将数据作为 props、context或者store 形式传入组件\",\"然后基于 react 内置的服务端渲染方法 renderToString()把组件渲染为 html字符串在把最终的 html 进行输出前需要将数据注入到浏览器端\",\"浏览器开始进行渲染和节点对比，然后执行完成组件内事件绑定和一些交互，浏览器重用了服务端输出的 html 节点，整个流程结束\"]},\"451\":{\"c\":[\"React\"]},\"452\":{\"c\":[\"React\"]},\"453\":{\"h\":\"类组件和函数式组件\"},\"454\":{\"h\":\"类组件\",\"t\":[\"类组件，顾名思义，也就是通过使用ES6类的编写形式去编写组件，该类必须继承React.Component 如果想要访问父组件传递过来的参数，可通过this.props的方式去访问 在组件中必须实现render方法，在return中返回React对象，如下：\",\"class Welcome extends React.Component { constructor(props) { super(props) } render() { return <h1>Hello, {this.props.name}</h1> } }\"]},\"455\":{\"h\":\"函数组件\",\"t\":[\"函数组件，顾名思义，就是通过函数编写的形式去实现一个React组件，是React中定义组件最简单的方式\",\"function Welcome(props) { return <h1>Hello, {props.name}</h1>; }\",\"函数第一个参数为props用于接收父组件传递过来的参数\"]},\"456\":{\"h\":\"区别\",\"t\":[\"针对两种React组件，其区别主要分成以下几大方向：\",\"编写形式\",\"状态管理\",\"生命周期\",\"调用方式\",\"获取渲染的值\"]},\"457\":{\"h\":\"编写形式\",\"t\":[\"两者最明显的区别在于编写形式的不同，同一种功能的实现可以分别对应类组件和函数组件的编写形式 函数组件：\",\"function Welcome(props) { return <h1>Hello, {props.name}</h1>; }\",\"类组件：\",\"class Welcome extends React.Component { constructor(props) { super(props) } render() { return <h1>Hello, {this.props.name}</h1> } }\"]},\"458\":{\"h\":\"状态管理\",\"t\":[\"在hooks出来之前，函数组件就是无状态组件，不能保管组件的状态，不像类组件中调用setState 如果想要管理state状态，可以使用useState，如下：\",\"const FunctionalComponent = () => { const [count, setCount] = React.useState(0); return ( <div> <p>count: {count}</p > <button onClick={() => setCount(count + 1)}>Click</button> </div> ); };\",\"在使用hooks情况下，一般如果函数组件调用state，则需要创建一个类组件或者state提升到你的父组件中，然后通过props对象传递到子组件\"]},\"459\":{\"h\":\"生命周期\",\"t\":[\"在函数组件中，并不存在生命周期，这是因为这些生命周期钩子都来自于继承的React.Component 所以，如果用到生命周期，就只能使用类组件 但是函数组件使用useEffect也能够完成替代生命周期的作用，这里给出一个简单的例子：\",\"const FunctionalComponent = () => { useEffect(() => { console.log(\\\"Hello\\\"); }, []); return <h1>Hello, World</h1>; };\",\"上述简单的例子对应类组件中的componentDidMount生命周期 如果在useEffect回调函数中return 一个函数，则return函数会在组件卸载的时候执行，正如componentWillUnmount\",\"const FunctionalComponent = () => { React.useEffect(() => { return () => { console.log(\\\"Bye\\\"); }; }, []); return <h1>Bye, World</h1>; };\"]},\"460\":{\"h\":\"调用方式\",\"t\":[\"如果是一个函数组件，调用则是执行函数即可：\",\"// 你的代码 function SayHi() { return <p>Hello, React</p > } // React内部 const result = SayHi(props) // » <p>Hello, React</p >\",\"如果是一个类组件，则需要将组件进行实例化，然后调用实例对象的render方法：\",\"// 你的代码 class SayHi extends React.Component { render() { return <p>Hello, React</p > } } // React内部 const instance = new SayHi(props) // » SayHi {} const result = instance.render() // » <p>Hello, React</p >\"]},\"461\":{\"h\":\"获取渲染的值\",\"t\":[\"首先给出一个示例\",\"函数组件对应如下：\",\"function ProfilePage(props) { const showMessage = () => { alert('Followed ' + props.user); } const handleClick = () => { setTimeout(showMessage, 3000); } return ( <button onClick={handleClick}>Follow</button> ) }\",\"类组件对应如下：\",\"class ProfilePage extends React.Component { showMessage() { alert('Followed ' + this.props.user); } handleClick() { setTimeout(this.showMessage.bind(this), 3000); } render() { return <button onClick={this.handleClick.bind(this)}>Follow</button> } }\",\"两者看起来实现功能是一致的，但是在类组件中，输出this.props.user，Props 在 React 中是不可变的所以它永远不会改变，但是 this 总是可变的，以便您可以在 render 和生命周期函数中读取新版本 因此，如果我们的组件在请求运行时更新。this.props 将会改变。showMessage 方法从“最新”的 props 中读取 user 而函数组件，本身就不存在this，props并不发生改变，因此同样是点击，alert的内容仍旧是之前的内容\"]},\"462\":{\"c\":[\"React\"]},\"463\":{\"c\":[\"React\"]},\"464\":{\"h\":\"受控组件和非受控组件\"},\"465\":{\"h\":\"受控组件\",\"t\":[\"受控组件，简单来讲，就是受我们控制的组件，组件的状态全程响应外部数据\",\"举个简单的例子：\",\"class TestComponent extends React.Component { constructor (props) { super(props); this.state = { username: 'lindaidai' }; } render () { return <input name=\\\"username\\\" value={this.state.username} /> } }\",\"这时候当我们在输入框输入内容的时候，会发现输入的内容并无法显示出来，也就是input标签是一个可读的状态 这是因为value被this.state.username所控制住。当用户输入新的内容时，this.state.username并不会自动更新，这样的话input内的内容也就不会变了 如果想要解除被控制，可以为input标签设置onChange事件，输入的时候触发事件函数，在函数内部实现state的更新，从而导致input框的内容页发现改变 因此，受控组件我们一般需要初始状态和一个状态更新事件函数\"]},\"466\":{\"h\":\"非受控组件\",\"t\":[\"非受控组件，简单来讲，就是不受我们控制的组件 一般情况是在初始化的时候接受外部数据，然后自己在内部存储其自身状态 当需要时，可以使用ref 查询 DOM 并查找其当前值，如下：\",\"import React, { Component } from 'react'; export class UnControll extends Component { constructor (props) { super(props); this.inputRef = React.createRef(); } handleSubmit = (e) => { console.log('我们可以获得input内的值为', this.inputRef.current.value); e.preventDefault(); } render () { return ( <form onSubmit={e => this.handleSubmit(e)}> <input defaultValue=\\\"lindaidai\\\" ref={this.inputRef} /> <input type=\\\"submit\\\" value=\\\"提交\\\" /> </form> ) } }\"]},\"467\":{\"h\":\"应用场景\",\"t\":[\"大部分时候推荐使用受控组件来实现表单，因为在受控组件中，表单数据由React组件负责处理 如果选择非受控组件的话，控制能力较弱，表单数据就由DOM本身处理，但更加方便快捷，代码量少 针对两者的区别，其应用场景如下图所示：\",\"特征\",\"不受控制\",\"受控\",\"一次性取值(提交)\",\"true\",\"false\",\"提交时验证\",\"true\",\"false\",\"即时现场验证\",\"false\",\"true\",\"有条件地禁用提交按钮\",\"false\",\"true\",\"强制输入格式\",\"false\",\"true\",\"一个数据的多个输入\",\"false\",\"true\",\"动态输入\",\"false\",\"true\"]},\"468\":{\"c\":[\"React\"]},\"469\":{\"c\":[\"React\"]},\"470\":{\"h\":\"构建组件的方式\",\"t\":[\"组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式 在React中，一个类、一个函数都可以视为一个组件\"]},\"471\":{\"h\":\"构建方式\",\"t\":[\"在React目前来讲，组件的创建主要分成了三种方式：\",\"函数式创建\",\"通过 React.createClass 方法创建\",\"继承 React.Component 创建\"]},\"472\":{\"h\":\"函数式创建\",\"t\":[\"在React Hooks出来之前，函数式组件可以视为无状态组件，只负责根据传入的props来展示视图，不涉及对state状态的操作 大多数组件可以写为无状态组件，通过简单组合构建其他组件 在React中，通过函数简单创建组件的示例如下：\",\"function HelloComponent(props, /* context */) { return <div>Hello {props.name}</div> }\"]},\"473\":{\"h\":\"通过 React.createClass 方法创建\",\"t\":[\"React.createClass是react刚开始推荐的创建组件的方式，目前这种创建方式已经不怎么用了 像上述通过函数式创建的组件的方式，最终会通过babel转化成React.createClass这种形式，转化成如下：\",\"function HelloComponent(props) /* context */{ // React.createElement return React.createElement( \\\"div\\\", null, \\\"Hello \\\", props.name ); }\"]},\"474\":{\"h\":\"继承 React.Component 创建\",\"t\":[\"同样在react hooks出来之前，有状态的组件只能通过继承React.Component这种形式进行创建 有状态的组件也就是组件内部存在维护的数据，在类创建的方式中通过this.state进行访问 当调用this.setState修改组件的状态时，组价会再次会调用render()方法进行重新渲染 通过继承React.Component创建一个时钟示例如下：\",\"class Timer extends React.Component { constructor(props) { super(props); this.state = { seconds: 0 }; } tick() { this.setState(state => ({ seconds: state.seconds + 1 })); } componentDidMount() { this.interval = setInterval(() => this.tick(), 1000); } componentWillUnmount() { clearInterval(this.interval); } render() { return ( <div> Seconds: {this.state.seconds} </div> ); } }\"]},\"475\":{\"h\":\"区别\",\"t\":[\"由于React.createClass 创建的方式过于冗杂，并不建议使用 而像函数式创建和类组件创建的区别主要在于需要创建的组件是否需要为有状态组件：\",\"对于一些无状态的组件创建，建议使用函数式创建的方式\",\"由于react hooks的出现，函数式组件创建的组件通过使用hooks方法也能使之成为有状态组件，再加上目前推崇函数式编程，所以这里建议都使用函数式的方式来创建组件 在考虑组件的选择原则上，能用无状态组件则用无状态组件\"]},\"476\":{\"c\":[\"React\"]},\"477\":{\"c\":[\"React\"]},\"478\":{\"h\":\"高阶组件\",\"t\":[\"高阶函数（Higher-order function），至少满足下列一个条件的函数\",\"接受一个或多个函数作为输入\",\"输出一个函数\",\"在React中，高阶组件即接受一个或多个组件作为参数并且返回一个组件，本质也就是一个函数，并不是一个组件\",\"const EnhancedComponent = highOrderComponent(WrappedComponent);\",\"上述代码中，该函数接受一个组件WrappedComponent作为参数，返回加工过的新组件EnhancedComponent\",\"高阶组件的这种实现方式，本质上是一个装饰者设计模式\"]},\"479\":{\"h\":\"编写方式\",\"t\":[\"最基本的高阶组件的编写模板如下：\",\"import React, { Component } from 'react'; export default (WrappedComponent) => { return class EnhancedComponent extends Component { // do something render() { return <WrappedComponent />; } } }\",\"通过对传入的原始组件 WrappedComponent 做一些你想要的操作（比如操作 props，提取 state，给原始组件包裹其他元素等），从而加工出想要的组件 EnhancedComponent 把通用的逻辑放在高阶组件中，对组件实现一致的处理，从而实现代码的复用 所以，高阶组件的主要功能是封装并分离组件的通用逻辑，让通用逻辑在组件间更好地被复用 但在使用高阶组件的同时，一般遵循一些约定，如下：\",\"props 保持一致\",\"你不能在函数式（无状态）组件上使用 ref 属性，因为它没有实例\",\"不要以任何方式改变原始组件 WrappedComponent\",\"透传不相关 props 属性给被包裹的组件 WrappedComponent\",\"不要再 render() 方法中使用高阶组件\",\"使用 compose 组合高阶组件\",\"包装显示名字以便于调试 这里需要注意的是，高阶组件可以传递所有的props，但是不能传递ref 如果向一个高阶组件添加refe引用，那么ref 指向的是最外层容器组件实例的，而不是被包裹的组件，如果需要传递refs的话，则使用React.forwardRef，如下：\",\"function withLogging(WrappedComponent) { class Enhance extends WrappedComponent { componentWillReceiveProps() { console.log('Current props', this.props); console.log('Next props', nextProps); } render() { const {forwardedRef, ...rest} = this.props; // 把 forwardedRef 赋值给 ref return <WrappedComponent {...rest} ref={forwardedRef} />; } }; // React.forwardRef 方法会传入 props 和 ref 两个参数给其回调函数 // 所以这边的 ref 是由 React.forwardRef 提供的 function forwardRef(props, ref) { return <Enhance {...props} forwardRef={ref} /> } return React.forwardRef(forwardRef); } const EnhancedComponent = withLogging(SomeComponent);\"]},\"480\":{\"h\":\"应用场景\",\"t\":[\"通过上面的了解，高阶组件能够提高代码的复用性和灵活性，在实际应用中，常常用于与核心业务无关但又在多个模块使用的功能，如权限控制、日志记录、数据校验、异常处理、统计上报等 举个例子，存在一个组件，需要从缓存中获取数据，然后渲染。一般情况，我们会如下编写：\",\"import React, { Component } from 'react' class MyComponent extends Component { componentWillMount() { let data = localStorage.getItem('data'); this.setState({data}); } render() { return <div>{this.state.data}</div> } }\",\"上述代码当然可以实现该功能，但是如果还有其他组件也有类似功能的时候，每个组件都需要重复写componentWillMount中的代码，这明显是冗杂的 下面就可以通过高价组件来进行改写，如下：\",\"import React, { Component } from 'react' function withPersistentData(WrappedComponent) { return class extends Component { // 挂载完成 componentWillMount() { let data = localStorage.getItem('data'); this.setState({data}); } render() { // 通过{...this.props} 把传递给当前组件的属性继续传递给被包装的组件WrappedComponent return <WrappedComponent data={this.state.data} {...this.props} /> } } } class MyComponent2 extends Component { render() { return <div>{this.props.data}</div> } } const MyComponentWithPersistentData = withPersistentData(MyComponent2)\",\"再比如组件渲染性能监控，如下：\",\"class Home extends React.Component { render() { return (<h1>Hello World.</h1>); } } function withTiming(WrappedComponent) { return class extends WrappedComponent { constructor(props) { super(props); this.start = 0; this.end = 0; } componentWillMount() { super.componentWillMount && super.componentWillMount(); this.start = Date.now(); } componentDidMount() { super.componentDidMount && super.componentDidMount(); this.end = Date.now(); console.log(`${WrappedComponent.name} 组件渲染时间为 ${this.end - this.start} ms`); } render() { return super.render(); } }; } export default withTiming(Home);\"]},\"481\":{\"c\":[\"React\"]},\"482\":{\"c\":[\"React\"]},\"483\":{\"h\":\"css引入\",\"t\":[\"组件式开发选择合适的css解决方案尤为重要\",\"通常会遵循以下规则：\",\"可以编写局部css，不会随意污染其他组件内的原生；\",\"可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成不同的css样式；\",\"支持所有的css特性：伪类、动画、媒体查询等；\",\"编写起来简洁方便、最好符合一贯的css风格特点\",\"在这一方面，vue使用css起来更为简洁：\",\"通过 style 标签编写样式\",\"scoped 属性决定编写的样式是否局部有效\",\"lang 属性设置预处理器\",\"内联样式风格的方式来根据最新状态设置和改变css 而在react中，引入CSS就不如Vue方便简洁，其引入css的方式有很多种，各有利弊\"]},\"484\":{\"h\":\"方式\",\"t\":[\"常见的CSS引入方式有以下：\",\"在组件内直接使用\",\"组件中引入 .css 文件\",\"组件中引入 .module.css 文件\",\"CSS in JS\"]},\"485\":{\"h\":\"在组件内直接使用\",\"t\":[\"直接在组件中书写css样式，通过style属性直接引入，如下：\",\"import React, { Component } from \\\"react\\\"; const div1 = { width: \\\"300px\\\", margin: \\\"30px auto\\\", backgroundColor: \\\"#44014C\\\", //驼峰法 minHeight: \\\"200px\\\", boxSizing: \\\"border-box\\\" }; class Test extends Component { constructor(props, context) { super(props); } render() { return ( <div> <div style={div1}>123</div> <div style={{backgroundColor:\\\"red\\\"}}> </div> ); } } export default Test;\",\"上面可以看到，css属性需要转换成驼峰写法\",\"这种方式优点：\",\"内联样式, 样式之间不会有冲突\",\"可以动态获取当前state中的状态 缺点：\",\"写法上都需要使用驼峰标识\",\"某些样式没有提示\",\"大量的样式, 代码混乱\",\"某些样式无法编写(比如伪类/伪元素)\"]},\"486\":{\"h\":\"组件中引入css文件\",\"t\":[\"将css单独写在一个css文件中，然后在组件中直接引入\",\"App.css文件： .title { color: red; font-size: 20px; } .desc { color: green; text-decoration: underline; }\",\"组件中引入：\",\"import React, { PureComponent } from 'react'; import Home from './Home'; import './App.css'; export default class App extends PureComponent { render() { return ( <div className=\\\"app\\\"> <h2 className=\\\"title\\\">我是App的标题</h2> <p className=\\\"desc\\\">我是App中的一段文字描述</p > <Home/> </div> ) } }\",\"这种方式存在不好的地方在于样式是全局生效，样式之间会互相影响\"]},\"487\":{\"h\":\"组件中引入 .module.css 文件\",\"t\":[\"将css文件作为一个模块引入，这个模块中的所有css，只作用于当前组件。不会影响当前组件的后代组件 这种方式是webpack特有的方案，只需要配置webpack配置文件中 modules:true 即可\",\"import React, { PureComponent } from 'react'; import Home from './Home'; import './App.module.css'; export default class App extends PureComponent { render() { return ( <div className=\\\"app\\\"> <h2 className=\\\"title\\\">我是App的标题</h2> <p className=\\\"desc\\\">我是App中的一段文字描述</p > <Home/> </div> ) } }\",\"这种方式能够解决局部作用域问题，但也有一定的缺陷：\",\"引用的类名，不能使用连接符(.xxx-xx)，在 JavaScript 中是不识别的\",\"所有的 className 都必须使用 {style.className} 的形式来编写\",\"不方便动态来修改某些样式，依然需要使用内联样式的方式；\"]},\"488\":{\"h\":\"CSS in JS\",\"t\":[\"CSS-in-JS， 是指一种模式，其中CSS由 JavaScript 生成而不是在外部文件中定义 此功能并不是 React 的一部分，而是由第三方库提供，例如：\",\"styled-components\",\"emotion\",\"glamorous\",\"下面主要看看styled-components的基本使用 本质是通过函数的调用，最终创建出一个组件：这个组件会被自动添加上一个不重复的class,styled-components会给该class添加相关的样式 基本使用如下： 创建一个style.js文件用于存放样式组件：\",\"export const SelfLink = styled.div` height: 50px; border: 1px solid red; color: yellow; `; export const SelfButton = styled.div` height: 150px; width: 150px; color: ${props => props.color}; background-image: url(${props => props.src}); background-size: 150px 150px; `;\",\"引入样式组件也很简单：\",\"import React, { Component } from \\\"react\\\"; import { SelfLink, SelfButton } from \\\"./style\\\"; class Test extends Component { constructor(props, context) { super(props); } render() { return ( <div> <SelfLink title=\\\"People's Republic of China\\\">app.js</SelfLink> <SelfButton color=\\\"palevioletred\\\" style={{ color: \\\"pink\\\" }} src={fist}> SelfButton </SelfButton> </div> ); } } export default Test;\"]},\"489\":{\"h\":\"区别\",\"t\":[\"通过上面四种样式的引入，可以看到：\",\"在组件内直接使用css该方式编写方便，容易能够根据状态修改样式属性，但是大量的演示编写容易导致代码混乱\",\"组件中引入 .css 文件符合我们日常的编写习惯，但是作用域是全局的，样式之间会层叠\",\"引入.module.css 文件能够解决局部作用域问题，但是不方便动态修改样式，需要使用内联的方式进行样式的编写\",\"通过css in js 这种方法，可以满足大部分场景的应用，可以类似于预处理器一样样式嵌套、定义、修改状态等 至于使用react用哪种方案引入css，并没有一个绝对的答案，可以根据各自情况选择合适的方案\"]},\"490\":{\"c\":[\"React\"]},\"491\":{\"c\":[\"React\"]},\"492\":{\"h\":\"diff\",\"t\":[\"跟Vue一致，React通过引入Virtual DOM的概念，极大地避免无效的Dom操作，使我们的页面的构建效率提到了极大的提升\",\"而diff算法就是更高效地通过对比新旧Virtual DOM来找出真正的Dom变化之处\"]},\"493\":{\"h\":\"原理\",\"t\":[\"react中diff算法主要遵循三个层级的策略：\",\"tree层级\",\"conponent 层级\",\"element 层级\"]},\"494\":{\"h\":\"tree层级\",\"t\":[\"DOM节点跨层级的操作不做优化，只会对相同层级的节点进行比较\",\"只有删除、创建操作，没有移动操作，如下图：\",\"react发现新树中，A节点下没有了B，那么直接删除B，在C节点下创建B以及下属节点\",\"上述操作中，只有删除和创建操作\"]},\"495\":{\"h\":\"conponent层级\",\"t\":[\"如果是同一个类的组件，则会继续往下diff运算，如果不是一个类的组件，那么直接删除这个组件下的所有子节点，创建新的\",\"当component C 换成了component H 后，即使两者的结构非常类似，也会将C删除再重新创建H\"]},\"496\":{\"h\":\"element层级\",\"t\":[\"对于比较同一层级的节点们，每个节点在对应的层级用唯一的key作为标识 提供了 3 种节点操作，分别为 INSERT_MARKUP (插入)、MOVE_EXISTING (移动)和 REMOVE_NODE (删除) 如下场景：\",\"alt text\",\"通过key可以准确地发现新旧集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将旧集合中节点的位置进行移动，更新为新集合中节点的位置\",\"index： 新集合的遍历下标。\",\"oldIndex：当前节点在老集合中的下标\",\"maxIndex：在新集合访问过的节点中，其在老集合的最大下标 如果当前节点在新集合中的位置比老集合中的位置靠前的话，是不会影响后续节点操作的，这里这时候被动字节不用动\",\"操作过程中只比较oldIndex和maxIndex，规则如下：\",\"当oldIndex>maxIndex时，将oldIndex的值赋值给maxIndex\",\"当oldIndex=maxIndex时，不操作\",\"当oldIndex<maxIndex时，将当前节点移动到index的位置\",\"diff过程如下：\",\"节点B：此时 maxIndex=0，oldIndex=1；满足 maxIndex< oldIndex，因此B节点不动，此时maxIndex= Math.max(oldIndex, maxIndex)，就是1\",\"节点A：此时maxIndex=1，oldIndex=0；不满足maxIndex< oldIndex，因此A节点进行移动操作，此时maxIndex= Math.max(oldIndex, maxIndex)，还是1\",\"节点D：此时maxIndex=1, oldIndex=3；满足maxIndex< oldIndex，因此D节点不动，此时maxIndex= Math.max(oldIndex, maxIndex)，就是3\",\"节点C：此时maxIndex=3，oldIndex=2；不满足maxIndex< oldIndex，因此C节点进行移动操作，当前已经比较完了 当ABCD节点比较完成后，diff过程还没完，还会整体遍历老集合中节点，看有没有没用到的节点，有的话，就删除\"]},\"497\":{\"h\":\"注意事项\",\"t\":[\"对于简单列表渲染而言，不使用key比使用key的性能，例如：\",\"将一个[1,2,3,4,5]，渲染成如下的样子：\",\"<div>1</div> <div>2</div> <div>3</div> <div>4</div> <div>5</div>\",\"后续更改成[1,3,2,5,4]，使用key与不使用key作用如下：\",\"1.加key\",\"<div key='1'>1</div> <div key='1'>1</div> <div key='2'>2</div> <div key='3'>3</div> <div key='3'>3</div> ========> <div key='2'>2</div> <div key='4'>4</div> <div key='5'>5</div> <div key='5'>5</div> <div key='4'>4</div>\",\"操作：节点2移动至下标为2的位置，节点4移动至下标为4的位置。\",\"2.不加key\",\"<div>1</div> <div>1</div> <div>2</div> <div>3</div> <div>3</div> ========> <div>2</div> <div>4</div> <div>5</div> <div>5</div> <div>4</div>\",\"操作：修改第1个到第5个节点的innerText 如果我们对这个集合进行增删的操作改成[1,3,2,5,6]\",\"1.加key\",\"<div key='1'>1</div> <div key='1'>1</div> <div key='2'>2</div> <div key='3'>3</div> <div key='3'>3</div> ========> <div key='2'>2</div> <div key='4'>4</div> <div key='5'>5</div> <div key='5'>5</div> <div key='6'>6</div>\",\"操作：节点2移动至下标为2的位置，新增节点6至下标为4的位置，删除节点4。\",\"2.不加key\",\"<div>1</div> <div>1</div> <div>2</div> <div>3</div> <div>3</div> ========> <div>2</div> <div>4</div> <div>5</div> <div>5</div> <div>6</div>\",\"操作：修改第1个到第5个节点的innerText 由于dom节点的移动操作开销是比较昂贵的，没有key的情况下要比有key的性能更好\"]},\"498\":{\"c\":[\"React\"]},\"499\":{\"c\":[\"React\"]},\"500\":{\"h\":\"错误处理\",\"t\":[\"react16引用了错误边界新的概念 错误边界是一种 React 组件，这种组件可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI，而并不会渲染那些发生崩溃的子组件树 错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误 形成错误边界组件的两个条件：\",\"使用了 static getDerivedStateFromError()\",\"使用了 componentDidCatch() 抛出错误后，请使用 static getDerivedStateFromError() 渲染备用 UI ，使用 componentDidCatch() 打印错误信息，如下：\",\"class ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // 更新 state 使下一次渲染能够显示降级后的 UI return { hasError: true }; } componentDidCatch(error, errorInfo) { // 你同样可以将错误日志上报给服务器 logErrorToMyService(error, errorInfo); } render() { if (this.state.hasError) { // 你可以自定义降级后的 UI 并渲染 return <h1>Something went wrong.</h1>; } return this.props.children; } }\",\"然后就可以把自身组件的作为错误边界的子组件，如下：\",\"<ErrorBoundary> <MyWidget /> </ErrorBoundary>\",\"下面这些情况无法捕获到异常：\",\"事件处理\",\"异步代码\",\"服务端渲染\",\"自身抛出来的错误 在react 16版本之后，会把渲染期间发生的所有错误打印到控制台 除了错误信息和 JavaScript 栈外，React 16 还提供了组件栈追踪。 对于错误边界无法捕获的异常，如事件处理过程中发生问题并不会捕获到，是因为其不会在渲染期间触发，并不会导致渲染时候问题 这种情况可以使用js的try...catch...语法，如下：\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.state = { error: null }; this.handleClick = this.handleClick.bind(this); } handleClick() { try { // 执行操作，如有错误则会抛出 } catch (error) { this.setState({ error }); } } render() { if (this.state.error) { return <h1>Caught an error.</h1> } return <button onClick={this.handleClick}>Click Me</button> } }\",\"除此之外还可以通过监听onerror事件\",\"window.addEventListener('error', function(event) { ... })\"]},\"501\":{\"c\":[\"React\"]},\"502\":{\"c\":[\"React\"]},\"503\":{\"h\":\"事件机制\",\"t\":[\"React基于浏览器的事件机制自身实现了一套事件机制，包括事件注册、事件的合成、事件冒泡、事件派发等。在React中这套事件机制被称之为合成事件\"]},\"504\":{\"h\":\"合成事件\",\"t\":[\"合成事件是 React 模拟原生 DOM 事件所有能力的一个事件对象，即浏览器原生事件的跨浏览器包装器 根据 W3C 规范来定义合成事件，兼容所有浏览器，拥有与浏览器原生事件相同的接口，例如：\",\"const button = <button onClick={handleClick}>按钮</button>\",\"如果想要获得原生DOM事件，可以通过e.nativeEvent属性获取\",\"const handleClick = (e) => console.log(e.nativeEvent);; const button = <button onClick={handleClick}>按钮</button>\",\"从上面可以看到React事件和原生事件也非常的相似，但也有一定的区别：\",\"事件名称命名方式不同\",\"// 原生事件绑定方式 <button onclick=\\\"handleClick()\\\">按钮命名</button> // React 合成事件绑定方式 const button = <button onClick={handleClick}>按钮命名</button>\",\"事件处理函数书写不同\",\"// 原生事件 事件处理函数写法 <button onclick=\\\"handleClick()\\\">按钮命名</button> // React 合成事件 事件处理函数写法 const button = <button onClick={handleClick}>按钮命名</button>\",\"虽然onclick看似绑定到DOM元素上，但实际并不会把事件代理函数直接绑定到真实的节点上，而是把所有的事件绑定到结构的最外层，使用一个统一的事件去监听 这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象 当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。这样做简化了事件处理和回收机制，效率也有很大提升\"]},\"505\":{\"h\":\"执行顺序\",\"t\":[\"关于React 合成事件与原生事件执行顺序，可以看看下面一个例子：\",\"import React from 'react'; class App extends React.Component{ constructor(props) { super(props); this.parentRef = React.createRef(); this.childRef = React.createRef(); } componentDidMount() { console.log(\\\"React componentDidMount！\\\"); // 原生事件 this.parentRef.current?.addEventListener(\\\"click\\\", () => { console.log(\\\"原生事件：父元素 DOM 事件监听！\\\"); }); this.childRef.current?.addEventListener(\\\"click\\\", () => { console.log(\\\"原生事件：子元素 DOM 事件监听！\\\"); }); document.addEventListener(\\\"click\\\", (e) => { console.log(\\\"原生事件：document DOM 事件监听！\\\"); }); } // react事件 parentClickFun = () => { console.log(\\\"React 事件：父元素事件监听！\\\"); }; childClickFun = () => { console.log(\\\"React 事件：子元素事件监听！\\\"); }; render() { return ( <div ref={this.parentRef} onClick={this.parentClickFun}> <div ref={this.childRef} onClick={this.childClickFun}> 分析事件执行顺序 </div> </div> ); } } export default App;\",\"输出顺序为：\",\"原生事件：子元素 DOM 事件监听！ 原生事件：父元素 DOM 事件监听！ React 事件：子元素事件监听！ React 事件：父元素事件监听！ 原生事件：document DOM 事件监听！\",\"可以得出以下结论：\",\"React 所有事件都挂载在 document 对象上 当真实 DOM 元素触发事件，会冒泡到 document 对象后，再处理 React 事件 所以会先执行原生事件，然后处理 React 事件 最后真正执行 document 上挂载的事件 对应过程如图所示：\",\"所以想要阻止不同时间段的冒泡行为，对应使用不同的方法，对应如下： 阻止合成事件间的冒泡，用e.stopPropagation() 阻止合成事件与最外层 document 上的事件间的冒泡，用e.nativeEvent.stopImmediatePropagation() 阻止合成事件与除最外层document上的原生事件上的冒泡，通过判断e.target来避免\",\"document.body.addEventListener('click', e => { if (e.target && e.target.matches('div.code')) { return; } this.setState({ active: false, }); }); }\"]},\"506\":{\"c\":[\"React\"]},\"507\":{\"c\":[\"React\"]},\"508\":{\"h\":\"事件绑定\",\"t\":[\"在react应用中，事件名都是用小驼峰格式进行书写，例如onclick要改写成onClick\",\"最简单的事件绑定如下：\",\"class ShowAlert extends React.Component { // showAlert() 方法没有绑定 this，当按钮被点击时，this 的上下文可能不会指向 ShowAlert 类实例，而是指向其他对象（例如全局对象或者 undefined），从而导致错误。 showAlert() { console.log(\\\"Hi\\\"); } render() { return <button onClick={this.showAlert}>show</button>; } }\",\"从上面可以看到，事件绑定的方法需要使用{}包住 上述的代码看似没有问题，但是当将处理函数输出代码换成console.log(this)的时候，点击按钮，则会发现控制台输出undefined\"]},\"509\":{\"h\":\"绑定方法\",\"t\":[\"常见的绑定方式有如下：\",\"render方法中使用bind\",\"render方法中使用箭头函数\",\"constructor中bind\",\"定义阶段使用箭头函数绑定\"]},\"510\":{\"h\":\"render方法中使用bind\",\"t\":[\"如果使用一个类组件，在其中给某个组件/元素一个onClick属性，它现在并会自定绑定其this到当前组件，解决这个问题的方法是在事件函数后使用.bind(this)将this绑定到当前组件中\",\"class App extends React.Component { handleClick() { console.log('this > ', this); } render() { return ( <div onClick={this.handleClick.bind(this)}>test</div> ) } }\",\"这种方式在组件每次render渲染的时候，都会重新进行bind的操作，影响性能\"]},\"511\":{\"h\":\"render方法中使用箭头函数\",\"t\":[\"通过ES6的上下文来将this的指向绑定给当前组件，同样再每一次render的时候都会生成新的方法，影响性能\",\"class App extends React.Component { handleClick() { console.log('this > ', this); } render() { return ( <div onClick={e => this.handleClick(e)}>test</div> ) } }\"]},\"512\":{\"h\":\"constructor中bind\",\"t\":[\"在constructor中预先bind当前组件，可以避免在render操作中重复绑定\",\"class App extends React.Component { constructor(props) { super(props); this.handleClick = this.handleClick.bind(this); } handleClick() { console.log('this > ', this); } render() { return ( <div onClick={this.handleClick}>test</div> ) } }\"]},\"513\":{\"h\":\"定义阶段使用箭头函数绑定\",\"t\":[\"跟上述方式三一样，能够避免在render操作中重复绑定，实现也非常的简单，如下：\",\"class App extends React.Component { constructor(props) { super(props); } handleClick = () => { console.log('this > ', this); } render() { return ( <div onClick={this.handleClick}>test</div> ) } }\"]},\"514\":{\"h\":\"区别\",\"t\":[\"上述四种方法的方式，区别主要如下：\",\"编写方面：方式一、方式二写法简单，方式三的编写过于冗杂\",\"性能方面：方式一和方式二在每次组件render的时候都会生成新的方法实例，性能问题欠缺。若该函数作为属性值传给子组件的时候，都会导致额外的渲染。而方式三、方式四只会生成一个方法实例 综合上述，方式四是最优的事件绑定方式\"]},\"515\":{\"c\":[\"React\"]},\"516\":{\"c\":[\"React\"]},\"517\":{\"h\":\"React Hooks\",\"t\":[\"Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\",\"至于为什么引入hook，官方给出的动机是解决长时间使用和维护react过程中常遇到的问题，例如：\",\"难以重用和共享组件中的与状态相关的逻辑\",\"逻辑复杂的组件难以开发与维护，当我们的组件需要处理多个互不相关的 local state 时，每个生命周期函数中可能会包含着各种互不相关的逻辑在里面\",\"类组件中的this增加学习成本，类组件在基于现有工具的优化上存在些许问题\",\"由于业务变动，函数组件不得不改为类组件等等 在以前，函数组件也被称为无状态的组件，只负责渲染的一些工作 因此，现在的函数组件也可以是有状态的组件，内部也可以维护自身的状态以及做一些逻辑方面的处理\"]},\"518\":{\"h\":\"常见hooks\",\"t\":[\"最常见的hooks有如下：\",\"useState\",\"useEffect\",\"其他\"]},\"519\":{\"h\":\"useState\",\"t\":[\"首先给出一个例子，如下：\",\"import React, { useState } from 'react'; function Example() { // 声明一个叫 \\\"count\\\" 的 state 变量 const [count, setCount] = useState(0); return ( <div> <p>You clicked {count} times</p > <button onClick={() => setCount(count + 1)}> Click me </button> </div> ); }\",\"在函数组件中通过useState实现函数内部维护state，参数为state默认的值，返回值是一个数组，第一个值为当前的state，第二个值为更新state的函数\",\"该函数组件等价于的类组件如下：\",\"class Example extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } render() { return ( <div> <p>You clicked {this.state.count} times</p > <button onClick={() => this.setState({ count: this.state.count + 1 })}> Click me </button> </div> ); } }\",\"从上述两种代码分析，可以看出两者区别：\",\"state声明方式：在函数组件中通过 useState 直接获取，类组件通过constructor 构造函数中设置\",\"state读取方式：在函数组件中直接使用变量，类组件通过this.state.count的方式获取\",\"state更新方式：在函数组件中通过 setCount 更新，类组件通过this.setState()\",\"总的来讲，useState 使用起来更为简洁，减少了this指向不明确的情况\"]},\"520\":{\"h\":\"useEffect\",\"t\":[\"useEffect可以让我们在函数组件中进行一些带有副作用的操作\",\"同样给出一个计时器示例：\",\"class Example extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } componentDidMount() { document.title = `You clicked ${this.state.count} times`; } componentDidUpdate() { document.title = `You clicked ${this.state.count} times`; } render() { return ( <div> <p>You clicked {this.state.count} times</p > <button onClick={() => this.setState({ count: this.state.count + 1 })}> Click me </button> </div> ); } }\",\"从上面可以看见，组件在加载和更新阶段都执行同样操作\",\"而如果使用useEffect后，则能够将相同的逻辑抽离出来，这是类组件不具备的方法\",\"对应的useEffect示例如下：\",\"import React, { useState, useEffect } from 'react'; function Example() { const [count, setCount] = useState(0); useEffect(() => { document.title = `You clicked ${count} times`; }); return ( <div> <p>You clicked {count} times</p > <button onClick={() => setCount(count + 1)}> Click me </button> </div> ); }\",\"useEffect第一个参数接受一个回调函数，默认情况下，useEffect会在第一次渲染和更新之后都会执行，相当于在componentDidMount和componentDidUpdate两个生命周期函数中执行回调\",\"如果某些特定值在两次重渲染之间没有发生变化，你可以跳过对 effect 的调用，这时候只需要传入第二个参数，如下：\",\"useEffect(() => { document.title = `You clicked ${count} times`; }, [count]); // 仅在 count 更改时更新\",\"上述传入第二个参数后，如果 count 的值是 5，而且我们的组件重渲染的时候 count 还是等于 5，React 将对前一次渲染的 [5] 和后一次渲染的 [5] 进行比较，如果是相等则跳过effects执行\",\"回调函数中可以返回一个清除函数，这是effect可选的清除机制，相当于类组件中componentwillUnmount生命周期函数，可做一些清除副作用的操作，如下：\",\"useEffect(() => { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () => { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; });\",\"所以， useEffect相当于componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个生命周期函数的组合\"]},\"521\":{\"h\":\"其它 hooks\",\"t\":[\"在组件通信过程中可以使用useContext\",\"还有很多额外的hooks，如：\",\"useReducer\",\"useCallback\",\"useMemo\",\"useRef\"]},\"522\":{\"h\":\"解决什么\",\"t\":[\"通过对上面的初步认识，可以看到hooks能够更容易解决状态相关的重用的问题：\",\"每调用useHook一次都会生成一份独立的状态\",\"通过自定义hook能够更好的封装我们的功能\",\"编写hooks为函数式编程，每个功能都包裹在函数中，整体风格更清爽，更优雅\",\"hooks的出现，使函数组件的功能得到了扩充，拥有了类组件相似的功能，在我们日常使用中，使用hooks能够解决大多数问题，并且还拥有代码复用机制，因此优先考虑hooks\"]},\"523\":{\"c\":[\"React\"]},\"524\":{\"c\":[\"React\"]},\"525\":{\"h\":\"immutable数据\",\"t\":[\"Immutable，不可改变的，在计算机中，即指一旦创建，就不能再被更改的数据 对 Immutable 对象的任何修改或添加删除操作都会返回一个新的 Immutable 对象\",\"Immutable 实现的原理是 Persistent Data Structure（持久化数据结构）:\",\"用一种数据结构来保存数据 当数据被修改时，会返回一个对象，但是新的对象会尽可能的利用之前的数据结构而不会对内存造成浪费 也就是使用旧数据创建新数据时，要保证旧数据同时可用且不变，同时为了避免 deepCopy 把所有节点都复制一遍带来的性能损耗，Immutable 使用了 Structural Sharing（结构共享）\",\"如果对象树中一个节点发生变化，只修改这个节点和受它影响的父节点，其它节点则进行共享\",\"如下图所示：\"]},\"526\":{\"h\":\"使用\",\"t\":[\"使用Immutable对象最主要的库是immutable.js\",\"immutable.js 是一个完全独立的库，无论基于什么框架都可以用它\",\"其出现场景在于弥补 Javascript 没有不可变数据结构的问题，通过 structural sharing 来解决的性能问题\",\"内部提供了一套完整的 Persistent Data Structure，还有很多易用的数据类型，如Collection、List、Map、Set、Record、Seq，其中：\",\"List: 有序索引集，类似 JavaScript 中的 Array\",\"Map: 无序索引集，类似 JavaScript 中的 Object\",\"Set: 没有重复值的集合\",\"主要的方法如下：\",\"fromJS()：将一个js数据转换为Immutable类型的数据\",\"const obj = Immutable.fromJS({a:'123',b:'234'})\",\"toJS()：将一个Immutable数据转换为JS类型的数据\",\"is()：对两个对象进行比较\",\"import { Map, is } from 'immutable' const map1 = Map({ a: 1, b: 1, c: 1 }) const map2 = Map({ a: 1, b: 1, c: 1 }) map1 === map2 //false Object.is(map1, map2) // false,在js中不相同 is(map1, map2) // true\",\"get(key)：对数据或对象取值 getIn([]) ：对嵌套对象或数组取值，传参为数组，表示位置\",\"// 转为Immutable对象 let abs = Immutable.fromJS({a: {b:2}}); abs.getIn(['a', 'b']) // 2 abs.getIn(['a', 'c']) // 子级没有值 let arr = Immutable.fromJS([1 ,2, 3, {a: 5}]); arr.getIn([3, 'a']); // 5 arr.getIn([3, 'c']); // 子级没有值\",\"如下例子：使用方法如下：\",\"import Immutable from 'immutable'; foo = Immutable.fromJS({a: {b: 1}}); bar = foo.setIn(['a', 'b'], 2); // 使用 setIn 赋值 console.log(foo.getIn(['a', 'b'])); // 使用 getIn 取值，打印 1 console.log(foo === bar); // 打印 false\",\"如果换到原生的js，则对应如下：\",\"let foo = {a: {b: 1}}; let bar = foo; bar.a.b = 2; console.log(foo.a.b); // 打印 2 console.log(foo === bar); // 打印 true\"]},\"527\":{\"h\":\"应用\",\"t\":[\"使用 Immutable 可以给 React 应用带来性能的优化，主要体现在减少渲染的次数 在做react性能优化的时候，为了避免重复渲染，我们会在shouldComponentUpdate()中做对比，当返回true执行render方法 Immutable通过is方法则可以完成对比，而无需像一样通过深度比较的方式比较\",\"在使用redux过程中也可以结合Immutable，不使用Immutable前修改一个数据需要做一个深拷贝\",\"import '_' from 'lodash'; const Component = React.createClass({ getInitialState() { return { data: { times: 0 } } }, handleAdd() { let data = _.cloneDeep(this.state.data); data.times = data.times + 1; this.setState({ data: data }); } }\",\"使用 Immutable 后：\",\"getInitialState() { return { data: Map({ times: 0 }) } }, handleAdd() { this.setState({ data: this.state.data.update('times', v => v + 1) }); // 这时的 times 并不会改变 console.log(this.state.data.get('times')); }\",\"同理，在redux中也可以将数据进行fromJS处理\",\"import * as constants from './constants' import {fromJS} from 'immutable' const defaultState = fromJS({ //将数据转化成immutable数据 home:true, focused:false, mouseIn:false, list:[], page:1, totalPage:1 }) export default(state=defaultState,action)=>{ switch(action.type){ case constants.SEARCH_FOCUS: return state.set('focused',true) //更改immutable数据 case constants.CHANGE_HOME_ACTIVE: return state.set('home',action.value) case constants.SEARCH_BLUR: return state.set('focused',false) case constants.CHANGE_LIST: // return state.set('list',action.data).set('totalPage',action.totalPage) //merge效率更高，执行一次改变多个数据 return state.merge({ list:action.data, totalPage:action.totalPage }) case constants.MOUSE_ENTER: return state.set('mouseIn',true) case constants.MOUSE_LEAVE: return state.set('mouseIn',false) case constants.CHANGE_PAGE: return state.set('page',action.page) default: return state } }\"]},\"528\":{\"c\":[\"React\"]},\"529\":{\"c\":[\"React\"]},\"530\":{\"h\":\"React\",\"t\":[\"React，用于构建用户界面的 JavaScript 库，只提供了 UI 层面的解决方案 遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效 使用虚拟DOM来有效地操作DOM，遵循从高阶组件到低阶组件的单向数据流 帮助我们将界面成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面\",\"react 类组件使用一个名为 render() 的方法或者函数组件 return ，接收输入的数据并返回需要展示的内容\",\"class HelloMessage extends React.Component { render() { return ( <div> Hello {this.props.name} </div> ); } } ReactDOM.render( <HelloMessage name=\\\"Taylor\\\" />, document.getElementById('hello-example') );\",\"上述这种类似 XML形式就是 JSX，最终会被babel编译为合法的JS语句调用 被传入的数据可在组件中通过 this.props 在 render() 访问\"]},\"531\":{\"h\":\"特性\",\"t\":[\"React特性有很多，如：\",\"JSX语法\",\"单向数据绑定\",\"虚拟DOM\",\"声明式编程\",\"Component\"]},\"532\":{\"h\":\"声明式编程\",\"t\":[\"声明式编程是一种编程范式，它表达逻辑而不显式地定义步骤 如实现一个标记的地图： 通过命令式创建地图、创建标记、以及在地图上添加的标记的步骤如下：\",\"// 创建地图 const map = new Map.map(document.getElementById('map'), { zoom: 4, center: {lat,lng} }); // 创建标记 const marker = new Map.marker({ position: {lat, lng}, title: 'Hello Marker' }); // 地图上添加标记 marker.setMap(map);\",\"而用React实现上述功能则如下：\",\"<Map zoom={4} center={lat, lng}> <Marker position={lat, lng} title={'Hello Marker'}/> </Map>\",\"声明式编程方式使得React组件很容易使用，最终的代码简单易于维护\"]},\"533\":{\"h\":\"Component\",\"t\":[\"在React 中，一切皆为组件。通常将应用程序的整个逻辑分解为小的单个部分。 我们将每个单独的部分称为组件 组件可以是一个函数或者是一个类，接受数据输入，处理它并返回在UI中呈现的React元素\",\"函数式组件如下：\",\"const Header = () => { return( <Jumbotron style={{backgroundColor:'orange'}}> <h1>TODO App</h1> </Jumbotron> ) }\",\"类组件（有状态组件）如下：\",\"class Dashboard extends React.Component { constructor(props){ super(props); this.state = { } } render() { return ( <div className=\\\"dashboard\\\"> <ToDoForm /> <ToDolist /> </div> ); } }\",\"一个组件该有的特点如下：\",\"可组合：个组件易于和其它组件一起使用，或者嵌套在另一个组件内部\",\"可重用：每个组件都是具有独立功能的，它可以被使用在多个UI场景\",\"可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\"]},\"534\":{\"h\":\"优势\",\"t\":[\"通过上面的初步了解，可以感受到React存在的优势：\",\"高效灵活\",\"声明式的设计，简单使用\",\"组件式开发，提高代码复用率\",\"单向响应的数据流会比双向绑定的更安全，速度更快\"]},\"535\":{\"c\":[\"React\"]},\"536\":{\"c\":[\"React\"]},\"537\":{\"h\":\"jsx转为真实DOM\",\"t\":[\"react通过将组件编写的JSX映射到屏幕，以及组件中的状态发生了变化之后 React会将这些「变化」更新到屏幕上 JSX通过babel最终转化成React.createElement这种形式，例如：\",\"<div> < img src=\\\"avatar.png\\\" className=\\\"profile\\\" /> <Hello /> </div>\",\"会被bebel转化成如下：\",\"React.createElement( \\\"div\\\", null, React.createElement(\\\"img\\\", { src: \\\"avatar.png\\\", className: \\\"profile\\\" }), React.createElement(Hello, null) );\",\"在转化过程中，babel在编译时会判断 JSX 中组件的首字母：\",\"当首字母为小写时，其被认定为原生 DOM 标签，createElement 的第一个变量被编译为字符串\",\"当首字母为大写时，其被认定为自定义组件，createElement 的第一个变量被编译为对象 最终都会通过RenderDOM.render(...)方法进行挂载，如下：\",\"ReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\"]},\"538\":{\"h\":\"过程\",\"t\":[\"在react中，节点大致可以分成四个类别：\",\"原生标签节点\",\"文本节点\",\"函数组件\",\"类组件 如下所示：\",\"class ClassComponent extends Component { static defaultProps = { color: \\\"pink\\\" }; render() { return ( <div className=\\\"border\\\"> <h3>ClassComponent</h3> <p className={this.props.color}>{this.props.name}</p > </div> ); } } function FunctionComponent(props) { return ( <div className=\\\"border\\\"> FunctionComponent <p>{props.name}</p > </div> ); } const jsx = ( <div className=\\\"border\\\"> <p>xx</p > < a href=\\\" \\\">xxx</ a> <FunctionComponent name=\\\"函数组件\\\" /> <ClassComponent name=\\\"类组件\\\" color=\\\"red\\\" /> </div> );\",\"这些类别最终都会被转化成React.createElement这种形式 React.createElement其被调用时会传⼊标签类型type，标签属性props及若干子元素children，作用是生成一个虚拟Dom对象，如下所示：\",\"function createElement(type, config, ...children) { if (config) { delete config.__self; delete config.__source; } // ! 源码中做了详细处理，⽐如过滤掉key、ref等 const props = { ...config, children: children.map(child => typeof child === \\\"object\\\" ? child : createTextNode(child) ) }; return { type, props }; } function createTextNode(text) { return { type: TEXT, props: { children: [], nodeValue: text } }; } export default { createElement };\",\"createElement会根据传入的节点信息进行一个判断：\",\"如果是原生标签节点， type 是字符串，如div、span\",\"如果是文本节点， type就没有，这里是 TEXT\",\"如果是函数组件，type 是函数名\",\"如果是类组件，type 是类名\",\"虚拟DOM会通过ReactDOM.render进行渲染成真实DOM，使用方法如下：\",\"ReactDOM.render(element, container[, callback])\",\"当首次调用时，容器节点里的所有 DOM 元素都会被替换，后续的调用则会使用 React 的 diff算法进行高效的更新 如果提供了可选的回调函数callback，该回调将在组件被渲染或更新之后被执行 render大致实现方法如下：\",\"function render(vnode, container) { console.log(\\\"vnode\\\", vnode); // 虚拟DOM对象 // vnode _> node const node = createNode(vnode, container); container.appendChild(node); } // 创建真实DOM节点 function createNode(vnode, parentNode) { let node = null; const {type, props} = vnode; if (type === TEXT) { node = document.createTextNode(\\\"\\\"); } else if (typeof type === \\\"string\\\") { node = document.createElement(type); } else if (typeof type === \\\"function\\\") { // 更新 node = type.isReactComponent ? updateClassComponent(vnode, parentNode) : updateFunctionComponent(vnode, parentNode); } else { // 其他类型 node = document.createDocumentFragment(); } reconcileChildren(props.children, node); updateNode(node, props); return node; } // 遍历下子vnode，然后把子vnode->真实DOM节点，再插入父node中 function reconcileChildren(children, node) { for (let i = 0; i < children.length; i++) { let child = children[i]; if (Array.isArray(child)) { for (let j = 0; j < child.length; j++) { render(child[j], node); } } else { render(child, node); } } } function updateNode(node, nextVal) { Object.keys(nextVal) .filter(k => k !== \\\"children\\\") .forEach(k => { if (k.slice(0, 2) === \\\"on\\\") { let eventName = k.slice(2).toLocaleLowerCase(); node.addEventListener(eventName, nextVal[k]); } else { node[k] = nextVal[k]; } }); } // 返回真实dom节点 // 执行函数 function updateFunctionComponent(vnode, parentNode) { const {type, props} = vnode; let vvnode = type(props); const node = createNode(vvnode, parentNode); return node; } // 返回真实dom节点 // 先实例化，再执行render函数 function updateClassComponent(vnode, parentNode) { const {type, props} = vnode; let cmp = new type(props); const vvnode = cmp.render(); const node = createNode(vvnode, parentNode); return node; } export default { render };\"]},\"539\":{\"h\":\"总结\",\"t\":[\"在react源码中，虚拟Dom转化成真实Dom整体流程如下所示：\",\"参数处理\",\"批处理、事物调用\",\"生成、渲染html\",\"IE、Edge逐个渲染，其他浏览器一次渲染 其渲染流程如下所示：\",\"使用React.createElement或JSX编写React组件，实际上所有的 JSX 代码最后都会转换成React.createElement(...) ，Babel帮助我们完成了这个转换的过程。\",\"createElement函数对key和ref等特殊的props进行处理，并获取defaultProps对默认props进行赋值，并且对传入的孩子节点进行处理，最终构造成一个虚拟DOM对象\",\"ReactDOM.render将生成好的虚拟DOM渲染到指定容器上，其中采用了批处理、事务等机制并且对特定浏览器进行了性能优化，最终转换为真实DOM\"]},\"540\":{\"c\":[\"React\"]},\"541\":{\"c\":[\"React\"]},\"542\":{\"h\":\"key\",\"t\":[\"跟Vue一样，React 也存在 Diff算法，而元素key属性的作用是用于判断元素是新创建的还是被移动的元素，从而减少不必要的Diff\",\"因此key的值需要为每一个元素赋予一个确定的标识\",\"如果列表数据渲染中，在数据后面插入一条数据，key作用并不大，如下：\",\"this.state = { numbers:[111,222,333] } insertMovie() { const newMovies = [...this.state.numbers, 444]; this.setState({ movies: newMovies }) } <ul> { this.state.movies.map((item, index) => { return <li>{item}</li> }) } </ul>\",\"前面的元素在diff算法中，前面的元素由于是完全相同的，并不会产生删除创建操作，在最后一个比较的时候，则需要插入到新的DOM树中\",\"因此，在这种情况下，元素有无key属性意义并不大\",\"下面再来看看在前面插入数据时，使用key与不使用key的区别：\",\"insertMovie() { const newMovies = [000 ,...this.state.numbers]; this.setState({ movies: newMovies }) }\",\"当拥有key的时候，react根据key属性匹配原有树上的子元素以及最新树上的子元素，像上述情况只需要将000元素插入到最前面位置\",\"当没有key的时候，所有的li标签都需要进行修改\",\"同样，并不是拥有key值代表性能越高，如果说只是文本内容改变了，不写key反而性能和效率更高\",\"主要是因为不写key是将所有的文本内容替换一下，节点不会发生变化\",\"而写key则涉及到了节点的增和删，发现旧key不存在了，则将其删除，新key在之前没有，则插入，这就增加性能的开销\"]},\"543\":{\"h\":\"总结\",\"t\":[\"良好使用key属性是性能优化的非常关键的一步，注意事项为：\",\"key 应该是唯一的\",\"key不要使用随机值（随机数在下一次 render 时，会重新生成一个数字）\",\"避免使用 index 作为 key react判断key的流程具体如下图：\"]},\"544\":{\"c\":[\"React\"]},\"545\":{\"c\":[\"React\"]},\"546\":{\"h\":\"渲染优化\",\"t\":[\"react 基于虚拟 DOM 和高效 Diff 算法的完美配合，实现了对 DOM 最小粒度的更新，大多数情况下，React 对 DOM 的渲染效率足以我们的业务日常\",\"复杂业务场景下，性能问题依然会困扰我们。此时需要采取一些措施来提升运行性能，避免不必要的渲染则是业务中常见的优化手段之一\"]},\"547\":{\"h\":\"避免不必要的渲染\",\"t\":[\"render的触发时机，简单来讲就是类组件通过调用setState方法， 就会导致render，父组件一旦发生render渲染，子组件一定也会执行render渲染\",\"从上面可以看到，父组件渲染导致子组件渲染，子组件并没有发生任何改变，这时候就可以从避免无谓的渲染，具体实现的方式有如下：\",\"shouldComponentUpdate\",\"PureComponent\",\"React.memo\"]},\"548\":{\"h\":\"shouldComponentUpdate\",\"t\":[\"通过shouldComponentUpdate生命周期函数来比对 state 和 props，确定是否要重新渲染\",\"默认情况下返回true表示重新渲染，如果不希望组件重新渲染，返回 false 即可\"]},\"549\":{\"h\":\"PureComponent\",\"t\":[\"跟shouldComponentUpdate 原理基本一致，通过对 props 和 state的浅比较结果来实现 shouldComponentUpdate，源码大致如下：\",\"if (this._compositeType === CompositeTypes.PureClass) { shouldUpdate = !shallowEqual(prevProps, nextProps) || ! shallowEqual(inst.state, nextState); }\",\"shallowEqual对应方法大致如下：\",\"const hasOwnProperty = Object.prototype.hasOwnProperty; function is(x: mixed, y: mixed): boolean { if (x === y) { return x !== 0 || y !== 0 || 1 / x === 1 / y; } else { return x !== x && y !== y; } } function shallowEqual(objA: mixed, objB: mixed): boolean { // 首先对基本类型进行比较 if (is(objA, objB)) { return true; } if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) { return false; } const keysA = Object.keys(objA); const keysB = Object.keys(objB); // 长度不相等直接返回false if (keysA.length !== keysB.length) { return false; } // key相等的情况下，再去循环比较 for (let i = 0; i < keysA.length; i++) { if ( !hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]]) ) { return false; } } return true; }\",\"当对象包含复杂的数据结构时，对象深层的数据已改变却没有触发 render\",\"重要\",\"在react中，是不建议使用深层次结构的数据\"]},\"550\":{\"h\":\"React.memo\",\"t\":[\"React.memo用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似。但不同的是， React.memo 只能用于函数组件\",\"import { memo } from 'react'; function Button(props) { // Component code } export default memo(Button);\",\"如果需要深层次比较，这时候可以给memo第二个参数传递比较函数\",\"function arePropsEqual(prevProps, nextProps) { // your code return prevProps === nextProps; } export default memo(Button, arePropsEqual);\"]},\"551\":{\"h\":\"总结\",\"t\":[\"在实际开发过程中，前端性能问题是一个必须考虑的问题，随着业务的复杂，遇到性能问题的概率也在增高\",\"除此之外，建议将页面进行更小的颗粒化，如果一个过大，当状态发生修改的时候，就会导致整个大组件的渲染，而对组件进行拆分后，粒度变小了，也能够减少子组件不必要的渲染\"]},\"552\":{\"c\":[\"React\"]},\"553\":{\"c\":[\"React\"]},\"554\":{\"h\":\"性能优化\",\"t\":[\"常见性能优化常见的手段有如下：\",\"避免使用内联函数\",\"使用 React Fragments 避免额外标记\",\"使用 Immutable\",\"懒加载组件\",\"事件绑定方式\",\"服务端渲染\"]},\"555\":{\"h\":\"避免使用内联函数\",\"t\":[\"如果我们使用内联函数，则每次调用render函数时都会创建一个新的函数实例，如下：\",\"import React from \\\"react\\\"; export default class InlineFunctionComponent extends React.Component { render() { return ( <div> <h1>Welcome Guest</h1> <input type=\\\"button\\\" onClick={(e) => { this.setState({inputValue: e.target.value}) }} value=\\\"Click For Inline Function\\\" /> </div> ) } }\",\"我们应该在组件内部创建一个函数，并将事件绑定到该函数本身。这样每次调用 render 时就不会创建单独的函数实例，如下：\",\"import React from \\\"react\\\"; export default class InlineFunctionComponent extends React.Component { setNewStateData = (event) => { this.setState({ inputValue: e.target.value }) } render() { return ( <div> <h1>Welcome Guest</h1> <input type=\\\"button\\\" onClick={this.setNewStateData} value=\\\"Click For Inline Function\\\" /> </div> ) } }\"]},\"556\":{\"h\":\"使用 React Fragments 避免额外标记\",\"t\":[\"用户创建新组件时，每个组件应具有单个父标签。父级不能有两个标签，所以顶部要有一个公共标签，所以我们经常在组件顶部添加额外标签div\",\"如果这个额外标签除了充当父标签之外，并没有其他作用，这时候则可以使用fragement 其不会向组件引入任何额外标记，但它可以作为父级标签的作用，如下所示：\",\"export default class NestedRoutingComponent extends React.Component { render() { return ( <> <h1>This is the Header Component</h1> <h2>Welcome To Demo Page</h2> </> ) } }\"]},\"557\":{\"h\":\"事件绑定方式\",\"t\":[\"从性能方面考虑，在render方法中使用bind和render方法中使用箭头函数这两种形式在每次组件render的时候都会生成新的方法实例，性能欠缺 而constructor中bind事件与定义阶段使用箭头函数绑定这两种形式只会生成一个方法实例，性能方面会有所改善\"]},\"558\":{\"h\":\"使用 Immutable\",\"t\":[\"Immutable可以给 React 应用带来性能的优化，主要体现在减少渲染的次数 在做react性能优化的时候，为了避免重复渲染，在shouldComponentUpdate()中做对比，当返回true执行render方法\",\"Immutable通过is方法则可以完成对比，而无需像一样通过深度比较的方式比较\"]},\"559\":{\"h\":\"懒加载组件\",\"t\":[\"从工程方面考虑，webpack存在代码拆分能力，可以为应用创建多个包，并在运行时动态加载，减少初始包的大小\",\"而在react中使用到了Suspense 和 lazy组件实现代码拆分功能，基本使用如下：\",\"// 懒加载 const johanComponent = React.lazy(() => import(/* webpackChunkName: \\\"johanComponent\\\" */ './myAwesome.component')); export const johanAsyncComponent = props => ( <React.Suspense fallback={<Spinner />}> <johanComponent {...props} /> </React.Suspense> );\"]},\"560\":{\"h\":\"服务端渲染\",\"t\":[\"采用服务端渲染端方式，可以使用户更快的看到渲染完成的页面\",\"服务端渲染，需要起一个node服务，可以使用express、koa等，调用react的renderToString方法，将根组件渲染成字符串，再输出到响应中 例如：\",\"import { renderToString } from \\\"react-dom/server\\\"; import MyPage from \\\"./MyPage\\\"; app.get(\\\"/\\\", (req, res) => { res.write(\\\"<!DOCTYPE html><html><head><title>My Page</title></head><body>\\\"); res.write(\\\"<div id='content'>\\\"); res.write(renderToString(<MyPage/>)); res.write(\\\"</div></body></html>\\\"); res.end(); });\",\"客户端使用render方法来生成HTML\",\"import ReactDOM from 'react-dom'; import MyPage from \\\"./MyPage\\\"; ReactDOM.render(<MyPage />, document.getElementById('app'));\"]},\"561\":{\"c\":[\"React\"]},\"562\":{\"c\":[\"React\"]},\"563\":{\"h\":\"状态管理\",\"t\":[\"react-redux将组件分成：\",\"容器组件：存在逻辑处理\",\"UI 组件：只负责现显示和交互，内部不处理逻辑，状态由外部控制 通过redux将整个应用状态存储到store中，组件可以派发dispatch行为action给store\",\"其他组件通过订阅store中的状态state来更新自身的视图\",\"使用react-redux分成了两大核心：\",\"Provider\",\"connection\"]},\"564\":{\"h\":\"Provider\",\"t\":[\"在redux中存在一个store用于存储state，如果将这个store存放在顶层元素中，其他组件都被包裹在顶层元素之上 那么所有的组件都能够受到redux的控制，都能够获取到redux中的数据\",\"使用方式如下：\",\"<Provider store = {store}> <App /> <Provider>\"]},\"565\":{\"h\":\"connection\",\"t\":[\"connect方法将store上的getState 和 dispatch 包装成组件的props\",\"导入conect如下：\",\"import { connect } from \\\"react-redux\\\";\",\"用法如下：\",\"connect(mapStateToProps, mapDispatchToProps)(MyComponent)\",\"可以传递两个参数：\",\"mapStateToProps\",\"mapDispatchToProps\"]},\"566\":{\"h\":\"mapStateToProps\",\"t\":[\"把redux中的数据映射到react中的props中去\",\"如下：\",\"const mapStateToProps = (state) => { return { // prop : state.xxx | 意思是将state中的某个数据映射到props中 foo: state.bar } }\",\"组件内部就能够通过props获取到store中的数据\",\"class Foo extends Component { constructor(props){ super(props); } render(){ return( // 这样子渲染的其实就是state.bar的数据了 <div>this.props.foo</div> ) } } Foo = connect()(Foo) export default Foo\"]},\"567\":{\"h\":\"mapDispatchToProps\",\"t\":[\"将redux中的dispatch映射到组件内部的props中\",\"const mapDispatchToProps = (dispatch) => { // 默认传递参数就是dispatch return { onClick: () => { dispatch({ type: 'increatment' }); } }; } class Foo extends Component { constructor(props){ super(props); } render(){ return( <button onClick = {this.props.onClick}>点击increase</button> ) } } Foo = connect()(Foo); export default Foo;\",\"alt text\"]},\"568\":{\"h\":\"项目结构\",\"t\":[\"可以根据项目具体情况进行选择，以下列出两种常见的组织结构\"]},\"569\":{\"h\":\"按角色组织（MVC）\",\"t\":[\"角色如下：\",\"reducers\",\"actions\",\"components\",\"containers 参考如下：\",\"reducers/ todoReducer.js filterReducer.js actions/ todoAction.js filterActions.js components/ todoList.js todoItem.js filter.js containers/ todoListContainer.js todoItemContainer.js filterContainer.js\"]},\"570\":{\"h\":\"按功能组织\",\"t\":[\"使用redux使用功能组织项目，也就是把完成同一应用功能的代码放在一个目录下，一个应用功能包含多个角色的代码 Redux中，不同的角色就是reducer、actions和视图，而应用功能对应的就是用户界面的交互模块\",\"参考如下：\",\"todoList/ actions.js actionTypes.js index.js reducer.js views/ components.js containers.js filter/ actions.js actionTypes.js index.js reducer.js views/ components.js container.js\",\"每个功能模块对应一个目录，每个目录下包含同样的角色文件：\",\"actionTypes.js 定义action类型\",\"actions.js 定义action构造函数\",\"reducer.js 定义这个功能模块如果响应actions.js定义的动作\",\"views 包含功能模块中所有的React组件，包括展示组件和容器组件\",\"index.js 把所有的角色导入，统一导出 其中index模块用于导出对外的接口\",\"import * as actions from './actions.js'; import reducer from './reducer.js'; import view from './views/container.js'; export { actions, reducer, view };\",\"导入方法如下：\",\"import { actions, reducer, view as TodoList } from './xxxx'\"]},\"571\":{\"h\":\"中间件\",\"t\":[\"中间件（Middleware）是介于应用系统和系统软件之间的一类软件，它使用系统软件所提供的基础服务（功能），衔接网络上应用系统的各个部分或不同的应用，能够达到资源共享、功能共享的目的\",\"Redux整个工作流程，当action发出之后，reducer立即算出state，整个过程是一个同步的操作 那么如果需要支持异步操作，或者支持错误处理、日志监控，这个过程就可以用上中间件 Redux中，中间件就是放在就是在dispatch过程，在分发action进行拦截处理，如下图： 其本质上一个函数，对store.dispatch方法进行了改造，在发出 Action 和执行 Reducer 这两步之间，添加了其他功能\"]},\"572\":{\"h\":\"常用的中间件\",\"t\":[\"有很多优秀的redux中间件，如：\",\"redux-thunk：用于异步操作\",\"redux-logger：用于日志记录 上述的中间件都需要通过applyMiddlewares进行注册，作用是将所有的中间件组成一个数组，依次执行\",\"然后作为第二个参数传入到createStore中\",\"const store = createStore( reducer, applyMiddleware(thunk, logger) );\"]},\"573\":{\"h\":\"redux-thunk\",\"t\":[\"redux-thunk是官网推荐的异步处理中间件 默认情况下的dispatch(action)，action需要是一个JavaScript的对象 redux-thunk中间件会判断你当前传进来的数据类型，如果是一个函数，将会给函数传入参数值（dispatch，getState）\",\"dispatch函数用于之后再次派发action\",\"getState函数考虑到我们之后的一些操作需要依赖原来的状态，用于让我们可以获取之前的一些状态 所以dispatch可以写成下述函数的形式：\",\"const getHomeMultidataAction = () => { return (dispatch) => { axios.get(\\\"http://xxx.xx.xx.xx/test\\\").then(res => { const data = res.data.data; dispatch(changeBannersAction(data.banner.list)); dispatch(changeRecommendsAction(data.recommend.list)); }) } }\"]},\"574\":{\"h\":\"redux-logger\",\"t\":[\"如果想要实现一个日志功能，则可以使用现成的redux-logger\",\"import { applyMiddleware, createStore } from 'redux'; import createLogger from 'redux-logger'; const logger = createLogger(); const store = createStore( reducer, applyMiddleware(logger) );\",\"这样我们就能简单通过中间件函数实现日志记录的信息\"]},\"575\":{\"h\":\"原理\",\"t\":[\"首先看看applyMiddlewares的源码\",\"export default function applyMiddleware(...middlewares) { return (createStore) => (reducer, preloadedState, enhancer) => { var store = createStore(reducer, preloadedState, enhancer); var dispatch = store.dispatch; var chain = []; var middlewareAPI = { getState: store.getState, dispatch: (action) => dispatch(action) }; // 执行中间件 chain = middlewares.map(middleware => middleware(middlewareAPI)); // 分发 dispatch = compose(...chain)(store.dispatch); return {...store, dispatch} } }\",\"所有中间件被放进了一个数组chain，然后嵌套执行，最后执行store.dispatch。可以看到，中间件内部（middlewareAPI）可以拿到getState和dispatch这两个方法\",\"redux-thunk的基本使用，内部会将dispatch进行一个判断，然后执行对应操作，原理如下：\",\"function patchThunk(store) { let next = store.dispatch; function dispatchAndThunk(action) { if (typeof action === \\\"function\\\") { action(store.dispatch, store.getState); } else { next(action); } } store.dispatch = dispatchAndThunk; }\",\"实现一个日志输出的原理也非常简单，如下：\",\"let next = store.dispatch; function dispatchAndLog(action) { console.log(\\\"dispatching:\\\", addAction(10)); next(addAction(5)); console.log(\\\"新的state:\\\", store.getState()); } store.dispatch = dispatchAndLog;\"]},\"576\":{\"c\":[\"React\"]},\"577\":{\"c\":[\"React\"]},\"578\":{\"h\":\"refs\",\"t\":[\"React 中的 Refs提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素 本质为ReactDOM.render()返回的组件实例，如果是渲染组件则返回的是组件实例，如果渲染dom则返回的是具体的dom节点\"]},\"579\":{\"h\":\"创建refs\",\"t\":[\"创建ref的形式有四种种：\",\"传入字符串，使用时通过 this.refs.传入的字符串的格式获取对应的元素\",\"传入对象，对象是通过 React.createRef() 方式创建出来，使用时获取到创建的对象中存在 current 属性就是对应的元素\",\"传入函数，该函数会在 DOM 被挂载时进行回调，这个函数会传入一个 元素对象，可以自己保存，使用时，直接拿到之前保存的元素对象即可\",\"传入hook，hook是通过 useRef() 方式创建，使用时通过生成hook对象的 current 属性就是对应的元素\"]},\"580\":{\"h\":\"传入字符串\",\"t\":[\"只需要在对应元素或组件中ref属性\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return <div ref=\\\"myref\\\" />; } }\",\"访问当前节点的方式如下：\",\"this.refs.myref.innerHTML = \\\"hello\\\";\"]},\"581\":{\"h\":\"传入对象\",\"t\":[\"refs通过React.createRef()创建，然后将ref属性添加到React元素中，如下：\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return <div ref={this.myRef} />; } }\",\"当 ref 被传递给 render 中的元素时，对该节点的引用可以在 ref 的 current 属性中访问\",\"const node = this.myRef.current;\"]},\"582\":{\"h\":\"传入函数\",\"t\":[\"当ref传入为一个函数的时候，在渲染过程中，回调函数参数会传入一个元素对象，然后通过实例将对象进行保存\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return <div ref={element => this.myref = element} />; } }\",\"获取ref对象只需要通过先前存储的对象即可\",\"const node = this.myref\"]},\"583\":{\"h\":\"传入hook\",\"t\":[\"通过useRef创建一个ref，整体使用方式与React.createRef一致\",\"function App(props) { const myref = useRef() return ( <> <div ref={myref}></div> </> ) }\",\"获取ref属性也是通过hook对象的current属性\",\"const node = myref.current;\",\"上述三种情况都是ref属性用于原生HTML元素上，如果ref设置的组件为一个类组件的时候，ref对象接收到的是组件的挂载实例 注意的是，不能在函数组件上使用ref属性，因为他们并没有实例\"]},\"584\":{\"h\":\"应用场景\",\"t\":[\"在某些情况下，我们会通过使用refs来更新组件，但这种方式并不推荐，更多情况我们是通过props与state的方式进行去重新渲染子元素 过多使用refs，会使组件的实例或者是DOM结构暴露，违反组件封装的原则 例如，避免在 Dialog 组件里暴露 open() 和 close() 方法，最好传递 isOpen 属性 但下面的场景使用refs非常有用：\",\"对Dom元素的焦点控制、内容选择、控制\",\"对Dom元素的内容设置及媒体播放\",\"对Dom元素的操作和对组件实例的操作\",\"集成第三方 DOM 库\"]},\"585\":{\"c\":[\"React\"]},\"586\":{\"c\":[\"React\"]},\"587\":{\"h\":\"render\",\"t\":[\"render函数在react中有两种形式：\",\"在类组件中，指的是render方法：\",\"class Foo extends React.Component { render() { return <h1> Foo </h1>; } }\",\"在函数组件中，指的是函数组件本身：\",\"function Foo() { return <h1> Foo </h1>; }\",\"在render中，我们会编写jsx，jsx通过babel编译后就会转化成我们熟悉的js格式，如下：\",\"return ( <div className='cn'> <Header> hello </Header> <div> start </div> Right Reserve </div> )\",\"babel编译后：\",\"return ( React.createElement( 'div', { className : 'cn' }, React.createElement( Header, null, 'hello' ), React.createElement( 'div', null, 'start' ), 'Right Reserve' ) )\",\"从名字上来看，createElement方法用来创建元素的 在react中，这个元素就是虚拟DOM树的节点，接收三个参数：\",\"type：标签\",\"attributes：标签属性，若无则为null\",\"children：标签的子节点 这些虚拟DOM树最终会渲染成真实DOM 在render过程中，React 将新调用的 render 函数返回的树与旧版本的树进行比较，这一步是决定如何更新 DOM 的必要步骤，然后进行 diff 比较，更新 DOM 树\"]},\"588\":{\"h\":\"触发时机\",\"t\":[\"render的执行时机主要分成了两部分：\",\"类组件调用 setState 修改状态\",\"class Foo extends React.Component { state = { count: 0 }; increment = () => { const { count } = this.state; const newCount = count < 10 ? count + 1 : count; this.setState({ count: newCount }); }; render() { const { count } = this.state; console.log(\\\"Foo render\\\"); return ( <div> <h1> {count} </h1> <button onClick={this.increment}>Increment</button> </div> ); } }\",\"点击按钮，则调用setState方法，无论count发生变化辩护，控制台都会输出Foo render，证明render执行了\",\"函数组件通过useState hook修改状态\",\"function Foo() { const [count, setCount] = useState(0); function increment() { const newCount = count < 10 ? count + 1 : count; setCount(newCount); } console.log(\\\"Foo render\\\"); return ( <div> <h1> {count} </h1> <button onClick={increment}>Increment</button> </div> ); }\",\"函数组件通过useState这种形式更新数据，当数组的值不发生改变了，就不会触发render\",\"类组件重新渲染\",\"class App extends React.Component { state = { name: \\\"App\\\" }; render() { return ( <div className=\\\"App\\\"> <Foo /> <button onClick={() => this.setState({ name: \\\"App\\\" })}> Change name </button> </div> ); } } function Foo() { console.log(\\\"Foo render\\\"); return ( <div> <h1> Foo </h1> </div> ); }\",\"只要点击了 App 组件内的 Change name 按钮，不管 Foo 具体实现是什么，都会被重新render渲染\",\"函数组件重新渲染\",\"function App(){ const [name,setName] = useState('App') return ( <div className=\\\"App\\\"> {/* 父组件变化不会渲染子组件 */} <Foo /> <button onClick={() => setName(\\\"aaa\\\")}> { name } </button> </div> ) } function Foo() { console.log(\\\"Foo render\\\"); return ( <div> <h1> Foo </h1> </div> ); }\",\"可以发现，使用useState来更新状态的时候，只有首次会触发Foo render，后面并不会导致Foo render\"]},\"589\":{\"h\":\"总结\",\"t\":[\"render函数里面可以编写JSX，转化成createElement这种形式，用于生成虚拟DOM，最终转化成真实DOM 在 React 中，类组件只要执行了 setState 方法，就一定会触发 render 函数执行，函数组件使用useState更改状态不一定导致重新render 组件的 props 改变了，不一定触发 render 函数的执行，但是如果 props 的值来自于父组件或者祖先组件的 state 在这种情况下，父组件或者祖先组件的 state 发生了改变，就会导致子组件的重新渲染 所以，一旦执行了setState就会执行render方法，useState 会判断当前值有无发生改变确定是否执行render方法，一旦父组件发生渲染，子组件也会渲染\"]},\"590\":{\"c\":[\"React\"]},\"591\":{\"c\":[\"React\"]},\"592\":{\"h\":\"路由\",\"t\":[\"react-router等前端路由的原理大致相同，可以实现无刷新的条件下切换显示不同的页面\",\"路由的本质就是页面的URL发生改变时，页面的显示结果可以根据URL的变化而变化，但是页面不会刷新\",\"因此，可以通过前端路由可以实现单页(SPA)应用\",\"react-router主要分成了几个不同的包：\",\"react-router: 实现了路由的核心功能\",\"react-router-dom： 基于 react-router，加入了在浏览器运行环境下的一些功能\",\"react-router-native：基于 react-router，加入了 react-native 运行环境下的一些功能\",\"react-router-config: 用于配置静态路由的工具库\"]},\"593\":{\"h\":\"常用API\",\"t\":[\"这里主要讲述的是react-router-dom的常用API，主要是提供了一些组件：\",\"BrowserRouter、HashRouter\",\"Route\",\"Link、NavLink\",\"switch\",\"redirect\"]},\"594\":{\"h\":\"BrowserRouter、HashRouter\",\"t\":[\"Router中包含了对路径改变的监听，并且会将相应的路径传递给子组件\",\"BrowserRouter有history模式，HashRouter模式\",\"使用两者作为最顶层组件包裹其他组件\",\"import { BrowserRouter as Router } from \\\"react-router-dom\\\"; export default function App() { return ( <Router> <main> <nav> <ul> <li> < a href=\\\" \\\">Home</ a> </li> <li> < a href=\\\"/about\\\">About</ a> </li> <li> < a href=\\\"/contact\\\">Contact</ a> </li> </ul> </nav> </main> </Router> ); }\"]},\"595\":{\"h\":\"Route\",\"t\":[\"Route用于路径的匹配，然后进行组件的渲染，对应的属性如下：\",\"path 属性：用于设置匹配到的路径\",\"component 属性：设置匹配到路径后，渲染的组件\",\"render 属性：设置匹配到路径后，渲染的内容\",\"exact 属性：开启精准匹配，只有精准匹配到完全一致的路径，才会渲染对应的组件\",\"import { BrowserRouter as Router, Route } from \\\"react-router-dom\\\"; export default function App() { return ( <Router> <main> <nav> <ul> <li> < a href=\\\"/\\\">Home</ a> </li> <li> < a href=\\\"/about\\\">About</ a> </li> <li> < a href=\\\"/contact\\\">Contact</ a> </li> </ul> </nav> <Route path=\\\"/\\\" render={() => <h1>Welcome!</h1>} /> </main> </Router> ); }\"]},\"596\":{\"h\":\"Link、NavLink\",\"t\":[\"通常路径的跳转是使用Link组件，最终会被渲染成a元素，其中属性to代替a标题的href属性\",\"NavLink是在Link基础之上增加了一些样式属性，例如组件被选中时，发生样式变化，则可以设置NavLink的一下属性：\",\"activeStyle：活跃时（匹配时）的样式\",\"activeClassName：活跃时添加的class\",\"如下：\",\"<NavLink to=\\\"/\\\" exact activeStyle={{color: \\\"red\\\"}}>首页</NavLink> <NavLink to=\\\"/about\\\" activeStyle={{color: \\\"red\\\"}}>关于</NavLink> <NavLink to=\\\"/profile\\\" activeStyle={{color: \\\"red\\\"}}>我的</NavLink>\",\"如果需要实现js实现页面的跳转，那么可以通过下面的形式：\",\"通过Route作为顶层组件包裹其他组件后,页面组件就可以接收到一些路由相关的东西，比如props.history\",\"const Contact = ({ history }) => ( <Fragment> <h1>Contact</h1> <button onClick={() => history.push(\\\"/\\\")}>Go to home</button> <FakeText /> </Fragment> );\",\"props 中接收到的history对象具有一些方便的方法，如goBack，goForward,push\"]},\"597\":{\"h\":\"redirect\",\"t\":[\"用于路由的重定向，当这个组件出现时，就会执行跳转到对应的to路径中，如下例子：\",\"const About = ({ match: { params: { name }, }, }) => ( // props.match.params.name <Fragment> {name !== \\\"tom\\\" ? <Redirect to=\\\"/\\\" /> : null} <h1>About {name}</h1> <FakeText /> </Fragment> )\",\"上述组件当接收到的路由参数name 不等于 tom 的时候，将会自动重定向到首页\"]},\"598\":{\"h\":\"switch\",\"t\":[\"swich组件的作用适用于当匹配到第一个组件的时候，后面的组件就不应该继续匹配\",\"如下例子：\",\"<Switch> <Route exact path=\\\"/\\\" component={Home} /> <Route path=\\\"/about\\\" component={About} /> <Route path=\\\"/profile\\\" component={Profile} /> <Route path=\\\"/:userid\\\" component={User} /> <Route component={NoMatch} /> </Switch>\",\"如果不使用switch组件进行包裹 除了一些路由相关的组件之外，react-router还提供一些hooks，如下：\",\"useHistory\",\"useParams\",\"useLocation\"]},\"599\":{\"h\":\"useHistory\",\"t\":[\"useHistory可以让组件内部直接访问history，无须通过props获取\",\"import { useHistory } from \\\"react-router-dom\\\"; const Contact = () => { const history = useHistory(); return ( <Fragment> <h1>Contact</h1> <button onClick={() => history.push(\\\"/\\\")}>Go to home</button> </Fragment> ); };\"]},\"600\":{\"h\":\"useParams\",\"t\":[\"const About = () => { const { name } = useParams(); return ( // props.match.params.name <Fragment> {name !== \\\"John Doe\\\" ? <Redirect to=\\\"/\\\" /> : null} <h1>About {name}</h1> <Route component={Contact} /> </Fragment> ); };\"]},\"601\":{\"h\":\"useLocation\",\"t\":[\"useLocation 会返回当前 URL 的 location 对象\",\"import { useLocation } from \\\"react-router-dom\\\"; const Contact = () => { const { pathname } = useLocation(); return ( <Fragment> <h1>Contact</h1> <p>Current URL: {pathname}</p > </Fragment> ); };\"]},\"602\":{\"h\":\"参数传递\",\"t\":[\"这些路由传递参数主要分成了三种形式：\",\"动态路由的方式\",\"search传递参数\",\"to传入对象\"]},\"603\":{\"h\":\"动态路由\",\"t\":[\"动态路由的概念指的是路由中的路径并不会固定 例如将path在Route匹配时写成/detail/:id，那么 /detail/abc、/detail/123都可以匹配到该Route\",\"<NavLink to=\\\"/detail/abc123\\\">详情</NavLink> <Switch> ... 其他Route <Route path=\\\"/detail/:id\\\" component={Detail}/> <Route component={NoMatch} /> </Switch>\",\"获取参数方式如下：\",\"console.log(props.match.params.xxx)\"]},\"604\":{\"h\":\"search传递参数\",\"t\":[\"在跳转的路径中添加了一些query参数；\",\"<NavLink to=\\\"/detail2?name=why&age=18\\\">详情2</NavLink> <Switch> <Route path=\\\"/detail2\\\" component={Detail2}/> </Switch>\",\"获取形式如下：\",\"console.log(props.location.search)\"]},\"605\":{\"h\":\"to传入对象\",\"t\":[\"传递方式如下：\",\"<NavLink to={{ pathname: \\\"/detail2\\\", query: {name: \\\"kobe\\\", age: 30}, state: {height: 1.98, address: \\\"洛杉矶\\\"}, search: \\\"?apikey=123\\\" }}> 详情2 </NavLink>\",\"获取参数的形式如下：\",\"console.log(props.location)\"]},\"606\":{\"h\":\"路由模式\",\"t\":[\"在单页应用中，一个web项目只有一个html页面，一旦页面加载完成之后，就不用因为用户的操作而进行页面的重新加载或者跳转，其特性如下：\",\"改变 url 且不让浏览器像服务器发送请求\",\"在不刷新页面的前提下动态改变浏览器地址栏中的URL地址\",\"其中主要分成了两种模式：\",\"hash 模式：在url后面加上#，\",\"history 模式：允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录\",\"React Router对应的hash模式和history模式对应的组件为：\",\"HashRouter\",\"BrowserRouter 这两个组件的使用都十分的简单，作为最顶层组件包裹其他组件，如下所示\",\"// 1.import { BrowserRouter as Router } from \\\"react-router-dom\\\"; // 2.import { HashRouter as Router } from \\\"react-router-dom\\\"; import React from 'react'; import { BrowserRouter as Router, // HashRouter as Router Switch, Route, } from \\\"react-router-dom\\\"; import Home from './pages/Home'; import Login from './pages/Login'; import Backend from './pages/Backend'; import Admin from './pages/Admin'; function App() { return ( <Router> <Route path=\\\"/login\\\" component={Login}/> <Route path=\\\"/backend\\\" component={Backend}/> <Route path=\\\"/admin\\\" component={Admin}/> <Route path=\\\"/\\\" component={Home}/> </Router> ); } export default App;\"]},\"607\":{\"h\":\"实现原理\",\"t\":[\"路由描述了 URL 与 UI 之间的映射关系，这种映射是单向的，即 URL 变化引起 UI 更新（无需刷新页面） 下面以hash模式为例子，改变hash值并不会导致浏览器向服务器发送请求，浏览器不发出请求，也就不会刷新页面 hash 值改变，触发全局 window 对象上的 hashchange 事件。所以 hash 模式路由就是利用 hashchange 事件监听 URL 的变化，从而进行 DOM 操作来模拟页面跳转\",\"react-router也是基于这个特性实现路由的跳转\",\"下面以HashRouter组件分析进行展开：\"]},\"608\":{\"h\":\"HashRouter\",\"t\":[\"HashRouter包裹了整应用， 通过window.addEventListener('hashChange',callback)监听hash值的变化，并传递给其嵌套的组件 然后通过context将location数据往后代组件传递，如下：\",\"import React, { Component } from 'react'; import { Provider } from './context' // 该组件下Api提供给子组件使用 class HashRouter extends Component { constructor() { super() this.state = { location: { pathname: window.location.hash.slice(1) || '/' } } } // url路径变化 改变location componentDidMount() { window.location.hash = window.location.hash || '/' window.addEventListener('hashchange', () => { this.setState({ location: { ...this.state.location, pathname: window.location.hash.slice(1) || '/' } }, () => console.log(this.state.location)) }) } render() { let value = { location: this.state.location } return ( <Provider value={value}> { this.props.children } </Provider> ); } } export default HashRouter;\"]},\"609\":{\"h\":\"Router\",\"t\":[\"Router组件主要做的是通过BrowserRouter传过来的当前值，通过props传进来的path与context传进来的pathname进行匹配，然后决定是否执行渲染组件\",\"import React, { Component } from 'react'; import { Consumer } from './context' const { pathToRegexp } = require(\\\"path-to-regexp\\\"); class Route extends Component { render() { return ( <Consumer> { state => { console.log(state) let {path, component: Component} = this.props let pathname = state.location.pathname let reg = pathToRegexp(path, [], {end: false}) // 判断当前path是否包含pathname if(pathname.match(reg)) { return <Component></Component> } return null } } </Consumer> ); } } export default Route;\"]},\"610\":{\"c\":[\"React\"]},\"611\":{\"c\":[\"React\"]},\"612\":{\"h\":\"setState\",\"t\":[\"一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state 当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用 如下例子：\",\"import React, { Component } from 'react' export default class App extends Component { constructor(props) { super(props); this.state = { message: \\\"Hello World\\\" } } render() { return ( <div> <h2>{this.state.message}</h2> <button onClick={e => this.changeText()}>面试官系列</button> </div> ) } changeText() { this.setState({ message: \\\"JS每日一题\\\" }) } }\",\"通过点击按钮触发onclick事件，执行this.setState方法更新state状态，然后重新执行render函数，从而导致页面的视图更新 如果直接修改state的状态，如下：\",\"changeText() { this.state.message = \\\"你好啊,李银河\\\"; }\",\"我们会发现页面并不会有任何反应，但是state的状态是已经发生了改变 这是因为React并不像vue2中调用Object.defineProperty数据响应式或者Vue3调用Proxy监听数据的变化 必须通过setState方法来告知react组件state已经发生了改变 关于state方法的定义是从React.Component中继承，定义的源码如下：\",\"Component.prototype.setState = function(partialState, callback) { invariant( typeof partialState === 'object' || typeof partialState === 'function' || partialState == null, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.', ); this.updater.enqueueSetState(this, partialState, callback, 'setState'); };\",\"从上面可以看到setState第一个参数可以是一个对象，或者是一个函数，而第二个参数是一个回调函数，用于可以实时的获取到更新之后的数据\"]},\"613\":{\"h\":\"更新类型\",\"t\":[\"在使用setState更新数据的时候，setState的更新类型分成：\",\"异步更新\",\"同步更新\"]},\"614\":{\"h\":\"异步更新\",\"t\":[\"先举出一个例子：\",\"changeText() { this.setState({ message: \\\"你好啊\\\" }) console.log(this.state.message); // Hello World }\",\"从上面可以看到，最终打印结果为Hello world，并不能在执行完setState之后立马拿到最新的state的结果 如果想要立刻获取更新后的值，在第二个参数的回调中更新后会执行\",\"changeText() { this.setState({ message: \\\"你好啊\\\" }, () => { console.log(this.state.message); // 你好啊 }); }\"]},\"615\":{\"h\":\"同步更新\",\"t\":[\"同样先给出一个在setTimeout中更新的例子：\",\"changeText() { setTimeout(() => { this.setState({ message: \\\"你好啊 }); console.log(this.state.message); // 你好啊 }, 0); }\",\"上面的例子中，可以看到更新是同步\",\"再来举一个原生DOM事件的例子：\",\"componentDidMount() { const btnEl = document.getElementById(\\\"btn\\\"); btnEl.addEventListener('click', () => { this.setState({ message: \\\"你好啊,李银河\\\" }); console.log(this.state.message); // 你好啊,李银河 }) }\",\"重要\",\"在组件生命周期或React合成事件中，setState是异步 在setTimeout或者原生dom事件中，setState是同步\"]},\"616\":{\"h\":\"批量更新\",\"t\":[\"同样先给出一个例子：\",\"handleClick = () => { this.setState({ count: this.state.count + 1, }) console.log(this.state.count) // 1 this.setState({ count: this.state.count + 1, }) console.log(this.state.count) // 1 this.setState({ count: this.state.count + 1, }) console.log(this.state.count) // 1 }\",\"点击按钮触发事件，打印的都是 1，页面显示 count 的值为 2 对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行结果 上述的例子，实际等价于如下：\",\"Object.assign( previousState, {index: state.count+ 1}, {index: state.count+ 1}, ...)\",\"由于后面的数据会覆盖前面的更改，所以最终只加了一次 如果是下一个state依赖前一个state的话，推荐给setState一个参数传入一个function，如下：\",\"onClick = () => { this.setState((prevState, props) => { return {count: prevState.count + 1}; }); this.setState((prevState, props) => { return {count: prevState.count + 1}; }); }\",\"而在setTimeout或者原生dom事件中，由于是同步的操作，所以并不会进行覆盖现象\"]},\"617\":{\"c\":[\"React\"]},\"618\":{\"c\":[\"React\"]},\"619\":{\"h\":\"state和props\"},\"620\":{\"h\":\"state\",\"t\":[\"一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state，一般在 constructor 中初始化 当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用，并且重新调用组件render方法。\",\"class Button extends React.Component { constructor() { super(); this.state = { count: 0, }; } updateCount() { this.setState((prevState, props) => { return { count: prevState.count + 1 } }); } render() { return (<button onClick={() => this.updateCount()} > Clicked {this.state.count} times </button>); } }\",\"setState还可以接受第二个参数，它是一个函数，会在setState调用完成并且组件开始重新渲染时被调用，可以用来监听渲染是否完成\",\"this.setState({ name:'a' },()=>console.log('setState finished'))\"]},\"621\":{\"h\":\"props\",\"t\":[\"React的核心思想就是组件化思想，页面会被切分成一些独立的、可复用的组件 组件从概念上看就是一个函数，可以接受一个参数作为输入值，这个参数就是props，所以可以把props理解为从外部传入组件内部的数据 react具有单向数据流的特性，所以他的主要作用是从父组件向子组件中传递数据 props除了可以传字符串，数字，还可以传递对象，数组甚至是回调函数，如下：\",\"class Welcome extends React.Component { render() { return <h1>Hello {this.props.name}</h1>; } } const element = <Welcome name=\\\"Sara\\\" onNameChanged={this.handleName} />;\",\"上述name属性与onNameChanged方法都能在子组件的props变量中访问 在子组件中，props在内部不可变的，如果想要改变它看，只能通过外部组件传入新的props来重新渲染子组件，否则子组件的props和展示形式不会改变\"]},\"622\":{\"h\":\"区别\",\"t\":[\"相同点：\",\"两者都是 JavaScript 对象\",\"两者都是用于保存信息\",\"props 和 state 都能触发渲染更新 区别：\",\"props 是外部传递给组件的，而 state 是在组件内被组件自己管理的，一般在 constructor 中初始化\",\"props 在组件内部是不可修改的，但 state 在组件内部可以进行修改\",\"state 是多变的、可以修改\"]},\"623\":{\"c\":[\"React\"]},\"624\":{\"c\":[\"React\"]},\"625\":{\"h\":\"super()和super(props)的区别\"},\"626\":{\"h\":\"ES6类\",\"t\":[\"在ES6中，通过extends关键字实现类的继承，方式如下：\",\"class sup { constructor(name) { this.name = name } printName() { console.log(this.name) } } class sub extends sup{ constructor(name,age) { super(name) // super代表的事父类的构造函数 this.age = age } printAge() { console.log(this.age) } } let jack = new sub('jack',20) jack.printName() //输出 : jack jack.printAge() //输出 : 20\",\"在上面的例子中，可以看到通过super关键字实现调用父类，super代替的是父类的构建函数，使用super(name)相当于调用sup.prototype.constructor.call(this,name) 如果在子类中不使用super，关键字，则会引发报错，如下： 报错的原因是 子类是没有自己的this对象的，它只能继承父类的this对象，然后对其进行加工 而super()就是将父类中的this对象继承给子类的，没有super() 子类就得不到this对象 如果先调用this，再初始化super()，同样是禁止的行为\",\"class sub extends sup{ constructor(name,age) { this.age = age super(name) // super代表的事父类的构造函数 } }\",\"所以在子类constructor中，必须先代用super才能引用this\"]},\"627\":{\"h\":\"类组件\",\"t\":[\"在React中，类组件是基于es6的规范实现的，继承React.Component，因此如果用到constructor就必须写super()才初始化this 这时候，在调用super()的时候，我们一般都需要传入props作为参数，如果不传进去，React内部也会将其定义在组件实例中\",\"// React 内部 const instance = new YourComponent(props); instance.props = props; // props直接挂载到实例上\",\"所以无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的，是可以不写的：\",\"class HelloMessage extends React.Component{ render (){ return ( <div>nice to meet you! {this.props.name}</div> ); } }\",\"但是也不建议使用super()代替super(props) 因为在React会在类组件构造函数生成实例后再给this.props赋值，所以在不传递props且super的情况下，调用this.props为undefined，如下情况：\",\"class Button extends React.Component { constructor(props) { super(); // 没传入 props console.log(props); // {} console.log(this.props); // undefined // ... }\",\"而传入props的则都能正常访问，确保了 this.props 在构造函数执行完毕之前已被赋值，更符合逻辑，如下：\",\"class Button extends React.Component { constructor(props) { super(props); // 没传入 props console.log(props); // {} console.log(this.props); // {} // ... }\"]},\"628\":{\"h\":\"总结\",\"t\":[\"在React中，类组件基于ES6，所以在constructor中必须使用super 在调用super过程，无论是否传入props，React内部都会将porps赋值给组件实例porps属性中 如果只调用了super()，那么this.props在super()和构造函数结束之间仍是undefined\"]},\"629\":{\"c\":[\"React\"]},\"630\":{\"c\":[\"React\"]},\"631\":{\"h\":\"过渡动画\",\"t\":[\"在react中实现过渡动画效果会有很多种选择，如react-transition-group，react-motion，Animated，以及原生的CSS都能完成切换动画\"]},\"632\":{\"h\":\"实现\",\"t\":[\"在react中，react-transition-group是一种很好的解决方案，其为元素添加enter，enter-active，exit，exit-active这一系列勾子 可以帮助我们方便的实现组件的入场和离场动画 其主要提供了三个主要的组件：\",\"CSSTransition：在前端开发中，结合 CSS 来完成过渡动画效果\",\"SwitchTransition：两个组件显示和隐藏切换时，使用该组件\",\"TransitionGroup：将多个动画组件包裹在其中，一般用于列表中元素的动画\"]},\"633\":{\"h\":\"CSSTransition\",\"t\":[\"其实现动画的原理在于，当CSSTransition的in属性置为true时，CSSTransition首先会给其子组件加上xxx-enter、xxx-enter-active的class执行动画 当动画执行结束后，会移除两个class，并且添加-enter-done的class 所以可以利用这一点，通过css的transition属性，让元素在两个状态之间平滑过渡，从而得到相应的动画效果 当in属性置为false时，CSSTransition会给子组件加上xxx-exit和xxx-exit-active的class，然后开始执行动画，当动画结束后，移除两个class，然后添加-enter-done的class 如下例子：\",\"export default class App2 extends React.PureComponent { state = {show: true}; onToggle = () => this.setState({show: !this.state.show}); render() { const {show} = this.state; return ( <div className={'container'}> <div className={'square-wrapper'}> <CSSTransition in={show} timeout={500} classNames={'fade'} unmountOnExit={true} > <div className={'square'} /> </CSSTransition> </div> <Button onClick={this.onToggle}>toggle</Button> </div> ); } }\",\"对应css样式如下：\",\".fade-enter { opacity: 0; transform: translateX(100%); } .fade-enter-active { opacity: 1; transform: translateX(0); transition: all 500ms; } .fade-exit { opacity: 1; transform: translateX(0); } .fade-exit-active { opacity: 0; transform: translateX(-100%); transition: all 500ms; }\"]},\"634\":{\"h\":\"SwitchTransition\",\"t\":[\"SwitchTransition可以完成两个组件之间切换的炫酷动画 比如有一个按钮需要在on和off之间切换，我们希望看到on先从左侧退出，off再从右侧进入 SwitchTransition中主要有一个属性mode，对应两个值：\",\"in-out：表示新组件先进入，旧组件再移除；\",\"out-in：表示旧组件先移除，新组件再进入 SwitchTransition组件里面要有CSSTransition，不能直接包裹你想要切换的组件 里面的CSSTransition组件不再像以前那样接受in属性来判断元素是何种状态，取而代之的是key属性 下面给出一个按钮入场和出场的示例，如下：\",\"import { SwitchTransition, CSSTransition } from \\\"react-transition-group\\\"; export default class SwitchAnimation extends PureComponent { constructor(props) { super(props); this.state = { isOn: true } } render() { const {isOn} = this.state; return ( <SwitchTransition mode=\\\"out-in\\\"> <CSSTransition classNames=\\\"btn\\\" timeout={500} key={isOn ? \\\"on\\\" : \\\"off\\\"}> { <button onClick={this.btnClick.bind(this)}> {isOn ? \\\"on\\\": \\\"off\\\"} </button> } </CSSTransition> </SwitchTransition> ) } btnClick() { this.setState({isOn: !this.state.isOn}) } }\",\"css文件对应如下：\",\".btn-enter { transform: translate(100%, 0); opacity: 0; } .btn-enter-active { transform: translate(0, 0); opacity: 1; transition: all 500ms; } .btn-exit { transform: translate(0, 0); opacity: 1; } .btn-exit-active { transform: translate(-100%, 0); opacity: 0; transition: all 500ms; }\"]},\"635\":{\"h\":\"TransitionGroup\",\"t\":[\"当有一组动画的时候，就可将这些CSSTransition放入到一个TransitionGroup中来完成动画 同样CSSTransition里面没有in属性，用到了key属性 TransitionGroup在感知children发生变化的时候，先保存移除的节点，当动画结束后才真正移除 其处理方式如下：\",\"插入的节点，先渲染dom，然后再做动画\",\"删除的节点，先做动画，然后再删除dom\",\"如下：\",\"import React, { PureComponent } from 'react' import { CSSTransition, TransitionGroup } from 'react-transition-group'; export default class GroupAnimation extends PureComponent { constructor(props) { super(props); this.state = { friends: [] } } render() { return ( <div> <TransitionGroup> { this.state.friends.map((item, index) => { return ( <CSSTransition classNames=\\\"friend\\\" timeout={300} key={index}> <div>{item}</div> </CSSTransition> ) }) } </TransitionGroup> <button onClick={e => this.addFriend()}>+friend</button> </div> ) } addFriend() { this.setState({ friends: [...this.state.friends, \\\"coderwhy\\\"] }) } }\",\"对应css如下：\",\".friend-enter { transform: translate(100%, 0); opacity: 0; } .friend-enter-active { transform: translate(0, 0); opacity: 1; transition: all 500ms; } .friend-exit { transform: translate(0, 0); opacity: 1; } .friend-exit-active { transform: translate(-100%, 0); opacity: 0; transition: all 500ms; }\"]},\"636\":{\"c\":[\"React\"]},\"637\":{\"c\":[\"React\"]},\"638\":{\"h\":\"Typescript\"},\"639\":{\"h\":\"特性\",\"t\":[\"类型批注和编译时类型检查\",\"类型推断：未批准变量自动推断类型\",\"类型擦除：编译过程中批准的内容\",\"接口：ts中用接口来定义对象类型\",\"枚举：用于取值被限定在一定范围内的场景\",\"Mixin：可以接受任意类型的值\",\"泛型编程：写代码时使用一些以后才指定的类型\",\"名字空间：名字只在该区域内有效，其他区域可重复使用该名字而不冲突\",\"元组：元组合并了不同类型的对象，相当于一个可以装不同类型数据的数组\"]},\"640\":{\"h\":\"数据类型\",\"t\":[\"除了js自身的数据类型（不包含bigint，symbol），他还有以下类型： void、enum、tuple、any、never、array\"]},\"641\":{\"h\":\"高级类型\",\"t\":[\"严格来说，应该叫类型表达式\"]},\"642\":{\"h\":\"交叉类型\",\"t\":[\"使用 & 将多个类型合并在一起\"]},\"643\":{\"h\":\"联合类型\",\"t\":[\"使用 | 将类型联合起来（或）\"]},\"644\":{\"h\":\"类型别名\",\"t\":[\"可以作用于原始值、联合类型、元组以及其他需要手写的类型\",\"type some=boolean|string\",\"可以使用类型别名在属性里引用自己\",\"type Tree<T>={ value:T; left:Tree<T> }\"]},\"645\":{\"h\":\"类型索引\",\"t\":[\"keyof（索引查询）类似于object.keys，获取类型所有键，返回其联合类型\",\"type Test=keyof name\",\"T[k]（索引访问）获取某个属性的类型\",\"interface IPerson { name: string; age: number; } let type1: IPerson['name'] // string let type2: IPerson['age'] // number\",\"extends（泛型约束）继承一个或多个类型，获得属性\",\"const str = printLength('lin') const arr = printLength([1,2,3]) const obj = printLength({ length: 10 }) const num = printLength(10) // 报错，Argument of type 'number' is not assignable to parameter of type 'ILength'\"]},\"646\":{\"h\":\"映射类型\",\"t\":[\"将一个类型映射为另一个类型\",\"in，对联合类型实现遍历\",\"type Person = \\\"name\\\" | \\\"school\\\" | \\\"major\\\" type Obj = { [p in Person]: string }\",\"将T的所有属性映射为可选的\",\"interface IPerson { name: string age: number } type IPartial = Partial<IPerson> let p1: IPartial = {}\",\"将T的所有属性映射为只读的\",\"type IReadOnly = Readonly<IPerson> let p1: IReadOnly = { name: 'lin', age: 18 }\",\"Pick用于抽取对象子集，挑选一组属性并组成一个新的类型，例如：\",\"interface IPerson { name: string age: number sex: string } type IPick = Pick<IPerson, 'name' | 'age'> let p1: IPick = { name: 'lin', age: 18 }\",\"Record 是会创建新属性的非同态映射类型。\",\"type one=“person1”|“person2” type IRecord = Record<one, IPerson> let personMap: IRecord = { person1: { name: 'lin', age: 18 }, person2: { name: 'liu', age: 25 } }\"]},\"647\":{\"h\":\"条件类型\",\"t\":[\"与三元表达式一致，经常用于一些类型不确定的情况\",\"T extends U ? X : Y\"]},\"648\":{\"h\":\"类\",\"t\":[\"在ES6之后，JS拥有了class关键字，虽然本质上是构造函数，且仍然有一些特性还没有加入，比如修饰符和抽象类\"]},\"649\":{\"h\":\"定义\",\"t\":[\"class关键字紧接着类名，包含以下的数据成员：字段、构造函数、方法\",\"class car{ engine:string; constructor( engine:string){ this.engine=engine } }\"]},\"650\":{\"h\":\"继承\",\"t\":[\"类继承后，子类可以对父类的方法重新定义，通过super关键字引用父类的属性和方法\",\"class demo1{ doprint():void{} } class demo2 extends demo1{ doprint():void{ super.doprint() } }\"]},\"651\":{\"h\":\"修饰符\",\"t\":[\"TS添加了三种修饰符\",\"public：外部可以自由访问\",\"private：只能在类内部使用（es特性，#可定义私有属性）\",\"protect：子类和类的内部可以访问\",\"readonly：只读修饰符\"]},\"652\":{\"h\":\"静态属性(es自带能力)\",\"t\":[\"static定义的属性，属于类本身，而不是类的实例\",\"class demo1{ static width='100px' }\"]},\"653\":{\"h\":\"抽象类\",\"t\":[\"抽象类作为其他派生类的基类使用，抽象类可以包含成员的实现细节\",\"abstract class demo{ abstract fun():void; move():void{} }\",\"抽象类不能被实例化，需要创建子类去实现：\",\"class children extends demo{ fun(){} }\"]},\"654\":{\"h\":\"枚举\",\"t\":[\"用于声明一组命名的常数，当一个变量有几种可能的取值时，可以将他定义为枚举类型\",\"enum axxx {}\",\"有以下类型：\",\"数字枚举：声明而没有赋值，默认从0开始累加\",\"enum direction { up, //默认0 down }\",\"字符串枚举\",\"异构枚举：混合数字枚举和字符串枚举\"]},\"655\":{\"h\":\"原理\",\"t\":[\"本质上是对象，和构建对象的函数\",\"var direction; (function (direction){ direction[direction['up']=0]='up'; direction[direction['down']=0]='down' })\"]},\"656\":{\"h\":\"TS函数\",\"t\":[\"ts为函数添加了额外的功能\"]},\"657\":{\"h\":\"可选参数\",\"t\":[\"const add=(a:number,b?:number)=>a+(b?b:0)\"]},\"658\":{\"h\":\"剩余参数\",\"t\":[\"const add=(a:number,...rest:number[])=>rest.reduce(((a,b)=>a+b),a)\"]},\"659\":{\"h\":\"函数重载\",\"t\":[\"把精确的定义放在前面，函数实现时，使用|或者？操作符，把所有的尽可能的输入类型包含进去，用于具体实现。 只是多个函数的声明，具体逻辑还需要是西安\",\"// 声明 function add (arg1: string, arg2: string): string function add (arg1: number, arg2: number): number // 实现 function add (arg1: string | number, arg2: string | number) { // arg1 + arg2 if (typeof arg1 === 'string' && typeof arg2 === 'string') { return arg1 + arg2 } else if (typeof arg1 === 'number' && typeof arg2 === 'number') { return arg1 + arg2 } }\"]},\"660\":{\"h\":\"泛型\",\"t\":[\"在类型实例化时，才指明确切的类型 泛型通过<>的形式进行表述，可以声明：\",\"函数\",\"接口\",\"类\"]},\"661\":{\"h\":\"装饰器\",\"t\":[\"一种不改变原类和使用继承的情况下，动态地扩展对象功能 本质上是一个函数，@expression的形式是object.defineProperty的语法糖\"]},\"662\":{\"h\":\"使用\",\"t\":[\"实验特性，在tsconfig.json文件启动\",\"{ \\\"complierOptions\\\":{ \\\"target\\\":'ES5', \\\"experimentalDecorators\\\":true } }\",\"可以装饰：\",\"类\",\"function add(constructor:Function){ constructor.prototype.age=18 } @add class person{ name:string constructor(){ this.name='huihui' } } // 实际上等同于 Person=add(function person(){})\",\"当修饰类的时候，为每个实例化对象添加一个age属性 2. 方法/属性 此时装饰器接受参数如下：target对象原型、propertyKey方法名称、descriptor方法的属性描述符\",\"function method(target:any,propertyKey:string,descriptor:PropertyDescriptor){ descriptor.writable=false } class person{ @method say(){ return 'das' } }\",\"参数 此时装饰器接受参数如下：target对象原型、propertyKey方法名称、index参数数组中的位置\",\"function logParameter(target: Object, propertyName: string, index: number){ console.log(target); console.log(propertyName); console.log(index); } class Employee { greet(@logParameter message: string): string { return `hello ${message}`; } } const emp = new Employee(); emp.greet('hello');\",\"访问器 此时装饰器接受参数如下：target对象原型、propertyKey方法名称、descriptor方法的属性描述符\",\"function modification(target: Object, propertyKey: string, descriptor: PropertyDescriptor) { console.log(target); console.log(\\\"prop \\\" + propertyKey); console.log(\\\"desc \\\" + JSON.stringify(descriptor) + \\\"\\\\n\\\\n\\\"); }; class Person{ _name: string; constructor() { this._name = 'huihui'; } @modification get name() { return this._name } }\",\"装饰器工厂：可接受参数的装饰器\",\"function addAge(age: number) { return function(constructor: Function) { constructor.prototype.age = age } } @addAge(10) class Person{ name: string; age!: number; constructor() { this.name = 'huihui'; } } let person = new Person();\"]},\"663\":{\"h\":\"执行顺序\",\"t\":[\"当多个装饰器应用于一个声明上，将由上至下依次对装饰器表达式求值，求职的结果会被当作函数，由上到下依次调用\",\"function f() { console.log(\\\"f(): evaluated\\\"); return function (target, propertyKey: string, descriptor: PropertyDescriptor) { console.log(\\\"f(): called\\\"); } } function g() { console.log(\\\"g(): evaluated\\\"); return function (target, propertyKey: string, descriptor: PropertyDescriptor) { console.log(\\\"g(): called\\\"); } } class C { @f() @g() method() {} } // f(): evaluated g(): evaluated g(): called f(): called\"]},\"664\":{\"h\":\"命名空间和模块\",\"t\":[\"任何包含顶级import或者export文件都被视为一个模块，如果一个文件不带有，则它的内容被视为全局可见的 在ts中，export关键字可以导出类型\",\"export const a=1 export type person={ name:string }\"]},\"665\":{\"h\":\"命名空间\",\"t\":[\"命名空间定义了标识符的可见范围，一个标识符可在多个命名空间中定义，他在不同的命名空间中的含义互不相干 使用namespace来定义：\",\"namespace SomeNameSpaceName{ export interface SomeNameSpaceName{} export class SomeClassName{} } // 使用方法如下 SomeNameSpaceName.SomeClassName\",\"本质上是一个对象\",\"var SomeNameSpaceName; (function (SomeNameSpaceName){ SomeNameSpaceName.SomeNameSpaceName SomeNameSpaceName.SomeClassName })(SomeNameSpaceName||(SomeNameSpaceName={}))\"]},\"666\":{\"h\":\"区别\",\"t\":[\"正常的的TS项目开发过程中不建议使用命名空间，但通常在通过d.ts文件标记js库类型的时候使用命名空间\",\"命名空间不能识别组件之间的依赖关系\"]},\"667\":{\"h\":\"在vue中使用\",\"t\":[\"引入vue-property-decorator，主要的功能如下：\",\"methods可以直接声明为类的成员方法\",\"计算属性可以被声明为类的属性访问器\",\"初始化的data可以被声明为类属性\",\"data、render以及所有的Vue生命周期钩子能够直接作为类的成员方法\",\"其他所有的属性，需要放在装饰器中\"]},\"668\":{\"h\":\"@Component\",\"t\":[\"Component装饰器他注明了此类为一个vue组件，因此即使没有设置选项也不能忽略\",\"import {Component,Vue} from 'vue-property-decorator'; import {componentA,componentB} from '@/components'; @Component({ components:{ componentA,componentB, }, directives: { focus: { inserted: function (el) { el.focus() } } } }) export default class YourCompoent extends Vue{ }\"]},\"669\":{\"h\":\"computed、data、methods\",\"t\":[\"取消了组件的data和methods属性，\",\"@Component export default class HelloDecorator extends Vue { count: number = 123 // data add(): number { //method this.count + 1 } get total(): number { return this.count + 1 } set total(param:number): void { this.count = param } }\"]},\"670\":{\"h\":\"@props\",\"t\":[\"组件接受属性的装饰器,对应每一个属性\",\"import {Component,Vue,Prop} from vue-property-decorator; @Component export default class YourComponent extends Vue { @Prop(String) propA:string; @Prop([String,Number]) propB:string|number; @Prop({ type: String, // type: [String , Number] default: 'default value', // String Number required: true, validator: (value) => { return ['InProcess','Settled'].indexOf(value) !== -1 } }) propC:string; }\"]},\"671\":{\"h\":\"@watch\",\"t\":[\"监听器\",\"import { Vue, Component, Watch } from 'vue-property-decorator' @Component export default class YourComponent extends Vue { @Watch('child') onChildChanged(val: string, oldVal: string) {} @Watch('person', { immediate: true, deep: true }) onPersonChanged1(val: Person, oldVal: Person) {} @Watch('person') onPersonChanged2(val: Person, oldVal: Person) {} }\"]},\"672\":{\"h\":\"@emit\",\"t\":[\"import {Vue, Component, Emit} from 'vue-property-decorator'; @Component({}) export default class Some extends Vue{ mounted(){ // 监听事件 this.$on('emit-todo', function(n) {console.log(n)}) // 触发事件 this.emitTodo('world'); } // 注册事件 @Emit() emitTodo(n: string){console.log('hello');} }\"]},\"673\":{\"c\":[\"JS框架\"]},\"674\":{\"c\":[\"typescript\"]},\"675\":{\"h\":\"版本管理\",\"t\":[\"版本控制(Version control)，是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步。\",\"通过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号。\",\"一种简单的版本控制形式如下：赋给图的初版一个版本等级\\\"A\\\"。当做了第一次改变后，版本等级改为\\\"B\\\",以此类推。\",\"版本控制能提供项目的设计者，将设计恢复到之前任一状态的选择权。\",\"简言之，修改只要提交到版本控制系统，基本上都能找回，版本控制系统就像一台时光机器，可以让你回到任何一个时间点。\",\"优点：\",\"记录文件所有的历史变化，这是版本控制系统的基本能力\",\"随时恢复到任意时间点，历史记录功能使我们不怕改错代码了\",\"支持多功能并行开发，通常版本控制系统都支持分支，保证了并行开发的可行\",\"多人协作并行开发，对于多人协作项目、支持多人协作开发的版本管理系统将事半功倍\"]},\"676\":{\"h\":\"\",\"t\":[\"版本控制系统根据类别可以分成：\",\"本地版本控制系统\",\"集中式版本控制系统\",\"分布式版本控制系统\"]},\"677\":{\"h\":\"\",\"t\":[\"结构如下图所示： 优点：\",\"简单，很多系统中都有内置\",\"适合管理文本，如系统设置 缺点：\",\"其不支持远程操作，因此并不适合多人版本开发。\"]},\"678\":{\"h\":\"\",\"t\":[\"结构如下图所示： 优点：\",\"适合多人团队协作开发\",\"代码集中化管理 缺点：\",\"单点故障\",\"必须联网，无法单机工作 代表工具有SVN、CVS\"]},\"679\":{\"h\":\"\",\"t\":[\"TortoiseSVN是一款非常易于使用的跨平台的版本控制/源代码控制软件\"]},\"680\":{\"h\":\"\",\"t\":[\"CVS是版本控制系统，是源配置管理(SCM)的重要组成部分。使用它，您可以记录源文件和文档的历史记录。 老牌的版本控制系统，它是基于客户端/服务器的行为使其可以容纳多用户，构成网络也很方便。 这一特性使得CVS成为位于不同地点的人同时处理数据文件(特别是程序的源代码)时的首选。\"]},\"681\":{\"h\":\"\",\"t\":[\"结构如下图所示： 优点：\",\"适合多人团队协作开发\",\"代码集中化管理 缺点：\",\"可以离线工作\",\"每个计算机都是一个完整仓库 分布式版本管理系统每个计算机都有一个完整仓库，可本地提交，可做到离线工作，则不用像集中版本管理那样因为断网情况而无法工作 代表工具为Git、HG\"]},\"682\":{\"h\":\"\",\"t\":[\"Git是目前世界上最先进的分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所以事务特性：易于学习、占用内存小，具有闪电般快速的性能。 使用Git和Gitlab搭建版本控制环境是现在互联网公司最流行的版本控制方式\"]},\"683\":{\"h\":\"\",\"t\":[\"TortoiseHg是一个免费的分布式源代码管理工具。它可以有效地处理任何规模的项目，并提供简单直观的界面。MercurialHg是一种轻量级分布式版本控制系统，采用Python语言实现，易于学习和使用，扩展性强。\"]},\"684\":{\"h\":\"\",\"t\":[\"git是一个分布式版本控制软件，最初是为了更好地管理Linux内核开发而设计 分布式版本控制系统的客户端并不只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协调工作用的服务器发生故障、事后都可以用任何一个镜像出来的本地仓库恢复\",\"alt text\",\"项目开始，只有一个原始版仓库，别的机器可以clone这个原始版本库，那么所有的clone的机器，他们的版本库其实都是一样的，并没有主次之分。\",\"所以在实现团队协作的时候，只要有一台电脑充当服务器的角色，其他每个人都从这个”服务器“仓库clone一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。\",\"github实际就可以充当这个服务器角色，其是一个开源协作社区，提供Git仓库托管服务，既可以让别人参与你的开源项目，也可以参与别人的开源项目。\"]},\"685\":{\"h\":\"\",\"t\":[\"当我们通过git init创建或者git clone一个项目的时候，项目目录会隐藏一个==.git==子目录，其作用是用来跟踪管理版本的\",\"Git中所有数据在存储前都计算校验和，然后以校验和来引用，所以在我们修改或者删除文件的时候，Git能够知道Git用以计算校验和的机制叫做 SHA-1 散列(hash，哈希)。这是一个由40个十六进制字符(0-9和a-f)组成字符串，基于 Git 中文件的内容或目录结构计算出来，如下：\",\"24b9da6552252987aa493b52f8696cd6d3b00373\",\"当我们修改文件的时候，git就会修改文件的状态，可以通过git status进行查询，状态情况如下：\",\"已修改(modified)：表示修改了文件，但还没保存到数据库中。\",\"已暂存(staged)：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。\",\"已提交(committed)：表示数据已经安全的保存在本地数据库中。 文件状态对应的，不同状态的文件在Git中处于不同的工作区域，主要分成了四个部分：\",\"工作区：相当于本地写代码的区域，如git clone一个项目到本地，相当于本地克隆了远程仓库项目的一个副本\",\"暂存区：暂存区是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中\",\"本地仓库：提交更新，找到暂存区域的文件，将快照永久性存储到Git本地仓库\",\"alt text\"]},\"686\":{\"h\":\"\",\"t\":[\"git常用的命令\",\"add：提交全部文件修改到缓存区\",\"commit：\",\"push\",\"pull\",\"clone\",\"checkout\"]},\"687\":{\"h\":\"配置命令\",\"t\":[\"Git自带一个git config的工具来帮助设置控制Git外观和行为的配置变量，在我们安装完git之后，第一件事就是设置你的用户名和邮件地址。\",\"后续每一个提交都会使用这些信息。他们会写入你的每一次提交中，不可更改。\",\"设置提交代码的用户信息命令如下：\",\"git config [--global] user.name \\\"[name]\\\"\",\"git config [--global] user.email \\\"[email address]\\\"\"]},\"688\":{\"h\":\"启动命令\",\"t\":[\"一个git项目的初始有两个途径，分别是：\",\"git init [project-name]：创建或在当前目录初始化一个git代码库\",\"git init url：下载一个项目和他的整个代码历史\"]},\"689\":{\"h\":\"日常基本操作\",\"t\":[\"git init：初始化仓库，默认为master分支\",\"add：提交全部文件修改到缓存区\",\"add <具体文件路径+全名>：提交某些文件到缓冲区\",\"git diff：查看当前代码add后，会add哪些内容\",\"git diff --staged：查看现在commit提交后，会提交哪些内容\",\"git status：查看当前分支状态\",\"git pull <远程仓库名> <远程分支名>：拉取远程仓库的分支与本地当前分支\",\"git pull <远程仓库名> <远程分支名> <本地分支名>：拉取远程仓库的分支与本地的某个分支合并\",\"git commit --amend [file1] [file2]：重做上一次commit，并包括指定文件的新变化\",\"git commit -v:提交时显示所有的diff信息\",\"git commit -m [message]：提交代码到本地仓库，并写提交信息[message]\",\"关于提交信息的格式，可以遵循以下的规则：\",\"feat：新特性，添加功能\",\"fix：修改bug\",\"refactor：代码重构\",\"docs：文档修改\",\"style：代码格式修改\",\"test：测试用例修改\",\"chore：其他修改，比如构建流程，依赖管理\"]},\"690\":{\"h\":\"分支操作\",\"t\":[\"git branch：查看本地所有分支\",\"git branch -r：查看远程所有的分支\",\"git branch -a：查看本地和远程所有的分支\",\"git merge <分支名>：合并分支\",\"git merge --abort：合并分支出现冲突时，取消合并，一切回到合并前的状态\",\"git branch <新分支名>：基于当前分支，新建一个分支\",\"git checkout --orphan <新分支名>：新建一个空分支，会保留之前分支的所有文件\",\"git branch -D <分支名>：删除本地某个分支\",\"git push <远程库名>:<分支名>：删除某个远程分支\",\"git branch <新分支名><提交ID>：从提交历史恢复某个删除掉的某个分支\",\"git branch -m <原分支名> <新分支名>：分支更名\",\"git checkout <分支名>：切换到本地某个分支\",\"git checkout <远程库名>/<分支名>：切换到线上某个分支\",\"git checkout -b <新分支名>：基于当前分支新建分支，并切换为这个分支\"]},\"691\":{\"c\":[\"版本控制工具\"]},\"692\":{\"c\":[\"Git\"]},\"693\":{\"h\":\"部署到服务器后404\",\"t\":[\"在history模式下的问题，但在hash模式下没有问题 history的路由切换会被当成http请求 配置将任何页面重定向到index.html，把路由交给前端处理\"]},\"694\":{\"c\":[\"JS框架\"]},\"695\":{\"c\":[\"Vue\"]},\"696\":{\"h\":\"组件通信\",\"t\":[\"组件通信主要分为以下几类：\",\"父子组件通信：props、$emit\",\"兄弟组件通信：父组件中转（a触发事件，父组件通过props传递b），全局状态管理。\",\"跨级组件通信：provide/inject\",\"全局组件通信（非关系组件间通信）:全局状态管理、事件总线（vue2）、全局变量 vue中有如下的常规通信方案（8）:\",\"props\",\"$emit\",\"ref实例：通过 ref 属性获取子组件实例，调用其方法或访问属性。\",\"eventBus（vue2）\",\"attrs与$ listeners：属性继承与事件转发,在vue3中被统一为attrs attrs透传：用于存储​​父组件通过 v-bind 传递给当前组件的所有非 props 属性​​的对象。这些属性未被当前组件声明为 props（或未被 inheritAttrs 配置排除），因此不会被当前组件直接使用，但可以被透传给子组件。会自动绑定根元素。\",\"// Wrapper 组件 export default { inheritAttrs: false, // 禁用自动绑定到根元素 // ... }; // 此时，$attrs 仍会存储父组件传递的属性，但不会自动绑定到根元素，需手动通过 v-bind=\\\"$attrs\\\" 传递给子组件。\",\"listeners 是 Vue2 中用于存储​​父组件通过 v-on 绑定到当前组件的所有事件监听器​​的对象。它的键是事件名（如 click、input），值是对应的回调函数。\",\"<!-- 父组件 Parent.vue --> <template> <Wrapper @click=\\\"handleWrapperClick\\\" @input=\\\"handleInputChange\\\" /> </template> <!-- Wrapper 组件 --> <template> <!-- 透传属性和事件到 Input 组件 --> <Input v-bind=\\\"$attrs\\\" v-on=\\\"$listeners\\\" /> </template>\",\"provide/inject\",\"$parent 或$root:通过共同祖辈$parent或者$root搭建通信桥连\",\"// a this.$parent.$emit('foo') // b this.$parent.$on('foo', this.handle)\",\"Vuex特殊：路由传参\"]},\"697\":{\"c\":[\"JS框架\"]},\"698\":{\"c\":[\"Vue\"]},\"699\":{\"h\":\"修饰符\",\"t\":[\"修饰符处理了许多DOM事件的细节 五种修饰符：\",\"表单修饰符 \",\"lazy：change事件之后进行同步\",\"trim：过滤首空格\",\"number：转为数值类型，内部调用parseFloat，如果无法解析，返回原来值\",\"事件修饰符：支持链式调用 \",\"stop：阻止事件冒泡，event.stopPropagation方法\",\"prevent：阻止事件的默认行为，event.preventDefault方法\",\"self：当元素自身时触发处理函数\",\"once：绑定了事件以后只能触发一次\",\"capture：向下捕获事件，向下传递事件\",\"passive：相当于给onscroll事件整了一个.lazy修饰符\",\"native：让组件变得像内置标签那样监听根元素的原生事件，否则只会监听自定义事件\",\"鼠标按键修饰符 \",\"left、right、middle\",\"键盘修饰符\",\"v-bind修饰符 \",\"async：双向绑定\",\"prop：自定义标签属性\",\"camel：将命名变为驼峰命名法\"]},\"700\":{\"c\":[\"JS框架\"]},\"701\":{\"c\":[\"Vue\"]},\"702\":{\"h\":\"vue权限管理\",\"t\":[\"权限控制，确保用户只能访问到被分配的资源 前端权限归根结底是请求的发起权，页面加载触发、按钮点击触发\",\"可以分为四个方面：\",\"接口权限 jwt验证\",\"按钮权限 \",\"v-if\",\"自定义指令\",\"菜单权限 \",\"菜单与路由分离，菜单由后端返回，缺点：菜单与路由做一一对应，全局路由守卫里，每次路由跳转都要做判断\",\"菜单和路由都有后端返回，缺点：全局路由守卫里，每次路由跳转都要做判断；前后端配合要求更高\",\"路由权限 \",\"在路由上标记相应的权限信息，每次路由跳转前做校验\",\"四种缺点： \",\"如果路由很多，对性能会有影响\",\"全局路由守卫里，每次路由跳转都要做权限判断\",\"菜单信息写死在前端，要改个文字或权限信息，都需要重新编译\",\"菜单和路由耦合在一起，定义路由的时候还有添加菜单显示标题，图表之类的信息，而且路由不一定作为菜单显示，还需要更多的字段进行标识\",\"初始化，先挂在不需要权限控制的路由，用户登陆后，获取用户的权限信息，筛选出有权限的路由，在全局路由守卫中调用addRoutes添加路由\",\"缺点： \",\"全局守卫里，每次路由跳转都要做判断\",\"菜单信息写死在前端，要改个文字或权限信息，都需要重新编译\",\"菜单和路由耦合在一起，定义路由的时候还有添加菜单显示标题，图表之类的信息，而且路由不一定作为菜单显示，还需要更多的的字段进行标识\"]},\"703\":{\"c\":[\"JS框架\"]},\"704\":{\"c\":[\"Vue\"]},\"705\":{\"h\":\"SPA\",\"t\":[\"SPA，单页应用SPA是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互\"]},\"706\":{\"c\":[\"JS框架\"]},\"707\":{\"c\":[\"Vue\"]},\"708\":{\"h\":\"虚拟dom\",\"t\":[\"虚拟DOM是对一层真实DOM的抽象，以js对象作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。 在js对象中，虚拟DOM表现为一个Object对象。并且至少包含签名（tag）、属性（attrs）和子元素对象（children）\"]},\"709\":{\"h\":\"为什么需要\",\"t\":[\"DOM是很慢的，页面的性能问题，大部分是由DOM操作引起的。 一次操作时，需要更新10个dom节点，浏览器会依次执行10次更新操作。 而通过vnode，同样的更新10个dom节点，虚拟dom不会立即操作dom，而是将这10次更新内容保存在本地的一个js对象中，最终将这个js对象一次性attach到dom树上，避免大量的无谓计算。\"]},\"710\":{\"c\":[\"JS框架\"]},\"711\":{\"c\":[\"Vue\"]},\"712\":{\"h\":\"动态添加属性的问题\",\"t\":[\"通过函数运行时的为组件添加属性，页面不会触发更新\"]},\"713\":{\"h\":\"原理\",\"t\":[\"vue2使用object.defineProperty实现的数据响应式，由此可见对定义时存在的属性都进行这样的操作 新增的属性自然不具备响应式\"]},\"714\":{\"h\":\"解决\",\"t\":[\"若想实现数据与视图更新 Vue.set()向一个响应式对象中添加一个property，并确保这个新的property同样是响应式的 defineReactive新增属性的响应式 Object.assign() 创建一个新的对象，合并原对象和混入对象的属性\",\"this.someObject=Object.assign({},this.someObject,{newProperty1:1})\",\"$forceUpdated() 当需要做强制更新，九成的情况是，在某个地方写错了迫使Vue实例重新渲染，只影响实例本身和使用插槽的子组件。\"]},\"715\":{\"c\":[\"JS框架\"]},\"716\":{\"c\":[\"Vue\"]},\"717\":{\"h\":\"组件和插件的区别\",\"t\":[\"组件是把图形、非图形的各种逻辑均抽象为一个统一的概念来实现的开发模式 优势：\",\"降低系统的耦合度，保持接口不变的情况下，替换不同的组件快速完成需求\",\"调试方便，出现问题时可以用排除法直接移除组件、快速定位问题\",\"提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，使用对代码进行优化可获得系统的整体升级\",\"插件用来给Vue添加全局功能：\",\"添加全局方法或属性：vue-custom-element\",\"添加全局资源：指令、过滤器、过渡，vue-touch\",\"全局混入来添加一些组件选项：vue-router\",\"添加Vue实例方法，通过把他们添加到Vue.prototype上实现\",\"一个库，提供自己的api\"]},\"718\":{\"h\":\"区别\",\"t\":[\"组件有vue单文件，插件暴露了一个install函数 组件注册有全局注册和局部注册，插件使用Vue.use进行注册\"]},\"719\":{\"h\":\"场景\",\"t\":[\"组件是业务模块，插件是功能模块\"]},\"720\":{\"c\":[\"JS框架\"]},\"721\":{\"c\":[\"Vue\"]},\"722\":{\"h\":\"跨域问题\",\"t\":[\"跨域是浏览器基于同源策略的安全手段\",\"同源有三个部分：\",\"协议相同\",\"主机相同\",\"端口相同\",\"非同源请求，则发生了跨域\"]},\"723\":{\"h\":\"方法\",\"t\":[\"jsonp\",\"cors 跨域资源共享，一系列的HTTP头组成，决定了是否阻止前端代码获取跨域请求的响应\",\"proxy 代理，网络代理，允许一个通过这个服务与另一个网络终端进行非直接的连接 vue.config.js文件配置，最终发布上线时如果web应用和接口服务器不在一起仍会跨域 通过服务端实现代理请求转发，express、nginx\"]},\"724\":{\"c\":[\"JS框架\"]},\"725\":{\"c\":[\"Vue\"]},\"726\":{\"h\":\"data属性为何是一个函数\",\"t\":[\"在实例中可以定义为对象或函数 如果是为组件只能是一个函数\"]},\"727\":{\"h\":\"区别\",\"t\":[\"定义好组件时，vue最终都会通过vue.extend()构建组件实例 如果采用对象的data，每个组件的实例都会共用一个内存地址 采用函数返回一个全新的data形式\"]},\"728\":{\"h\":\"原理\",\"t\":[\"data初始化时，对象或函数都可以 组件创建时进行选项合并，vm实例为undefined，进入if判断 如果类型不是函数，则发出警告\"]},\"729\":{\"c\":[\"JS框架\"]},\"730\":{\"c\":[\"Vue\"]},\"731\":{\"h\":\"diff算法\",\"t\":[\"一种通过同层的树节点进行比较的高效算法\",\"比较只会再同层级进行,不会跨层级比较\",\"在diff比较的过程中,循环从两边向中间收拢 例子 第一次循环结束后,发现新旧节点D相同,diff后将他作为第一个真实节点,同时endindex移动到c. 第二次循环后,新旧节点c相同,diff后建立c的真实节点,startindex移动到e,endindex移动到b 第三次循环,没有发现e,直接创建新的真实节点E,startindex移动到a 第四次循环,diff创建了a的真实节点,startindex移动到b 第五次循环,创建b的真实节点,startindex已经大于endindex,需要创建newStrtIdx和newEndIdx之间的所有节点,即F startindex已经大于endindex,退出循环,创建newStrtIdx和newEndIdx之间的所有节点,即F\"]},\"732\":{\"h\":\"原理\",\"t\":[\"当数据发生改变时,set方法会调用Dep.notify通知所有的订阅者Watcher,订阅者就会调用pacth给真实DOM打补丁,更新相应的视图\",\"patch方法接受参数,oldVnode和Vnode 主要做了如下判断: 没有新节点,直接触发旧节点的destory钩子 没有旧节点,直接createElm新建节点 新旧节点自身一样,通过sameVnode判断节点是否一样,一样时,直接调用patchVnode去处理这两个节点 新旧节点自身不一样,直接创建新节点,删除旧的节点\",\"patchVnode 主要做了如下判断: 是否是文本节点,如果是,直接更新文本内容 如果存在子节点,则处理比较更新子节点 只有新节点有子节点,旧节点没有,所有的节点都是全新的,直接新建所有的新DOM,并且加入父节点 只有旧节点有子节点,把所有的旧节点删除,直接删除DOM\",\"子节点不完全一致,调用updateChildren 处理了五种情景: 新老节点的start相同,直接patchVnode,新老节点的start索引+1 新老节点的end相同,直接patchVnode,新老节点的end索引-1 老节点的start和新节点的end相同时,patchVnode后,将当前真实DOM移动到oldEndVnode后面,老节点的start索引+1,新节点的end索引-1 老节点的start和新节点的end相同时,patchVnode后,将当前真实DOM移动到oldEndVnode前面,老节点的end索引-1,新节点的start索引+1 如果不满足以上四种情况,则没有节点可以复用，分为以下两种情况 从旧的vnode为key值，对应的index序列为value值的哈希表中寻找到与newStartVnode一致key的旧的vnode节点，在进行patchVnode，同时将这个真实dom移动到oldstartVnode对应的真实dom的前面 调用createElm创建一个新的dom节点放到newStartIdx的位置\"]},\"733\":{\"h\":\"总结\",\"t\":[\"数据发生改变时，订阅者watcher就会调用patch给真实dom打补丁 通过isSameVnode进行判断，相同则调用patchVnode方法 patchVnode方法做了以下操作：\",\"找到对应的真实dom，称为el\",\"如果都有文本节点且不相等，将el文本节点设置为Vnode的文本节点\",\"如果oldVnode有子节点而Vnode没有，则删除el子节点\",\"如果oldVnode没有子节点而Vnode有，则将vnode的子节点真实化后添加到el\",\"如果两者都有子节点，则执行updateChildren函数比较子节点 updateChildren主要做了以下操作\",\"设置新旧Vnode的头尾指针\",\"新旧头尾指针进行比较，向循环中间靠拢，根据情况调用patchVnode进行patch重复流程、调用createElem创建一个新节点，从哈希表寻找key一致的Vnode节点再分情况操作\"]},\"734\":{\"c\":[\"JS框架\"]},\"735\":{\"c\":[\"Vue\"]},\"736\":{\"h\":\"自定义指令\",\"t\":[\"在vue中提供了一套数据驱动视图更为方便的操作，称之为指令\"]},\"737\":{\"h\":\"实现\",\"t\":[\"通过Vue.directive方法进行注册 第一个参数是指令的名字，第二个参数可以是对象数据，也可以是一个指令函数 自定义指令也存在钩子函数：\",\"bind：只调用一次，指令第一次绑定到元素时调用\",\"inserted：被绑定元素插入父节点时调用\",\"update：所在组件的Vnode更新时调用，可能发生在其子Vnode更新之前。\",\"componentUpdated：指令所在的组件Vnode及其子Vnode全部更新后调用\",\"unbind：只调用一次，指令与元素解绑时调用 钩子函数的参数：\",\"el：指令绑定的元素，可以操作dom\",\"binding：包含余下属性的对象 \",\"name\",\"value：绑定值\",\"oldValue：指令绑定的前一个值，只在update、componentUpdated可使用\",\"expression：字符串形式的指令表达式\",\"arg：传给指令的参数，可选\",\"modifiers：一个包含修饰符的对象\",\"vnode：虚拟节点\",\"oldVnode：上一个虚拟节点，只在update、componentUpdated可使用\"]},\"738\":{\"h\":\"场景\",\"t\":[\"防止表单重复提交 图片懒加载 一键copy的功能\"]},\"739\":{\"c\":[\"JS框架\"]},\"740\":{\"c\":[\"Vue\"]},\"741\":{\"h\":\"错误处理\",\"t\":[\"主要的错误来源包括：\",\"后端接口错误\",\"代码中本身逻辑错误 设置全局错误处理函数 生命周期钩子\"]},\"742\":{\"c\":[\"JS框架\"]},\"743\":{\"c\":[\"Vue\"]},\"744\":{\"h\":\"过滤器\",\"t\":[\"自定义过滤器，用于一些常见的文本格式化（vue3中已废弃 他是管道式的\"]},\"745\":{\"h\":\"使用\",\"t\":[\"双花括号插值，v-bind表达式\"]},\"746\":{\"h\":\"定义\",\"t\":[\"在选项filters中定义，过滤器函数总接受表达式的值作为第一个参数\"]},\"747\":{\"h\":\"应用场景\",\"t\":[\"单位转换，数字打点，文本格式化，时间格式化\"]},\"748\":{\"h\":\"原理\",\"t\":[\"模板编译阶段过滤器表达式将会被编译为过滤器函数，\",\"_f函数全名为resolveFilter，这个函数的作用是从this.$options.filters中找出注册的过滤器并返回\",\"_s函数的全称是toString，过滤器处理后的结果会当作当前参数传递给toString函数，执行的结果保存到vnode中的text属性中\"]},\"749\":{\"c\":[\"JS框架\"]},\"750\":{\"c\":[\"Vue\"]},\"751\":{\"h\":\"v-if、v-for、v-show\"},\"752\":{\"h\":\"v-if和v-for的优先级\",\"t\":[\"<div id=\\\"app\\\"> <p v-if=\\\"show\\\" v-for=\\\"item in list\\\"> {{item.title}} </p> </div>\",\"vue模板编译时，会将指令系统转为可执行的render函数，模板指令的代码都会生成在render函数中，通过app.$options.render就可以得到渲染函数\",\"function anoymous() { with(this) { return _c(\\\"div\\\", {attrs: {id: \\\"app\\\"} }, // _l是vue的列表渲染函数 _l((list),function(item) { return (isShow) ? _c(\\\"p\\\", [_v(\\\"\\\\n\\\"+ _s(item.title))]) : _e() }),0)} }\",\"显然v-for优先级比v-if高\"]},\"753\":{\"h\":\"当v-if和v-for置于不同的标签中\",\"t\":[\"<div id=\\\"app\\\"> <template v-if=\\\"isShow\\\"> <p v-for=\\\"item in list\\\">{{item.title}}</p > </template> </div>\",\"对应的渲染函数\",\"function anoymous() { with(this) { return _c(\\\"div\\\", {attrs: {id: \\\"app\\\"} }, [(isShow) ? [_v(\\\"\\\\n\\\"), _l((list),function(item){return _c(\\\"p\\\", [_v(_s(item.title))])})]: _e()], 2 )} }\",\"模板编译器代码，接收一个抽象语法树(AST)节点el和一个状态对象state，然后根据不同的条件返回相应的生成代码字符串。\",\"export function genElement(el:ASTElement,state:CodegenState):string { // 预处理标志 if(el.parent){ el.pre = el.pre || el.parent.pre } // 静态根节点 if(el.staticRoot && !el.staticProcessed){ return genStatic(el,state) } // v-once指令 else if(el.once && !el.onceProcessed){ return genOnce(el,state) } // v-for指令 else if(el.for && !el.forProcessed){ return genFor(el,state) } // v-if指令 else if(el.if && !el.ifProcessed){ return genIf(el,state) } // 模板标签处理 else if(el.tag === 'template' && !el.slotTarget && !state.pre){ return genChildren(el,state) || 'void 0' } // 插槽处理 else if(el.tag === 'slot'){ return genSlot(el,state) } // 组件或普通元素处理 else { // component or element } }\"]},\"754\":{\"h\":\"注意和结论\",\"t\":[\"不同时使用使用在同一个标签上，如果条件出现在循环内部，可以用computed提前过滤那些不需要显示的项。\",\"computed:{ items:function(){ return this.list.filter(item=>{ return item.show }) } }\",\"vue3和vue2的v-for不同\",\"在vue2中v-for优先级高于v-if。 在vue3中v-if优先级高于v-for。\"]},\"755\":{\"h\":\"v-if和v-show\"},\"756\":{\"h\":\"共同点\",\"t\":[\"v-if和v-show都是用于控制元素显示隐藏的指令.\",\"<div v-if=\\\"show\\\">...</div> <div v-show=\\\"show\\\">...</div>\"]},\"757\":{\"h\":\"不同点\",\"t\":[\"控制手段：v-show隐藏是为元素添加css属性display：none，dom元素依然存在。v-if隐藏是将dom元素整个添加或删除。\",\"编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重新组件内部的事件监听和子组件。v-show只是简单的改变css属性。\",\"编译条件：v-if是真正的条件渲染，确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。 v-if的状态更改，会触发组件的生命周期。 v-show是纯样式控制，不会触发组件的生命周期。\"]},\"758\":{\"h\":\"解析原理\",\"t\":[\"解析流程:\",\"将模板template转为ast结构的JS对象\",\"用ast得到的js对象拼装成render和staticRenderFns函数\",\"render和staticRenderFns函数被调用后生成虚拟VNODE节点，该节点包含创建DOM节点所需信息\",\"vm.patch函数通过虚拟DOM算法利用VNODE节点创建真实DOM节点\"]},\"759\":{\"h\":\"v-show原理\",\"t\":[\"源码中v-show指令的实现。\",\"// 对象形式的指令 export const vShow:ObjectDirective<VSowElement> = { // 处理v-show的初始状态。 // 如果使用<Transition>组件，会传入过渡对象 beforeMount(el,{value},{transition}){ // 保存display原始值 el._vod = el.style.display === 'none' ? '' : el.style.display // 如果有过渡效果，执行beforeEnter if(transition && value){ transition.beforeEnter(el) } else { // 设置display setDisplay(el,value) } }, // 元素挂载后处理v-show的过渡动画 mounted(el,{value},{transition}){ if(transition && value){ transition.enter(el) } } updated(el,{value,oldValue},{transition}){ // } // 在元素卸载前确保 v-show 的状态被正确应用。 beforeUnmount(el,{value}){ setDisplay(el,value) } }\"]},\"760\":{\"h\":\"v-if原理\",\"t\":[\"返回一个node节点，render函数通过表达式的值来决定是否生成DOM transformIf结构化指令（createStructuralDirectiveTransform工具函数创建）通常会改变整个 AST 结构，比如 v-if 会影响节点是否被包含在最终的渲染函数中。\",\"export const transformIf = createStructuralDirectiveTransform( // 匹配所有 v-if、v-else-if、v-else 指令。 /^(if|else-if|else)$/, (node,dir,context) => { return processIf(node,dir,context,(ifNode,branch,isRoot)) => { // ... // 返回一个延迟执行的函数（闭包），用于实际构建条件分支的代码节点。 return () => { if(isRoot){ // 为整个 ifNode 设置主分支； ifNode.codegenNode = createCodegenNodeForBranch( branch, key, context ) as IfConditionalExpression; } else { // 找到父级条件节点，并将当前分支作为 alternate（即 else 或 else if）添加进去； const parentCondition = getParentCondition(ifNode.codegenNode!) parentCondition.alternate = createCodegenNodeForBranch( branch, key + ifNode.branches.length - 1, context ) } } } } )\",\"假设流程如下\",\"<div v-if=\\\"a\\\">A</div> <div v-else-if=\\\"b\\\">B</div> <div v-else>C</div>\",\"Vue编译器会将其转换为：\",\"a ? renderA() : b ? renderB() : renderC()\"]},\"761\":{\"c\":[\"JS框架\"]},\"762\":{\"c\":[\"Vue\"]},\"763\":{\"h\":\"keep-alive\",\"t\":[\"能在组件切换过程中将状态保留在内存中，防止重复渲染dom 可以设置以下props属性：\",\"include\",\"exclude\",\"max 设置了缓存的组件会多出来两个生命周期钩子（activated、deactivated）\"]},\"764\":{\"h\":\"场景\",\"t\":[\"首页-列表页-商详页-再返回，列表页应该缓存 首页-列表页-商详页-返回列表页（缓存-返回到首页（缓存-再次进入列表页（不缓存 利用路由元信息，在keep-alive判断是否需要缓存\"]},\"765\":{\"h\":\"获取缓存后组件的数据\",\"t\":[\"每次组件渲染时，都会执行beforeRouteEnter,next方法中可以拿到组件实例，vm.getData\",\"缓存的组件被激活时，都会执行actived钩子，可以从里面拿到\"]},\"766\":{\"c\":[\"JS框架\"]},\"767\":{\"c\":[\"Vue\"]},\"768\":{\"h\":\"key的作用\",\"t\":[\"key是每一个vnode的唯一id，也是diff的一种优化策略，根据key更准确的找到对应的vnode节点 vue就会使用就地复地原则：最小化element的移动，并且最大程度在同适当的地方对同类型的element，做patch或者reuse 如果使用key，根据keys的顺序记录element，曾经拥有key的element如果不再出现的话，会被直接remove或者destoryed\"]},\"769\":{\"h\":\"设置key与不设置key的差异\",\"t\":[\"<body> <div id=\\\"app\\\"> <p v-for=\\\"item in list\\\" :key=\\\"item\\\">{{item}}</p > </div> <script src=\\\"../../dist/vue.js\\\"></script> <script> const app = new Vue({ el: '#app', data: { list: ['a','b','c','d','e'] }, mounted() { setTimeout(() => { this.list.splice(2,0,'f') },2000) } }) </script> </body>\",\"在不使用key的情况，vue会进行这样的操作：\",\"比较A,A,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较B,B,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较C,F,相同类型的节点，进行patch，数据不同，发生dom操作\",\"比较D,C,相同类型的节点，进行patch，数据不同，发生dom操作\",\"比较E,D,相同类型的节点，进行patch，数据不同，发生dom操作\",\"循环结束，将E插入到DOM中 一共发生了3次更新，1次插入操作 在使用key的情况，vue会进行这样的操作：\",\"比较A,A,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较B,B,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较C,F,不同类型的节点 比较E,E,相同类型的节点，进行patch，但数据相同，不发生dom操作 接着从末尾向内收缩比较\",\"比较D,D,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较C,C,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"循环结束，将F插入到C之前 一共发生了0次更新，1次插入操作\",\"重要\",\"对于以上，不使用key会依次比较，数据不同发生dom操作，c与f、d与c、e与d 如果使用key，vue只会更改顺序，将f插入到c之前\"]},\"770\":{\"h\":\"原理\",\"t\":[\"Diff算法中的核心函数：sameVnode，用于判断两个虚拟节点（vnode）是否可以复用。这个函数在 Vue 的 patch 过程中被广泛使用，特别是在 diff 算法进行新旧节点对比时。\",\"function sameVnode(a, b) { // key是否相同 return a.key === b.key && ( ( // 标签名是否一致 a.tag === b.tag && // 是否为注释节点 a.isComment === b.isComment && // 是否定义data isDef(a.data) === isDef(b.data) && // 如果是 <input> 元素，检查类型是否一致（如 text、password） sameInputType(a, b) ) || ( // 如果是如果是异步占位符节点（async component placeholder） isTrue(a.isAsyncPlaceholder) && // 占位符节点的工厂函数是否一致 a.asyncFactory === b.asyncFactory && // 占位符节点是否没有错误 isUndef(b.asyncFactory.error) ) ) }\",\"虚拟 DOM Diff 算法的核心部分，用于高效地更新子节点列表（children），即 updateChildren 函数。它通过比较新旧虚拟节点数组，并尽可能复用和移动现有 DOM 节点，来提升性能。\",\"fucntion updateChildren( // 父级真实dom parentElm, // 旧的子虚拟节点数组 oldCh, // 新的子虚拟节点数组 newCh, // 插入的新的vnode队列 insertedVnodeQueue, // 是否只是删除节点 removeOnly){ // ... // 使用双指针从头尾向中间逼近的方式进行比较。 while(oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx){ if(isUndef(oldStartVnode)){ // ... } else if(isUndef(oldEndVnode)){ // ... } // 头头匹配 else if(sameVnode(oldStartVnode,newStartVnode)){ // patch更新 // 移动两个指针向前：oldStartIdx++, newStartIdx++ // ... } // 尾尾匹配 else if(sameVnode(oldEndVnode,newEndVnode)){ // patch更新 // 指针向后移动：oldEndIdx--, newEndIdx-- // ... } // 旧头和新尾匹配 else if(sameVnode(oldStartVnode,newEndVnode)){ // patch 并将对应 DOM 移动到末尾； // 指针移动：oldStartIdx++, newEndIdx-- // ... } // 旧尾和新头匹配 else if(sameVnode(oldEndVnode,newStartVnode)){ // patch 并将对应 DOM 移动到开头； // 指针移动：oldEndIdx--, newStartIdx++ // ... } else{ // 使用 createKeyToOldIdx 建立一个 key 到老节点索引的映射表，便于快速查找。 if(isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh,oldStartIdx,oldEndIdx) // 新节点在旧节点中的位置 idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode,oldCh,oldStartIdx,oldEndIdx) if(isUndef(idxInOld)){ // 创建新节点 createElm(newStartVnode,insertedVnodeQueue,parentElm,oldStartVnode.elm,false,newCh,newStartIdx) } else { vnodeToMove = oldCh[idxInOld] if(sameVnode(vnodeToMove,newStartVnode)){ // 更新节点 patchVnode(vnodeToMove,newStartVnode,insertedVnodeQueue,newCh,newStartIdx) // 标记为已处理 oldCh[idxInOld] = undefined // 移动节点 canMove && nodeOps.insertBefore(parentElm,vnodeToMove.elm,oldStartVnode.elm) } // 如果找到key值相同,但类型不同 else { // 不匹配则新建 createElm(newStartVnode,insertedVnodeQueue,parentElm,oldStartVnode.elm,false,newCh,newStartIdx) } } // 如果还有剩余的 newCh 节点未处理，说明这些是新增的，需要创建并插入。 newStartVnode = newCh[++newStartIdx] } } }\"]},\"771\":{\"c\":[\"JS框架\"]},\"772\":{\"c\":[\"Vue\"]},\"773\":{\"h\":\"生命周期理解\",\"t\":[\"vue生命周期即vue组件从创建到销毁的过程，通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力。 大约有四个阶段：创建、挂载、更新和销毁。每个阶段包含多个钩子函数。注意：对于keep-alive缓存的组件，有额外的两个生命周期钩子，activated、deactivated。\",\"创建vue实例对象:new Vue(options)\",\"初始化实例对象:仅包含默认生命周期函数和默认事件\"]},\"774\":{\"h\":\"beforeCreate\",\"t\":[\"无法访问options的任何部分，响应式系统、事件绑定均未生效。可用于插件初始化（全局状态预加载），调试。\",\"初始化data、methods\"]},\"775\":{\"h\":\"created:options\",\"t\":[\"初始化完成，组件未挂载。可用于数据请求、第三方库初始化、验证props。\",\"编译模板：是否存在template标签，否则使用el属性（元素选择器）的元素（中的字符串）作为模板编译成render函数(调用vm.$mounted(el))。 父组件先进行模板编译，子组件后进行模板编译。\"]},\"776\":{\"h\":\"bedoreMounted\",\"t\":[\"可以访问虚拟DOM，但未挂载到页面中。干预模板编译（自定义渲染器），调试虚拟dom结构。\",\"生成虚拟DOM:在render函数中将虚拟DOM渲染成真实DOM\"]},\"777\":{\"h\":\"mounted\",\"t\":[\"可操作真实DOM，可访问子组件（子组件的mounted早于父组件的mounted）。DOM操作，获取真实DOM信息，子组件交互（调用子组件方法）。\",\"挂载完成：当数据变化之时\"]},\"778\":{\"h\":\"beforeUpdate\",\"t\":[\"可访问旧数据和旧dom。记录旧状态，对比数据变化。\",\"虚拟DOM重渲染：在内存中重新渲染虚拟DOM树，调用patch函数完成新旧虚拟DOM的差异计算，将差异应用到真实DOM\"]},\"779\":{\"h\":\"updated\",\"t\":[\"访问更新后DOM，可能因父组件更新而触发。依赖新DOM的操作，重新计算布局、触发副作用（统计日志）。 当调用vm.$destroy之时\"]},\"780\":{\"h\":\"beforeDestroy:\",\"t\":[\"访问完整的组件实例。清理资源，事件监听器、定时器、取消异步请求。解绑副作用，取消vuex的大约、断开websocket的链接。\",\"清理：清理watchers、事件监听器、子组件等\",\"销毁\"]},\"781\":{\"h\":\"destroyed:\",\"t\":[\"实例销毁。日志记录、验证清理。\"]},\"782\":{\"h\":\"activated\",\"t\":[\"被缓存的组件重新进入 DOM（如从其他页面返回） 恢复组件状态（如刷新数据、重新绑定事件）； 触发“激活”后的副作用（如重新加载最新数据）。\"]},\"783\":{\"h\":\"deactivated\",\"t\":[\"被缓存的组件离开 DOM（如切换到其他页面） 暂停组件状态（如停止定时器、暂停视频播放）； 保存当前状态（如滚动位置、表单输入内容）。\"]},\"784\":{\"h\":\"父子组件渲染顺序\",\"t\":[\"同步加载组件时，按模板的顺序来加载。父组件编译完模板后，加载完子组件后，再完成父组件挂载。 异步加载组件时，父组件生命周期完成后，再开始加载子组件。\"]},\"785\":{\"c\":[\"JS框架\"]},\"786\":{\"c\":[\"Vue\"]},\"787\":{\"h\":\"mixin混入\",\"t\":[\"mixin 面向对象程序设计语言中的类，提供了方法的实现。其他的类可以访问mixin类的方法而不必成为子类\"]},\"788\":{\"h\":\"vue中的mixin\",\"t\":[\"一个普通的js对象，包含组件中任意选项功能，将共有的功能以对象的方式传入mixins， 当组件使用mixins对象的选项是所有的mixins对象的选项都将被混入该组件本身的选项中来\"]},\"789\":{\"h\":\"局部混入\",\"t\":[\"定义一个mixin对象,包含组件options的data、methods、computed、watch等选项\",\"var myMixin = { created: function () {}, methods: {}, }\",\"组件通过mixins属性调用mixin对象\",\"Vue.component('my-component', { mixins: [myMixin], })\"]},\"790\":{\"h\":\"全局混入\",\"t\":[\"通过Vue.mixin进行全局混入\",\"Vue.mixin({ created: function () {}, })\",\"重要\",\"全局混用会影响到每一个组件实例,包括第三方组件.\"]},\"791\":{\"h\":\"注意\",\"t\":[\"当组件存在与mixin对象相同的选项时，在递归合并的时候组件的选项会覆盖mixin的选项 如果相同选项为生命周期钩子，会合并为一个数组，先执行mixin的钩子,再执行组建的钩子.\"]},\"792\":{\"h\":\"源码\",\"t\":[\"export function initMixin(Vue:GlobalAPI){ Vue.mixix = function (mixin:Objetc){ this.options = mergeOptions(this.options,mixin) return this } }\",\"mergeOptions 函数，用于合并 Vue 组件的选项（options）。这个函数的主要目的是将父组件和子组件的配置进行合并，以便生成最终的组件配置对象。\",\"export function mergeOptions( parent: Object, child: Object, vm?:Component ):Object { // 如果子组件中有 mixins 配置，则递归地将每个 mixin 合并到父组件的配置中。 if(child.mixins){ for(let i =0, l = child.minins.length; i<l;i++){ parent = mergeOptions(parent, child.mixins[i],vm) } } // 初始化配置对象 const options = {} let key // 遍历父组件的配置项 将父组件的所有配置项通过 mergeField 函数合并到 options 中。 for(key in parent){ mergeField(key) } // 遍历子组件的配置项 对于子组件中存在但父组件不存在的配置项，也通过 mergeField 函数合并到 options 中。 for(key in child){ if(!hasOwn(parent,key)){ mergeField(key) } } // 定义 mergeField 函数 该函数负责具体配置项的合并策略。 // 它根据配置项的类型选择对应的合并策略函数（如生命周期钩子、数据等），然后调用这些策略函数来合并配置。 function mergeField(key){ const strat = strats[key] || defaultStrat options[key] = strat(parent[key], child[key],vm,key) } return options }\"]},\"793\":{\"h\":\"合并策略\",\"t\":[\"替换型：props，methods，computed，inject\",\"// props、methods、inject、computed 这四个配置项使用相同的合并策略函数。 strats.props = strats.methods = strats.inject = strats.computed = function ( parentVal:?Object, childVal:?Object, vm?:Component, key:string ):?Object { if(!parentVal) return childVal const ret = Object.create(null) // 复制parentVal extend(ret,parentVal) // 复制childVal，优先级处理：子组件的配置会覆盖父组件的同名属性。 if(childVal) extend(ret,childVal) return ret } strats.provide = mergeDataOrFn\",\"合并型：data，通过set方法合并、重新赋值\",\"队列型：生命周期函数和watch\",\"叠加型：component、directives、filters\",\"strats.component = strats.directives = strats.filters = function ( parentVal:?Object, childVal:?Object, vm?:Component, key:string ):?Object { var res = Objetc.create(parentVal || null) if(childVal){ for(var key in childVal){ // 如果父组件中存在，则会覆盖 res[key] = childVal[key] } } return res }\"]},\"794\":{\"c\":[\"JS框架\"]},\"795\":{\"c\":[\"Vue\"]},\"796\":{\"h\":\"实例挂载过程\",\"t\":[\"vue的构造函数,options是用户传递的配置项,调用*_init*方法\",\"关于_init方法 初始化生命周期,渲染方法,调用beforeCreate钩子,初始化依赖注入,initState,调用created钩子 使用vm.$mount方法挂载元素\",\"initState方法完成props/data/method/watch/methods的初始化\",\"initData方法\",\"vm.$mount方法 如果没有提供render函数,则解析模板文件. 将html解析成ast树,转为render语法字符串,生成render方法\",\"mountComponent渲染组件 触发beforeCreate钩子,定义updateComponent渲染页面视图的方法.监听组件数据,一旦发生变化,触发beforeCreate钩子.updateComponent主要执行初始化声明的render,update方法\",\"render方法 render用于生成vnode\",\"_update主要功能是调用patch,将vnode转为真实DOM,并更新到页面中\"]},\"797\":{\"h\":\"结论\",\"t\":[\"new Vue调用_init方法 \",\"定义$set,$get,$delete,$watch等方法\",\"定义$on,$off,$emit,$off等事件\",\"定义_update,$forceUpdate,$destroy生命周期\",\"调用$mount方法进行页面的挂载 \",\"主要通过mountComponent方法\",\"定义updateComponent更新函数\",\"_update将虚拟DOM生成真实DOM结构,并且渲染到页面中\"]},\"798\":{\"c\":[\"JS框架\"]},\"799\":{\"c\":[\"Vue\"]},\"800\":{\"h\":\"nextTick\",\"t\":[\"在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM. 数据变化后,vue将开启一个异步更新队列,视图需要等待队列中所有的数据变化完成后,再统一进行更新.\"]},\"801\":{\"h\":\"场景\",\"t\":[\"Vue.nextTick(),第一个参数是回调函数,第二个参数为执行函数上下文. 返回一个promise对象,可以使用async和await完成相同作用的事情. callbacks是异步操作队列,将回调函数压入 pending用于标识,同一时间只能执行一次 timerFunc()异步延迟函数,根据当前环境选择合适的方法 无论是宏任务还是微任务,都会放到flushCallbacks\"]},\"802\":{\"c\":[\"JS框架\"]},\"803\":{\"c\":[\"Vue\"]},\"804\":{\"h\":\"slot\",\"t\":[\"在HTML中slot元素，作为webComponents技术套件的一部分，是web组件内的一个占位符，该占位符可以在后期使用自己的标记语言填充\"]},\"805\":{\"h\":\"场景\",\"t\":[\"通过slot插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用 比如布局组件、表格列、下拉选、弹框显示内容等。\"]},\"806\":{\"h\":\"分类\",\"t\":[\"默认插槽\",\"具名插槽\",\"作用域插槽 可获取子组件的信息\"]},\"807\":{\"h\":\"原理\",\"t\":[\"slot本质上是返回vnode的函数，vue组件渲染到页面上需要经过templete=>render=>vnode=>dom过程\",\"_v表示穿插普通文本节点，_t表示渲染插槽的函数\"]},\"808\":{\"c\":[\"JS框架\"]},\"809\":{\"c\":[\"Vue\"]},\"810\":{\"h\":\"Vue\",\"t\":[\"一个用于创建用户界面的开源JS框架，也是一个创建单页应用的web应用框架。\"]},\"811\":{\"h\":\"他的核心特性与技术原理如下：\",\"t\":[\"响应式数据驱动视图（MVVM）数据劫持：通过劫持数据对象的getter/setter(vue2)或proxy对象代理（vue3），收集依赖，并在数据变化时触发依赖更新。依赖收集与触发更新：在组件渲染或计算属性执行时，会“记录”当前使用的数据（创建Watcher实例），数据变化时通知所有相关Watcher重新执行（如重新渲染组件或更新计算属性）。双向绑定的实现​​：通过v-model指令，在表单元素（如input）上绑定数据，将输入事件（如input）与数据更新关联，实现“数据→视图”和“视图→数据”的双向同步。​注意点​​：Vue2对对象新增属性、数组索引修改的响应式支持有限（需通过Vue.set或this.$set解决）；Vue3基于Proxy的响应式系统解决了这一问题，并支持更细粒度的依赖跟踪。\",\"组件化开发（模块化与复用）：通过单文件组件（SFC）将模板、逻辑和样式封装为独立单元\",\"虚拟DOM与性能优化：通过虚拟dom实现高效DOM更新 渲染阶段：将组件模板转换为虚拟DOM（JS对象），通过Diff算法比较新旧虚拟DOM的差异 更新阶段：仅将差异部分应用到真实DOM，减少不必要的重排/重绘。\",\"vue3对虚拟DOM的优化：静态标记：标记动态节点（绑定了变量的文本、属性），Diff时仅扫描动态节点。 ​​Fragments​​：支持组件返回多个根节点（无需额外包裹div），减少DOM层级。 ​​==事件缓存（Event Cache）==​​：缓存高频事件处理函数，避免重复创建 4. 模板语法：声明式模板，通过类似于原生H5的语法描述UI结构，框架会自动处理DOM更新。 ​​指令（Directives）​​：v-if（条件渲染）、v-for（列表渲染）、v-bind（属性绑定）、v-model（双向绑定）、v-on（事件绑定）、v-show（显示隐藏）等，扩展HTML的能力。 ​​计算属性（Computed）​​：基于响应式数据缓存计算结果，仅当依赖变化时重新计算（适合需要缓存的复杂逻辑，如拼接姓名、过滤列表）。 ​​侦听器（Watch）​​：监听数据变化并执行副作用（如异步请求、复杂对象属性监控），适合需要“响应后执行操作”的场景。 ​​模板引用（Ref）​​：通过ref获取DOM元素或子组件的实例，直接操作原生DOM或调用子组件方法（补充声明式模板的灵活性）。\"]},\"812\":{\"h\":\"他的生态体系完善覆盖全开发流程\",\"t\":[\"路由管理：Vue Router，支持动态路由、嵌套路由、导航守卫等。 状态管理：Vuex（基于模块化状态树）、Pinia（更简洁的API，支持TypeScript，无mutation）。 构建工具：Vite（新一代构建工具，基于ES模块，开发环境秒启动，生产环境高效打包）、Vue CLI（基于Webpack，适合传统项目）。 UI框架：Element UI（PC端）、Vant（移动端）、Naive UI（现代风格）等，降低界面开发成本。 类型支持：Vue3全面支持TypeScript，通过defineComponent、ref/reactive的类型推断，提升代码健壮性。\"]},\"813\":{\"h\":\"vue3的关键更新\",\"t\":[\"组合式API（Composition API）​​：替代选项式API（Options API），通过setup函数或<\\\\script setup>语法糖，将逻辑按功能聚合（而非按选项拆分），提升代码可读性和复用性（逻辑抽取更方便）。 ​​TypeScript原生支持​​：Vue3核心代码用TS重写，组件定义、类型推断更友好（如defineProps自动推导类型）。 ​​更小的体积与更快的运行​​：通过Tree-shaking优化，核心库体积更小；响应式系统基于Proxy，性能更优。 ​​自定义渲染器（Renderer）​​：支持扩展渲染目标（如SSR、Canvas、WebGL），扩展了Vue的应用场景（如游戏、可视化）。\"]},\"814\":{\"c\":[\"JS框架\"]},\"815\":{\"c\":[\"Vue\"]},\"816\":{\"h\":\"vue3\",\"t\":[\"速度更快、体积减少、更易维护、更接近原生、更易于使用\",\"比较：\",\"重写了虚拟dom实现\",\"编译模板优化\",\"更高效的组件初始化\",\"undate性能提高\",\"SSR速度提高2~3倍\"]},\"817\":{\"h\":\"新特性\",\"t\":[\"framents 支持多个根节点\",\"teleport 传送，在逻辑位置写模板代码，然后再vue范围之外渲染他 它可以出现在任何地方\",\"组合式api\",\"createRenderer 自定义渲染器，将vue的开发模型扩展到其他平台\"]},\"818\":{\"h\":\"vue3优化\",\"t\":[\"diff算法优化： 对会发生变化的地方增加了flag标记，变化时直接找到该地方进行比较\",\"静态提升： 对不参与更新的元素，会做静态提升，只会被创建一次，渲染时直接复用\",\"事件监听缓存： 默认情况下绑定事件行为会被视为动态绑定，所以每次都会追踪他的变化\",\"SSR优化： 当静态内容大到一定量级时候，会用createStaticVNode方法在客户端去生成一个static node，这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染\",\"源码体积 移除了一些不常用的API，使用了TreeShanking，不使用的内容都会被摇掉\"]},\"819\":{\"h\":\"响应式系统\",\"t\":[\"vue2使用defineProperty来劫持整个对象，深度遍历为每个属性添加getter和setter实现响应式 vue3采用proxy重写了响应式系统，proxy可以对整个对象进行监听，不需要深度遍历\",\"监听动态属性的添加\",\"监听数组的索引和length属性\",\"监听删除属性\",\"defineproperty和proxy实现的区别： 原理，数据更新后，通知相关的依赖函数 defineproperty无法劫持到对象的删除和添加属性的操作，动态的属性不具备响应式，深层的监听也造成了性能的极大问题 proxy劫持整个对象的基本操作，而不是某个属性，多达13种拦截方法\"]},\"820\":{\"c\":[\"JS框架\"]},\"821\":{\"c\":[\"Vue\"]},\"822\":{\"h\":\"小程序\",\"t\":[\"相比h5，小程序与其的区别有如下：\",\"运行环境：基于浏览器内核重构的内置解析器\",\"系统权限：获得更多的系统权限，如网络通讯状态、数据缓存能力\",\"渲染机制：逻辑层和渲染层分开\"]},\"823\":{\"h\":\"生命周期\"},\"824\":{\"h\":\"应用的生命周期\",\"t\":[\"生命周期\",\"说明\",\"onLaunch\",\"初始化完成时触发，全局只触发一次。\",\"onShow\",\"启动，或从后台进入前台显示时触发。\",\"onHide\",\"从前台进入后台时触发。\",\"onError\",\"发生脚本错误或API调用报错时触发。\",\"onPageNotFound\",\"打开的页面不存在时触发。\",\"onUnhandleRejection\",\"未处理的Promise拒绝时触发。\",\"onThemeChange\",\"系统切换主题时触发。\"]},\"825\":{\"h\":\"页面的生命周期\",\"t\":[\"生命周期\",\"值\",\"作用\",\"onLoad\",\"监听页面加载\",\"发送请求获取数据\",\"onShow\",\"监听页面显示\",\"请求数据\",\"onReady\",\"页面初次渲染完成\",\"获取页面元素\",\"onHdie\",\"页面隐藏\",\"终止任务，如定时器或播放音乐\",\"onUnload\",\"页面卸载\",\"终止任务\"]},\"826\":{\"h\":\"组件的生命周期\",\"t\":[\"生命周期\",\"说明\",\"created\",\"组件创建完成\",\"attached\",\"进入页面节点树\",\"ready\",\"在渲染线程被初始化已经完成\",\"moved\",\"在组件实例被移动到节点树另一个位置时执行\",\"detached\",\"在组件实例被从页面节点树移除时执行\",\"error\",\"组件方法抛出错误\"]},\"827\":{\"h\":\"组件所在页面的生命周期\",\"t\":[\"生命周期\",\"说明\",\"show\",\"组件所在的页面被展示时执行\",\"hide\",\"组件所在的页面被隐藏时执行\"]},\"828\":{\"h\":\"执行过程\",\"t\":[\"应用生命周期\",\"打开小程序，触发onLaunch\",\"初始化完成后，触发onShow\",\"前台进入后台，触发onHide\",\"后台进入前台，触发onShow\",\"后台运行一定时间，或系统资源占用高，会被销毁\",\"页面生命周期\",\"小程序注册完成后，加载页面，触发onLoad\",\"页面载入后触发onShow，显示页面\",\"首次显示页面，会触发onReady方法，渲染页面元素和样式，一个页面只会调用一次\",\"后台运行或跳转到其他页面时，触发onHdie\",\"后台进入前台或重新进入页面时，触发onShow\",\"重定向方法wx.redirectTo()或关闭当前页面返回上一页wx.navigationBack()，触发onUnload\",\"执行顺序如下：\",\"打开小程序：(app)onLaunch=>(app)onShow=>(pages)onLoad=>(pages)onShow=>(pages)onReady\",\"进入下一个页面：(pages)onHdie=>(next)onLoad=>(next)onShow=>(next)onReady\",\"返回上一个页面：(curr)onLaunch=>(pre)onShow\",\"离开小程序：(app)onHdie\",\"再次进入：小程序未销毁=>(app)onShow(执行以上的顺序),小程序销毁，(app)onLaunch重新开始执行\"]},\"829\":{\"h\":\"登录流程\",\"t\":[\"在小程序中，通过微信提供的登录能力，可以轻松的获取微信提供的用户身份标识，快速简历小程序内的用户体系，从而实现登录功能。 涉及到openid和code的概念：\",\"wx.login()方法生成code，将code作为参数传递为微信服务器指定接口，就可以获取用户的openid\",\"对于每个小程序，微信都会将用户的微信ID映射出一个小程序openid，作为用户在这个小程序的唯一标识\",\"通过wx.login()获取到用户的code判断用户是否授权读取用户信息，调用wx.getUserInfo读取用户数据\",\"由于小程序后台授权域名无法授权微信的域名，需要自身后端调用微信服务器获取用户信息\",\"wx.request()方法请求开发者服务器，后端把appid、appsecret、code一起发送到微信服务器。\",\"微信服务器返回openid、以及本次会话密钥session_key\",\"后端从数据库中查找openid，如果没有查到记录，说明该用户没有注册\",\"session_key是对用户数据加密签名的密钥。\",\"生成session并返回给小程序\",\"小程序将session存到storage里面\",\"下次请求时，先从storage里面读取，然后带给服务端\",\"服务端比对session对应的记录，然后校验有效期\"]},\"830\":{\"h\":\"检验登录状态是否过期\",\"t\":[\"通常做法是在登陆状态中保存有效期数据，该数据应该在服务端校验登陆状态和约定时间做对比 这种做法需要将本地的登陆状态发送到服务端，服务端判断无效登陆状态时再返回需重新执行登录过程的消息给小程序\",\"调用wx.checkSession检验微信登陆状态是否过期 如果过期，发起完整的登录流程 不过期，继续使用本地保存的自定义登陆状态\"]},\"831\":{\"h\":\"路由跳转\",\"t\":[\"微信小程序拥有web和application共同的特征，每个页面可以看成一个pageModel，pageModel全部以栈的形式进行管理\"]},\"832\":{\"h\":\"跳转方式\",\"t\":[\"wx.navigateTo(Object) 缓存当前页面，跳转到应用内的某个页面，通过wx.navigateBack(Object)返回，页面之间通过hide、show切换\",\"wx.redirectTo(Object) 微信的页面栈有10层，过多的页面会挤占微信分配给小程序的内存，该方法的跳转不会缓存页面，所以切换时页面需要重新加载。\",\"wx.switchTab(Object) 针对tabr页面的跳转，会关闭其他的非tabar的页面\",\"wx.navigateBack(Object) 关闭当前页面，返回上一级或多级页面，通过getCurrentPages()获取当前的页面栈 页面不断出栈，直到目标返回页\",\"wx.reLaunch(Object) 关闭所有的页面，打开到某个页面，返回的时候跳转到首页\"]},\"833\":{\"h\":\"发布流程\",\"t\":[\"上传代码\",\"提交审核\",\"发布版本\"]},\"834\":{\"h\":\"支付流程\",\"t\":[\"小程序为电商类小程序，提供了非常完善、优秀、安全的支付功能 在小程序中调用微信的API完成支付功能，方便，快捷\"]},\"835\":{\"h\":\"实现原理\",\"t\":[\"网页开发中，渲染线程和脚本是互斥的，长时间的脚本运行会导致页面失去响应，js是单线程的 在小程序中，选择了Hybrid的渲染方式，将逻辑层和视图层分开，双线程同时运行，视图层使用webview进行渲染，逻辑层允许在jscore。\",\"渲染层：界面渲染相关的任务全都在webview线程里执行。一个小程序存在多个界面，所以渲染层存在多个webview线程\",\"逻辑层：jscore线程运行JS脚本，在这个环境下执行的都是有关小程序业务逻辑的代码\"]},\"836\":{\"h\":\"通信\",\"t\":[\"小程序在渲染层，宿主环境会被wxml转为对应的JS对象 在逻辑层发生数据变更的时候，通过宿主环境提供的setData()方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的DOM树上，渲染出正确的视图 当视图存在交互时，例如按钮触发，这类反馈应该通知给开发者的逻辑层，需要将对应的处理状态呈现给用户\",\"对于事件的分发处理，微信进行了特殊的处理，将所有的事件拦截后，丢到逻辑层交给js处理\",\" 小程序是基于双线程的，在任何逻辑层和视图层之间的数据传递都是线程间的通信，会有一定的延时，因此在小程序中，页面更新是异步操作 异步会使运行时序变得复杂一些，如果渲染层工作较快完成，就到等待逻辑层的指令才能进行下一步工作。 因此逻辑层和渲染层之间需要有一定的机制保证时序正确，在每个小程序页面的生命周期中，存在着若干次页面数据通信。\"]},\"837\":{\"h\":\"运行机制\",\"t\":[\"小程序启动运行有两种情况：\",\"冷启动：首次打开、主动销毁后再次打开的情况，此时小程序需要重新加载启动，即为冷启动 每次冷启动时，都会检查是否有更新版本，如果有，异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。\",\"热启动：已经打开过小程序，在一段时间内再次打开，无需重新启动，只需要将后台的小程序切换到前台，这个过程就是热启动\",\"alt text\"]},\"838\":{\"h\":\"优化手段\",\"t\":[\"小程序首次启动前，微信会为小程序准备好通用的运行环境，如运行中线程和基础库的初始化 然后开始进入启动状态，展示一个固定的启动界面，包含小程序的图标、名称和加载提示图标。\",\"下载小程序代码包 经过编译、压缩、打包之后的代码包\",\"加载小程序代码包\",\"初始化小程序手段\"]},\"839\":{\"h\":\"加载\",\"t\":[\"控制小程序包的大小：\",\"压缩代码\",\"清理无用的代码和资源文件\",\"减少资源包中的图片等资源的数量和大小，图片资源压缩率有限 并且可以采用分包加载的操作，将用户访问率高的页面放在主包内，将访问率低的页面放入子包内，按需加载 当用户点击到子包的目录时，还有一个代码包的下载过程，子包也不建议太大。或者使用子包预加载技术，并不需要等到用户点击到子包页面后再下载子包。\"]},\"840\":{\"h\":\"渲染\",\"t\":[\"请求在onLoad就加载，尽量减少不必要的https请求，可u使用getStorageSync()及setStorageSycn()方法将数据存储在本地 可以在前置页面将一些有用的字段带到当前页，进行首次渲染(列表页的某些数据=>详情页)，没有数据的模块可以进行骨架屏的占位 提高页面的多次渲染效率主要在于正确使用setData：\",\"将多次的setData合并为一次setData\",\"数据通信的性能与数据量正相关，因而如果有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串，则不应使用setData来设置这些数据\",\"与界面渲染无关的数据最好不要设置在data中，可u考虑设置在page对象的其他字段下.\"]},\"841\":{\"c\":[\"JS框架\"]},\"842\":{\"c\":[\"小程序\"]},\"843\":{\"h\":\"操作执行优化\",\"t\":[\"操作执行优化，通过防抖、节流来减少操作的重复执行，来提高性能。\"]},\"844\":{\"h\":\"\",\"t\":[\"含义\",\"事件触发时，在n秒内函数只能执行一次。如果事件连续触发，重新计时。\",\"一个防抖函数具有以下要点：\",\"高阶函数：返回一个具有防抖能力的函数。\",\"计时功能：在连续触发时，重新计算延迟时间。\",\"取消执行：在连续触发时，取消上一次的执行。\",\"目的\",\"开发过程中，有一些事件会频繁触发，例如onresize、scroll、mousemove、mousehover等。一秒之内可能执行几十次、几百次，如果函数内部操作了DOM，甚至可以造成浏览器卡死、崩溃。除此之外，短时间内重复的 ajax 调用不仅会造成数据关系的混乱，还会造成网络拥塞，增加服务器压力。\"]},\"845\":{\"h\":\"\",\"t\":[\"function debounce(fn,wait){ var timer=null; return function(){ // 保存事件参数 let arg = arguments; // 函数调用时，清除计时器 if(timer !== null){ clearTimeout(timer); } // 开启计时 timer = setTimeout(()=>{ // 若不改变this指向，则会指向fn定义环境 fn.apply(this,arg) },wait); } }\"]},\"846\":{\"h\":\"\",\"t\":[\"搜索框搜索输入。只需用户最后一次输入完，再发送请求；\",\"用户名、手机号、邮箱输入验证；\",\"浏览器窗口大小改变后，只需窗口调整完后，再执行resize事件中的代码，防止重复渲染。\"]},\"847\":{\"h\":\"\",\"t\":[\"含义\",\"无论触发多少次事件，在一定时间间隔内，只会执行一次。\",\"一个节流函数具有以下要点：\",\"高阶函数：返回一个具有节流能力的函数。\",\"计时功能：在连续触发时，间隔时间是否达到。\",\"间隔执行：在连续触发时，是否执行。\"]},\"848\":{\"h\":\"最佳实践\",\"t\":[\"function throttle(fn, delay) { let timer = null; return function () { // 记录事件参数 let args = arguments; // 如果定时器为空，则上次间隔的函数执行完成 if (!timer) { // 开启定时器 timer = setTimeout(() => { // 执行函数 fn.apply(this, args); // 函数执行完毕后重置定时器 timer = null; }, delay); } } }\"]},\"849\":{\"h\":\"\",\"t\":[\"输入框的联想，可以限定用户在输入时，只在每两秒钟响应一次联想。\",\"搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用。设置一个合适的时间间隔，有效减轻服务端压力。\",\"表单验证\",\"按钮提交事件。\"]},\"850\":{\"h\":\"事件委托，事件代理：Event Delegation\",\"t\":[\"含义\",\"基于DOM元素的事件冒泡，把多个子元素的响应事件委托给父元素。减少事件，来降低内存的使用。\",\"事件委托的要求：\",\"多个子元素：如果是一个子元素，不需要冒泡。\",\"相同的响应事件：如果子元素之间，相同的响应事件过少，也没有必要。\",\"相同的事件处理：如果子元素之间，相同的响应处理过少，也没有必要。\"]},\"851\":{\"h\":\"最佳实践\",\"t\":[\"<body> <button id=\\\"btn\\\">点击新增li标签</button> <ul id=\\\"list\\\"> <li>列表项</li> <li>列表项</li> <li>列表项</li> <li>列表项</li> <li>列表项</li> <li>列表项</li> </ul> <script> var list = document.getElementById('list'); var btn = document.getElementById('btn'); list.onclick = function(e){ //点击的子元素 e.target.style.color = 'blue'; } btn.onclick = function(){ var new_li = document.createElement('li'); new_li.innerHTML = '新增列表项'; list.appendChild(new_li); } </script> </body>\"]},\"852\":{\"h\":\"应用场景\",\"t\":[\"列表数据、瀑布数据等需要大量绑定相同功能的函数场景。\"]},\"853\":{\"h\":\"\"},\"854\":{\"c\":[\"性能优化\"]},\"855\":{\"c\":[\"防抖\",\"节流\",\"事件委托\"]},\"856\":{\"h\":\"资源加载优化\",\"t\":[\"资源加载优化，通过按需加载、延迟加载资源、缓存资源来减少阻塞和服务器请求。\"]},\"857\":{\"h\":\"\",\"t\":[\"根据用户的需求，动态地加载所需的组件、模块或功能。\"]},\"858\":{\"h\":\"\",\"t\":[\"动态导入是ES6提供的新特性，允许在运行时动态的导入模块。使用**import()**函数。 例如，你可以根据用户的设备类型、网络状况或其他条件来决定是否加载某个模块。\",\"if (navigator.connection.saveData) { // 如果用户开启了数据节省模式，则不加载某些资源 } else { import('./heavy-module.js').then(module => { module.default(); }); }\",\"在工程化环境中还有以下方式：\",\"在框架中，例如vue的componet动态组件指定是一个异步组件时，Vue会在需要时加载该组件。\",\"<template> <component :is=\\\"currentComponent\\\"></component> </template> <script> const AsyncComponent = () => import('./components/AsyncComponent.vue'); export default { data() { return { currentComponent: AsyncComponent }; } }; </script>\",\"2.vue-router配置路由，使用webpack的require.ensure技术，也可以实现按需加载。\",\"// 具有相同chunk名的模块会被打包到一起。 const Province = r => require.ensure([], () => r(require('@/components/Province.vue')), 'chunkname1') const Segment = r => require.ensure([], () => r(require('@/components/Segment.vue')), 'chunkname1') const Loading = r => require.ensure([], () => r(require('@/components/Loading.vue')), 'chunkname3') const User = r => require.ensure([], () => r(require('@/components/User.vue')), 'chunkname3')\"]},\"859\":{\"h\":\"\",\"t\":[\"代码分割是一种将代码拆分为多个小块（chunk）的方法，以便按需加载。Webpack等构建工具提供了代码分割的支持。\",\"// 在webpack中通过require.ensure和import()来定义代码分割点 // 这个新的chunk会被webpack通过jsonp来异步加载 require.ensure(dependencies: String[], callback: function(require), chunkName: String) // 更好的分割方式 import(chunk) .then( res => {}) .catch(err => {});\"]},\"860\":{\"h\":\"\",\"t\":[\"推迟加载非关键内容或资源，直到需要时才进行加载。侧重于图片、视频等媒体资源。\"]},\"861\":{\"h\":\"HTML5的loading属性\",\"t\":[\"H5的新增属性，可以在img标签中直接使用来实现懒加载。\",\"<img src=\\\"image.jpg\\\" alt=\\\"example\\\" loading=\\\"lazy\\\">\"]},\"862\":{\"h\":\"\",\"t\":[\"用于懒加载图片或其他DOM元素。当元素进入视口时才加载相关资源。\",\"const img = document.querySelector('img'); const observer = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.src = entry.target.dataset.src; observer.unobserve(entry.target); } }); }); observer.observe(img);\"]},\"863\":{\"h\":\"\",\"t\":[\"通过缓存资源，减少对服务器的重复请求。根据HTTP响应头内容的不同分两种：\",\"强缓存：当缓存过期时，强制向服务器请求资源。\",\"协商缓存：当缓存过期时，协商服务器是否更新资源。\"]},\"864\":{\"h\":\"\",\"t\":[\"当web应用获取资源时，先从本地获取，如果有就直接用，否则，重新发起请求。控制强缓存的标头分别是Expires和Cache-Control，Cache-Control的优先级高于Expires。\"]},\"865\":{\"h\":\"\",\"t\":[\"在HTTP/1.0中，有效期是通过Expires来指定的。Expires标头使用明确的时间，而不是经过的时间来指定缓存的生命周期。\",\"Expires: Wed, 21 Oct 2015 07:28:00 GMT\",\"由于HTTP/1.1已被广泛使用，无需特地提供 Expires。\"]},\"866\":{\"h\":\"\",\"t\":[\"此字段拥有强大的缓存控制能力。常见的字段有：\",\"max-age：设置缓存的最大有效期，单位s。资源会缓存到本地。\",\"no-cache：不强制缓存，每次都会协商缓存，确定资源是否有变更。资源会缓存到本地。\",\"no-store：不进行强缓存、协商缓存，直接拉取最新的资源。资源不会缓存到本地。\",\"private：私有缓存，针对特定客户端的缓存，例如个性化内容。\",\"public：CDN、客户端、代理服务器都可以缓存。\",\"Cache-Control: max-age=604800\"]},\"867\":{\"h\":\"\",\"t\":[\"又称为对比缓存、弱缓存。当资源到期时，会协商服务器资源是否修改，若无修改过则使用本地资源，并更新资源的有效期。 控制协商缓存的标头分别是Last-Modified/If-Modified-Since和Etag/If-None-Match。\"]},\"868\":{\"h\":\"：上一次的修改时间\",\"t\":[\"当缓存过期时，Last-Modified值放入If-Modified-Since标头发送到服务器。服务器会核对资源的修改时间是否一致，资源未修改返回304 Not Modified。 收到该响应后，客户端将过期缓存恢复为有效的。替代方案是Etag/If-None-Match。\"]},\"869\":{\"h\":\"：文件指纹\",\"t\":[\"Etag标头的值是服务器生成的任意值。当文件被修改后，Etag会得到更新。 当缓存过期时，Etag的值放入If-None-Match标头发送到服务器。服务器会核对资源的Etag与If-None-Match是否一致，资源未修改返回304 Not Modified。\"]},\"870\":{\"h\":\"\",\"t\":[\"当浏览器请求一个网站的时候，会加载各种各样的资源，比如：HTML文档、图片、CSS和JS等文件。 对于一些不经常变的内容，浏览器会将他们保存在本地的文件中，下次访问相同网站的时候，直接加载这些资源，加速访问。 优点：\",\"减少页面加载时间；\",\"减少服务器负载；\"]},\"871\":{\"h\":\"\",\"t\":[\"解析IP地址的方式，就是查询DNS映射表。 DNS查询过程大约消耗20毫秒，在DNS查询过程中，浏览器什么都不会做，保持空白。如果DNS查询很多，网页性能会受到很大影响，因此需要用到DNS缓存。 不同浏览器的缓存机制不同： IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟。\",\"缓存时间长：减少DNS的重复查找，节省时间。\",\"缓存时间短：及时检测服务器的IP变化，保证访问的正确性。\"]},\"872\":{\"h\":\"\"},\"873\":{\"c\":[\"性能优化\"]},\"874\":{\"c\":[\"按需加载\",\"延迟加载\",\"缓存\"]},\"875\":{\"h\":\"性能优化\"},\"876\":{\"h\":\"\"},\"877\":{\"h\":\"\",\"t\":[\"首次内容渲染 (FCP) 是指用户首次导航到网页到网页任何一部分内容呈现在屏幕上的时间。 内容指的是文本、图片、svg元素或非白色的canvas元素。\"]},\"878\":{\"h\":\"在JS中衡量FCP\",\"t\":[\"使用Paint Timing API创建一个 PerformanceObserver，用于监听名称为 first-contentful-paint 的 paint 条目并将其记录到控制台。\",\"new PerformanceObserver((entryList) => { for (const entry of entryList.getEntriesByName('first-contentful-paint')) { // 输出第一个有内容的元素的时间 console.log('FCP candidate:', entry.startTime, entry); } }).observe({type: 'paint', buffered: true});\"]},\"879\":{\"h\":\"\",\"t\":[\"最大内容渲染 (FCP) 是指可见的最大图片、文本块、视频的渲染时间(相对于用户首次导航到网页的时间)。\",\"有关的DOM元素：\",\"img元素（第一帧呈现时间适用于 GIF 或动画 PNG 等动画内容）\",\"svg元素中的image元素\",\"video元素（使用海报图片加载时间或视频的第一帧呈现时间，以时间较短者为准）\",\"使用 url() 函数加载背景图片的元素（而不是 CSS 渐变）\",\"包含文本节点或其他内嵌级文本元素子元素的块级元素。\",\"与FCP的区别\",\"FCP 衡量的是任何内容绘制到屏幕上的时间，LCP 衡量的是主要内容绘制到屏幕上的时间，因此 LCP 旨在更具选择性。\"]},\"880\":{\"h\":\"\",\"t\":[\"web上的说明\",\"CLS 是用于衡量网页的整个生命周期内发生的每一次意外布局偏移。\",\"布局偏移\",\"Layout Instability API会在视口中可见元素在两帧之间更改起始位置时报告layout-shift集合。此类元素被视为不稳定元素。\"]},\"881\":{\"h\":\"\",\"t\":[\"首次互动延迟(FID) 是指衡量从用户首次与网页互动（即点击链接、点按按钮）到浏览器实际能够开始处理事件处理脚本以响应该互动的时间。\",\"即使没有事件监听器也会衡量\",\"FID 用于衡量收到输入事件与主线程下次空闲之间的时间差。这意味着，即使未注册事件监听器，系统也会衡量 FID。原因在于，许多用户互动不需要事件监听器，但需要主线程处于空闲状态才能运行。 例如，以下所有 HTML 元素都需要等待主线程上的进行中任务完成，然后才能响应用户互动：\",\"文本字段、复选框和单选按钮 (input、textarea)\",\"选择下拉菜单 (select)\",\"链接 (a)\"]},\"882\":{\"h\":\"\",\"t\":[\"web上的说明\",\"互动延迟时间(INP) 指的是用户访问网页期间发生的所有互动（点击、点按和键盘互动等）的延迟时间中的最大值。 描述了网页对互动的整体响应能力。\",\"与FID的不同\",\"FID 仅衡量网页上首次互动的输入延迟。INP 通过观察网页上的所有互动（从输入延迟开始，到运行事件处理脚本所需的时间，最后到浏览器绘制下一个帧为止）来改进 FID。\"]},\"883\":{\"h\":\"\",\"t\":[\"web上的说明\",\"首字节到达时间(INP) 指的是请求资源到响应第一个字节开始到达之间的时间。\",\"TTFB 是以下请求阶段的总和：\",\"重定向时间\",\"Service Worker 启动时间（如果适用）\",\"DNS 查找\",\"连接和 TLS 协商\",\"请求，直到响应的第一个字节到达\"]},\"884\":{\"h\":\"在JS中衡量TTFB\",\"t\":[\"用 Navigation Timing API 在浏览器中衡量导航请求的 TTFB。以下示例展示了如何创建一个监听 navigation 条目并将其记录到控制台的 PerformanceObserver：\",\"new PerformanceObserver((entryList) => { const [pageNav] = entryList.getEntriesByType('navigation'); console.log(`TTFB: ${pageNav.responseStart}`); }).observe({ type: 'navigation', buffered: true });\",\"web-vitals JavaScript 库还可以更简洁地在浏览器中衡量 TTFB：\",\"import {onTTFB} from 'web-vitals'; // Measure and log TTFB as soon as it's available. onTTFB(console.log);\"]},\"885\":{\"h\":\"\",\"t\":[\"总阻塞时间 (TBT)指标用于衡量在First Contentful Paint (FCP)之后主线程被阻塞的时间足以阻止输入响应的总时间。\",\"何时视为阻塞\",\"当存在长任务（主线程上运行超过 50 毫秒的任务）时，主线程都会被视为阻塞。 我们之所以说主线程处于“阻塞”状态，是因为浏览器无法中断正在执行的任务。因此，如果用户在长时间运行的任务过程中与网页互动，浏览器必须等待任务完成后才能响应。\",\"给定长任务的阻塞时间是指其超过 50 毫秒的时长。\",\"网页的总阻塞时间是在 FCP 后发生的每项长任务的阻塞时间的总和。\"]},\"886\":{\"h\":\"\",\"t\":[\"警告\",\"Lighthouse 6.0 已弃用首次有效绘制时间 (FMP)。\",\"首次有意义内容绘制(FMP) 用于衡量网页的主要内容何时对用户可见。从用户发起网页加载到网页呈现主要的页首内容之间的时间（以秒为单位）。\",\"与FCP的区别\",\"当网页上渲染的首个内容包含可见区域上的内容时，首次内容渲染 (FCP) 和 FMP 通常相同。 不过，如果 iframe 中包含可见区域上方的内容，这些指标可能会有所不同。FMP 会在用户可见 iframe 中的内容时注册，而 FCP 不包含 iframe 内容。\"]},\"887\":{\"h\":\"性能分析工具\"},\"888\":{\"h\":\"\",\"t\":[\"Edge上的使用 Lighthouse 测试辅助功能\",\"Ligthouse可以对网页的各项性能进行评分，并给出相应的建议。 chrome和edge提供了Ligthouse扩展，可以在DevTool查看。\",\"edge开发者工具\"]},\"889\":{\"h\":\"\"},\"890\":{\"h\":\"web-vitals库\",\"t\":[\"github仓库链接 web-vitals 是一个轻量级的JavaScript库，它专注于测量核心Web Vitals和其他关键性能指标，确保你的网站在真实用户的设备上表现卓越。\",\"web-vitals 库约有1.5KB（压缩后），并以模块化的方式提供了所有Web Vitals的测量功能，包括 Cumulative Layout Shift (CLS)、First Input Delay (FID) 和 Largest Contentful Paint (LCP)，以及其他有用的诊断性性能指标。通过这个库，你可以精确地跟踪这些指标，即使是在库加载之前发生的性能事件也能准确捕获。\"]},\"891\":{\"c\":[\"性能优化\"]},\"892\":{\"h\":\"资源体积优化\",\"t\":[\"资源体积优化，通过压缩，优化图片等手段，提高资源的加载速度。\"]},\"893\":{\"h\":\"\",\"t\":[\"采用一些压缩方案，减少静态文件的体积。这样就可以相对的节约宽带，对这些静态文件的加载速度也会得到提升。\",\"注意\",\"针对工程化项目才可以使用打包工具的gizp算法。\"]},\"894\":{\"h\":\"配置流程\",\"t\":[\"下载打包工具匹配的gzip插件。\",\"配置到打包工具中。\",\"通知后端开启gzip。\"]},\"895\":{\"h\":\"最佳实践\",\"t\":[\"Vue CLI项目\",\"npm install compression-webpack-plugin@6.1.1\",\"// vue.config.js中配置插件 const CompressionPlugin = require('compression-webpack-plugin'); module.exports = { chainWebpack(config) { // ...... }, configureWebpack: config => { // 开发环境不配置 if (process.env.NODE_ENV !== 'production') return // 生产环境才去配置 return { plugins: [ new CompressionPlugin({ //此插件不能使用太高的版本，否则报错：TypeError: Cannot read property 'tapPromise' of undefined // filename: \\\"[path][base].gz\\\", // 这种方式是默认的，多个文件压缩就有多个.gz文件，建议使用下方的写法 filename: '[path].gz[query]', // 使得多个.gz文件合并成一个文件，这种方式压缩后的文件少，建议使用 algorithm: 'gzip', // 匹配要压缩的文件，这里是给html。 test: /\\\\.js$|\\\\.css$|\\\\.html$|\\\\.ttf$|\\\\.eot$|\\\\.woff$/, //需要压缩的最小值 threshold: 10240, minRatio: 0.8, //是否删除原有静态资源文件，即只保留压缩后的.gz文件，建议这个置为false，还保留源文件。以防： // 假如出现访问.gz文件访问不到的时候，还可以访问源文件双重保障 deleteOriginalAssets: false }) ] } }, };\",\"<!-- 后端nginx配置 --> server { listen 80; server_name localhost; location / { try_files $uri $uri/ /index.html; root C:/nginx-1.18.0/html/gzip/dist; index index.html index.htm; } location /api/ { proxy_pass http://localhost:6666/; } gzip on; gzip_min_length 4k; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/x-woff font/ttf; <!--是否在http header中添加Vary: Accept-Encoding，一般情况下建议开启 --> gzip_vary on; }\",\"针对使用vite的vue项目\",\"npm install vite-plugin-compression\",\"// vite.config.js中配置插件 import { defineConfig } from 'vite'; import compression from 'vite-plugin-compression'; export default defineConfig({ plugins: [ compression({ verbose: true, // 输出压缩日志 disable: false, // 是否禁用压缩 threshold: 10240, // 对超过10KB的文件进行压缩 algorithm: 'gzip', // 使用gzip压缩 ext: '.gz', // 压缩后文件的扩展名 }), ], });\",\"<!-- 后端nginx配置 --> server { listen 80; server_name localhost; location / { try_files $uri $uri/ /index.html; root C:/nginx-1.18.0/html/gzip/dist; index index.html index.htm; } location /api/ { proxy_pass http://localhost:6666/; } gzip on; gzip_min_length 4k; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/x-woff font/ttf; <!--是否在http header中添加Vary: Accept-Encoding，一般情况下建议开启 --> gzip_vary on; }\"]},\"896\":{\"h\":\"\",\"t\":[\"将png、jpg、gif的图片替换为webp格式的图片。webp比png、jpg、gif哟组合更优秀的算法，图片体积上也更小，加载更快，占用加载资源的时间更短。 webp提供有损压缩和无损压缩两种方案。\"]},\"897\":{\"c\":[\"性能优化\"]},\"898\":{\"c\":[\"压缩\"]},\"899\":{\"h\":\"SSG静态站点生成\"},\"900\":{\"c\":[\"性能优化\"]},\"901\":{\"c\":[\"SSG\"]},\"902\":{\"h\":\"SSR服务端渲染\"},\"903\":{\"c\":[\"性能优化\"]},\"904\":{\"c\":[\"SSR\",\"局部SSR\"]},\"905\":{\"h\":\"用户体验优化\",\"t\":[\"用户体验优化，通过预加载关键资源、骨架屏、预渲染来优化用户体验。\"]},\"906\":{\"h\":\"\",\"t\":[\"预加载关键资源，如字体、图片、CSS和JS文件。\",\"<link rel=\\\"preload\\\" href=\\\"xxx.css\\\" as=\\\"style\\\"> <link rel=\\\"preload\\\" href=\\\"xxx.js\\\" as=\\\"script\\\"> <link rel=\\\"preload\\\" href=\\\"xxx.woff2\\\" as=\\\"font\\\" type=\\\"font/woff2\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"preload\\\" href=\\\"xxx.jpg\\\" as=\\\"image\\\">\",\"配置HTTP/2 SERVER Push\",\"location/{ http2_push /styles/main.css; http2_push /script/main.js; }\"]},\"907\":{\"h\":\"构建工具支持\",\"t\":[\"在webpack中配置资源预加载、DNS解析、提前链接。需要使用ResourceHintWebpackPlugin插件。\",\"// 对按需加载( import() )的模块进行预加载 const HtmlWebpackPlugin = require('html-webpack-plugin'); const { ResourceHintWebpackPlugin } = require('resource-hint-webpack-plugin'); module.exports = { plugins: [ new HtmlWebpackPlugin({ template: './public/index.html', filename: 'index.html', chunks: ['index'], inject: 'body' }), new ResourceHintWebpackPlugin([{ rel: 'preload', include: { type: 'asyncChunks', } }]) ] }\"]},\"908\":{\"h\":\"\",\"t\":[\"如果调研服务器端渲染 (SSR) 只是用来改善少数营销页面（例如 /, /about, /contact 等）的 SEO，那么不如使用预渲染。在构建时简单的生成针对特定路由的静态HTML文件。\",\"SSR\",\"预渲染\",\"运行时\",\"构建时\",\"代码侵入性大\",\"几乎没有侵入性\",\"SEO更彻底\",\"有局限性(动态URL的异步请求)\",\"首屏加载更快\",\"首屏加载块\",\"Node环境，耗费CPU\",\"不需要Node\",\"难度大\",\"难度小\",\"动态内容直出HTML\",\"直出有限，客户端会再次加载\"]},\"909\":{\"h\":\"webpack方案\",\"t\":[\"使用prerender-spa-plugin插件，配置webpack。\",\"const path = require('path'); const PrerenderSPAPlugin = require('prerender-spa-plugin') const Renderer = PrerenderSPAPlugin.PuppeteerRenderer module.exports = { entry: './src/index.js', output: { filename: 'bundle.js', path: path.resolve(__dirname, 'dist'), }, module: { rules: [ { test: /\\\\.jsx?$/, exclude: /node_modules/, use: { loader: 'babel-loader', options: { presets: ['@babel/preset-react'], }, }, }, ], }, plugins: [ new PrerenderSPAPlugin({ //代码打包目录和以前配置的目录保持一致 staticDir: path.join(__dirname, '../dist'), indexPath: path.join(__dirname, '../dist', 'index.html'), //routes：要预渲染的页面访问路由 routes: ['/', '/home', '/freeIp', '/buyMeal', '/getIp', '/getLongIp', '/recharge', '/help/check', '/company/check', '/login'], renderer: new Renderer({ inject: { foo: 'bar' }, // headless：渲染时显示浏览器窗口。对调试很有用。 headless: false }) }) ], resolve: { extensions: ['.js', '.jsx'], }, };\"]},\"910\":{\"h\":\"\",\"t\":[\"骨架屏是一种在页面加载过程中，以占位符形式展示页面结构的技术。它通过显示简单的灰色块和线条，让用户在等待内容加载时获得视觉反馈，提高了用户的满意度。\"]},\"911\":{\"h\":\"UI库方案\",\"t\":[\"使用elementPLus的骨架屏.\",\"<!-- 当资源加载完成时，改变loading --> <template> <el-skeleton :loading=\\\"loading\\\" :animated=\\\"true\\\" /> </template> <script>\"]},\"912\":{\"c\":[\"性能优化\"]},\"913\":{\"c\":[\"预渲染\",\"预加载\",\"骨架屏\"]},\"914\":{\"h\":\"数据渲染优化\",\"t\":[\"针对大量数据的渲染优化，通过分页、虚拟列表、虚拟表格，canvas优化性能。\",\"对于大量数据渲染的时候，JS运算并不是性能的瓶颈，性能的瓶颈主要在于渲染阶段\"]},\"915\":{\"h\":\"\",\"t\":[\"对大量的数据分批渲染，避免同时渲染大量DOM引起的页面卡顿。 用于简单DOM，任务的空闲执行。\"]},\"916\":{\"h\":\"\",\"t\":[\"<ul id=\\\"container1\\\"></ul>\",\"let ul = document.getElementById('container1'); let total = 100000; let once = 20; let page = total/once let index = 0; function loop(curTotal,curIndex){ if(curTotal <= 0){ return false; } // 每页多少条 let pageCount = Math.min(curTotal , once); setTimeout(()=>{ for(let i = 0; i < pageCount; i++){ let li = document.createElement('li'); li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) ul.appendChild(li) } // 递归 loop(curTotal - pageCount,curIndex + pageCount) },0) } loop(total,index);\",\"缺点 setTimeout会导致明显的闪屏现象。\",\"setTimeout的执行时间并不是确定的。在JS中，setTimeout任务被放进事件队列中，只有主线程执行完才会去检查事件队列中的任务是否需要执行，因此setTimeout的实际执行时间可能会比其设定的时间晚一些。\",\"刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的刷新频率可能会不同，而setTimeout只能设置一个固定时间间隔，这个时间不一定和屏幕的刷新时间相同。\"]},\"917\":{\"h\":\"\",\"t\":[\"requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。 requestAnimationFrame的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。\",\"<ul id=\\\"container\\\"></ul>\",\"let ul = document.getElementById('container'); let total = 100000; let once = 20; let page = total/once let index = 0; function loop(curTotal,curIndex){ if(curTotal <= 0){ return false; } let pageCount = Math.min(curTotal , once); window.requestAnimationFrame(function(){ for(let i = 0; i < pageCount; i++){ let li = document.createElement('li'); li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) ul.appendChild(li) } loop(curTotal - pageCount,curIndex + pageCount) }) } loop(total,index);\"]},\"918\":{\"h\":\"\",\"t\":[\"DocumentFragment是DOM节点，但不是DOM树的一部分，它的变化不会触发DOM树的重新渲染。\",\"<ul id=\\\"container\\\"></ul>\",\"let ul = document.getElementById('container'); let total = 100000; let once = 20; let page = total/once let index = 0; function loop(curTotal,curIndex){ if(curTotal <= 0){ return false; } //每页多少条 let pageCount = Math.min(curTotal , once); window.requestAnimationFrame(function(){ // 创建DocumentFragment let fragment = document.createDocumentFragment(); for(let i = 0; i < pageCount; i++){ let li = document.createElement('li'); li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) // 加入到DocumentFragment中 fragment.appendChild(li) } // 每页 内容渲染完成以后再加入DOM ul.appendChild(fragment) loop(curTotal - pageCount,curIndex + pageCount) }) } loop(total,index);\"]},\"919\":{\"h\":\"\",\"t\":[\"虚拟列表是按需显示的一种实现，只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术。\"]},\"920\":{\"h\":\"\",\"t\":[\"起始索引:可视区域的起始数据索引。\",\"结束索引:可视区域的结束数据索引。\",\"渲染数据:可视区域要渲染的数据。\",\"偏移位置:起始数据在整个列表中的偏移位置。\",\"列表项高度：列表项高不一定是固定的，如何获取合适的高度。\",\"缓冲区域：缓冲区是存在DOM树中，考虑是否渲染的算法。\"]},\"921\":{\"h\":\"\"},\"922\":{\"h\":\"\"},\"923\":{\"c\":[\"性能优化\"]},\"924\":{\"c\":[\"canvas\",\"延迟加载\",\"缓存\"]},\"925\":{\"h\":\"配置文件\",\"t\":[\"webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack 配置的对象。 webpack 会根据该配置定义的属性进行处理。\",\"由于 webpack 遵循 CommonJS 模块规范，因此，你可以在配置中使用语法：\",\"通过 require(...) 引入其他文件\",\"通过 require(...) 使用 npm 下载的工具函数\",\"使用 JavaScript 控制流表达式，例如 ?: 操作符\",\"对 value 使用常量或变量赋值\",\"编写并执行函数，生成部分配置\",\"避免如下操作\",\"当使用 webpack CLI 工具时，访问 CLI 参数（应编写自己的 CLI 工具替代，或者使用 --env\",\"导出不确定的结果（两次调用 webpack 应产生相同的输出文件）\",\"编写超长的配置（应将配置文件拆分成多个）\"]},\"926\":{\"h\":\"基本配置\",\"t\":[\"//webpack.config.js const path = require('path'); module.exports = { mode: 'development', entry: './foo.js', output: {path: path.resolve(__dirname, 'dist'),filename: 'foo.bundle.js', }, };\",\"webpack 会假定项目的入口起点为 src/index.js，然后会在 dist/main.js 输出结果，并且在生产环境开启压缩和优化。\",\"重要\",\"createapp.dev创建自定义 webpack 配置的在线工具。\"]},\"927\":{\"h\":\"使用不同的配置文件\",\"t\":[\"如果出于某些原因，需要根据特定情况使用不同的配置文件，则可以通过在命令行中使用 --config 标志修改。\",\"//package.json \\\"scripts\\\": { \\\"build\\\": \\\"webpack --config prod.config.js\\\" }\"]},\"928\":{\"h\":\"设置一个新的 webpack 项目\",\"t\":[\"Webpack 有大量的配置项，利用 webpack-cli 的 init 命令，它可以根据项目需求快速生成 webpack 配置文件，它会在创建配置文件之前询问几个问题。\",\"npx webpack init\",\"如果尚未在项目或全局安装 @webpack-cli/generators，npx 可能会提示你安装。根据你在配置生成过程中的选择，你也可能会安装额外的 package 到你的项目中。\",\"$ npx webpack init [webpack-cli] For using this command you need to install: '@webpack-cli/generators' package. [webpack-cli] Would you like to install '@webpack-cli/generators' package? (That will run 'npm install -D @webpack-cli/generators') (Y/n) devDependencies: + @webpack-cli/generators 2.5.0 ? Which of the following JS solutions do you want to use? ES6 ? Do you want to use webpack-dev-server? Yes ? Do you want to simplify the creation of HTML files for your bundle? Yes ? Do you want to add PWA support? No ? Which of the following CSS solutions do you want to use? CSS only ? Will you be using PostCSS in your project? Yes ? Do you want to extract CSS for every file? Only for Production ? Do you like to install prettier to format generated configuration? Yes ? Pick a package manager: pnpm [webpack-cli] ℹ INFO Initialising project... devDependencies: + @babel/core 7.19.3 + @babel/preset-env 7.19.4 + autoprefixer 10.4.12 + babel-loader 8.2.5 + css-loader 6.7.1 + html-webpack-plugin 5.5.0 + mini-css-extract-plugin 2.6.1 + postcss 8.4.17 + postcss-loader 7.0.1 + prettier 2.7.1 + style-loader 3.3.1 + webpack-dev-server 4.11.1 [webpack-cli] Project has been initialised with webpack!\"]},\"929\":{\"c\":[\"构建工具\"]},\"930\":{\"c\":[\"webpack\"]},\"931\":{\"h\":\"Webpack\",\"t\":[\"本质上，webpack是一个现代JavaScript应用程序的静态模块打包器(module bundler)。 当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundle。\",\"通俗的理解，webpack是一个前端项目工程化的具体解决方案。它提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端JavaScript的兼容性、性能优化等强大的功能。\",\"从 v4.0.0 开始，webpack 可以不用再引入一个配置文件来打包项目，然而，它仍然有着 高度可配置性，可以很好满足你的需求。\"]},\"932\":{\"h\":\"打包过程\",\"t\":[\"Webpack的打包过程是一个复杂但高效的过程，它能够将项目中的多个文件和资源（如JavaScript、CSS、图片等）打包成一个或多个bundle文件，以便于在浏览器中加载和运行。\",\"初始化阶段 \",\"初始化参数——配置文件 \",\"读取配置文件：Webpack首先会读取项目中的webpack.config.js文件（或其他指定的配置文件），解析其中的配置信息。 \",\"这些配置信息包括入口文件（entry points）、输出目录（output）、加载器（loader）和插件（plugin）等。\",\"合并参数：Webpack会将配置文件中的参数与通过命令行传入的参数进行合并，得到最终的打包配置参数。\",\"创建Compiler对象 \",\"创建Compiler：根据配置参数，Webpack会创建一个Compiler对象。\",\"这个对象负责控制整个打包过程，包括读取入口文件、解析模块、加载模块、转换代码、生成代码等。\",\"读取入口文件——entry \",\"找到入口文件：Webpack会根据配置中的入口文件（entry）路径，找到项目的起始点。\",\"入口文件通常是一个或多个JS文件。\",\"解析模块依赖 iii.递归解析：从入口文件开始，Webpack会递归解析项目中的所有依赖模块。这些依赖模块可以是JavaScript文件、CSS文件、图片文件等。 iv.Webpack使用不同的加载器（loader）来解析不同类型的文件。 e.加载模块——loader v.使用Loader：对于解析出的每个模块，Webpack会根据模块的类型和配置中的加载器（loader）规则，使用相应的加载器来加载模块的源代码，并将其转换为Webpack可以处理的形式。 f.转换代码——plugin vi.应用插件：在加载模块之后，Webpack会根据配置中的插件（plugin）规则，对加载的模块进行一系列的转换操作。 vii.这些转换操作可以包括代码压缩、合并、优化等。 g.生成代码 viii.合并模块：Webpack会将所有处理后的模块合并成一个或多个bundle文件。 1.合并的过程中，Webpack会根据配置中的规则来将模块分组打包，以便于在浏览器中加载和运行。 ix.输出文件：最后，Webpack会将生成的bundle文件输出到指定的输出目录中。 1.这些文件就可以在浏览器中通过<\\\\script>标签等方式加载和运行了。 h.触发生命周期事件 x.插件监听：在Webpack打包的过程中，会触发一系列的生命周期事件。 xi.这些事件可以被插件所监听，并在相应的时机执行插件的逻辑。 xii.例如，在打包完成后，可以触发一个插件来输出打包文件的大小。\"]},\"933\":{\"h\":\"浏览器兼容性(browser compatibility)\",\"t\":[\"Webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）。webpack 的 import() 和 require.ensure() 需要 Promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 提前加载 polyfill。\"]},\"934\":{\"h\":\"环境(environment)\",\"t\":[\"Webpack 5 运行于 Node.js v10.13.0+ 的版本。\"]},\"935\":{\"h\":\"模块（Modules、chunk）\",\"t\":[\"在模块化编程中，开发者将程序分解为功能离散的 chunk（项目中每一个模块），并称之为 模块。 每个模块都拥有小于完整程序的体积，使得验证、调试及测试变得轻而易举。 精心编写的 模块 提供了可靠的抽象和封装界限，使得应用程序中每个模块都具备了条理清晰的设计和明确的目的。\"]},\"936\":{\"h\":\"依赖关系\",\"t\":[\"与 Node.js 模块相比，webpack 模块能以各种方式表达它们的依赖关系。 1.ES2015 import 语句 2.CommonJS require() 语句 3.AMD define 和 require 语句 4.css/sass/less 文件中的 @import 语句 5.stylesheet url(...) 或者 HTML <\\\\img src=...> 文件中的图片链接。\"]},\"937\":{\"h\":\"支持的模块类型\",\"t\":[\"webpack原生支持：ECMAScript 模块、CommonJS 模块、AMD 模块、Assets、WebAssembly 模块 对于其他的类型的模块，需要各种loader。 webpack 社区为各种流行的语言和预处理器创建了 loader，通过 loader 可以使 webpack 支持多种语言和预处理器语法编写的模块。loader 向 webpack 描述了如何处理非原生 模块，并将相关依赖引入到你的 bundles中。 通过互相引用，这些模块会形成一个图(ModuleGraph)数据结构。 在打包过程中，模块会被合并成 chunk。 chunk 合并成 chunk 组，并形成一个通过模块互相连接的图(ModuleGraph)。\"]},\"938\":{\"h\":\"打包结果（bundle）\",\"t\":[\"bundle是指Webpack打包后最终生成的文件，包含了项目中所有依赖的模块（modules）以及Webpack在打包过程中对这些模块进行的一系列转换和优化后的结果。 bundle是项目在浏览器中运行所需的所有代码和资源的集合，它们被设计为可以在浏览器中高效地加载和执行。\"]},\"939\":{\"h\":\"打包过程\",\"t\":[\"1.Webpack的打包过程主要就是将项目中所有的资源（源代码、静态资源等）组织、转换、优化，并最终生成这些bundle文件。 2.通常，一个Webpack项目会有一个或多个入口点（entry points），Webpack会从这些入口点开始，递归地解析出所有的依赖模块，并将它们合并成一个或多个bundle文件。 3.这些bundle文件可以配置为按需加载（lazy loading），即只在需要时才加载相应的代码块，以优化页面加载时间和提高应用的性能。\"]},\"940\":{\"h\":\"设置bundle\",\"t\":[\"在Webpack的配置文件中，你可以通过output属性来指定bundle文件的名称、路径等选项。 例如，你可以将bundle文件命名为bundle.js，并将其输出到项目的dist目录下。然后，在HTML文件中，你可以通过<\\\\script>标签来引入这个bundle文件，以便在浏览器中运行你的应用。\"]},\"941\":{\"h\":\"运行时（runtime）\",\"t\":[\"Webpack的runtime（运行时）是指Webpack在打包过程中生成的一段代码，这段代码在浏览器中被用来加载和管理模块。 Webpack在打包过程中会根据项目的配置和模块之间的依赖关系生成runtime代码。这些代码通常会被添加到打包后的bundle文件的顶部或底部，具体取决于Webpack的配置。 Webpack Runtime的主要作用 1.模块加载：Webpack runtime提供了__webpack_require__函数，这个函数是Webpack模块加载机制的核心。 a.当浏览器需要加载某个模块时，会调用这个函数，并传入模块的ID作为参数。 b.__webpack_require__函数会根据模块ID在已安装的模块缓存（installedModules）中查找模块，如果找到则直接返回模块的导出对象，否则会根据模块的路径加载模块并执行，然后将模块的导出对象缓存起来供后续使用。 2.依赖解析：Webpack在打包过程中会分析模块之间的依赖关系，并生成相应的依赖图（Dependency Graph）。 a.Webpack runtime会根据这个依赖图来解析模块的依赖，确保模块能够按照正确的顺序被加载和执行。 3.缓存管理：Webpack runtime还负责模块的缓存管理。 a.当模块被加载并执行后，其导出对象会被缓存起来，以便后续再次需要该模块时能够直接从缓存中获取，而不需要重新加载和执行模块代码。 4.动态加载：Webpack支持代码分割（Code Splitting），允许将代码分割成多个bundle，并在需要时动态加载。 a.Webpack runtime提供了支持动态加载的机制，如import()语法，它允许在运行时动态地加载模块。 优化Webpack Runtime 为了优化Webpack打包结果，可以采取一些措施来减少runtime代码的大小和复杂度，例如： 1.使用optimization.runtimeChunk选项：将runtime代码单独打包成一个或多个chunk，这样可以在不更改业务代码的情况下更新runtime代码，从而提高缓存效率。 2.优化模块ID：使用HashedModuleIdsPlugin等插件来生成稳定的模块ID，避免在每次构建时都生成新的ID，从而减少缓存失效的可能性。 3.减少依赖：优化项目的依赖关系，减少不必要的依赖，可以降低runtime代码的复杂度。\"]},\"942\":{\"h\":\"数据集合（manifest）\",\"t\":[\"Webpack的manifest是一个在Webpack构建过程中生成的数据集合，它记录了关于打包后模块（bundles/chunks）的详细信息。 runtime使用manifest的信息加载和解析模块 Webpack Manifest的主要作用 1.模块解析：manifest包含了模块之间的映射关系，包括模块的ID、路径等信息。 a.这些信息在运行时被用来解析和加载模块。 2.缓存优化：通过manifest，Webpack可以更有效地利用浏览器的缓存机制。 a.当模块内容发生变化时，只有受影响的模块需要重新加载，而其他未变化的模块则可以继续使用缓存中的版本。 3.资源定位：在按需加载（code splitting）的场景下，manifest帮助Webpack的运行时（runtime）定位并加载所需的代码块（chunks）。 Webpack Manifest的生成与使用 1.生成：Webpack在构建过程中会自动生成manifest数据，但这些数据通常不会直接暴露给用户或开发者。 a.然而，通过一些插件（如WebpackManifestPlugin），开发者可以将这些manifest数据导出为文件（如manifest.json），以便在需要时查阅或使用。 2.使用：在浏览器端，Webpack的运行时（runtime）会根据manifest来加载和解析模块。 a.对于开发者来说，了解manifest的内容可以帮助他们更好地理解Webpack的打包结果，以及优化应用的加载性能。 注意事项：Webpack的manifest是构建过程中的一个内部机制，通常不需要开发者直接干预。然而，了解它的工作原理对于深入理解Webpack的打包机制和优化应用性能是非常有帮助的。 不同的Webpack版本和配置可能会生成略有不同的manifest数据。因此，在查阅或分析manifest时，需要注意与当前项目的Webpack版本和配置相匹配。\"]},\"943\":{\"c\":[\"构建工具\"]},\"944\":{\"c\":[\"webpack\"]},\"945\":{\"h\":\"loader(转换器)\",\"t\":[\"由于 webpack 只能理解JavaScript和JSON文件。对于其他文件需要loader将其他的类型的文件转换为有效模块，以供应用程序使用，以及被添加到依赖图中。\",\"允许在 JS 模块中 import CSS 文件！\",\"将文件从不同的语言（如 TypeScript ）转换为 JavaScript\",\"可以将内联图像转换为 data URL。\"]},\"946\":{\"h\":\"特点\",\"t\":[\"loader 支持 链式调用 。 \",\"链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照从右到左的顺序执行。\",\"链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。\",\"最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。\",\"loader 可以是 同步 的，也可以是 异步 的。\",\"loader 运行在 Node.js 中，并且能够执行任何操作。\",\"loader 可以通过 options 对象配置（仍然支持使用 query 参数来设置选项，但是这种方式已被废弃）。\",\"除了常见的通过 package.json 的 main 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 loader 字段直接引用一个模块。\",\"插件(plugin)可以为 loader 带来更多特性。\",\"loader 能够产生额外的任意文件。 可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译） 和 更多其他特性。\",\"重要\",\"webpack 的其中一个强大的特性就是能通过 import 导入任何类型的模块（例如 .css 文件），其他打包程序或任务执行器的可能并不支持。\"]},\"947\":{\"h\":\"使用loader\",\"t\":[\"有两种使用 loader 的方式：\",\"配置方式（推荐）：在 webpack.config.js 文件中指定 loader 。\",\"内联方式：在每个 import 语句中显式指定 loader 。\",\"重要\",\"在 webpack v4 版本可以通过 CLI 使用 loader，但是在 webpack v5 中被弃用。\"]},\"948\":{\"h\":\"配置方式\",\"t\":[\"module.rules 允许你在 webpack 配置中对一个rules指定多个 loader。 loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。 在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。\",\"module.exports = { module: { rules: [ { test: /\\\\.css$/, use: [ { loader: 'style-loader' }, {loader: 'css-loader', options: {modules: true,},}, { loader: 'sass-loader' }, ], }, ],},};\",\"重要\",\"警告：请记住，使用正则表达式匹配文件时，你不要为它添加引号。也就是说，/.txt$/ 与 '/.txt$/' 或 \\\"/.txt$/\\\" 不一样。\",\"前者指示 webpack 匹配任何以 .txt 结尾的文件，后者指示 webpack 匹配具有绝对路径 '.txt' 的单个文件; 这可能不符合你的意图。\"]},\"949\":{\"h\":\"内联方式\",\"t\":[\"可以在 import 语句或任何 与 \\\"import\\\" 方法同等的引用方式 中指定 loader。使用 ! （后缀）将资源中的 loader 分开。每个部分都会相对于当前目录解析。\",\"import Styles from 'style-loader!css-loader?modules!./styles.css';\",\"通过为内联 import 语句添加前缀，可以覆盖 配置 中的所有 loader, preLoader 和 postLoader：\",\"使用 ! 前缀，将禁用所有已配置的 normal loader(普通 loader)\",\"import Styles from '!style-loader!css-loader?modules!./styles.css';\",\"使用 !! 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）\",\"import Styles from '!!style-loader!css-loader?modules!./styles.css';\",\"使用 -! 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders\",\"import Styles from '-!style-loader!css-loader?modules!./styles.css';\",\"选项可以传递查询参数，例如 ?key=value&foo=bar ，或者一个 JSON 对象，例如 ?{\\\"key\\\":\\\"value\\\",\\\"foo\\\":\\\"bar\\\"} 。\",\"重要\",\"尽可能使用 module.rules，因为这样可以减少源码中样板文件的代码量，并且可以在出错时，更快地调试和定位 loader 中的问题。\"]},\"950\":{\"c\":[\"构建工具\"]},\"951\":{\"c\":[\"webpack\"]},\"952\":{\"h\":\"插件(Plugins)\",\"t\":[\"plugins 选项用于以各种方式自定义 webpack 构建过程，他是 Plugin的集合。查看插件页面 获取插件列表和对应文档。\"]},\"953\":{\"h\":\"插件(plugin)\",\"t\":[\"loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。 想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。 你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例。\",\"// webpack.config.js const HtmlWebpackPlugin = require('html-webpack-plugin'); const webpack = require('webpack'); // 用于访问内置插件 module.exports = { module: { rules: [{ test: /\\\\.txt$/, use: 'raw-loader' }], }, plugins: [ new HtmlWebpackPlugin({ template: './src/index.html' })], };\",\"在上面的示例中，html-webpack-plugin 为应用程序生成一个 HTML 文件，并自动将生成的所有 bundle 注入到此文件中。\"]},\"954\":{\"h\":\"配置方式\",\"t\":[\"//webpack.config.js const HtmlWebpackPlugin = require('html-webpack-plugin'); const webpack = require('webpack'); // 访问内置的插件 const path = require('path'); module.exports = { entry: './path/to/my/entry/file.js', output: { filename: 'my-first-webpack.bundle.js', path: path.resolve(__dirname, 'dist'), }, module: { rules: [{test: /\\\\.(js|jsx)$/, use: 'babel-loader',},], }, plugins: [ new webpack.ProgressPlugin(), new HtmlWebpackPlugin({ template: './src/index.html' }), ], };\",\"ProgressPlugin 用于自定义编译过程中的进度报告，HtmlWebpackPlugin 将生成一个 HTML 文件，并在其中使用 script 引入一个名为 my-first-webpack.bundle.js 的 JS 文件。\"]},\"955\":{\"h\":\"使用Node API 方式配置\",\"t\":[\"在使用 Node API 时，还可以通过配置中的 plugins 属性传入插件。\",\"//some-node-script.js const webpack = require('webpack'); // 访问 webpack 运行时(runtime) const configuration = require('./webpack.config.js'); //配置文件 let compiler = webpack(configuration); new webpack.ProgressPlugin().apply(compiler); compiler.run(function (err, stats) { // ... });\"]},\"956\":{\"h\":\"剖析\",\"t\":[\"webpack 插件是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在 整个 编译生命周期都可以访问 compiler 对象。\",\"//ConsoleLogOnBuildWebpackPlugin.js const pluginName = 'ConsoleLogOnBuildWebpackPlugin'; class ConsoleLogOnBuildWebpackPlugin { apply(compiler) { compiler.hooks.run.tap(pluginName, (compilation) => {console.log('webpack 构建正在启动！');}); } } module.exports = ConsoleLogOnBuildWebpackPlugin;\",\"compiler.hook.run 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中重复使用。\"]},\"957\":{\"c\":[\"构建工具\"]},\"958\":{\"c\":[\"webpack\"]},\"959\":{\"h\":\"canvas\"},\"960\":{\"c\":[\"h5\"]},\"961\":{\"h\":\"canvas\"},\"962\":{\"c\":[\"HTNL\",\"canvas\"]},\"963\":{\"h\":\"数据类型\"},\"964\":{\"c\":[\"ECMA标准\"]},\"965\":{\"h\":\"操作(算法)约定\"},\"966\":{\"c\":[\"ECMA标准\"]},\"967\":{\"h\":\"运行时语义：Runtime Semantics\",\"t\":[\"在运行时调用的算法(指定语义)称为运行时语义。运行时语义由抽象操作(abstract operations)或语法导向操作(Syntax-Directed Operations)定义。\",\"以下的是一般运行时语义。\"]},\"968\":{\"h\":\"\",\"t\":[\"抽象操作完成接受参数completionRecord（一个完成记录），并返回一个完成记录(规范类型)。此操作用于强调正在返回一个完成记录。在被调用时，它执行以下步骤：\",\"完成语义的一个雷子\",\"Assert: completionRecord is a Completion Record.\",\"ReturncompletionRecord.\"]},\"969\":{\"h\":\"\",\"t\":[\"步骤中提到抛出异常的，如：\",\"Throw a TypeError exception.\",\"意味着与以下内容相同：\",\"Return ThrowCompletion(a newly created TypeError object). :::\"]},\"970\":{\"h\":\"\",\"t\":[\"ReturnIfAbrupt这是一个简写的步骤。算法步骤中提到或等同于以下内容：\",\"ReturnIfAbrupt(argument)。 意味着\",\"Assert：argument is a Completion Record。\",\"If argument is a abrupt completion，return Completion(argument)。\",\"Else, set argument 设置为 argument.[[Value]]。\",\"重要\",\"他的简短含义是：\",\"如果完成记录(步骤1)一个 硬性完成(步骤2)，返回这个完成记录。\",\"否则，完成记录是一个正常完成(步骤3)，将argument 设置为它真正的值。\"]},\"971\":{\"h\":\"\",\"t\":[\"在抽象操作和语法导向操作调用时，前缀为?表示应用ReturnIfAbrupt。\",\"? OperationName(). 等同于以下步骤：\",\"ReturnIfAbrupt(OperationName())。\"]},\"972\":{\"h\":\"\",\"t\":[\"重要\",\"前缀 ! 用来表示抽象操作或语法导向操作的调用绝不会返回一个abrupt completion，并且结果中的完成记录的[[Value]]字段应当代替操作的返回值使用。\",\"Let val be ! OperationName(). 等同于以下步骤：\",\"Let val be OperationName().\",\"Assert: val is a normal completion.\",\"Set val to val.[[Value]].\"]},\"973\":{\"h\":\"\",\"t\":[\"在标准中声明的返回完成记录的抽象操作和所有内置函数中，返回的值传递给NormalCompletion，并使用其结果。 在以下情况不适用：\",\"直接返回应用Completion、NormalCompletion或ThrowCompletion的结果时。\",\"直接返回构建一个完成记录的结果时。\",\"重要\",\"言外之意，一般情况下只要不是 abrupt completion,都是NormalCompletion。\"]},\"974\":{\"c\":[\"ECMA标准\"]},\"975\":{\"h\":\"术语\"},\"976\":{\"h\":\"\"},\"977\":{\"h\":\"\",\"t\":[\"语法导向操作是一系列算法的总和，与产生式绑定。在标准中文法定义了语句的结构，其语义通过语法导向操作进行表达。一条产生式可以绑定多条语法导向操作。 每条产生式的目标符实例都可以通过调用自身的语法导向操作，执行这些逻辑，完成语句语义的表达。\",\"重要\",\"语法导向操作和抽象操作有两种类型：\",\"静态语义。\",\"运行时语义。\",\"脚本的语法导向操作，这里是求值语义。\",\"重要\",\"Runtime Semantics:EvaluationScript:[empty] 1.Return undefined.\",\"可以看出，对于脚本内容的情况返回undefined。\"]},\"978\":{\"h\":\"\",\"t\":[\"ECMA通过算法或描述性要求来表达的额外规则，这些规则与语法的产生式相关联，并称为产生式的静态语义。 还有一种特殊类型的静态语义是先觉错误(Early Error),定义了特定语法产生错误的条件。\",\"语句列表的静态语义(顶层作用域声明)\",\"StatementList:StatementList StatementListItem\",\"Let declarations1 be TopLevelLexicallyScopedDeclarations of StatementList.\",\"Let declarations2 be TopLevelLexicallyScopedDeclarations of StatementListItem.\",\"Return the list-concatenation of declarations1 and declarations2.\"]},\"979\":{\"h\":\"\"},\"980\":{\"h\":\"\",\"t\":[\"在标准中，ECMA语言值以粗体显示。例如null、true。\"]},\"981\":{\"h\":\"\",\"t\":[\"在标准上查看 标准中有两类值，ECMA规范类型值、ECMA语言值。 在比较相等性时，按是否具备标识分为两类：\",\"不具有标识的值：比较时，值或特征相同意味着相等。\",\"具有标识的值：唯一的，只等于它本身。\",\"语言值使用SameValue抽象操作及其传递调用的抽象操作进行相等性比较。这些比较的算法操作决定了ECMAScript 语言值的语言标识。\"]},\"982\":{\"c\":[\"ECMA标准\"]},\"983\":{\"h\":\"文法参数\",\"t\":[\"文法参数(Grammatical Parameters)指在ECMA的产生式中的以 [] 包括的一系列参数。 语法参数是由前缀参数(?,~等)和文法参数(In,Return等)的组合。\",\"参数化的产生式\",\"VariableDeclaration[In] :BindingIdentifier Initializer[?In]\"]},\"984\":{\"h\":\"文法参数的含义\",\"t\":[\"seq:表示是否可以使用数字分隔符；\",\"await:表示是否可以使用await语句；\",\"yield:表示是否可以使用yield语句；\",\"in:表示in是in操作符还是for...in...语句中的「in」；\",\"default:表示是否可以使用无名函数/类；\",\"return:表示是否可以使用return语句；\"]},\"985\":{\"h\":\"文法前缀参数的含义\",\"t\":[\"”+“：表示非终结符可以带有该参数\",\"”~“：表示非终结符不可以带有该参数\",\"”？“：如果目标符有该参数，那么非终结符中也有，否则没有。\",\"当文法参数放在代换式左侧时，文法前缀参数的含义是不一样的\",\"+：表示如果目标符带有该参数，那么这条代换式就存在，否则不存在；\",\"~：表示如果目标符不带有该参数，那么这条代换式存在，否则不存在；\"]},\"986\":{\"h\":\"\",\"t\":[\"ECMA对普通脚本的定义，脚本可以为空。语句列表中不允许使用await、yield、return语句。此时await，yield会被当作普通标识符使用：\",\"脚本产生式\",\"Script:SciptBodyopt\",\"SciptBody:StatementList[~Yield,~Await,~Return]\",\"可以看出，模块也可以为空。模块内容条目中的其中一个代换式，可以使用await语句，不能使用yeild、return。这意味着，await作为关键字使用，而yeild和return可以作为标识符使用。\",\"模块产生式\",\"Module:ModuleBodyopt\",\"ModuleItem:StatementListItem[~Yield,+Await,~Return]\",\"可以看出，如果存在return则存在 return_语句。\",\"重要\",\"StatementList[Return]: [+Return] ReturnStatementExpressionStatement\"]},\"987\":{\"c\":[\"ECMA标准\"]},\"988\":{\"h\":\"句法和词法约定\"},\"989\":{\"c\":[\"ECMA标准\"]},\"990\":{\"h\":\"文法符号\"},\"991\":{\"h\":\"\",\"t\":[\"表示没有产生式的元素，无法继续展开，在ECMA中使用黑色粗体表示。\",\"十六进制字面量产生式\",\"HexIntegerLiteral::0xHexDigits\",\"0x和::为非终结符\"]},\"992\":{\"h\":\"\",\"t\":[\"非终结符号为斜体类型。非终结(也称为产生式)的定义从被定义非终结名称(也称为目标符号，产生式的目标结果)开始，后面跟着一个或多个冒号。然后产生式的一个或多个代换式在后续行跟随。 冒号的数量表示产生式所属的语法。\",\"单个冒号表示句法(语句)的定义。\",\"两个冒号便是此法(词语)的定义。\",\"while语句的产生式(定义)\",\"WhileStatement:while(Expression)Statement\"]},\"993\":{\"h\":\"\",\"t\":[\"下标后缀“opt”，可出现在终结符或非终结符之后，表示一个可选符号。包含可选符号的替代项实际上指定了两个代换式，一个省略可选元素，一个包含它。\",\"while语句的产生式(定义)\",\"VariableDeclaration:BindingIdentifier Initializeropt 是以下的缩写VariableDeclaration:BindingIdentifierBindingIdentifier Initializer\"]},\"994\":{\"h\":\"\",\"t\":[\"当文法定义中的冒号后面跟着“one of”短语时，它们表示其中之一。\",\"NonZeroDigit\",\"NonZeroDigit::one of1 2 3 4 5 6 7 8 9\",\"是以下的缩写\",\"NonZeroDigit::one of123456789\"]},\"995\":{\"h\":\"\",\"t\":[\"生成式的右侧可以使用短语“but not”并指示要排除的扩展来指定不允许某些扩展。\",\"Identifier词法的产生式(定义)\",\"Identifier:IdentifierNamebut notReservedWord\",\"以上表示，标识符的名字不能为保留字。\"]},\"996\":{\"h\":\"\",\"t\":[\"如果产生式的右侧出现“[empty]”这一短语，它表示该产生式的右侧不包含任何终结符号或非终结符号。\",\"参数的产生式\",\"FormalParameters[Yield,Await]:[empty]\",\"以上表示，参数可以为空。\"]},\"997\":{\"h\":\"\",\"t\":[\"短语“[lookahead = seq]”出现在代换式某个位置的右侧，对该位置后面紧跟的内容进行限制。 标准中有如下：\",\"[lookahead = x]:该位置后面必须是 x。\",\"[lookahead ≠ x]:该位置后面不能是 x。\",\"[lookahead ∈ set]：该位置后面跟着的内容必须属于 set。\",\"[lookahead ∉ set]:该位置后面跟着的内容必须不属于 set。\"]},\"998\":{\"h\":\"\",\"t\":[\"如果在句法的生成式的部分右侧出现短语“[no LineTerminator here]”，则表示该生成式是受限生成式。如果在指示位置的输入流中出现 行终结符(LineTerminator)，则不允许使用该生成式。\",\"thorw的代换式\",\"ThrowStatement::throw [no LineTerminator here] Expression;\",\"可以看出throw语句不可以换行。\"]},\"999\":{\"h\":\"\",\"t\":[\"在一些列出所有替代方案不切实际的情况下，使用描述性短语来描述少数非终结符号：\",\"重要\",\"SourceCharacter:: 任意 Unicode 代码点\"]},\"1000\":{\"c\":[\"ECMA标准\"]},\"1001\":{\"c\":[\"ECMA\"]},\"1002\":{\"h\":\"ES语言类型\"},\"1003\":{\"c\":[\"ECMA标准\"]},\"1004\":{\"h\":\"ES规范类型\"},\"1005\":{\"c\":[\"ECMA标准\"]},\"1006\":{\"h\":\"String类型\"},\"1007\":{\"c\":[\"ECMA标准\"]},\"1008\":{\"h\":\"String字面量\",\"t\":[\"字符串文本是 0 个或多个 Unicode 码位，用单引号或双引号括起来。\",\"Unicode 码位也可以由转义序列表示。除右引号代码点 U+005C （REVERSE SOLIDUS）、U+000D （回车） 和 U+000A （换行） 之外，所有代码点都可以直接出现在字符串文本中。\",\"任何码位都可以以转义序列的形式出现。String 文本的计算结果为 ECMAScript String 值。生成这些 String 值时，Unicode 码位将按照 11.1.1 中的定义进行 UTF-16 编码。\",\"属于基本多语言平面的码位编码为字符串的单个代码单元元素。所有其他码位都编码为字符串的两个码位元素。\"]},\"1009\":{\"h\":\"\",\"t\":[\"有单引号，双引号的写法\",\"不能包含以下之一，单引号、反斜杠、行终结符\",\"\\\\ 与转义序列、行终结符的组合\"]},\"1010\":{\"h\":\"\",\"t\":[\"单转义字符( ‘，“，\\\\，b，f，n，r，t，v)\",\"0~9\",\"x\",\"u\"]},\"1011\":{\"h\":\"\",\"t\":[\"单转义字符、非转义字符（非转义、非行终结符）\",\"0，不能跟八进制数\",\"旧式八进制转义 \",\"0，不能跟8，9\",\"1~7和八进制数的组合，不能跟八进制数\",\"0~3和八进制数的组合\",\"4~7和八进制数的组合\",\"非八进制十进制转义：8，9\",\"十六进制转义： \",\"x和两个十六进制数的组合\",\"Unicode转义： \",\"u 四个十六进制的组合\",\"u\"]},\"1012\":{\"h\":\"先觉错误\",\"t\":[\"在 严格模式(strict mode) 下，转义序列不能使用 旧式八进制转义、非八进制十进制转义。\"]},\"1013\":{\"h\":\"在代码块内使用严格模式\",\"t\":[\"字符串文本位于指令” Use Strict“之前，该指令将整个代码块至于严格模式，并强制实施上述规则。\",\"// 使用了旧式八进制转义，出错 function invalid() {\\\"/7\\\";\\\"use strict\\\"}\"]},\"1014\":{\"c\":[\"ECMA标准\"]},\"1015\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"1016\":{\"h\":\"Posts\"},\"1017\":{\"h\":\"CSS\"},\"1018\":{\"h\":\"PHP\"},\"1019\":{\"h\":\"Version Control\"},\"1020\":{\"h\":\"Vue\"}},\"dirtCount\":0,\"index\":[[\"码位将按照\",{\"1\":{\"1008\":1}}],[\"码位也可以由转义序列表示\",{\"1\":{\"1008\":1}}],[\"码位\",{\"1\":{\"1008\":1}}],[\"∉\",{\"1\":{\"997\":1}}],[\"∈\",{\"1\":{\"997\":1}}],[\"≠\",{\"1\":{\"997\":1}}],[\"词语\",{\"1\":{\"992\":1}}],[\"词法环境是作用域链的起点\",{\"1\":{\"92\":1}}],[\"冒号的数量表示产生式所属的语法\",{\"1\":{\"992\":1}}],[\"冒泡阶段\",{\"1\":{\"273\":1}}],[\"句法和词法约定\",{\"0\":{\"988\":1}}],[\"句号\",{\"1\":{\"408\":1}}],[\"唯一的\",{\"1\":{\"981\":1}}],[\"顶层作用域声明\",{\"1\":{\"978\":1}}],[\"顶级域名\",{\"1\":{\"139\":1}}],[\"术语\",{\"0\":{\"975\":1}}],[\"术语叫边缘节点\",{\"1\":{\"132\":1}}],[\"言外之意\",{\"1\":{\"973\":1}}],[\"硬性完成\",{\"1\":{\"970\":1}}],[\"步骤3\",{\"1\":{\"970\":1}}],[\"步骤2\",{\"1\":{\"970\":1}}],[\"步骤1\",{\"1\":{\"970\":1}}],[\"步骤中提到抛出异常的\",{\"1\":{\"969\":1}}],[\"抽象操作完成接受参数completionrecord\",{\"1\":{\"968\":1}}],[\"抽象类不能被实例化\",{\"1\":{\"653\":1}}],[\"抽象类可以包含成员的实现细节\",{\"1\":{\"653\":1}}],[\"抽象类作为其他派生类的基类使用\",{\"1\":{\"653\":1}}],[\"抽象类\",{\"0\":{\"653\":1}}],[\"约定\",{\"0\":{\"965\":1}}],[\"剖析\",{\"0\":{\"956\":1}}],[\"想要使用一个插件\",{\"1\":{\"953\":1}}],[\"想要的答案\",{\"1\":{\"140\":1}}],[\"链中的最后一个\",{\"1\":{\"946\":1}}],[\"链中的第一个\",{\"1\":{\"946\":1}}],[\"链中的每个\",{\"1\":{\"946\":1}}],[\"链式调用\",{\"1\":{\"946\":1}}],[\"链接\",{\"1\":{\"881\":1}}],[\"了解它的工作原理对于深入理解webpack的打包机制和优化应用性能是非常有帮助的\",{\"1\":{\"942\":1}}],[\"了解manifest的内容可以帮助他们更好地理解webpack的打包结果\",{\"1\":{\"942\":1}}],[\"社区为各种流行的语言和预处理器创建了\",{\"1\":{\"937\":1}}],[\"精心编写的\",{\"1\":{\"935\":1}}],[\"读取入口文件\",{\"1\":{\"932\":1}}],[\"读取配置文件\",{\"1\":{\"932\":1}}],[\"ℹ\",{\"1\":{\"928\":1}}],[\"工具替代\",{\"1\":{\"925\":1}}],[\"工具时\",{\"1\":{\"925\":1}}],[\"工作区\",{\"1\":{\"685\":1}}],[\"偏移位置\",{\"1\":{\"920\":1}}],[\"偏大或偏小的字体\",{\"1\":{\"37\":1}}],[\"刷新频率受屏幕分辨率和屏幕尺寸的影响\",{\"1\":{\"916\":1}}],[\"难度小\",{\"1\":{\"908\":1}}],[\"难度大\",{\"1\":{\"908\":1}}],[\"难以重用和共享组件中的与状态相关的逻辑\",{\"1\":{\"517\":1}}],[\"耗费cpu\",{\"1\":{\"908\":1}}],[\"骨架屏是一种在页面加载过程中\",{\"1\":{\"910\":1}}],[\"骨架屏\",{\"1\":{\"905\":1},\"2\":{\"913\":1}}],[\"警告\",{\"1\":{\"886\":1,\"948\":1}}],[\"毫秒的时长\",{\"1\":{\"885\":1}}],[\"毫秒的任务\",{\"1\":{\"885\":1}}],[\"阻塞\",{\"1\":{\"885\":1}}],[\"阻止事件的默认行为\",{\"1\":{\"699\":1}}],[\"阻止事件冒泡\",{\"1\":{\"699\":1}}],[\"阻止合成事件与除最外层document上的原生事件上的冒泡\",{\"1\":{\"505\":1}}],[\"阻止合成事件与最外层\",{\"1\":{\"505\":1}}],[\"阻止合成事件间的冒泡\",{\"1\":{\"505\":1}}],[\"何时视为阻塞\",{\"1\":{\"885\":1}}],[\"互动延迟时间\",{\"1\":{\"882\":1}}],[\"互不打扰\",{\"1\":{\"156\":1}}],[\"许多用户互动不需要事件监听器\",{\"1\":{\"881\":1}}],[\"旨在更具选择性\",{\"1\":{\"879\":1}}],[\"旨在快速高效地处理从小型到大型项目的所以事务特性\",{\"1\":{\"682\":1}}],[\"衡量的是主要内容绘制到屏幕上的时间\",{\"1\":{\"879\":1}}],[\"衡量的是任何内容绘制到屏幕上的时间\",{\"1\":{\"879\":1}}],[\"弱缓存\",{\"1\":{\"867\":1}}],[\"又称为对比缓存\",{\"1\":{\"867\":1}}],[\"私有缓存\",{\"1\":{\"866\":1}}],[\"私钥加密后也只能用公钥解密\",{\"1\":{\"236\":1}}],[\"私钥则需要保密\",{\"1\":{\"236\":1}}],[\"强缓存\",{\"1\":{\"863\":1}}],[\"强制向服务器请求资源\",{\"1\":{\"863\":1}}],[\"强制输入格式\",{\"1\":{\"467\":1}}],[\"强制转换为\",{\"1\":{\"374\":1}}],[\"强制类型约束\",{\"1\":{\"368\":1}}],[\"强制参数可以改为可选参数\",{\"1\":{\"341\":1}}],[\"强制缓存与协商缓存的流程图如下所示\",{\"1\":{\"226\":1}}],[\"侧重于图片\",{\"1\":{\"860\":1}}],[\"侧边栏为次要内容布局容器\",{\"1\":{\"74\":1}}],[\"推荐\",{\"1\":{\"947\":1}}],[\"推荐给setstate一个参数传入一个function\",{\"1\":{\"616\":1}}],[\"推迟加载非关键内容或资源\",{\"1\":{\"860\":1}}],[\"防抖\",{\"2\":{\"855\":1}}],[\"防止重复渲染\",{\"1\":{\"846\":1}}],[\"防止重复渲染dom\",{\"1\":{\"763\":1}}],[\"防止表单重复提交\",{\"1\":{\"738\":1}}],[\"防止无用的state更新\",{\"1\":{\"436\":1}}],[\"防止初始化后修改属性\",{\"1\":{\"347\":1}}],[\"防止用户伪造\",{\"1\":{\"287\":1}}],[\"防止下方元素飞到上方内容\",{\"1\":{\"75\":1}}],[\"防止margin重叠\",{\"1\":{\"21\":1}}],[\"瀑布数据等需要大量绑定相同功能的函数场景\",{\"1\":{\"852\":1}}],[\"搜索框输入查询\",{\"1\":{\"849\":1}}],[\"搜索框搜索输入\",{\"1\":{\"846\":1}}],[\"间隔执行\",{\"1\":{\"847\":1}}],[\"间隔时间是否达到\",{\"1\":{\"847\":1}}],[\"邮箱输入验证\",{\"1\":{\"846\":1}}],[\"短语\",{\"1\":{\"997\":1}}],[\"短语时\",{\"1\":{\"994\":1}}],[\"短时间内重复的\",{\"1\":{\"844\":1}}],[\"短标记是被默认开启的\",{\"1\":{\"330\":1}}],[\"短标记\",{\"1\":{\"330\":1}}],[\"崩溃\",{\"1\":{\"844\":1}}],[\"甚至可以造成浏览器卡死\",{\"1\":{\"844\":1}}],[\"几乎没有侵入性\",{\"1\":{\"908\":1}}],[\"几乎与http一致\",{\"1\":{\"199\":1}}],[\"几百次\",{\"1\":{\"844\":1}}],[\"节省时间\",{\"1\":{\"871\":1}}],[\"节流\",{\"2\":{\"855\":1}}],[\"节流来减少操作的重复执行\",{\"1\":{\"843\":1}}],[\"节点未处理\",{\"1\":{\"770\":1}}],[\"节点el和一个状态对象state\",{\"1\":{\"753\":1}}],[\"节点或在\",{\"1\":{\"578\":1}}],[\"节点不会发生变化\",{\"1\":{\"542\":1}}],[\"节点大致可以分成四个类别\",{\"1\":{\"538\":1}}],[\"节点4移动至下标为4的位置\",{\"1\":{\"497\":1}}],[\"节点2移动至下标为2的位置\",{\"1\":{\"497\":2}}],[\"节点c\",{\"1\":{\"496\":1}}],[\"节点d\",{\"1\":{\"496\":1}}],[\"节点a\",{\"1\":{\"496\":1}}],[\"节点b\",{\"1\":{\"496\":1}}],[\"节点根据如下三个属性构建一颗树\",{\"1\":{\"429\":1}}],[\"节点有个对应的\",{\"1\":{\"429\":1}}],[\"节点保存了本次更新中该组件改变的状态\",{\"1\":{\"429\":1}}],[\"节点等信息\",{\"1\":{\"429\":1}}],[\"节点对应一个\",{\"1\":{\"429\":1}}],[\"节点实现\",{\"1\":{\"429\":1}}],[\"节点\",{\"1\":{\"132\":1,\"429\":1,\"450\":1,\"770\":1}}],[\"及以下版本\",{\"1\":{\"933\":1}}],[\"及时检测服务器的ip变化\",{\"1\":{\"871\":1}}],[\"及setstoragesycn\",{\"1\":{\"840\":1}}],[\"及早求值\",{\"1\":{\"320\":1}}],[\"尽可能使用\",{\"1\":{\"949\":1}}],[\"尽量减少不必要的https请求\",{\"1\":{\"840\":1}}],[\"尽管\",{\"1\":{\"407\":1}}],[\"尽管后面的代码没有用到arr\",{\"1\":{\"250\":1}}],[\"展示一个固定的启动界面\",{\"1\":{\"838\":1}}],[\"热启动\",{\"1\":{\"837\":1}}],[\"冷启动\",{\"1\":{\"837\":1}}],[\"丢到逻辑层交给js处理\",{\"1\":{\"836\":1}}],[\"界面渲染相关的任务全都在webview线程里执行\",{\"1\":{\"835\":1}}],[\"界面长时间不更新\",{\"1\":{\"427\":1}}],[\"长时间的脚本运行会导致页面失去响应\",{\"1\":{\"835\":1}}],[\"长度不相等直接返回false\",{\"1\":{\"549\":1}}],[\"长度加限制\",{\"1\":{\"218\":1}}],[\"支付流程\",{\"0\":{\"834\":1}}],[\"支持的模块类型\",{\"0\":{\"937\":1}}],[\"支持所有符合\",{\"1\":{\"933\":1}}],[\"支持所有的css特性\",{\"1\":{\"483\":1}}],[\"支持typescript\",{\"1\":{\"812\":1}}],[\"支持动态路由\",{\"1\":{\"812\":1}}],[\"支持组件返回多个根节点\",{\"1\":{\"811\":1}}],[\"支持链式调用\",{\"1\":{\"699\":1}}],[\"支持多种语言和预处理器语法编写的模块\",{\"1\":{\"937\":1}}],[\"支持多个根节点\",{\"1\":{\"817\":1}}],[\"支持多人协作开发的版本管理系统将事半功倍\",{\"1\":{\"675\":1}}],[\"支持多功能并行开发\",{\"1\":{\"675\":1}}],[\"支持两种类型别名\",{\"1\":{\"369\":1}}],[\"支持一个执行运算符\",{\"1\":{\"360\":1}}],[\"支持一个错误控制运算符\",{\"1\":{\"359\":1}}],[\"支持一对一\",{\"1\":{\"183\":1}}],[\"支持存储js对象\",{\"1\":{\"280\":1}}],[\"支持客户\",{\"1\":{\"230\":1}}],[\"支持扩展渲染目标\",{\"1\":{\"813\":1}}],[\"支持扩展\",{\"1\":{\"201\":1}}],[\"支持万维网应用的\",{\"1\":{\"158\":1}}],[\"支持\",{\"1\":{\"72\":2,\"333\":1,\"946\":1}}],[\"继续使用本地保存的自定义登陆状态\",{\"1\":{\"830\":1}}],[\"继承一个或多个类型\",{\"1\":{\"645\":1}}],[\"继承react\",{\"1\":{\"627\":1}}],[\"继承的是实例对象\",{\"1\":{\"258\":1}}],[\"继承的优点\",{\"1\":{\"256\":1}}],[\"继承可以使得子类具有父类别的各种属性和方法\",{\"1\":{\"256\":1}}],[\"继承自\",{\"1\":{\"256\":1}}],[\"继承\",{\"0\":{\"256\":1,\"340\":1,\"474\":1,\"650\":1},\"1\":{\"256\":1,\"326\":1,\"339\":1,\"471\":1}}],[\"继承中比较特殊的几点\",{\"1\":{\"37\":1}}],[\"继承是指的是给父元素设置一些属性\",{\"1\":{\"37\":1}}],[\"继承属性\",{\"0\":{\"37\":1}}],[\"继承父元素background\",{\"1\":{\"7\":1}}],[\"检验登录状态是否过期\",{\"0\":{\"830\":1}}],[\"检查类型是否一致\",{\"1\":{\"770\":1}}],[\"检查边缘节点的负载情况\",{\"1\":{\"134\":1}}],[\"微信会为小程序准备好通用的运行环境\",{\"1\":{\"838\":1}}],[\"微信进行了特殊的处理\",{\"1\":{\"836\":1}}],[\"微信的页面栈有10层\",{\"1\":{\"832\":1}}],[\"微信小程序拥有web和application共同的特征\",{\"1\":{\"831\":1}}],[\"微信服务器返回openid\",{\"1\":{\"829\":1}}],[\"微信都会将用户的微信id映射出一个小程序openid\",{\"1\":{\"829\":1}}],[\"登录流程\",{\"0\":{\"829\":1}}],[\"登陆成功后\",{\"1\":{\"287\":1}}],[\"离开小程序\",{\"1\":{\"828\":1}}],[\"离开环境\",{\"1\":{\"249\":1}}],[\"终止任务\",{\"1\":{\"825\":2}}],[\"启动时间\",{\"1\":{\"883\":1}}],[\"启动\",{\"1\":{\"824\":1}}],[\"启动命令\",{\"0\":{\"688\":1}}],[\"系统也会衡量\",{\"1\":{\"881\":1}}],[\"系统切换主题时触发\",{\"1\":{\"824\":1}}],[\"系统权限\",{\"1\":{\"822\":1}}],[\"系统平台\",{\"1\":{\"54\":1}}],[\"深层的监听也造成了性能的极大问题\",{\"1\":{\"819\":1}}],[\"深度遍历为每个属性添加getter和setter实现响应式\",{\"1\":{\"819\":1}}],[\"深拷贝\",{\"0\":{\"275\":1,\"277\":1}}],[\"体积减少\",{\"1\":{\"816\":1}}],[\"体育实况更新\",{\"1\":{\"202\":1}}],[\"现代风格\",{\"1\":{\"812\":1}}],[\"现在的函数组件也可以是有状态的组件\",{\"1\":{\"517\":1}}],[\"现在的商业\",{\"1\":{\"135\":1}}],[\"现在删除其中的所有元素\",{\"1\":{\"384\":1}}],[\"现在主流的数值类型是number\",{\"1\":{\"303\":1}}],[\"补充声明式模板的灵活性\",{\"1\":{\"811\":1}}],[\"​​自定义渲染器\",{\"1\":{\"813\":1}}],[\"​​更小的体积与更快的运行​​\",{\"1\":{\"813\":1}}],[\"​​typescript原生支持​​\",{\"1\":{\"813\":1}}],[\"​​模板引用\",{\"1\":{\"811\":1}}],[\"​​侦听器\",{\"1\":{\"811\":1}}],[\"​​计算属性\",{\"1\":{\"811\":1}}],[\"​​\",{\"1\":{\"811\":4,\"813\":2}}],[\"​​指令\",{\"1\":{\"811\":1}}],[\"​​==事件缓存\",{\"1\":{\"811\":1}}],[\"​​fragments​​\",{\"1\":{\"811\":1}}],[\"​注意点​​\",{\"1\":{\"811\":1}}],[\"逻辑层\",{\"1\":{\"835\":1}}],[\"逻辑层允许在jscore\",{\"1\":{\"835\":1}}],[\"逻辑层和渲染层分开\",{\"1\":{\"822\":1}}],[\"逻辑抽取更方便\",{\"1\":{\"813\":1}}],[\"逻辑和样式封装为独立单元\",{\"1\":{\"811\":1}}],[\"逻辑复杂的组件难以开发与维护\",{\"1\":{\"517\":1}}],[\"叠加型\",{\"1\":{\"793\":1}}],[\"队列型\",{\"1\":{\"793\":1}}],[\"队头堵塞\",{\"1\":{\"149\":1}}],[\"遍历子组件的配置项\",{\"1\":{\"792\":1}}],[\"遍历父组件的配置项\",{\"1\":{\"792\":1}}],[\"遍历下子vnode\",{\"1\":{\"538\":1}}],[\"局部ssr\",{\"2\":{\"904\":1}}],[\"局部混入\",{\"0\":{\"789\":1}}],[\"局部量等开辟了栈来存储\",{\"1\":{\"253\":1}}],[\"激活\",{\"1\":{\"782\":1}}],[\"销毁\",{\"1\":{\"780\":1}}],[\"销毁带标记的所有值并收回它们的内存\",{\"1\":{\"249\":1}}],[\"干预模板编译\",{\"1\":{\"776\":1}}],[\"便于快速查找\",{\"1\":{\"770\":1}}],[\"便于恢复\",{\"1\":{\"428\":1}}],[\"尾尾匹配\",{\"1\":{\"770\":1}}],[\"尾递归只需要保存一个调用栈\",{\"1\":{\"253\":1}}],[\"尾递归在普通尾调用的基础上\",{\"1\":{\"253\":1}}],[\"尾递归是一种特殊的尾调用\",{\"1\":{\"253\":1}}],[\"尾递归也是递归的一种特殊情形\",{\"1\":{\"253\":1}}],[\"尾递归\",{\"0\":{\"253\":1},\"1\":{\"253\":1}}],[\"头头匹配\",{\"1\":{\"770\":1}}],[\"算法步骤中提到或等同于以下内容\",{\"1\":{\"970\":1}}],[\"算法\",{\"0\":{\"965\":1}}],[\"算法的核心部分\",{\"1\":{\"770\":1}}],[\"算法的完美配合\",{\"1\":{\"546\":1}}],[\"算法进行新旧节点对比时\",{\"1\":{\"770\":1}}],[\"曾经拥有key的element如果不再出现的话\",{\"1\":{\"768\":1}}],[\"商详页\",{\"1\":{\"764\":2}}],[\"切换过程中合适的销毁和重新组件内部的事件监听和子组件\",{\"1\":{\"757\":1}}],[\"切换到线上某个分支\",{\"1\":{\"690\":1}}],[\"切换到本地某个分支\",{\"1\":{\"690\":1}}],[\"共同点\",{\"0\":{\"756\":1}}],[\"共享了同一个父类实例对象\",{\"1\":{\"258\":1}}],[\"钩子函数的参数\",{\"1\":{\"737\":1}}],[\"钩子可用于类型化和非类型化属性\",{\"1\":{\"349\":1}}],[\"称之为指令\",{\"1\":{\"736\":1}}],[\"称为运行时语义\",{\"1\":{\"967\":1}}],[\"称为el\",{\"1\":{\"733\":1}}],[\"称为\",{\"1\":{\"336\":2}}],[\"订阅者watcher就会调用patch给真实dom打补丁\",{\"1\":{\"733\":1}}],[\"订阅者就会调用pacth给真实dom打补丁\",{\"1\":{\"732\":1}}],[\"老节点的end索引\",{\"1\":{\"732\":1}}],[\"老节点的start索引+1\",{\"1\":{\"732\":1}}],[\"老节点的start和新节点的end相同时\",{\"1\":{\"732\":2}}],[\"老牌的版本控制系统\",{\"1\":{\"680\":1}}],[\"退出循环\",{\"1\":{\"731\":1}}],[\"决定了是否阻止前端代码获取跨域请求的响应\",{\"1\":{\"723\":1}}],[\"端口相同\",{\"1\":{\"722\":1}}],[\"插槽处理\",{\"1\":{\"753\":1}}],[\"插件是一个具有\",{\"1\":{\"956\":1}}],[\"插件是功能模块\",{\"1\":{\"719\":1}}],[\"插件\",{\"0\":{\"952\":1,\"953\":1},\"1\":{\"946\":1}}],[\"插件监听\",{\"1\":{\"932\":1}}],[\"插件使用vue\",{\"1\":{\"718\":1}}],[\"插件暴露了一个install函数\",{\"1\":{\"718\":1}}],[\"插件用来给vue添加全局功能\",{\"1\":{\"717\":1}}],[\"插入的新的vnode队列\",{\"1\":{\"770\":1}}],[\"插入的节点\",{\"1\":{\"635\":1}}],[\"插入\",{\"1\":{\"496\":1}}],[\"替代方案是etag\",{\"1\":{\"868\":1}}],[\"替代选项式api\",{\"1\":{\"813\":1}}],[\"替代语法同样可以用在\",{\"1\":{\"312\":1}}],[\"替代语法的基本形式是把左花括号\",{\"1\":{\"312\":1}}],[\"替代语法\",{\"0\":{\"312\":1}}],[\"替换型\",{\"1\":{\"793\":1}}],[\"替换不同的组件快速完成需求\",{\"1\":{\"717\":1}}],[\"九成的情况是\",{\"1\":{\"714\":1}}],[\"筛选出有权限的路由\",{\"1\":{\"702\":1}}],[\"四个十六进制的组合\",{\"1\":{\"1011\":1}}],[\"四种缺点\",{\"1\":{\"702\":1}}],[\"四层体系\",{\"0\":{\"176\":1}}],[\"四层体系结构\",{\"1\":{\"169\":1}}],[\"菜单和路由耦合在一起\",{\"1\":{\"702\":2}}],[\"菜单和路由都有后端返回\",{\"1\":{\"702\":1}}],[\"菜单信息写死在前端\",{\"1\":{\"702\":2}}],[\"菜单与路由做一一对应\",{\"1\":{\"702\":1}}],[\"菜单与路由分离\",{\"1\":{\"702\":1}}],[\"菜单由后端返回\",{\"1\":{\"702\":1}}],[\"菜单权限\",{\"1\":{\"702\":1}}],[\"权限控制\",{\"1\":{\"702\":1}}],[\"鼠标按键修饰符\",{\"1\":{\"699\":1}}],[\"鼠标指针浮动在上面的元素\",{\"1\":{\"35\":1}}],[\"五种修饰符\",{\"1\":{\"699\":1}}],[\"五层体系\",{\"0\":{\"170\":1}}],[\"五层体系的协议结构是综合了\",{\"1\":{\"169\":1}}],[\"五层协议的体系结构只是为介绍网络原理而设计的\",{\"1\":{\"169\":1}}],[\"透传属性和事件到\",{\"1\":{\"696\":1}}],[\"透传不相关\",{\"1\":{\"479\":1}}],[\"需通过vue\",{\"1\":{\"811\":1}}],[\"需手动通过\",{\"1\":{\"696\":1}}],[\"需要注意与当前项目的webpack版本和配置相匹配\",{\"1\":{\"942\":1}}],[\"需要注意的是\",{\"1\":{\"69\":1,\"90\":1,\"270\":1}}],[\"需要各种loader\",{\"1\":{\"937\":1}}],[\"需要\",{\"1\":{\"933\":1}}],[\"需要根据特定情况使用不同的配置文件\",{\"1\":{\"927\":1}}],[\"需要压缩的最小值\",{\"1\":{\"895\":1}}],[\"需要将对应的处理状态呈现给用户\",{\"1\":{\"836\":1}}],[\"需要将中间的内容放在html结构最后\",{\"1\":{\"78\":1}}],[\"需要自身后端调用微信服务器获取用户信息\",{\"1\":{\"829\":1}}],[\"需要放在装饰器中\",{\"1\":{\"667\":1}}],[\"需要创建并插入\",{\"1\":{\"770\":1}}],[\"需要创建newstrtidx和newendidx之间的所有节点\",{\"1\":{\"731\":1}}],[\"需要创建子类去实现\",{\"1\":{\"653\":1}}],[\"需要创建环境记录器\",{\"1\":{\"118\":1}}],[\"需要起一个node服务\",{\"1\":{\"560\":1}}],[\"需要使用resourcehintwebpackplugin插件\",{\"1\":{\"907\":1}}],[\"需要使用内联的方式进行样式的编写\",{\"1\":{\"489\":1}}],[\"需要使用括号括起来\",{\"1\":{\"368\":1}}],[\"需要从缓存中获取数据\",{\"1\":{\"480\":1}}],[\"需要更新10个dom节点\",{\"1\":{\"422\":1,\"709\":1}}],[\"需要在子类的构造函数中调用\",{\"1\":{\"339\":1}}],[\"需要在每个语句后用分号结束指令\",{\"1\":{\"332\":1}}],[\"需要过一阵子以确保服务端收到自己的\",{\"1\":{\"244\":1}}],[\"需要经过四次挥手\",{\"1\":{\"244\":1}}],[\"需要客户端和服务器总共发送3个包\",{\"1\":{\"243\":1}}],[\"需要代理授权\",{\"1\":{\"210\":1}}],[\"需要进一步操作\",{\"1\":{\"209\":1}}],[\"需要继续处理\",{\"1\":{\"207\":1}}],[\"需要先解析脚本\",{\"1\":{\"105\":1}}],[\"需要设置一个非标准的connection字段\",{\"1\":{\"146\":1}}],[\"需要设置\",{\"1\":{\"76\":1}}],[\"仍然支持使用\",{\"1\":{\"946\":1}}],[\"仍然可以在内部修改\",{\"1\":{\"347\":1}}],[\"仍会存储父组件传递的属性\",{\"1\":{\"696\":1}}],[\"拉取远程仓库的分支与本地的某个分支合并\",{\"1\":{\"689\":1}}],[\"拉取远程仓库的分支与本地当前分支\",{\"1\":{\"689\":1}}],[\"日常基本操作\",{\"0\":{\"689\":1}}],[\"日志监控\",{\"1\":{\"571\":1}}],[\"日志记录\",{\"1\":{\"480\":1,\"781\":1}}],[\"配置中对一个rules指定多个\",{\"1\":{\"948\":1}}],[\"配置方式\",{\"0\":{\"948\":1,\"954\":1},\"1\":{\"947\":1}}],[\"配置的在线工具\",{\"1\":{\"926\":1}}],[\"配置的对象\",{\"1\":{\"925\":1}}],[\"配置文件\",{\"0\":{\"925\":1},\"1\":{\"928\":1,\"932\":1,\"955\":1}}],[\"配置webpack\",{\"1\":{\"909\":1}}],[\"配置http\",{\"1\":{\"906\":1}}],[\"配置到打包工具中\",{\"1\":{\"894\":1}}],[\"配置流程\",{\"0\":{\"894\":1}}],[\"配置\",{\"1\":{\"792\":1,\"949\":1}}],[\"配置排除\",{\"1\":{\"696\":1}}],[\"配置将任何页面重定向到index\",{\"1\":{\"693\":1}}],[\"配置命令\",{\"0\":{\"687\":1}}],[\"配置信息如下\",{\"1\":{\"449\":1}}],[\"哈希\",{\"1\":{\"685\":1}}],[\"哈希函数\",{\"1\":{\"238\":1}}],[\"散列\",{\"1\":{\"685\":1}}],[\"既可以让别人参与你的开源项目\",{\"1\":{\"684\":1}}],[\"仓库clone一份到自己的电脑上\",{\"1\":{\"684\":1}}],[\"别的机器可以clone这个原始版本库\",{\"1\":{\"684\":1}}],[\"别名记录\",{\"1\":{\"133\":1}}],[\"项目中每一个模块\",{\"1\":{\"935\":1}}],[\"项目\",{\"0\":{\"928\":1}}],[\"项目目录会隐藏一个==\",{\"1\":{\"685\":1}}],[\"项目开始\",{\"1\":{\"684\":1}}],[\"项目结构\",{\"0\":{\"568\":1}}],[\"占用加载资源的时间更短\",{\"1\":{\"896\":1}}],[\"占用内存小\",{\"1\":{\"682\":1}}],[\"占位符节点是否没有错误\",{\"1\":{\"770\":1}}],[\"占位符节点的工厂函数是否一致\",{\"1\":{\"770\":1}}],[\"占据页面空间\",{\"1\":{\"68\":1,\"69\":1,\"72\":1}}],[\"您可以记录源文件和文档的历史记录\",{\"1\":{\"680\":1}}],[\"适合传统项目\",{\"1\":{\"812\":1}}],[\"适合需要\",{\"1\":{\"811\":1}}],[\"适合需要缓存的复杂逻辑\",{\"1\":{\"811\":1}}],[\"适合多人团队协作开发\",{\"1\":{\"678\":1,\"681\":1}}],[\"适合管理文本\",{\"1\":{\"677\":1}}],[\"适用场景\",{\"0\":{\"212\":1}}],[\"集中式版本控制系统\",{\"1\":{\"676\":1}}],[\"集成第三方\",{\"1\":{\"584\":1}}],[\"历史记录功能使我们不怕改错代码了\",{\"1\":{\"675\":1}}],[\"借此能在软件开发的过程中\",{\"1\":{\"675\":1}}],[\"借助解决普通对象的继承问题的\",{\"1\":{\"263\":1}}],[\"借助\",{\"1\":{\"257\":1,\"259\":1}}],[\"求职的结果会被当作函数\",{\"1\":{\"663\":1}}],[\"求值为\",{\"1\":{\"357\":1}}],[\"求值for块中的语句为result\",{\"1\":{\"122\":1}}],[\"装饰器工厂\",{\"1\":{\"662\":1}}],[\"装饰器\",{\"0\":{\"661\":1}}],[\"属于基本多语言平面的码位编码为字符串的单个代码单元元素\",{\"1\":{\"1008\":1}}],[\"属于类本身\",{\"1\":{\"652\":1}}],[\"属性传入插件\",{\"1\":{\"955\":1}}],[\"属性绑定\",{\"1\":{\"811\":1}}],[\"属性​​的对象\",{\"1\":{\"696\":1}}],[\"属性继承与事件转发\",{\"1\":{\"696\":1}}],[\"属性获取子组件实例\",{\"1\":{\"696\":1}}],[\"属性中访问\",{\"1\":{\"581\":1}}],[\"属性中的变量可以初始化\",{\"1\":{\"345\":1}}],[\"属性就是对应的元素\",{\"1\":{\"579\":2}}],[\"属性设置预处理器\",{\"1\":{\"483\":1}}],[\"属性决定编写的样式是否局部有效\",{\"1\":{\"483\":1}}],[\"属性给被包裹的组件\",{\"1\":{\"479\":1}}],[\"属性不兼容\",{\"1\":{\"349\":1}}],[\"属性挂钩与\",{\"1\":{\"349\":1}}],[\"属性挂钩是在php\",{\"1\":{\"349\":1}}],[\"属性钩子是拦截和覆盖属性的读写行为的一种方法\",{\"1\":{\"349\":1}}],[\"属性钩子\",{\"0\":{\"349\":1}}],[\"属性定义可以包含类型声明\",{\"1\":{\"346\":1}}],[\"属性定义了引擎应该如何计算一个元素的总宽度和总高度\",{\"1\":{\"18\":1}}],[\"属性之外都是可选的\",{\"1\":{\"345\":1}}],[\"属性开头至少使用一个修饰符\",{\"1\":{\"345\":1}}],[\"属性和方法\",{\"0\":{\"338\":1}}],[\"属性构建了对象的原型链\",{\"1\":{\"268\":1}}],[\"属性都得到了继承\",{\"1\":{\"263\":1}}],[\"属性对应如下\",{\"1\":{\"55\":1}}],[\"属性有两个值选择\",{\"1\":{\"47\":1}}],[\"属性用来控制背景怎样在这些不同的盒子中显示\",{\"1\":{\"46\":1}}],[\"属性选择器\",{\"1\":{\"35\":2,\"36\":1}}],[\"属性的值\",{\"1\":{\"18\":1}}],[\"属性值\",{\"1\":{\"13\":1}}],[\"属性\",{\"0\":{\"345\":1},\"1\":{\"8\":2,\"13\":1,\"267\":1,\"336\":1,\"479\":1,\"584\":1,\"595\":4,\"662\":1,\"708\":1,\"811\":1}}],[\"经过编译\",{\"1\":{\"838\":1}}],[\"经过上面的优先级计算规则\",{\"1\":{\"36\":1}}],[\"经常用于一些类型不确定的情况\",{\"1\":{\"647\":1}}],[\"挑选一组属性并组成一个新的类型\",{\"1\":{\"646\":1}}],[\"映射类型\",{\"0\":{\"646\":1}}],[\"映射是一种把\",{\"1\":{\"383\":1}}],[\"获得更多的系统权限\",{\"1\":{\"822\":1}}],[\"获得属性\",{\"1\":{\"645\":1}}],[\"获取插件列表和对应文档\",{\"1\":{\"952\":1}}],[\"获取当前的页面栈\",{\"1\":{\"832\":1}}],[\"获取页面元素\",{\"1\":{\"825\":1}}],[\"获取更新后的dom\",{\"1\":{\"800\":1}}],[\"获取真实dom信息\",{\"1\":{\"777\":1}}],[\"获取缓存后组件的数据\",{\"0\":{\"765\":1}}],[\"获取用户的权限信息\",{\"1\":{\"702\":1}}],[\"获取某个属性的类型\",{\"1\":{\"645\":1}}],[\"获取类型所有键\",{\"1\":{\"645\":1}}],[\"获取参数的形式如下\",{\"1\":{\"605\":1}}],[\"获取参数方式如下\",{\"1\":{\"603\":1}}],[\"获取形式如下\",{\"1\":{\"604\":1}}],[\"获取ref属性也是通过hook对象的current属性\",{\"1\":{\"583\":1}}],[\"获取ref对象只需要通过先前存储的对象即可\",{\"1\":{\"582\":1}}],[\"获取渲染的值\",{\"0\":{\"461\":1},\"1\":{\"456\":1}}],[\"获取网站用户隐私信息等\",{\"1\":{\"298\":1}}],[\"获取到用户的code判断用户是否授权读取用户信息\",{\"1\":{\"829\":1}}],[\"获取到了域名对应的目标服务器ip地址\",{\"1\":{\"188\":1}}],[\"获取到传送的数据\",{\"1\":{\"165\":1}}],[\"获取权限域名服务器的地址\",{\"1\":{\"142\":1}}],[\"获取文本的行高\",{\"1\":{\"90\":1}}],[\"获取屏幕宽度\",{\"1\":{\"59\":1}}],[\"索引访问\",{\"1\":{\"645\":1}}],[\"索引查询\",{\"1\":{\"645\":1}}],[\"元组以及其他需要手写的类型\",{\"1\":{\"644\":1}}],[\"元组合并了不同类型的对象\",{\"1\":{\"639\":1}}],[\"元组\",{\"1\":{\"639\":1}}],[\"元素都需要等待主线程上的进行中任务完成\",{\"1\":{\"881\":1}}],[\"元素都会被替换\",{\"1\":{\"538\":1}}],[\"元素选择器\",{\"1\":{\"775\":1}}],[\"元素挂载后处理v\",{\"1\":{\"759\":1}}],[\"元素对象\",{\"1\":{\"579\":1}}],[\"元素\",{\"1\":{\"578\":1,\"770\":1}}],[\"元素有无key属性意义并不大\",{\"1\":{\"542\":1}}],[\"元素一个onclick属性\",{\"1\":{\"510\":1}}],[\"元素触发事件\",{\"1\":{\"505\":1}}],[\"元素储存了表达式产生的任意错误信息\",{\"1\":{\"359\":1}}],[\"元素回到初始位置\",{\"1\":{\"291\":1}}],[\"元素是否在可视区域中\",{\"0\":{\"284\":1}}],[\"元素也是隐藏的\",{\"1\":{\"69\":1}}],[\"元素不可见\",{\"1\":{\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1}}],[\"元素本身占有的空间就会被其他元素占有\",{\"1\":{\"67\":1}}],[\"元素在页面上将彻底消失\",{\"1\":{\"67\":1}}],[\"元素可以被分成几个独立的盒子\",{\"1\":{\"46\":1}}],[\"元素可见性\",{\"1\":{\"37\":1}}],[\"元素的所有元素\",{\"1\":{\"35\":1}}],[\"元素的\",{\"1\":{\"18\":2}}],[\"元素使用css的动画的模块\",{\"1\":{\"10\":1}}],[\"写代码时使用一些以后才指定的类型\",{\"1\":{\"639\":1}}],[\"写法上都需要使用驼峰标识\",{\"1\":{\"485\":1}}],[\"泛型通过<>的形式进行表述\",{\"1\":{\"660\":1}}],[\"泛型\",{\"0\":{\"660\":1}}],[\"泛型约束\",{\"1\":{\"645\":1}}],[\"泛型编程\",{\"1\":{\"639\":1}}],[\"泛型或类型约束来实现\",{\"1\":{\"368\":1}}],[\"旧式八进制转义\",{\"1\":{\"1011\":1,\"1012\":1}}],[\"旧尾和新头匹配\",{\"1\":{\"770\":1}}],[\"旧头和新尾匹配\",{\"1\":{\"770\":1}}],[\"旧节点没有\",{\"1\":{\"732\":1}}],[\"旧组件再移除\",{\"1\":{\"634\":1}}],[\"旧的子虚拟节点数组\",{\"1\":{\"770\":1}}],[\"旧的生命周期流程图如下\",{\"1\":{\"445\":1}}],[\"旧的域名不再使用时\",{\"1\":{\"212\":1}}],[\"移除了一些不常用的api\",{\"1\":{\"818\":1}}],[\"移除两个class\",{\"1\":{\"633\":1}}],[\"移动端\",{\"1\":{\"812\":1}}],[\"移动节点\",{\"1\":{\"770\":1}}],[\"移动到开头\",{\"1\":{\"770\":1}}],[\"移动到末尾\",{\"1\":{\"770\":1}}],[\"移动两个指针向前\",{\"1\":{\"770\":1}}],[\"移动\",{\"1\":{\"496\":1}}],[\"批量更新\",{\"0\":{\"616\":1}}],[\"批处理\",{\"1\":{\"539\":1}}],[\"李银河\",{\"1\":{\"612\":1,\"615\":2}}],[\"详情2\",{\"1\":{\"605\":1}}],[\"洛杉矶\",{\"1\":{\"605\":1}}],[\"匹配具有绝对路径\",{\"1\":{\"948\":1}}],[\"匹配任何以\",{\"1\":{\"948\":1}}],[\"匹配要压缩的文件\",{\"1\":{\"895\":1}}],[\"匹配所有\",{\"1\":{\"760\":1}}],[\"匹配时\",{\"1\":{\"596\":1}}],[\"匹配分支\",{\"1\":{\"313\":1}}],[\"活跃时添加的class\",{\"1\":{\"596\":1}}],[\"活跃时\",{\"1\":{\"596\":1}}],[\"路由跳转\",{\"0\":{\"831\":1}}],[\"路由管理\",{\"1\":{\"812\":1}}],[\"路由权限\",{\"1\":{\"702\":1}}],[\"路由传参\",{\"1\":{\"696\":1}}],[\"路由描述了\",{\"1\":{\"607\":1}}],[\"路由模式\",{\"0\":{\"606\":1}}],[\"路由的本质就是页面的url发生改变时\",{\"1\":{\"592\":1}}],[\"路由\",{\"0\":{\"592\":1}}],[\"路径等信息\",{\"1\":{\"942\":1}}],[\"路径等选项\",{\"1\":{\"940\":1}}],[\"路径\",{\"1\":{\"450\":1,\"932\":1}}],[\"证明render执行了\",{\"1\":{\"588\":1}}],[\"证书和完整性保护这些功能\",{\"1\":{\"233\":1}}],[\"证书需要钱\",{\"1\":{\"232\":1}}],[\"证书中包含公钥\",{\"1\":{\"231\":1}}],[\"违反组件封装的原则\",{\"1\":{\"584\":1}}],[\"衔接网络上应用系统的各个部分或不同的应用\",{\"1\":{\"571\":1}}],[\"统计日志\",{\"1\":{\"779\":1}}],[\"统计上报等\",{\"1\":{\"480\":1}}],[\"统一导出\",{\"1\":{\"570\":1}}],[\"角色如下\",{\"1\":{\"569\":1}}],[\"导出不确定的结果\",{\"1\":{\"925\":1}}],[\"导航守卫等\",{\"1\":{\"812\":1}}],[\"导入任何类型的模块\",{\"1\":{\"946\":1}}],[\"导入方法如下\",{\"1\":{\"570\":1}}],[\"导入conect如下\",{\"1\":{\"565\":1}}],[\"导致卡顿的情况\",{\"1\":{\"427\":1}}],[\"导致在释放该段内存之前就失去了对该段内存的控制\",{\"1\":{\"247\":1}}],[\"懒加载\",{\"1\":{\"559\":1}}],[\"懒加载组件\",{\"0\":{\"559\":1},\"1\":{\"554\":1}}],[\"粒度变小了\",{\"1\":{\"551\":1}}],[\"遇到性能问题的概率也在增高\",{\"1\":{\"551\":1}}],[\"遇到不能转换的字符就停下来\",{\"1\":{\"274\":1}}],[\"避免如下操作\",{\"1\":{\"925\":1}}],[\"避免同时渲染大量dom引起的页面卡顿\",{\"1\":{\"915\":1}}],[\"避免重复创建\",{\"1\":{\"811\":1}}],[\"避免在每次构建时都生成新的id\",{\"1\":{\"941\":1}}],[\"避免在\",{\"1\":{\"584\":1}}],[\"避免额外标记\",{\"0\":{\"556\":1},\"1\":{\"554\":1}}],[\"避免不必要的更新\",{\"1\":{\"550\":1}}],[\"避免不必要的渲染\",{\"0\":{\"547\":1}}],[\"避免不必要的渲染则是业务中常见的优化手段之一\",{\"1\":{\"546\":1}}],[\"避免使用内联函数\",{\"0\":{\"555\":1},\"1\":{\"554\":1}}],[\"避免使用\",{\"1\":{\"543\":1}}],[\"避免大量的无谓计算\",{\"1\":{\"422\":1,\"709\":1}}],[\"随时恢复到任意时间点\",{\"1\":{\"675\":1}}],[\"随着业务的复杂\",{\"1\":{\"551\":1}}],[\"随机数在下一次\",{\"1\":{\"543\":1}}],[\"随后垃圾回收程序做一次内存清理\",{\"1\":{\"249\":1}}],[\"良好使用key属性是性能优化的非常关键的一步\",{\"1\":{\"543\":1}}],[\"事后都可以用任何一个镜像出来的本地仓库恢复\",{\"1\":{\"684\":1}}],[\"事务等机制并且对特定浏览器进行了性能优化\",{\"1\":{\"539\":1}}],[\"事物调用\",{\"1\":{\"539\":1}}],[\"事件代理\",{\"0\":{\"850\":1}}],[\"事件委托的要求\",{\"1\":{\"850\":1}}],[\"事件委托\",{\"0\":{\"850\":1},\"2\":{\"855\":1}}],[\"事件触发时\",{\"1\":{\"844\":1}}],[\"事件修饰符\",{\"1\":{\"699\":1}}],[\"事件总线\",{\"1\":{\"696\":1}}],[\"事件名都是用小驼峰格式进行书写\",{\"1\":{\"508\":1}}],[\"事件名称命名方式不同\",{\"1\":{\"504\":1}}],[\"事件绑定均未生效\",{\"1\":{\"774\":1}}],[\"事件绑定方式\",{\"0\":{\"557\":1},\"1\":{\"554\":1}}],[\"事件绑定的方法需要使用\",{\"1\":{\"508\":1}}],[\"事件绑定\",{\"0\":{\"508\":1},\"1\":{\"811\":1}}],[\"事件监听缓存\",{\"1\":{\"818\":1}}],[\"事件监听器\",{\"1\":{\"780\":2}}],[\"事件监听\",{\"1\":{\"505\":6,\"607\":1}}],[\"事件监听等操作\",{\"1\":{\"438\":1}}],[\"事件所有能力的一个事件对象\",{\"1\":{\"504\":1}}],[\"事件派发等\",{\"1\":{\"503\":1}}],[\"事件的合成\",{\"1\":{\"503\":1}}],[\"事件机制\",{\"0\":{\"503\":1}}],[\"事件\",{\"1\":{\"315\":4,\"505\":6,\"607\":1}}],[\"事件都会调用该函数\",{\"1\":{\"315\":1}}],[\"事件冒泡\",{\"1\":{\"273\":1,\"503\":1}}],[\"事件冒泡阶段\",{\"1\":{\"273\":1}}],[\"事件处理函数写法\",{\"1\":{\"504\":2}}],[\"事件处理函数书写不同\",{\"1\":{\"504\":1}}],[\"事件处理\",{\"1\":{\"273\":1,\"500\":1}}],[\"事件有三个阶段\",{\"1\":{\"273\":1}}],[\"事件向下捕获依次触发\",{\"1\":{\"273\":1}}],[\"事件捕获阶段\",{\"1\":{\"273\":1}}],[\"事件流都会经历三个阶段\",{\"1\":{\"273\":1}}],[\"事件模型有三种\",{\"1\":{\"273\":1}}],[\"事件模型\",{\"0\":{\"273\":1}}],[\"先觉错误\",{\"0\":{\"1012\":1}}],[\"先从本地获取\",{\"1\":{\"864\":1}}],[\"先从storage里面读取\",{\"1\":{\"829\":1}}],[\"先执行mixin的钩子\",{\"1\":{\"791\":1}}],[\"先挂在不需要权限控制的路由\",{\"1\":{\"702\":1}}],[\"先做动画\",{\"1\":{\"635\":1}}],[\"先渲染dom\",{\"1\":{\"635\":1}}],[\"先保存移除的节点\",{\"1\":{\"635\":1}}],[\"先举出一个例子\",{\"1\":{\"614\":1}}],[\"先实例化\",{\"1\":{\"538\":1}}],[\"先变快再到慢\",{\"1\":{\"11\":1}}],[\"kobe\",{\"1\":{\"605\":1}}],[\"koa等\",{\"1\":{\"560\":1}}],[\"k\",{\"1\":{\"538\":8,\"645\":1}}],[\"key是对用户数据加密签名的密钥\",{\"1\":{\"829\":1}}],[\"key是否相同\",{\"1\":{\"770\":1}}],[\"key是每一个vnode的唯一id\",{\"1\":{\"768\":1}}],[\"key的作用\",{\"0\":{\"768\":1}}],[\"keyof\",{\"1\":{\"645\":1}}],[\"key相等的情况下\",{\"1\":{\"549\":1}}],[\"key不要使用随机值\",{\"1\":{\"543\":1}}],[\"key作用并不大\",{\"1\":{\"542\":1}}],[\"key=value\",{\"1\":{\"949\":1}}],[\"key=\",{\"1\":{\"497\":20,\"634\":1,\"635\":1,\"769\":1}}],[\"keysb\",{\"1\":{\"549\":2}}],[\"keysa\",{\"1\":{\"549\":6}}],[\"keys\",{\"1\":{\"383\":1,\"538\":1,\"549\":2,\"645\":1}}],[\"keyslower\",{\"1\":{\"254\":2}}],[\"key\",{\"0\":{\"542\":1},\"1\":{\"200\":3,\"254\":7,\"277\":4,\"278\":5,\"383\":2,\"386\":2,\"428\":1,\"526\":1,\"543\":2,\"760\":2,\"770\":5,\"792\":12,\"793\":5,\"829\":1,\"949\":1}}],[\"keyframes\",{\"1\":{\"13\":4}}],[\"keep\",{\"0\":{\"763\":1},\"1\":{\"146\":1,\"147\":1,\"223\":1,\"224\":1}}],[\"⽐如过滤掉key\",{\"1\":{\"538\":1}}],[\"源代码\",{\"1\":{\"939\":1}}],[\"源代码控制软件\",{\"1\":{\"679\":1}}],[\"源码体积\",{\"1\":{\"818\":1}}],[\"源码\",{\"0\":{\"792\":1}}],[\"源码中v\",{\"1\":{\"759\":1}}],[\"源码中做了详细处理\",{\"1\":{\"538\":1}}],[\"源码大致如下\",{\"1\":{\"549\":1}}],[\"源文本解析结果\",{\"1\":{\"95\":1}}],[\"速度更快\",{\"1\":{\"534\":1,\"816\":1}}],[\"速度比正常稍慢\",{\"1\":{\"423\":1}}],[\"地取值\",{\"1\":{\"948\":1}}],[\"地图上添加标记\",{\"1\":{\"532\":1}}],[\"地址栏输入\",{\"0\":{\"186\":1}}],[\"地址解析协议\",{\"1\":{\"176\":1}}],[\"地址后被封装成数据帧\",{\"1\":{\"165\":1}}],[\"地址后会对其进行缓存\",{\"1\":{\"141\":1}}],[\"地址和接收端\",{\"1\":{\"165\":1}}],[\"地址缓存起\",{\"1\":{\"142\":2}}],[\"地址缓存起来\",{\"1\":{\"142\":1}}],[\"地址返回给浏览器\",{\"1\":{\"142\":1}}],[\"地址返回给操作系统\",{\"1\":{\"142\":1}}],[\"地址的对应表\",{\"1\":{\"142\":1}}],[\"地址进行转换的服务器\",{\"1\":{\"138\":1}}],[\"地址\",{\"0\":{\"347\":1},\"1\":{\"133\":1,\"134\":1,\"138\":1,\"142\":2}}],[\"嵌套路由\",{\"1\":{\"812\":1}}],[\"嵌套\",{\"1\":{\"530\":1}}],[\"嵌入到\",{\"1\":{\"331\":1}}],[\"帮助我们将界面成了各个独立的小块\",{\"1\":{\"530\":1}}],[\"遵循\",{\"1\":{\"925\":1}}],[\"遵循从高阶组件到低阶组件的单向数据流\",{\"1\":{\"530\":1}}],[\"遵循组件设计模式\",{\"1\":{\"530\":1}}],[\"遵守的指令\",{\"1\":{\"224\":1}}],[\"库约有1\",{\"1\":{\"890\":1}}],[\"库还可以更简洁地在浏览器中衡量\",{\"1\":{\"884\":1}}],[\"库\",{\"1\":{\"530\":1,\"584\":1}}],[\"官方给出的动机是解决长时间使用和维护react过程中常遇到的问题\",{\"1\":{\"517\":1}}],[\"综合上述\",{\"1\":{\"514\":1}}],[\"影响性能\",{\"1\":{\"510\":1,\"511\":1}}],[\"影子大小\",{\"1\":{\"41\":1}}],[\"点按和键盘互动等\",{\"1\":{\"882\":1}}],[\"点按按钮\",{\"1\":{\"881\":1}}],[\"点击\",{\"1\":{\"882\":1}}],[\"点击的子元素\",{\"1\":{\"851\":1}}],[\"点击按钮触发事件\",{\"1\":{\"616\":1}}],[\"点击按钮\",{\"1\":{\"508\":1,\"588\":1}}],[\"点对点协议\",{\"1\":{\"176\":1}}],[\"兼容所有浏览器\",{\"1\":{\"504\":1}}],[\"兼容性好\",{\"1\":{\"89\":1}}],[\"兼容性相对比较差\",{\"1\":{\"33\":1}}],[\"合成事件与原生事件执行顺序\",{\"1\":{\"505\":1}}],[\"合成事件绑定方式\",{\"1\":{\"504\":1}}],[\"合成事件是\",{\"1\":{\"504\":1}}],[\"合成事件\",{\"0\":{\"504\":1},\"1\":{\"504\":1}}],[\"合并成\",{\"1\":{\"937\":1}}],[\"合并的过程中\",{\"1\":{\"932\":1}}],[\"合并模块\",{\"1\":{\"932\":1}}],[\"合并参数\",{\"1\":{\"932\":1}}],[\"合并型\",{\"1\":{\"793\":1}}],[\"合并策略\",{\"0\":{\"793\":1}}],[\"合并到父组件的配置中\",{\"1\":{\"792\":1}}],[\"合并原对象和混入对象的属性\",{\"1\":{\"714\":1}}],[\"合并分支出现冲突时\",{\"1\":{\"690\":1}}],[\"合并分支\",{\"1\":{\"690\":1}}],[\"合并运算符的例子\",{\"1\":{\"358\":1}}],[\"合并数据块得到原始文件\",{\"1\":{\"282\":1}}],[\"合并\",{\"1\":{\"192\":1,\"932\":1}}],[\"合并表格边框\",{\"1\":{\"37\":1}}],[\"栈外\",{\"1\":{\"500\":1}}],[\"栈溢出\",{\"1\":{\"253\":1}}],[\"异构枚举\",{\"1\":{\"654\":1}}],[\"异步\",{\"1\":{\"946\":1}}],[\"异步下载新版本的代码包\",{\"1\":{\"837\":1}}],[\"异步会使运行时序变得复杂一些\",{\"1\":{\"836\":1}}],[\"异步延迟函数\",{\"1\":{\"801\":1}}],[\"异步加载组件时\",{\"1\":{\"784\":1}}],[\"异步更新\",{\"0\":{\"614\":1},\"1\":{\"613\":1}}],[\"异步代码\",{\"1\":{\"500\":1}}],[\"异常处理\",{\"1\":{\"480\":1}}],[\"异常\",{\"1\":{\"107\":1}}],[\"渲染数据\",{\"1\":{\"920\":1}}],[\"渲染时显示浏览器窗口\",{\"1\":{\"909\":1}}],[\"渲染时直接复用\",{\"1\":{\"818\":1}}],[\"渲染\",{\"0\":{\"840\":1}}],[\"渲染出正确的视图\",{\"1\":{\"836\":1}}],[\"渲染层\",{\"1\":{\"835\":1}}],[\"渲染线程和脚本是互斥的\",{\"1\":{\"835\":1}}],[\"渲染页面元素和样式\",{\"1\":{\"828\":1}}],[\"渲染机制\",{\"1\":{\"822\":1}}],[\"渲染阶段\",{\"1\":{\"811\":1}}],[\"渲染方法\",{\"1\":{\"796\":1}}],[\"渲染的内容\",{\"1\":{\"595\":1}}],[\"渲染的组件\",{\"1\":{\"595\":1}}],[\"渲染优化\",{\"0\":{\"546\":1}}],[\"渲染html\",{\"1\":{\"539\":1}}],[\"渲染备用\",{\"1\":{\"500\":1}}],[\"渲染成如下的样子\",{\"1\":{\"497\":1}}],[\"满足maxindex<\",{\"1\":{\"496\":1}}],[\"满足\",{\"1\":{\"496\":1}}],[\"删除旧的节点\",{\"1\":{\"732\":1}}],[\"删除某个远程分支\",{\"1\":{\"690\":1}}],[\"删除本地某个分支\",{\"1\":{\"690\":1}}],[\"删除的节点\",{\"1\":{\"635\":1}}],[\"删除节点4\",{\"1\":{\"497\":1}}],[\"删除\",{\"1\":{\"496\":1}}],[\"种节点操作\",{\"1\":{\"496\":1}}],[\"种方式表达\",{\"1\":{\"378\":1}}],[\"极大地避免无效的dom操作\",{\"1\":{\"492\":1}}],[\"容易能够根据状态修改样式属性\",{\"1\":{\"489\":1}}],[\"容器组件\",{\"1\":{\"563\":1}}],[\"容器节点里的所有\",{\"1\":{\"538\":1}}],[\"容器里面的子元素不会影响到外面的元素\",{\"1\":{\"19\":1}}],[\"容器设置上\",{\"1\":{\"8\":1}}],[\"驼峰法\",{\"1\":{\"485\":1}}],[\"输入框的联想\",{\"1\":{\"849\":1}}],[\"输入的时候触发事件函数\",{\"1\":{\"465\":1}}],[\"输出文件\",{\"1\":{\"932\":1}}],[\"输出目录\",{\"1\":{\"932\":1}}],[\"输出结果\",{\"1\":{\"926\":1}}],[\"输出压缩日志\",{\"1\":{\"895\":1}}],[\"输出第一个有内容的元素的时间\",{\"1\":{\"878\":1}}],[\"输出顺序为\",{\"1\":{\"505\":1}}],[\"输出一个函数\",{\"1\":{\"478\":1}}],[\"输出this\",{\"1\":{\"461\":1}}],[\"输出更有效率\",{\"1\":{\"331\":1}}],[\"输出\",{\"1\":{\"306\":2,\"313\":1,\"321\":1,\"368\":3,\"379\":3,\"381\":1,\"626\":2}}],[\"你也可以在一个配置文件中因为不同目的而多次使用同一个插件\",{\"1\":{\"953\":1}}],[\"你也可能会安装额外的\",{\"1\":{\"928\":1}}],[\"你只需要\",{\"1\":{\"953\":1}}],[\"你不要为它添加引号\",{\"1\":{\"948\":1}}],[\"你不能在函数式\",{\"1\":{\"479\":1}}],[\"你好啊\",{\"1\":{\"612\":1,\"614\":3,\"615\":4}}],[\"你可以通过<\",{\"1\":{\"940\":1}}],[\"你可以通过output属性来指定bundle文件的名称\",{\"1\":{\"940\":1}}],[\"你可以将bundle文件命名为bundle\",{\"1\":{\"940\":1}}],[\"你可以在配置中使用语法\",{\"1\":{\"925\":1}}],[\"你可以精确地跟踪这些指标\",{\"1\":{\"890\":1}}],[\"你可以根据用户的设备类型\",{\"1\":{\"858\":1}}],[\"你可以跳过对\",{\"1\":{\"520\":1}}],[\"你可以自定义降级后的\",{\"1\":{\"500\":1}}],[\"你同样可以将错误日志上报给服务器\",{\"1\":{\"500\":1}}],[\"你的代码\",{\"1\":{\"460\":2}}],[\"你将无法直接调用它\",{\"1\":{\"338\":1}}],[\"顾名思义\",{\"1\":{\"454\":1,\"455\":1}}],[\"得到最终的打包配置参数\",{\"1\":{\"932\":1}}],[\"得到最合适的边缘节点\",{\"1\":{\"134\":1}}],[\"得到当前的请求url\",{\"1\":{\"450\":1}}],[\"打开到某个页面\",{\"1\":{\"832\":1}}],[\"打开小程序\",{\"1\":{\"828\":2}}],[\"打开的页面不存在时触发\",{\"1\":{\"824\":1}}],[\"打包优化\",{\"1\":{\"953\":1}}],[\"打包\",{\"1\":{\"946\":1}}],[\"打包结果\",{\"0\":{\"938\":1}}],[\"打包成一个或多个bundle文件\",{\"1\":{\"932\":1}}],[\"打包过程\",{\"0\":{\"932\":1,\"939\":1}}],[\"打包之后的代码包\",{\"1\":{\"838\":1}}],[\"打包规则\",{\"1\":{\"449\":2}}],[\"打包后的文件名\",{\"1\":{\"449\":2}}],[\"打包出口\",{\"1\":{\"449\":2}}],[\"打印的都是\",{\"1\":{\"616\":1}}],[\"打印错误信息\",{\"1\":{\"500\":1}}],[\"打印\",{\"1\":{\"325\":1,\"385\":8,\"526\":4}}],[\"打印出来的结果\",{\"1\":{\"263\":1}}],[\"入口文件通常是一个或多个js文件\",{\"1\":{\"932\":1}}],[\"入口\",{\"1\":{\"449\":2}}],[\"入侵和破坏\",{\"1\":{\"301\":1}}],[\"框架会自动处理dom更新\",{\"1\":{\"811\":1}}],[\"框架\",{\"1\":{\"449\":2}}],[\"版本可以通过\",{\"1\":{\"947\":1}}],[\"版本可能废除\",{\"1\":{\"445\":1}}],[\"版本等级改为\",{\"1\":{\"675\":1}}],[\"版本控制工具\",{\"2\":{\"691\":1}}],[\"版本控制系统根据类别可以分成\",{\"1\":{\"676\":1}}],[\"版本控制系统就像一台时光机器\",{\"1\":{\"675\":1}}],[\"版本控制能提供项目的设计者\",{\"1\":{\"675\":1}}],[\"版本控制也是一种软件工程技巧\",{\"1\":{\"675\":1}}],[\"版本控制\",{\"1\":{\"675\":1}}],[\"版本管理\",{\"0\":{\"675\":1}}],[\"版本不受支持\",{\"1\":{\"211\":1}}],[\"清理无用的代码和资源文件\",{\"1\":{\"839\":1}}],[\"清理watchers\",{\"1\":{\"780\":1}}],[\"清理\",{\"1\":{\"780\":1}}],[\"清理资源\",{\"1\":{\"780\":1}}],[\"清理一些注册是监听事件\",{\"1\":{\"444\":1}}],[\"清除计时器\",{\"1\":{\"845\":1}}],[\"清除浮动\",{\"1\":{\"37\":1}}],[\"清除内部浮动\",{\"1\":{\"21\":1}}],[\"清除内容周围的区域\",{\"1\":{\"15\":1}}],[\"里面的csstransition组件不再像以前那样接受in属性来判断元素是何种状态\",{\"1\":{\"634\":1}}],[\"里面\",{\"1\":{\"437\":1}}],[\"里面存着标签的一些属性\",{\"1\":{\"421\":1}}],[\"卸载的过程\",{\"1\":{\"757\":1}}],[\"卸载阶段\",{\"0\":{\"443\":1},\"1\":{\"433\":1}}],[\"卸载等一系列过程\",{\"1\":{\"432\":1}}],[\"挂载\",{\"1\":{\"773\":1}}],[\"挂载完成\",{\"1\":{\"480\":1,\"777\":1}}],[\"挂载dom→渲染\",{\"1\":{\"432\":1}}],[\"挂起当前任务\",{\"1\":{\"429\":1}}],[\"生态系统提供更多能力\",{\"1\":{\"946\":1}}],[\"生产环境才去配置\",{\"1\":{\"895\":1}}],[\"生产环境高效打包\",{\"1\":{\"812\":1}}],[\"生命周期函数和watch\",{\"1\":{\"793\":1}}],[\"生命周期理解\",{\"0\":{\"773\":1}}],[\"生命周期钩子\",{\"1\":{\"741\":1}}],[\"生命周期方法和整个组件树的构造函数中捕获错误\",{\"1\":{\"500\":1}}],[\"生命周期\",{\"0\":{\"432\":1,\"459\":1,\"823\":1},\"1\":{\"456\":1,\"824\":1,\"825\":1,\"826\":1,\"827\":1}}],[\"生成这些\",{\"1\":{\"1008\":1}}],[\"生成式的右侧可以使用短语\",{\"1\":{\"995\":1}}],[\"生成代码\",{\"1\":{\"932\":1}}],[\"生成代码等\",{\"1\":{\"932\":1}}],[\"生成部分配置\",{\"1\":{\"925\":1}}],[\"生成session并返回给小程序\",{\"1\":{\"829\":1}}],[\"生成render方法\",{\"1\":{\"796\":1}}],[\"生成虚拟dom\",{\"1\":{\"776\":1}}],[\"生成而不是在外部文件中定义\",{\"1\":{\"488\":1}}],[\"生成\",{\"1\":{\"192\":2,\"539\":1,\"942\":1}}],[\"生成了网络层数据报\",{\"1\":{\"165\":1}}],[\"生成bfc\",{\"1\":{\"78\":1}}],[\"生成内容属性\",{\"1\":{\"37\":1}}],[\"做patch或者reuse\",{\"1\":{\"768\":1}}],[\"做一些你想要的操作\",{\"1\":{\"479\":1}}],[\"做完看是否还有剩余时间\",{\"1\":{\"429\":1}}],[\"做变化\",{\"1\":{\"69\":1}}],[\"兄弟组件通信\",{\"1\":{\"696\":1}}],[\"兄弟组件之间的通信\",{\"0\":{\"415\":1},\"1\":{\"412\":1}}],[\"兄弟节点的return指向同一个父节点\",{\"1\":{\"428\":1}}],[\"核心库体积更小\",{\"1\":{\"813\":1}}],[\"核心算法\",{\"1\":{\"428\":1}}],[\"核心算法的一次重新实现\",{\"1\":{\"428\":1}}],[\"核心的css代码结构如下\",{\"1\":{\"89\":1}}],[\"核心的css代码如下\",{\"1\":{\"7\":1,\"90\":1}}],[\"线程长时间地占用了主线程\",{\"1\":{\"427\":1}}],[\"线性渐变\",{\"1\":{\"52\":1}}],[\"繁琐又容易出错\",{\"1\":{\"423\":1}}],[\"易于学习和使用\",{\"1\":{\"683\":1}}],[\"易于学习\",{\"1\":{\"682\":1}}],[\"易于导致重绘与回流\",{\"1\":{\"423\":1}}],[\"易用\",{\"1\":{\"423\":1}}],[\"频繁操作真实dom\",{\"1\":{\"423\":1}}],[\"收到该响应后\",{\"1\":{\"868\":1}}],[\"收到第一个更新dom请求后\",{\"1\":{\"422\":1}}],[\"收集依赖\",{\"1\":{\"811\":1}}],[\"收集标识符\",{\"1\":{\"120\":1}}],[\"收集可见var声明\",{\"1\":{\"107\":1}}],[\"增删改+排版与重绘\",{\"1\":{\"422\":1}}],[\"增加服务器压力\",{\"1\":{\"844\":1}}],[\"增加更多的请求头和响应头来完善的功能\",{\"1\":{\"147\":1}}],[\"增加环境中的内置对象\",{\"1\":{\"99\":1}}],[\"增加了异步任务\",{\"1\":{\"428\":1}}],[\"增加了\",{\"1\":{\"80\":1}}],[\"增加或减少字符间的空白\",{\"1\":{\"37\":1}}],[\"增加或减少单词间的空白\",{\"1\":{\"37\":1}}],[\"虚拟表格\",{\"1\":{\"914\":1}}],[\"虚拟列表是按需显示的一种实现\",{\"1\":{\"919\":1}}],[\"虚拟列表\",{\"1\":{\"914\":1}}],[\"虚拟\",{\"1\":{\"770\":1}}],[\"虚拟节点\",{\"1\":{\"737\":1}}],[\"虚拟dom与性能优化\",{\"1\":{\"811\":1}}],[\"虚拟dom重渲染\",{\"1\":{\"778\":1}}],[\"虚拟dom表现为一个object对象\",{\"1\":{\"708\":1}}],[\"虚拟dom是对一层真实dom的抽象\",{\"1\":{\"708\":1}}],[\"虚拟dom转化成真实dom整体流程如下所示\",{\"1\":{\"539\":1}}],[\"虚拟dom对象\",{\"1\":{\"538\":1}}],[\"虚拟dom对象的节点与真实dom的属性一一照应\",{\"1\":{\"421\":1}}],[\"虚拟dom会通过reactdom\",{\"1\":{\"538\":1}}],[\"虚拟dom\",{\"0\":{\"708\":1},\"1\":{\"428\":1,\"531\":1}}],[\"虚拟dom不会立即操作dom\",{\"1\":{\"422\":1,\"709\":1}}],[\"虚拟dom不会进行排版与重绘操作\",{\"1\":{\"422\":1}}],[\"虚拟dom增删改+真实dom差异增删改+排版与重绘\",{\"1\":{\"422\":1}}],[\"虚拟dom的总损耗是\",{\"1\":{\"422\":1}}],[\"虚实\",{\"1\":{\"41\":1}}],[\"真实dom的优势\",{\"1\":{\"423\":1}}],[\"真实dom的总损耗是\",{\"1\":{\"422\":1}}],[\"真实dom\",{\"1\":{\"421\":1,\"422\":1}}],[\"真实dom和虚拟dom\",{\"0\":{\"421\":1}}],[\"拿到需要请求的数据\",{\"1\":{\"450\":1}}],[\"拿到子组件传过来的值\",{\"1\":{\"414\":1}}],[\"拿到摘要后\",{\"1\":{\"239\":1}}],[\"很多系统中都有内置\",{\"1\":{\"677\":1}}],[\"很明显这不是想要的结果\",{\"1\":{\"408\":1}}],[\"很自然的就组成了一个作用域链\",{\"1\":{\"118\":1}}],[\"考虑是否渲染的算法\",{\"1\":{\"920\":1}}],[\"考虑先在值上使用\",{\"1\":{\"407\":1}}],[\"考虑到每次浮点数运算的偏差非常小\",{\"1\":{\"304\":1}}],[\"信息头中的一部分\",{\"1\":{\"407\":1}}],[\"信息同域共享\",{\"1\":{\"280\":1}}],[\"举个简单的例子\",{\"1\":{\"465\":1}}],[\"举个例子\",{\"1\":{\"8\":1,\"11\":1,\"12\":1,\"480\":1}}],[\"举例说\",{\"1\":{\"406\":1}}],[\"箭头函数会绑定父级作用域中的变量\",{\"1\":{\"401\":1}}],[\"箭头可以变成需要的形状\",{\"1\":{\"37\":1}}],[\"赋值\",{\"1\":{\"526\":1}}],[\"赋值给\",{\"1\":{\"479\":1}}],[\"赋值异常\",{\"1\":{\"347\":1}}],[\"赋给图的初版一个版本等级\",{\"1\":{\"675\":1}}],[\"赋给\",{\"1\":{\"399\":1}}],[\"改动新的变量将影响到原始变量\",{\"1\":{\"399\":1}}],[\"改变loading\",{\"1\":{\"911\":1}}],[\"改变location\",{\"1\":{\"608\":1}}],[\"改变hash值并不会导致浏览器向服务器发送请求\",{\"1\":{\"607\":1}}],[\"改变\",{\"1\":{\"606\":1}}],[\"改变了\",{\"1\":{\"589\":1}}],[\"改变s1的play属性\",{\"1\":{\"258\":1}}],[\"改变元素透明度\",{\"1\":{\"69\":1}}],[\"充当上述类型别名\",{\"1\":{\"395\":1}}],[\"到你的项目中\",{\"1\":{\"928\":1}}],[\"到运行事件处理脚本所需的时间\",{\"1\":{\"882\":1}}],[\"到浏览器实际能够开始处理事件处理脚本以响应该互动的时间\",{\"1\":{\"881\":1}}],[\"到老节点索引的映射表\",{\"1\":{\"770\":1}}],[\"到达浏览器又运行一遍\",{\"1\":{\"449\":1}}],[\"到新的props或者state时都会调用\",{\"1\":{\"440\":1}}],[\"到\",{\"1\":{\"395\":1,\"398\":1}}],[\"到具体的计算层⾯\",{\"1\":{\"36\":1}}],[\"键盘修饰符\",{\"1\":{\"699\":1}}],[\"键名对应变量名\",{\"1\":{\"402\":1}}],[\"键的\",{\"1\":{\"386\":1}}],[\"键值只支持int和string\",{\"1\":{\"383\":1}}],[\"亦可用于\",{\"1\":{\"386\":1}}],[\"访问内置的插件\",{\"1\":{\"954\":1}}],[\"访问完整的组件实例\",{\"1\":{\"780\":1}}],[\"访问更新后dom\",{\"1\":{\"779\":1}}],[\"访问器\",{\"1\":{\"662\":1}}],[\"访问当前节点的方式如下\",{\"1\":{\"580\":1}}],[\"访问变量的第二个办法\",{\"1\":{\"402\":1}}],[\"访问\",{\"0\":{\"384\":1},\"1\":{\"530\":1,\"925\":1,\"955\":1}}],[\"访问控制\",{\"1\":{\"345\":1}}],[\"美元标记\",{\"1\":{\"380\":1}}],[\"换成了component\",{\"1\":{\"495\":1}}],[\"换成冒号\",{\"1\":{\"312\":1}}],[\"换页\",{\"1\":{\"380\":1}}],[\"换行\",{\"1\":{\"380\":1,\"1008\":1}}],[\"序列\",{\"1\":{\"380\":1}}],[\"序列号\",{\"1\":{\"182\":1}}],[\"特别是在\",{\"1\":{\"770\":1}}],[\"特别是程序的源代码\",{\"1\":{\"680\":1}}],[\"特性\",{\"0\":{\"531\":1,\"639\":1},\"1\":{\"517\":1}}],[\"特征\",{\"1\":{\"467\":1}}],[\"特殊字符\",{\"1\":{\"379\":1}}],[\"特点如下\",{\"1\":{\"181\":1,\"182\":1,\"230\":1}}],[\"特点\",{\"0\":{\"196\":1,\"946\":1},\"1\":{\"67\":1,\"68\":1,\"69\":1,\"70\":1,\"71\":1,\"72\":1}}],[\"去和其它值进行比较\",{\"1\":{\"377\":1}}],[\"去掉末尾的零后正好为\",{\"1\":{\"303\":1}}],[\"某些样式无法编写\",{\"1\":{\"485\":1}}],[\"某些样式没有提示\",{\"1\":{\"485\":1}}],[\"某些数学运算会产生一个由常量\",{\"1\":{\"377\":1}}],[\"某些语言构造调用\",{\"1\":{\"359\":1}}],[\"浮点型\",{\"1\":{\"375\":1}}],[\"浮动\",{\"1\":{\"37\":1}}],[\"浮动元素\",{\"1\":{\"20\":1}}],[\"浮动子元素也参与计算\",{\"1\":{\"19\":1,\"21\":1}}],[\"产生出\",{\"1\":{\"374\":1}}],[\"产生式的目标结果\",{\"1\":{\"992\":1}}],[\"产生式的下标如果是\",{\"1\":{\"129\":1}}],[\"产生式的上下标\",{\"1\":{\"127\":1}}],[\"产生式用于说明或定义句子的组成结构\",{\"1\":{\"128\":1}}],[\"范围\",{\"1\":{\"373\":1}}],[\"范围的全局环境\",{\"1\":{\"96\":1}}],[\"溢出\",{\"0\":{\"373\":1}}],[\"十分类似\",{\"1\":{\"550\":1}}],[\"十进制数\",{\"1\":{\"372\":1}}],[\"十六进制转义\",{\"1\":{\"1011\":1}}],[\"十六进制字面量产生式\",{\"1\":{\"991\":1}}],[\"十六进制数\",{\"1\":{\"372\":1}}],[\"十六进制\",{\"1\":{\"372\":1,\"380\":1}}],[\"八进制\",{\"1\":{\"380\":1}}],[\"八进制数\",{\"1\":{\"372\":2}}],[\"八进制或二进制表示\",{\"1\":{\"372\":1}}],[\"八位字节数组\",{\"1\":{\"224\":1}}],[\"符号\",{\"1\":{\"368\":1}}],[\"测试辅助功能\",{\"1\":{\"888\":1}}],[\"测试用例修改\",{\"1\":{\"689\":1}}],[\"测试\",{\"1\":{\"368\":1}}],[\"交叉类型\",{\"0\":{\"642\":1}}],[\"交集类型\",{\"1\":{\"368\":1}}],[\"交给上面的应用层就完成任务\",{\"1\":{\"181\":1}}],[\"枚举是在类\",{\"1\":{\"389\":1}}],[\"枚举\",{\"0\":{\"389\":1,\"654\":1},\"1\":{\"367\":1,\"639\":1}}],[\"枚举定义的自定义类型\",{\"1\":{\"367\":1}}],[\"联合类型\",{\"0\":{\"643\":1},\"1\":{\"368\":1,\"369\":1,\"644\":1}}],[\"联合\",{\"1\":{\"361\":1}}],[\"故意文件错误\",{\"1\":{\"359\":1}}],[\"乍看起来下面的输出是\",{\"1\":{\"357\":1}}],[\"弃用依靠左联\",{\"1\":{\"357\":1}}],[\"弃用使用单个下划线\",{\"1\":{\"336\":1}}],[\"太空船运算符\",{\"1\":{\"356\":1}}],[\"乘以\",{\"1\":{\"355\":1}}],[\"次\",{\"1\":{\"355\":2}}],[\"~return\",{\"1\":{\"986\":2}}],[\"~await\",{\"1\":{\"986\":1}}],[\"~yield\",{\"1\":{\"986\":2}}],[\"~等\",{\"1\":{\"983\":1}}],[\"~~\",{\"1\":{\"916\":1,\"917\":1,\"918\":1}}],[\"~\",{\"1\":{\"355\":1,\"985\":2}}],[\"^\",{\"1\":{\"355\":1,\"760\":1}}],[\"按是否具备标识分为两类\",{\"1\":{\"981\":1}}],[\"按需加载\",{\"1\":{\"839\":1},\"2\":{\"874\":1}}],[\"按模板的顺序来加载\",{\"1\":{\"784\":1}}],[\"按钮提交事件\",{\"1\":{\"849\":1}}],[\"按钮权限\",{\"1\":{\"702\":1}}],[\"按钮点击触发\",{\"1\":{\"702\":1}}],[\"按钮\",{\"1\":{\"588\":1}}],[\"按功能组织\",{\"0\":{\"570\":1}}],[\"按角色组织\",{\"0\":{\"569\":1}}],[\"按位取反\",{\"1\":{\"355\":1}}],[\"按位异或\",{\"1\":{\"355\":1}}],[\"按位或\",{\"1\":{\"355\":1}}],[\"按位与\",{\"1\":{\"355\":1}}],[\"按照策略\",{\"1\":{\"282\":1}}],[\"按照一定的大小\",{\"1\":{\"282\":1}}],[\"像上述情况只需要将000元素插入到最前面位置\",{\"1\":{\"542\":1}}],[\"像上述通过函数式创建的组件的方式\",{\"1\":{\"473\":1}}],[\"像\",{\"1\":{\"351\":1}}],[\"出错\",{\"1\":{\"1013\":1}}],[\"出错失败前有了最后一个机会加载所需的类\",{\"1\":{\"351\":1}}],[\"出现在代换式某个位置的右侧\",{\"1\":{\"997\":1}}],[\"出现问题时可以用排除法直接移除组件\",{\"1\":{\"717\":1}}],[\"出现的总次数\",{\"1\":{\"36\":2}}],[\"出于此原因\",{\"1\":{\"408\":1}}],[\"拦截器\",{\"0\":{\"349\":1}}],[\"建议为此使用一个常量\",{\"1\":{\"956\":1}}],[\"建议这个置为false\",{\"1\":{\"895\":1}}],[\"建议使用\",{\"1\":{\"895\":1}}],[\"建议使用下方的写法\",{\"1\":{\"895\":1}}],[\"建议使用函数式创建的方式\",{\"1\":{\"475\":1}}],[\"建议将页面进行更小的颗粒化\",{\"1\":{\"551\":1}}],[\"建议将数据进行一个全局资源管理\",{\"1\":{\"417\":1}}],[\"建议更改为属性声明\",{\"1\":{\"348\":1}}],[\"建立一个\",{\"1\":{\"770\":1}}],[\"建立一次连接\",{\"1\":{\"147\":1}}],[\"建立会话密钥\",{\"1\":{\"231\":1}}],[\"建立连接时需要选择一组恰当的加密算法来实现安全通信\",{\"1\":{\"231\":1}}],[\"建立连接3次握手\",{\"1\":{\"183\":1}}],[\"静态语义\",{\"1\":{\"977\":1}}],[\"静态资源等\",{\"1\":{\"939\":1}}],[\"静态提升\",{\"1\":{\"818\":1}}],[\"静态标记\",{\"1\":{\"811\":1}}],[\"静态根节点\",{\"1\":{\"753\":1}}],[\"静态属性\",{\"0\":{\"652\":1}}],[\"静态属性则是用\",{\"1\":{\"345\":1}}],[\"静态变量只能使用常量表达式进行初始化\",{\"1\":{\"403\":1}}],[\"静态变量仅在局部函数作用域中存在\",{\"1\":{\"403\":1}}],[\"静态\",{\"1\":{\"345\":1}}],[\"剩余参数\",{\"0\":{\"658\":1}}],[\"剩余链条会直接跳过\",{\"1\":{\"344\":1}}],[\"剩余宽度由另一列撑满\",{\"1\":{\"74\":1}}],[\"放宽可见性而不是继续限制\",{\"1\":{\"341\":1}}],[\"放大\",{\"1\":{\"12\":1}}],[\"签名必须兼容父类方法\",{\"1\":{\"341\":1}}],[\"签名覆盖规则\",{\"0\":{\"341\":1}}],[\"签名和公钥一样完全公开\",{\"1\":{\"239\":1}}],[\"假如出现访问\",{\"1\":{\"895\":1}}],[\"假如没有被定义为\",{\"1\":{\"339\":1}}],[\"假设流程如下\",{\"1\":{\"760\":1}}],[\"假设我们规定的行数是五行\",{\"1\":{\"90\":1}}],[\"试图注释掉一大块代码时很容易出现该错误\",{\"1\":{\"333\":1}}],[\"视频的渲染时间\",{\"1\":{\"879\":1}}],[\"视频等媒体资源\",{\"1\":{\"860\":1}}],[\"视图层使用webview进行渲染\",{\"1\":{\"835\":1}}],[\"视图→数据\",{\"1\":{\"811\":1}}],[\"视图需要等待队列中所有的数据变化完成后\",{\"1\":{\"800\":1}}],[\"视乎哪个首先出现\",{\"1\":{\"333\":1}}],[\"视差元素的父级需要3d视角\",{\"1\":{\"8\":1}}],[\"视差滚动\",{\"1\":{\"5\":1}}],[\"风格的注释在碰到第一个\",{\"1\":{\"333\":1}}],[\"风格的注释\",{\"1\":{\"333\":2}}],[\"风格\",{\"1\":{\"333\":2}}],[\"跳转到应用内的某个页面\",{\"1\":{\"832\":1}}],[\"跳转方式\",{\"0\":{\"832\":1}}],[\"跳转回目标url\",{\"1\":{\"287\":1}}],[\"跳出了\",{\"1\":{\"333\":1}}],[\"跳出\",{\"1\":{\"331\":1}}],[\"哪些跳过\",{\"1\":{\"331\":1}}],[\"例子\",{\"1\":{\"355\":1,\"356\":1,\"361\":1,\"731\":1}}],[\"例外是处于条件语句中间时\",{\"1\":{\"331\":1}}],[\"例如null\",{\"1\":{\"980\":1}}],[\"例如node和浏览器环境就有不同的全局对象\",{\"1\":{\"127\":1}}],[\"例如个性化内容\",{\"1\":{\"866\":1}}],[\"例如vue的componet动态组件指定是一个异步组件时\",{\"1\":{\"858\":1}}],[\"例如onresize\",{\"1\":{\"844\":1}}],[\"例如onclick要改写成onclick\",{\"1\":{\"508\":1}}],[\"例如按钮触发\",{\"1\":{\"836\":1}}],[\"例如将path在route匹配时写成\",{\"1\":{\"603\":1}}],[\"例如组件被选中时\",{\"1\":{\"596\":1}}],[\"例如全局对象或者\",{\"1\":{\"508\":1}}],[\"例如id\",{\"1\":{\"421\":1}}],[\"例如h1\",{\"1\":{\"421\":1}}],[\"例如redux\",{\"1\":{\"417\":1}}],[\"例如可以将相关的变量编成组\",{\"1\":{\"406\":1}}],[\"例如函数调用\",{\"1\":{\"403\":1}}],[\"例如图像或\",{\"1\":{\"329\":1}}],[\"例如指\",{\"1\":{\"197\":1}}],[\"例如域名系统\",{\"1\":{\"158\":1}}],[\"例如\",{\"1\":{\"146\":1,\"211\":1,\"308\":3,\"329\":1,\"333\":1,\"359\":2,\"406\":4,\"407\":2,\"409\":1,\"488\":1,\"497\":1,\"504\":1,\"517\":1,\"537\":1,\"560\":1,\"584\":1,\"646\":1,\"858\":1,\"881\":1,\"908\":1,\"925\":1,\"932\":1,\"940\":1,\"941\":1,\"946\":2,\"949\":2}}],[\"例如使用\",{\"1\":{\"82\":1}}],[\"见下例\",{\"1\":{\"331\":1}}],[\"见\",{\"1\":{\"331\":1}}],[\"加入到documentfragment中\",{\"1\":{\"918\":1}}],[\"加入了\",{\"1\":{\"592\":1}}],[\"加入了在浏览器运行环境下的一些功能\",{\"1\":{\"592\":1}}],[\"加速访问\",{\"1\":{\"870\":1}}],[\"加速首屏加载\",{\"1\":{\"448\":1}}],[\"加载模块\",{\"1\":{\"932\":2}}],[\"加载器\",{\"1\":{\"932\":1}}],[\"加载更快\",{\"1\":{\"896\":1}}],[\"加载\",{\"0\":{\"839\":1}}],[\"加载小程序代码包\",{\"1\":{\"838\":1}}],[\"加载页面\",{\"1\":{\"828\":1}}],[\"加载完子组件后\",{\"1\":{\"784\":1}}],[\"加key\",{\"1\":{\"497\":2}}],[\"加密数据和发送电子邮件\",{\"1\":{\"329\":1}}],[\"加上一个专用的\",{\"1\":{\"200\":1}}],[\"匿名函数\",{\"0\":{\"326\":1},\"1\":{\"326\":1,\"338\":1}}],[\"匿名函数则为\",{\"1\":{\"308\":1}}],[\"覆盖之前的参数\",{\"1\":{\"324\":1}}],[\"起始数据在整个列表中的偏移位置\",{\"1\":{\"920\":1}}],[\"起始索引\",{\"1\":{\"920\":1}}],[\"起正确\",{\"1\":{\"403\":1}}],[\"起移除\",{\"1\":{\"351\":1}}],[\"起弃用\",{\"1\":{\"351\":1}}],[\"起弃用动态属性\",{\"1\":{\"348\":1}}],[\"起可以跟一个类型声明\",{\"1\":{\"345\":1}}],[\"起可用\",{\"1\":{\"344\":1,\"393\":1,\"394\":1}}],[\"起支持的\",{\"1\":{\"345\":1}}],[\"起\",{\"1\":{\"324\":1,\"326\":1,\"336\":1,\"340\":1,\"342\":1,\"343\":1,\"344\":1,\"347\":1,\"350\":2,\"357\":2,\"372\":1,\"385\":1,\"403\":1}}],[\"起码要有一个满足的\",{\"1\":{\"313\":1}}],[\"|\",{\"1\":{\"324\":2,\"355\":1,\"368\":3,\"428\":12,\"566\":1,\"643\":1,\"646\":4,\"659\":2}}],[\"||\",{\"1\":{\"254\":1,\"278\":1,\"285\":2,\"549\":7,\"608\":3,\"612\":2,\"753\":2,\"770\":1,\"792\":1,\"793\":1}}],[\"记号\",{\"1\":{\"323\":1}}],[\"记录事件参数\",{\"1\":{\"848\":1}}],[\"记录\",{\"1\":{\"811\":1}}],[\"记录旧状态\",{\"1\":{\"778\":1}}],[\"记录文件所有的历史变化\",{\"1\":{\"675\":1}}],[\"记录并计算当前滑动的位置与初始位置的差值\",{\"1\":{\"291\":1}}],[\"记录其初始位置的值\",{\"1\":{\"291\":1}}],[\"记录用户的登陆状态\",{\"1\":{\"287\":1}}],[\"记录器\",{\"1\":{\"96\":1,\"122\":1}}],[\"形式传入组件\",{\"1\":{\"450\":1}}],[\"形参\",{\"1\":{\"320\":1}}],[\"形成错误边界组件的两个条件\",{\"1\":{\"500\":1}}],[\"形成\",{\"1\":{\"240\":1}}],[\"形成视觉差的效果\",{\"1\":{\"5\":1}}],[\"形成立体的运动效果\",{\"1\":{\"5\":1}}],[\"条目并将其记录到控制台的\",{\"1\":{\"884\":1}}],[\"条目并将其记录到控制台\",{\"1\":{\"878\":1}}],[\"条可计时的低级语句就会发生的事件\",{\"1\":{\"315\":1}}],[\"条件渲染\",{\"1\":{\"811\":1}}],[\"条件类型\",{\"0\":{\"647\":1}}],[\"条件\",{\"1\":{\"122\":1}}],[\"目的\",{\"1\":{\"844\":1}}],[\"目的是将多个函数组合成一个函数\",{\"1\":{\"297\":1}}],[\"目前这种创建方式已经不怎么用了\",{\"1\":{\"473\":1}}],[\"目前只认识三个指令\",{\"1\":{\"314\":1}}],[\"目标是提供一种能力\",{\"1\":{\"389\":1}}],[\"名称和加载提示图标\",{\"1\":{\"838\":1}}],[\"名称\",{\"1\":{\"355\":1,\"356\":1,\"361\":1}}],[\"名包括其被声明的作用域\",{\"1\":{\"308\":1}}],[\"名字只在该区域内有效\",{\"1\":{\"639\":1}}],[\"名字空间\",{\"1\":{\"639\":1}}],[\"名字\",{\"1\":{\"308\":1}}],[\"魔术\",{\"1\":{\"308\":1}}],[\"魔术常量\",{\"0\":{\"308\":1}}],[\"预加载\",{\"2\":{\"913\":1}}],[\"预加载关键资源\",{\"1\":{\"906\":1}}],[\"预渲染\",{\"1\":{\"908\":1},\"2\":{\"913\":1}}],[\"预渲染来优化用户体验\",{\"1\":{\"905\":1}}],[\"预处理标志\",{\"1\":{\"753\":1}}],[\"预定义变量\",{\"0\":{\"400\":1},\"1\":{\"400\":1,\"406\":1}}],[\"预定义常量\",{\"0\":{\"307\":1}}],[\"预防方式如下\",{\"1\":{\"301\":1}}],[\"预防\",{\"1\":{\"299\":1}}],[\"循环结束\",{\"1\":{\"769\":2}}],[\"循环从两边向中间收拢\",{\"1\":{\"731\":1}}],[\"循环内以及\",{\"1\":{\"306\":1}}],[\"循环终止\",{\"1\":{\"122\":1}}],[\"抛出错误后\",{\"1\":{\"500\":1}}],[\"抛出错误\",{\"1\":{\"306\":1}}],[\"请记住\",{\"1\":{\"948\":1}}],[\"请使用\",{\"1\":{\"306\":1,\"500\":1}}],[\"请求在onload就加载\",{\"1\":{\"840\":1}}],[\"请求数据\",{\"1\":{\"825\":1}}],[\"请求体的\",{\"1\":{\"224\":1}}],[\"请求无法被服务器识别\",{\"1\":{\"212\":1}}],[\"请求超时\",{\"1\":{\"210\":1}}],[\"请求要求身份验证\",{\"1\":{\"210\":1}}],[\"请求者只能使用代理访问请求的网页\",{\"1\":{\"209\":1}}],[\"请求者应当对不同的位置使用单独的\",{\"1\":{\"209\":1}}],[\"请求来检索响应时\",{\"1\":{\"209\":1}}],[\"请求的响应\",{\"1\":{\"209\":1}}],[\"请求的网页已永久移动到新位置\",{\"1\":{\"209\":1}}],[\"请求的内容包括\",{\"1\":{\"190\":1}}],[\"请求成功并且服务器创建了新的资源\",{\"1\":{\"208\":1}}],[\"请求所希望的响应头或数据体将随此响应返回\",{\"1\":{\"208\":1}}],[\"请求已成功\",{\"1\":{\"208\":1}}],[\"请求主体\",{\"1\":{\"190\":1}}],[\"请求头\",{\"0\":{\"223\":1},\"1\":{\"190\":1}}],[\"请求行\",{\"1\":{\"190\":1}}],[\"请求到目标服务器\",{\"1\":{\"190\":1}}],[\"请求\",{\"0\":{\"190\":1},\"1\":{\"140\":1,\"186\":1,\"195\":1,\"883\":1}}],[\"严格来说\",{\"1\":{\"641\":1}}],[\"严格大于\",{\"1\":{\"356\":1}}],[\"严格小于\",{\"1\":{\"356\":1}}],[\"严格检查输入变量的类型和格式\",{\"1\":{\"301\":1}}],[\"严格模式\",{\"1\":{\"270\":2,\"1012\":1}}],[\"严格模式下函数不会被实例化\",{\"1\":{\"107\":1}}],[\"猜解用户名和密码\",{\"1\":{\"301\":1}}],[\"注入到此文件中\",{\"1\":{\"953\":1}}],[\"注入环境变量\",{\"1\":{\"953\":1}}],[\"注入攻击\",{\"1\":{\"301\":1}}],[\"注册事件\",{\"1\":{\"672\":1}}],[\"注解标记此类\",{\"1\":{\"348\":1}}],[\"注释\",{\"0\":{\"333\":1}}],[\"注意和结论\",{\"0\":{\"754\":1}}],[\"注意事项为\",{\"1\":{\"543\":1}}],[\"注意事项\",{\"0\":{\"497\":1},\"1\":{\"942\":1}}],[\"注意新的键名是\",{\"1\":{\"384\":1}}],[\"注意传递null不会分配默认值\",{\"1\":{\"322\":1}}],[\"注意绝对定位的元素脱离文档流\",{\"1\":{\"79\":1}}],[\"注意的是\",{\"1\":{\"76\":1,\"583\":1}}],[\"注意\",{\"0\":{\"791\":1},\"1\":{\"11\":1,\"331\":1,\"332\":1,\"369\":1,\"407\":1,\"773\":1,\"893\":1}}],[\"达到冒充用户对被攻击网站执行某些操作的目的\",{\"1\":{\"300\":1}}],[\"绕过后台的用户验证\",{\"1\":{\"300\":1}}],[\"前者指示\",{\"1\":{\"948\":1}}],[\"前台进入后台\",{\"1\":{\"828\":1}}],[\"前后端配合要求更高\",{\"1\":{\"702\":1}}],[\"前端权限归根结底是请求的发起权\",{\"1\":{\"702\":1}}],[\"前端性能问题是一个必须考虑的问题\",{\"1\":{\"551\":1}}],[\"前端取出url中的恶意代码并执行\",{\"1\":{\"299\":1}}],[\"前缀为\",{\"1\":{\"971\":1}}],[\"前缀\",{\"1\":{\"445\":1,\"949\":3,\"972\":1}}],[\"前缀的一个\",{\"1\":{\"386\":1}}],[\"前面的元素由于是完全相同的\",{\"1\":{\"542\":1}}],[\"前面的元素在diff算法中\",{\"1\":{\"542\":1}}],[\"前面可以加上可选的符号\",{\"1\":{\"372\":1}}],[\"前面我们讲到两种继承方式\",{\"1\":{\"260\":1}}],[\"攻击者诱导受害者进入第三方网站\",{\"1\":{\"300\":1}}],[\"攻击者构造出特殊的url\",{\"1\":{\"299\":2}}],[\"攻击目标是盗取存储在客户端的cookie或者其他网站用于识别客户端身份的敏感信息\",{\"1\":{\"299\":1}}],[\"恶意代码窃取用户数据并发送到攻击者的网站\",{\"1\":{\"299\":3}}],[\"混合数字枚举和字符串枚举\",{\"1\":{\"654\":1}}],[\"混合html\",{\"1\":{\"331\":1}}],[\"混合加密\",{\"0\":{\"237\":1}}],[\"混在其中的恶意代码也被执行\",{\"1\":{\"299\":2}}],[\"拼接在html中返回给浏览器\",{\"1\":{\"299\":2}}],[\"拼接在目标url的后面\",{\"1\":{\"287\":1}}],[\"涉及到openid和code的概念\",{\"1\":{\"829\":1}}],[\"涉及到三方\",{\"1\":{\"299\":1}}],[\"涉及的css属性有\",{\"1\":{\"87\":1}}],[\"跨域资源共享\",{\"1\":{\"723\":1}}],[\"跨域是浏览器基于同源策略的安全手段\",{\"1\":{\"722\":1}}],[\"跨域问题\",{\"0\":{\"722\":1}}],[\"跨级组件通信\",{\"1\":{\"696\":1}}],[\"跨平台\",{\"1\":{\"423\":1}}],[\"跨站脚本攻击\",{\"1\":{\"299\":1}}],[\"跨来源资源共享\",{\"1\":{\"224\":1}}],[\"修改bug\",{\"1\":{\"689\":1}}],[\"修改只要提交到版本控制系统\",{\"1\":{\"675\":1}}],[\"修改状态\",{\"1\":{\"588\":1}}],[\"修改状态等\",{\"1\":{\"489\":1}}],[\"修改第1个到第5个节点的innertext\",{\"1\":{\"497\":2}}],[\"修改如下\",{\"1\":{\"449\":1}}],[\"修改dom样式等\",{\"1\":{\"442\":1}}],[\"修改\",{\"1\":{\"399\":1}}],[\"修改网站权限\",{\"1\":{\"298\":1}}],[\"修饰符处理了许多dom事件的细节\",{\"1\":{\"699\":1}}],[\"修饰符声明属性\",{\"1\":{\"347\":1}}],[\"修饰符的属性将默认声明为public\",{\"1\":{\"345\":1}}],[\"修饰符\",{\"0\":{\"651\":1,\"699\":1},\"1\":{\"342\":1}}],[\"修饰符并禁止创建动态属性\",{\"1\":{\"342\":1}}],[\"修饰符来标记类\",{\"1\":{\"342\":1}}],[\"修剪文本\",{\"1\":{\"47\":1}}],[\"管道函数是从左到右的\",{\"1\":{\"297\":1}}],[\"管理和终止表示层实体之间的通信会话\",{\"1\":{\"160\":1}}],[\"柯里化\",{\"0\":{\"296\":1}}],[\"逐层推导复杂运算\",{\"1\":{\"293\":1}}],[\"逐级向上寻找\",{\"1\":{\"251\":1}}],[\"命令\",{\"1\":{\"928\":1}}],[\"命令来执行\",{\"1\":{\"360\":1}}],[\"命令式编程\",{\"1\":{\"293\":1}}],[\"命名空间不能识别组件之间的依赖关系\",{\"1\":{\"666\":1}}],[\"命名空间定义了标识符的可见范围\",{\"1\":{\"665\":1}}],[\"命名空间和模块\",{\"0\":{\"664\":1}}],[\"命名空间\",{\"0\":{\"665\":1},\"1\":{\"338\":1,\"343\":1}}],[\"命名参数不能覆盖已解包的参数\",{\"1\":{\"324\":1}}],[\"命名参数必须在位置参数之后\",{\"1\":{\"324\":1}}],[\"命名参数也可以与位置参数相结合使用\",{\"1\":{\"324\":1}}],[\"命名参数通过在参数名前加上冒号来传递\",{\"1\":{\"324\":1}}],[\"命名参数允许根据参数名而不是参数位置向函数传参\",{\"1\":{\"324\":1}}],[\"命名参数\",{\"0\":{\"324\":1},\"1\":{\"324\":1}}],[\"命中次数与所有访问次数之比\",{\"1\":{\"135\":1}}],[\"命中率\",{\"1\":{\"135\":1}}],[\"松手开始加载\",{\"1\":{\"292\":1}}],[\"监测实时滚动\",{\"1\":{\"292\":1}}],[\"监听页面显示\",{\"1\":{\"825\":1}}],[\"监听页面加载\",{\"1\":{\"825\":1}}],[\"监听删除属性\",{\"1\":{\"819\":1}}],[\"监听数组的索引和length属性\",{\"1\":{\"819\":1}}],[\"监听数据变化并执行副作用\",{\"1\":{\"811\":1}}],[\"监听动态属性的添加\",{\"1\":{\"819\":1}}],[\"监听组件数据\",{\"1\":{\"796\":1}}],[\"监听事件\",{\"1\":{\"672\":1}}],[\"监听器\",{\"1\":{\"671\":1}}],[\"监听hash值的变化\",{\"1\":{\"608\":1}}],[\"监听下拉刷新\",{\"1\":{\"292\":1}}],[\"监听原生touched事件\",{\"1\":{\"291\":1}}],[\"监听原生touchmove事件\",{\"1\":{\"291\":1}}],[\"监听原生touchstart事件\",{\"1\":{\"291\":1}}],[\"监听手机窗口变化\",{\"1\":{\"59\":1}}],[\"监听手机旋转的事件的时机\",{\"1\":{\"59\":1}}],[\"释放更新\",{\"1\":{\"291\":1}}],[\"认证中心记录用户的登陆状态\",{\"1\":{\"287\":1}}],[\"认证服务器的公开密钥的是真实有效的数字证书认证机构\",{\"1\":{\"240\":1}}],[\"专门处理登录请求的独立web服务\",{\"1\":{\"287\":1}}],[\"部署到服务器后404\",{\"0\":{\"693\":1}}],[\"部署一个认证中心\",{\"1\":{\"287\":1}}],[\"部分用\",{\"1\":{\"315\":1}}],[\"部分允许设定\",{\"1\":{\"314\":1}}],[\"部分内容\",{\"1\":{\"208\":1}}],[\"被缓存的组件离开\",{\"1\":{\"783\":1}}],[\"被缓存的组件重新进入\",{\"1\":{\"782\":1}}],[\"被绑定元素插入父节点时调用\",{\"1\":{\"737\":1}}],[\"被传递给\",{\"1\":{\"581\":1}}],[\"被传入的数据可在组件中通过\",{\"1\":{\"530\":1}}],[\"被挂载时进行回调\",{\"1\":{\"579\":1}}],[\"被继承的方法和属性可以通过用同样的名字重新声明被覆盖\",{\"1\":{\"340\":1}}],[\"被观察者\",{\"1\":{\"285\":1}}],[\"被观察者的位置矩形\",{\"1\":{\"285\":1}}],[\"被遮挡的元素可触发事件\",{\"1\":{\"72\":1}}],[\"判断当前path是否包含pathname\",{\"1\":{\"609\":1}}],[\"判断数据库的类型以及版本\",{\"1\":{\"301\":1}}],[\"判断两个元素是否重叠的api\",{\"1\":{\"285\":1}}],[\"判断参数对应的数据是否存在\",{\"1\":{\"278\":1}}],[\"告知从哪开始\",{\"1\":{\"283\":1}}],[\"告诉客户端进制访问该站点或者资源\",{\"1\":{\"212\":1}}],[\"告诉客户端有缓存\",{\"1\":{\"212\":1}}],[\"断开websocket的链接\",{\"1\":{\"780\":1}}],[\"断开连接四次挥手\",{\"1\":{\"183\":1}}],[\"断点续传\",{\"0\":{\"283\":1}}],[\"串行\",{\"1\":{\"282\":1}}],[\"串行线路接口协议\",{\"1\":{\"176\":1}}],[\"操作执行优化\",{\"0\":{\"843\":1},\"1\":{\"843\":1}}],[\"操作符来创建一个插件实例\",{\"1\":{\"953\":1}}],[\"操作符\",{\"1\":{\"659\":1,\"925\":1}}],[\"操作符访问\",{\"1\":{\"344\":1}}],[\"操作来模拟页面跳转\",{\"1\":{\"607\":1}}],[\"操作\",{\"0\":{\"965\":1},\"1\":{\"497\":4}}],[\"操作过程中只比较oldindex和maxindex\",{\"1\":{\"496\":1}}],[\"操作繁琐\",{\"1\":{\"280\":1}}],[\"操作异步\",{\"1\":{\"280\":1}}],[\"操作系统或者运行时就必须供给内存\",{\"1\":{\"247\":1}}],[\"操作系统将\",{\"1\":{\"142\":1}}],[\"操作系统的缓存其实是用户自己配置的\",{\"1\":{\"141\":1}}],[\"操作系统缓存\",{\"1\":{\"141\":1}}],[\"受控\",{\"1\":{\"467\":1}}],[\"受控组件我们一般需要初始状态和一个状态更新事件函数\",{\"1\":{\"465\":1}}],[\"受控组件\",{\"0\":{\"465\":1},\"1\":{\"465\":1}}],[\"受控组件和非受控组件\",{\"0\":{\"464\":1}}],[\"受同源策略影响\",{\"1\":{\"280\":1}}],[\"受盒子的background属性影响\",{\"1\":{\"15\":1}}],[\"持久化数据结构\",{\"1\":{\"525\":1}}],[\"持久化本地存储\",{\"1\":{\"280\":1}}],[\"持续时间\",{\"1\":{\"49\":1}}],[\"纯函数是对给定的输入返回相同输出的函数\",{\"1\":{\"294\":1}}],[\"纯函数\",{\"0\":{\"294\":1},\"1\":{\"279\":1}}],[\"纯css实现也非常简单\",{\"1\":{\"90\":1}}],[\"暂存区是一个文件\",{\"1\":{\"685\":1}}],[\"暂存区\",{\"1\":{\"685\":1}}],[\"暂存\",{\"1\":{\"277\":1}}],[\"暂停视频播放\",{\"1\":{\"783\":1}}],[\"暂停组件状态\",{\"1\":{\"783\":1}}],[\"暂停\",{\"1\":{\"95\":1}}],[\"空对象\",{\"1\":{\"277\":1}}],[\"空白通常指不能放其他元素的区域\",{\"1\":{\"15\":1}}],[\"扩展了vue的应用场景\",{\"1\":{\"813\":1}}],[\"扩展html的能力\",{\"1\":{\"811\":1}}],[\"扩展性强\",{\"1\":{\"683\":1}}],[\"扩展运算符实现的复制\",{\"1\":{\"276\":1}}],[\"扩展元素以填补元素\",{\"1\":{\"45\":1}}],[\"拷贝\",{\"0\":{\"387\":1}}],[\"拷贝基本类型的值\",{\"1\":{\"276\":1}}],[\"拷贝一层\",{\"1\":{\"276\":1}}],[\"浅拷贝\",{\"0\":{\"275\":1,\"276\":1}}],[\"捕获阶段\",{\"1\":{\"273\":1}}],[\"取消上一次的执行\",{\"1\":{\"844\":1}}],[\"取消执行\",{\"1\":{\"844\":1}}],[\"取消vuex的大约\",{\"1\":{\"780\":1}}],[\"取消异步请求\",{\"1\":{\"780\":1}}],[\"取消合并\",{\"1\":{\"690\":1}}],[\"取消了组件的data和methods属性\",{\"1\":{\"669\":1}}],[\"取而代之的是key属性\",{\"1\":{\"634\":1}}],[\"取最后一次的执行结果\",{\"1\":{\"616\":1}}],[\"取值\",{\"1\":{\"526\":1}}],[\"取值不能为负\",{\"1\":{\"15\":1}}],[\"取决于调用方式\",{\"1\":{\"272\":1}}],[\"`ttfb\",{\"1\":{\"884\":1}}],[\"`you\",{\"1\":{\"520\":4}}],[\"`$\",{\"1\":{\"480\":1}}],[\"`ls\",{\"1\":{\"360\":1}}],[\"``\",{\"1\":{\"360\":1}}],[\"`goodbye\",{\"1\":{\"270\":1}}],[\"`\",{\"1\":{\"270\":2,\"360\":1,\"449\":8,\"488\":2,\"662\":1,\"884\":1}}],[\"`hello\",{\"1\":{\"270\":1,\"662\":1}}],[\"隐式原型\",{\"1\":{\"267\":1}}],[\"隐藏溢出范围的文本\",{\"1\":{\"90\":1}}],[\"隐藏多余文字\",{\"1\":{\"89\":1}}],[\"隐藏元素\",{\"0\":{\"65\":1}}],[\"添加进去\",{\"1\":{\"760\":1}}],[\"添加vue实例方法\",{\"1\":{\"717\":1}}],[\"添加全局资源\",{\"1\":{\"717\":1}}],[\"添加全局方法或属性\",{\"1\":{\"717\":1}}],[\"添加功能\",{\"1\":{\"689\":1}}],[\"添加了其他功能\",{\"1\":{\"571\":1}}],[\"添加一个单元\",{\"1\":{\"384\":1}}],[\"添加一些方法\",{\"1\":{\"262\":1}}],[\"添加\",{\"1\":{\"384\":2}}],[\"添加的新参数只能是可选\",{\"1\":{\"341\":1}}],[\"添加bfc\",{\"1\":{\"75\":1}}],[\"造成了多构造一次的性能开销\",{\"1\":{\"260\":1}}],[\"方便\",{\"1\":{\"834\":1}}],[\"方式配置\",{\"0\":{\"955\":1}}],[\"方式如下\",{\"1\":{\"626\":1}}],[\"方式创建\",{\"1\":{\"579\":1}}],[\"方式创建出来\",{\"1\":{\"579\":1}}],[\"方式四是最优的事件绑定方式\",{\"1\":{\"514\":1}}],[\"方式四只会生成一个方法实例\",{\"1\":{\"514\":1}}],[\"方式三的编写过于冗杂\",{\"1\":{\"514\":1}}],[\"方式二写法简单\",{\"1\":{\"514\":1}}],[\"方式一和方式二在每次组件render的时候都会生成新的方法实例\",{\"1\":{\"514\":1}}],[\"方式一和方式二的问题都解决了\",{\"1\":{\"260\":1}}],[\"方式一\",{\"1\":{\"514\":1}}],[\"方式\",{\"0\":{\"484\":1},\"1\":{\"287\":1}}],[\"方法会被\",{\"1\":{\"956\":1}}],[\"方法会传入\",{\"1\":{\"479\":1}}],[\"方法的第一个参数\",{\"1\":{\"956\":1}}],[\"方法的\",{\"1\":{\"956\":1}}],[\"方法的类的名字\",{\"1\":{\"308\":1}}],[\"方法同等的引用方式\",{\"1\":{\"949\":1}}],[\"方法将数据存储在本地\",{\"1\":{\"840\":1}}],[\"方法将在浏览器的空闲时段内调用的函数排队\",{\"1\":{\"429\":1}}],[\"方法把数据从逻辑层传递到渲染层\",{\"1\":{\"836\":1}}],[\"方法请求开发者服务器\",{\"1\":{\"829\":1}}],[\"方法生成code\",{\"1\":{\"829\":1}}],[\"方法进行挂载\",{\"1\":{\"537\":1}}],[\"方法进行重新渲染\",{\"1\":{\"474\":1}}],[\"方法没有绑定\",{\"1\":{\"508\":1}}],[\"方法中创建的\",{\"1\":{\"578\":1}}],[\"方法中使用高阶组件\",{\"1\":{\"479\":1}}],[\"方法中时\",{\"1\":{\"308\":1}}],[\"方法创建\",{\"0\":{\"473\":1},\"1\":{\"471\":1}}],[\"方法从\",{\"1\":{\"461\":1}}],[\"方法时\",{\"1\":{\"341\":1}}],[\"方法也没问题\",{\"1\":{\"263\":1}}],[\"方法实现的是浅拷贝\",{\"1\":{\"261\":1}}],[\"方法简约版报文是这样的\",{\"1\":{\"217\":2}}],[\"方法禁用\",{\"1\":{\"210\":1}}],[\"方法\",{\"0\":{\"723\":1},\"1\":{\"123\":1,\"263\":1,\"270\":1,\"325\":1,\"336\":1,\"368\":1,\"421\":1,\"584\":1,\"589\":1,\"649\":1,\"662\":1,\"796\":1}}],[\"正常的的ts项目开发过程中不建议使用命名空间\",{\"1\":{\"666\":1}}],[\"正常输出\",{\"1\":{\"260\":2}}],[\"正如componentwillunmount\",{\"1\":{\"459\":1}}],[\"正确\",{\"1\":{\"403\":2}}],[\"正在传输的类型由content\",{\"1\":{\"230\":1}}],[\"正在运行的执行上下文始终是该栈顶部元素\",{\"1\":{\"94\":1}}],[\"正在运行或暂停\",{\"1\":{\"13\":1}}],[\"手机号\",{\"1\":{\"846\":1}}],[\"手机等\",{\"1\":{\"54\":1}}],[\"手动搭建一个ssr框架进行实现\",{\"1\":{\"449\":1}}],[\"手动搭建一个\",{\"1\":{\"449\":1}}],[\"手动挂上构造器\",{\"1\":{\"260\":1}}],[\"手写递归实现\",{\"1\":{\"277\":1}}],[\"各有利弊\",{\"1\":{\"483\":1}}],[\"各有优缺点\",{\"1\":{\"260\":1}}],[\"各个子系统在被passport授权以后\",{\"1\":{\"286\":1}}],[\"各个图层以不同的速度移动\",{\"1\":{\"5\":1}}],[\"没传入\",{\"1\":{\"627\":2}}],[\"没问题\",{\"1\":{\"259\":1}}],[\"没有必要不停地调用去请求服务端接口\",{\"1\":{\"849\":1}}],[\"没有数据的模块可以进行骨架屏的占位\",{\"1\":{\"840\":1}}],[\"没有旧节点\",{\"1\":{\"732\":1}}],[\"没有新节点\",{\"1\":{\"732\":1}}],[\"没有发现e\",{\"1\":{\"731\":1}}],[\"没有super\",{\"1\":{\"626\":1}}],[\"没有重复值的集合\",{\"1\":{\"526\":1}}],[\"没有不可变数据结构的问题\",{\"1\":{\"526\":1}}],[\"没有key的情况下要比有key的性能更好\",{\"1\":{\"497\":1}}],[\"没有移动操作\",{\"1\":{\"494\":1}}],[\"没有声明访问控制\",{\"1\":{\"345\":1}}],[\"没有\",{\"1\":{\"326\":1,\"330\":1,\"374\":1}}],[\"没有更多数据了\",{\"1\":{\"292\":1}}],[\"没有被回收\",{\"1\":{\"251\":1}}],[\"没有清理对dom元素的引用同样造成内存泄露\",{\"1\":{\"251\":1}}],[\"没有定义的语义\",{\"1\":{\"217\":1}}],[\"没有请求者\",{\"1\":{\"140\":1}}],[\"问题在于\",{\"1\":{\"258\":1}}],[\"问有没有数据\",{\"1\":{\"195\":1}}],[\"寄生组合式继承\",{\"0\":{\"263\":1},\"1\":{\"257\":1,\"263\":1}}],[\"寄生式继承在上面继承基础上进行优化\",{\"1\":{\"262\":1}}],[\"寄生式继承\",{\"0\":{\"262\":1},\"1\":{\"257\":1}}],[\"构成网络也很方便\",{\"1\":{\"680\":1}}],[\"构成整体页面\",{\"1\":{\"530\":1}}],[\"构造函数中设置\",{\"1\":{\"519\":1}}],[\"构造函数\",{\"0\":{\"339\":1},\"1\":{\"368\":1,\"649\":1}}],[\"构造函数继承\",{\"0\":{\"259\":1},\"1\":{\"257\":1,\"259\":1}}],[\"构建正在启动\",{\"1\":{\"956\":1}}],[\"构建过程\",{\"1\":{\"952\":1}}],[\"构建时\",{\"1\":{\"908\":1}}],[\"构建工具支持\",{\"0\":{\"907\":1}}],[\"构建工具\",{\"1\":{\"812\":1},\"2\":{\"929\":1,\"943\":1,\"950\":1,\"957\":1}}],[\"构建组件实例\",{\"1\":{\"727\":1}}],[\"构建组件的方式\",{\"0\":{\"470\":1}}],[\"构建方式\",{\"0\":{\"471\":1}}],[\"构建\",{\"1\":{\"192\":1}}],[\"构建在现有网络基础之上的智能虚拟网络\",{\"1\":{\"132\":1}}],[\"虽然本质上是构造函数\",{\"1\":{\"648\":1}}],[\"虽然onclick看似绑定到dom元素上\",{\"1\":{\"504\":1}}],[\"虽然javascript并不是真正的面向对象语言\",{\"1\":{\"256\":1}}],[\"虽然允许复用tcp连接\",{\"1\":{\"153\":1}}],[\"另一个线程只能挂起等待\",{\"1\":{\"427\":1}}],[\"另一个为\",{\"1\":{\"355\":1}}],[\"另一个类别a\",{\"1\":{\"256\":1}}],[\"另一行也是注释\",{\"1\":{\"333\":1}}],[\"另一种意外的全局变量可能由\",{\"1\":{\"251\":1}}],[\"→\",{\"1\":{\"253\":5}}],[\"递归地解析出所有的依赖模块\",{\"1\":{\"939\":1}}],[\"递归解析\",{\"1\":{\"932\":1}}],[\"递归\",{\"1\":{\"277\":1,\"916\":1}}],[\"递归次数过多容易造成栈溢出\",{\"1\":{\"253\":1}}],[\"递归查询\",{\"1\":{\"140\":1}}],[\"维持函数内局部变量\",{\"1\":{\"251\":1}}],[\"维持像素长宽比\",{\"1\":{\"45\":2}}],[\"误以为是存在的变量\",{\"1\":{\"251\":1}}],[\"意味着\",{\"1\":{\"970\":1}}],[\"意味着与以下内容相同\",{\"1\":{\"969\":1}}],[\"意为服务端渲染\",{\"1\":{\"448\":1}}],[\"意思是将state中的某个数据映射到props中\",{\"1\":{\"566\":1}}],[\"意思是无限循环\",{\"1\":{\"51\":1}}],[\"意思为文档对象模型\",{\"1\":{\"421\":1}}],[\"意外的全局变量\",{\"1\":{\"251\":1}}],[\"进行首次渲染\",{\"1\":{\"840\":1}}],[\"进行patch\",{\"1\":{\"769\":10}}],[\"进行比较\",{\"1\":{\"520\":1}}],[\"进行输出前需要将数据注入到浏览器端\",{\"1\":{\"450\":1}}],[\"进行的松散或严格比较的结果都是\",{\"1\":{\"377\":1}}],[\"进行相应的绑定\",{\"1\":{\"120\":1}}],[\"进行相应的响应和调整\",{\"1\":{\"54\":1}}],[\"进入下一个页面\",{\"1\":{\"828\":1}}],[\"进入页面节点树\",{\"1\":{\"826\":1}}],[\"进入if判断\",{\"1\":{\"728\":1}}],[\"进入和退出\",{\"1\":{\"332\":1}}],[\"进入环境的变量所占用的内存就不能释放\",{\"1\":{\"249\":1}}],[\"进入环境\",{\"1\":{\"249\":1}}],[\"周期性\",{\"1\":{\"248\":1}}],[\"垃圾回收程序运行的时候\",{\"1\":{\"249\":1}}],[\"垃圾回收机制无法释放这块内存\",{\"1\":{\"250\":1}}],[\"垃圾回收机制\",{\"0\":{\"248\":1},\"1\":{\"247\":1}}],[\"垃圾收集器会定期\",{\"1\":{\"248\":1}}],[\"具名插槽\",{\"1\":{\"806\":1}}],[\"具备模板字符串的能力\",{\"1\":{\"380\":1}}],[\"具备很好的跨浏览器优势\",{\"1\":{\"273\":1}}],[\"具有标识的值\",{\"1\":{\"981\":1}}],[\"具有相同chunk名的模块会被打包到一起\",{\"1\":{\"858\":1}}],[\"具有相同的键\",{\"1\":{\"361\":2}}],[\"具有闪电般快速的性能\",{\"1\":{\"682\":1}}],[\"具有构造函数的类会在每次创建新对象时先调用此方法\",{\"1\":{\"339\":1}}],[\"具有自动垃圾回收机制\",{\"1\":{\"248\":1}}],[\"具体取决于webpack的配置\",{\"1\":{\"941\":1}}],[\"具体逻辑还需要是西安\",{\"1\":{\"659\":1}}],[\"具体如下\",{\"1\":{\"450\":1}}],[\"具体实现是什么\",{\"1\":{\"588\":1}}],[\"具体实现的方式有如下\",{\"1\":{\"547\":1}}],[\"具体实现\",{\"1\":{\"254\":1}}],[\"具体实现取决于实际环境\",{\"1\":{\"127\":1}}],[\"具体做法是发送密文的一方使用对方的公钥进行加密处理\",{\"1\":{\"237\":1}}],[\"具体做法是把请求头里\",{\"1\":{\"200\":1}}],[\"具体需要看术语部分\",{\"1\":{\"127\":1}}],[\"具体有三个属性可供设置\",{\"1\":{\"47\":1}}],[\"具体是两种情况\",{\"1\":{\"23\":1}}],[\"减轻程序员的负担\",{\"1\":{\"247\":1}}],[\"减少不必要的依赖\",{\"1\":{\"941\":1}}],[\"减少不必要的重排\",{\"1\":{\"811\":1}}],[\"减少依赖\",{\"1\":{\"941\":1}}],[\"减少静态文件的体积\",{\"1\":{\"893\":1}}],[\"减少dns的重复查找\",{\"1\":{\"871\":1}}],[\"减少dom层级\",{\"1\":{\"811\":1}}],[\"减少服务器负载\",{\"1\":{\"870\":1}}],[\"减少页面加载时间\",{\"1\":{\"870\":1}}],[\"减少对服务器的重复请求\",{\"1\":{\"863\":1}}],[\"减少事件\",{\"1\":{\"850\":1}}],[\"减少资源包中的图片等资源的数量和大小\",{\"1\":{\"839\":1}}],[\"减少初始包的大小\",{\"1\":{\"559\":1}}],[\"减少了this指向不明确的情况\",{\"1\":{\"519\":1}}],[\"减少了建立和关闭连接的消耗和延迟\",{\"1\":{\"147\":1}}],[\"减少多次引起重绘与回流\",{\"1\":{\"423\":1}}],[\"减少网络请求的损耗\",{\"1\":{\"141\":1}}],[\"轻则影响系统性能\",{\"1\":{\"247\":1}}],[\"处的元素分配给变量\",{\"1\":{\"385\":2}}],[\"处于目标阶段\",{\"1\":{\"273\":1}}],[\"处于\",{\"1\":{\"244\":1}}],[\"处理浏览器端javascript的兼容性\",{\"1\":{\"931\":1}}],[\"处理应用程序时\",{\"1\":{\"931\":1}}],[\"处理v\",{\"1\":{\"759\":1}}],[\"处理了五种情景\",{\"1\":{\"732\":1}}],[\"处理它并返回在ui中呈现的react元素\",{\"1\":{\"533\":1}}],[\"处理阶段\",{\"1\":{\"273\":1}}],[\"处理\",{\"1\":{\"251\":1}}],[\"处理完成之后返回一个http响应消息\",{\"1\":{\"191\":1}}],[\"处理数据包错误\",{\"1\":{\"161\":1}}],[\"停止发送数据\",{\"1\":{\"244\":1}}],[\"挥手\",{\"0\":{\"244\":1}}],[\"已弃用首次有效绘制时间\",{\"1\":{\"886\":1}}],[\"已经打开过小程序\",{\"1\":{\"837\":1}}],[\"已经能够成功将组件渲染到了页面上\",{\"1\":{\"449\":1}}],[\"已提交\",{\"1\":{\"685\":1}}],[\"已暂存\",{\"1\":{\"685\":1}}],[\"已修改\",{\"1\":{\"685\":1}}],[\"已建立连接\",{\"1\":{\"243\":1}}],[\"已创建\",{\"1\":{\"208\":2}}],[\"第五次循环\",{\"1\":{\"731\":1}}],[\"第四次循环\",{\"1\":{\"731\":1}}],[\"第四次挥手\",{\"1\":{\"244\":1}}],[\"第二个值为更新state的函数\",{\"1\":{\"519\":1}}],[\"第二个参数为执行函数上下文\",{\"1\":{\"801\":1}}],[\"第二个参数为上一个状态的state\",{\"1\":{\"436\":1}}],[\"第二个参数可以是对象数据\",{\"1\":{\"737\":1}}],[\"第二个参数是个对象\",{\"1\":{\"421\":1}}],[\"第二次循环后\",{\"1\":{\"731\":1}}],[\"第二次调用\",{\"1\":{\"260\":1}}],[\"第二次挥手\",{\"1\":{\"244\":1}}],[\"第二次握手\",{\"1\":{\"243\":2}}],[\"第三个参数是节点中的文本\",{\"1\":{\"421\":1}}],[\"第三方库初始化\",{\"1\":{\"775\":1}}],[\"第三方库\",{\"0\":{\"292\":1}}],[\"第三次循环\",{\"1\":{\"731\":1}}],[\"第三次挥手\",{\"1\":{\"244\":1}}],[\"第三次握手\",{\"1\":{\"243\":2}}],[\"第一帧呈现时间适用于\",{\"1\":{\"879\":1}}],[\"第一件事就是设置你的用户名和邮件地址\",{\"1\":{\"687\":1}}],[\"第一个值为当前的state\",{\"1\":{\"519\":1}}],[\"第一个参数是回调函数\",{\"1\":{\"801\":1}}],[\"第一个参数是指令的名字\",{\"1\":{\"737\":1}}],[\"第一个参数是标签名\",{\"1\":{\"421\":1}}],[\"第一个参数为即将更新的props\",{\"1\":{\"436\":1}}],[\"第一个在通讯中指定版本号的http协议版本\",{\"1\":{\"146\":1}}],[\"第一次循环结束后\",{\"1\":{\"731\":1}}],[\"第一次调用\",{\"1\":{\"260\":1}}],[\"第一次挥手\",{\"1\":{\"244\":1}}],[\"第一次握手\",{\"1\":{\"243\":2}}],[\"初始化参数\",{\"1\":{\"932\":1}}],[\"初始化阶段\",{\"1\":{\"932\":1}}],[\"初始化小程序手段\",{\"1\":{\"838\":1}}],[\"初始化依赖注入\",{\"1\":{\"796\":1}}],[\"初始化生命周期\",{\"1\":{\"796\":1}}],[\"初始化配置对象\",{\"1\":{\"792\":1}}],[\"初始化完成后\",{\"1\":{\"828\":1}}],[\"初始化完成时触发\",{\"1\":{\"824\":1}}],[\"初始化完成\",{\"1\":{\"775\":1}}],[\"初始化data\",{\"1\":{\"774\":1}}],[\"初始化实例对象\",{\"1\":{\"773\":1}}],[\"初始化\",{\"1\":{\"702\":1}}],[\"初始化仓库\",{\"1\":{\"689\":1}}],[\"初始化的data可以被声明为类属性\",{\"1\":{\"667\":1}}],[\"初始化数据\",{\"1\":{\"432\":1}}],[\"初始化一个分片上传任务\",{\"1\":{\"282\":1}}],[\"初始化序列号\",{\"1\":{\"243\":1}}],[\"初始化绑定\",{\"1\":{\"120\":1}}],[\"颁发者\",{\"1\":{\"240\":1}}],[\"怎么判断这个公钥就是你的公钥\",{\"1\":{\"239\":1}}],[\"任意\",{\"1\":{\"999\":1}}],[\"任意层级元素\",{\"1\":{\"58\":1}}],[\"任务的空闲执行\",{\"1\":{\"915\":1}}],[\"任何码位都可以以转义序列的形式出现\",{\"1\":{\"1008\":1}}],[\"任何一处协调工作用的服务器发生故障\",{\"1\":{\"684\":1}}],[\"任何包含顶级import或者export文件都被视为一个模块\",{\"1\":{\"664\":1}}],[\"任何拿此值与其它任何值\",{\"1\":{\"377\":1}}],[\"任何此类变量都应该用\",{\"1\":{\"326\":1}}],[\"任何人都可以获取\",{\"1\":{\"239\":1}}],[\"摘要\",{\"1\":{\"238\":1}}],[\"摘要算法保证了\",{\"1\":{\"238\":1}}],[\"摘要算法\",{\"0\":{\"238\":1},\"1\":{\"234\":1}}],[\"成为完全可交互页面的过程\",{\"1\":{\"448\":1}}],[\"成固定长度\",{\"1\":{\"238\":1}}],[\"成功访问到父类的方法\",{\"1\":{\"264\":1}}],[\"成功\",{\"1\":{\"208\":1}}],[\"压缩后文件的扩展名\",{\"1\":{\"895\":1}}],[\"压缩后\",{\"1\":{\"890\":1}}],[\"压缩代码\",{\"1\":{\"839\":1}}],[\"压缩\",{\"1\":{\"238\":1,\"838\":1,\"946\":1},\"2\":{\"898\":1}}],[\"密\",{\"1\":{\"236\":1}}],[\"公钥解密\",{\"1\":{\"239\":1}}],[\"公钥和私钥都可以用来加密解密\",{\"1\":{\"236\":1}}],[\"公钥可以公开给任何人使用\",{\"1\":{\"236\":1}}],[\"身份验证\",{\"1\":{\"234\":1}}],[\"数值就不准确\",{\"1\":{\"303\":1}}],[\"数组中\",{\"1\":{\"953\":1}}],[\"数组索引修改的响应式支持有限\",{\"1\":{\"811\":1}}],[\"数组甚至是回调函数\",{\"1\":{\"621\":1}}],[\"数组展开\",{\"0\":{\"386\":1}}],[\"数组解包可以方便的用于两个变量交换\",{\"1\":{\"385\":1}}],[\"数组解包始终从索引\",{\"1\":{\"385\":1}}],[\"数组解构\",{\"0\":{\"385\":1}}],[\"数组元素将会被忽略\",{\"1\":{\"385\":1}}],[\"数组运算符\",{\"0\":{\"361\":1}}],[\"数组对象格式化\",{\"1\":{\"254\":1}}],[\"数组扁平化\",{\"1\":{\"254\":1}}],[\"数组求和\",{\"1\":{\"254\":1}}],[\"数组\",{\"1\":{\"250\":1,\"402\":1}}],[\"数字打点\",{\"1\":{\"747\":1}}],[\"数字枚举\",{\"1\":{\"654\":1}}],[\"数字\",{\"1\":{\"398\":1,\"621\":1}}],[\"数字精度丢失\",{\"0\":{\"303\":1}}],[\"数字证书认证机构在判明提出申请者的身份之后\",{\"1\":{\"240\":1}}],[\"数字证书认证机构处于客户端与服务器双方都可信赖的第三方机构的立场\",{\"1\":{\"240\":1}}],[\"数字证书\",{\"1\":{\"240\":1}}],[\"数字摘要\",{\"1\":{\"238\":1}}],[\"数字签名能确定消息确实是由发送方签名并发出来的\",{\"1\":{\"239\":1}}],[\"数字签名\",{\"0\":{\"239\":1},\"1\":{\"234\":1}}],[\"数据集合\",{\"0\":{\"942\":1}}],[\"数据结构\",{\"1\":{\"937\":1}}],[\"数据渲染优化\",{\"0\":{\"914\":1}}],[\"数据通信的性能与数据量正相关\",{\"1\":{\"840\":1}}],[\"数据缓存能力\",{\"1\":{\"822\":1}}],[\"数据更新后\",{\"1\":{\"819\":1}}],[\"数据→视图\",{\"1\":{\"811\":1}}],[\"数据变化时通知所有相关watcher重新执行\",{\"1\":{\"811\":1}}],[\"数据变化后\",{\"1\":{\"800\":1}}],[\"数据劫持\",{\"1\":{\"811\":1}}],[\"数据等\",{\"1\":{\"792\":1}}],[\"数据不同发生dom操作\",{\"1\":{\"769\":1}}],[\"数据不同\",{\"1\":{\"769\":3}}],[\"数据发生改变时\",{\"1\":{\"733\":1}}],[\"数据校验\",{\"1\":{\"480\":1}}],[\"数据的存储位置都是存放在上级位置中\",{\"1\":{\"418\":1}}],[\"数据数组中可用\",{\"1\":{\"407\":1}}],[\"数据会在相应的\",{\"1\":{\"407\":1}}],[\"数据\",{\"1\":{\"406\":1}}],[\"数据库连接\",{\"1\":{\"390\":1}}],[\"数据库过滤输入\",{\"1\":{\"299\":1}}],[\"数据库\",{\"1\":{\"280\":1}}],[\"数据包\",{\"0\":{\"220\":1}}],[\"数据包头部协议较小\",{\"1\":{\"201\":1}}],[\"数据包次序\",{\"1\":{\"161\":1}}],[\"数据传输前后不连接\",{\"1\":{\"183\":1}}],[\"数据报\",{\"1\":{\"176\":1}}],[\"数据报组装成帧\",{\"1\":{\"163\":1}}],[\"数据在各层之间的传输如下图所示\",{\"1\":{\"165\":1}}],[\"数据类型\",{\"0\":{\"640\":1,\"963\":1},\"1\":{\"163\":1}}],[\"数据链路层在两个相邻节点传输数据时\",{\"1\":{\"174\":1}}],[\"数据链路层和物理层\",{\"1\":{\"169\":1}}],[\"数据链路层能够简单的丢弃掉这个帧\",{\"1\":{\"163\":1}}],[\"数据链路层将网络层交下来的\",{\"1\":{\"163\":1}}],[\"数据链路层通常也叫做链路层\",{\"1\":{\"163\":1}}],[\"数据链路层\",{\"0\":{\"163\":1,\"174\":1}}],[\"数据加密以及数据描述\",{\"1\":{\"159\":1}}],[\"验证清理\",{\"1\":{\"781\":1}}],[\"验证props\",{\"1\":{\"775\":1}}],[\"验证信息的完整性\",{\"1\":{\"234\":1}}],[\"验证客户端请求报文\",{\"1\":{\"200\":1}}],[\"性能的瓶颈主要在于渲染阶段\",{\"1\":{\"914\":1}}],[\"性能分析工具\",{\"0\":{\"887\":1}}],[\"性能更优\",{\"1\":{\"813\":1}}],[\"性能欠缺\",{\"1\":{\"557\":1}}],[\"性能优化等强大的功能\",{\"1\":{\"931\":1}}],[\"性能优化\",{\"0\":{\"554\":1,\"875\":1},\"2\":{\"854\":1,\"873\":1,\"891\":1,\"897\":1,\"900\":1,\"903\":1,\"912\":1,\"923\":1}}],[\"性能问题依然会困扰我们\",{\"1\":{\"546\":1}}],[\"性能问题欠缺\",{\"1\":{\"514\":1}}],[\"性能方面会有所改善\",{\"1\":{\"557\":1}}],[\"性能方面\",{\"1\":{\"423\":1,\"514\":1}}],[\"性能方面不如\",{\"1\":{\"232\":1}}],[\"性能差\",{\"1\":{\"423\":1}}],[\"性能上有很大的提升\",{\"1\":{\"148\":1}}],[\"传送\",{\"1\":{\"817\":1}}],[\"传送一份给客户端\",{\"1\":{\"231\":1}}],[\"传给指令的参数\",{\"1\":{\"737\":1}}],[\"传递给下一个\",{\"1\":{\"946\":1}}],[\"传递给子组件\",{\"1\":{\"696\":1}}],[\"传递给当前组件的所有非\",{\"1\":{\"696\":1}}],[\"传递方式如下\",{\"1\":{\"605\":1}}],[\"传递到指定变量中\",{\"1\":{\"323\":1}}],[\"传参为数组\",{\"1\":{\"526\":1}}],[\"传入hook\",{\"0\":{\"583\":1},\"1\":{\"579\":1}}],[\"传入函数\",{\"0\":{\"582\":1},\"1\":{\"579\":1}}],[\"传入对象\",{\"0\":{\"581\":1},\"1\":{\"579\":1}}],[\"传入的字符串的格式获取对应的元素\",{\"1\":{\"579\":1}}],[\"传入字符串\",{\"0\":{\"580\":1},\"1\":{\"579\":1}}],[\"传入当前path\",{\"1\":{\"449\":1}}],[\"传入被观察者\",{\"1\":{\"285\":1}}],[\"传统的原生api或jquery去操作dom时\",{\"1\":{\"422\":1}}],[\"传输的数据并不是计算机底层中的二进制包\",{\"1\":{\"230\":1}}],[\"传输效率\",{\"1\":{\"183\":1}}],[\"传输效率高\",{\"1\":{\"183\":1}}],[\"传输效率低\",{\"1\":{\"183\":1}}],[\"传输途中出现丢包\",{\"1\":{\"181\":1}}],[\"传输控制协议\",{\"1\":{\"168\":2,\"172\":1,\"182\":1}}],[\"传输过程采用流量控制\",{\"1\":{\"183\":1}}],[\"传输过程\",{\"0\":{\"165\":1}}],[\"传输层定义了两个主要协议\",{\"1\":{\"172\":1}}],[\"传输层向高层屏蔽了下层数据通信的细节\",{\"1\":{\"161\":1}}],[\"传输层的主要任务是为两台主机进程之间的通信提供服务\",{\"1\":{\"161\":1}}],[\"传输层\",{\"0\":{\"161\":1,\"172\":1},\"1\":{\"169\":2,\"176\":1}}],[\"灵活\",{\"1\":{\"230\":1}}],[\"客户向服务器请求服务时\",{\"1\":{\"230\":1}}],[\"客户端会再次加载\",{\"1\":{\"908\":1}}],[\"客户端将过期缓存恢复为有效的\",{\"1\":{\"868\":1}}],[\"客户端\",{\"1\":{\"866\":1}}],[\"客户端使用render方法来生成html\",{\"1\":{\"560\":1}}],[\"客户端发包\",{\"1\":{\"243\":1}}],[\"客户端发送一个\",{\"1\":{\"244\":1}}],[\"客户端发送网络包\",{\"1\":{\"243\":1}}],[\"客户端发送的一个\",{\"1\":{\"200\":1}}],[\"客户端发送数据格式如下\",{\"1\":{\"200\":1}}],[\"客户端收到了\",{\"1\":{\"243\":1}}],[\"客户端收到\",{\"1\":{\"243\":1,\"244\":1}}],[\"客户端给服务端发一个\",{\"1\":{\"243\":1}}],[\"客户端的接收\",{\"1\":{\"243\":2}}],[\"客户端的发送能力\",{\"1\":{\"243\":1}}],[\"客户端的浏览器根据双方同意的安全等级\",{\"1\":{\"231\":1}}],[\"客户端的服务器开始协商ssl连接的安全等级\",{\"1\":{\"231\":1}}],[\"客户端则不上传post数据\",{\"1\":{\"212\":1}}],[\"客户端在发送post数据给服务器前\",{\"1\":{\"212\":1}}],[\"客户端应当继续发送请求的剩余部分\",{\"1\":{\"207\":1}}],[\"客户端继续发送请求\",{\"1\":{\"207\":1}}],[\"客户端和web应用\",{\"1\":{\"299\":1}}],[\"客户端和服务器只需要完成一次握手\",{\"1\":{\"195\":1}}],[\"客户端和浏览器都可以同时发送多个请求或回应\",{\"1\":{\"149\":1}}],[\"客户端可以同时发送多个请求\",{\"1\":{\"153\":1}}],[\"个或多个\",{\"1\":{\"1008\":1}}],[\"个组件易于和其它组件一起使用\",{\"1\":{\"533\":1}}],[\"个常量一旦被定义\",{\"1\":{\"306\":1}}],[\"个性化设置\",{\"1\":{\"227\":1}}],[\"个属性的简写\",{\"1\":{\"13\":1}}],[\"游戏分数或其它需要记录的信息\",{\"1\":{\"227\":1}}],[\"购物车\",{\"1\":{\"227\":1}}],[\"小程序首次启动前\",{\"1\":{\"838\":1}}],[\"小程序启动运行有两种情况\",{\"1\":{\"837\":1}}],[\"小程序是基于双线程的\",{\"1\":{\"836\":1}}],[\"小程序在渲染层\",{\"1\":{\"836\":1}}],[\"小程序为电商类小程序\",{\"1\":{\"834\":1}}],[\"小程序将session存到storage里面\",{\"1\":{\"829\":1}}],[\"小程序销毁\",{\"1\":{\"828\":1}}],[\"小程序未销毁=>\",{\"1\":{\"828\":1}}],[\"小程序注册完成后\",{\"1\":{\"828\":1}}],[\"小程序与其的区别有如下\",{\"1\":{\"822\":1}}],[\"小程序\",{\"0\":{\"822\":1},\"2\":{\"842\":1}}],[\"小于或者等于\",{\"1\":{\"356\":1}}],[\"小于等于\",{\"1\":{\"356\":1}}],[\"小于\",{\"1\":{\"356\":1}}],[\"小型文本文件\",{\"1\":{\"227\":1}}],[\"小点点位置\",{\"1\":{\"37\":1}}],[\"询问该资源的etag是否有更新\",{\"1\":{\"226\":1}}],[\"询问服务器在该日期后资源是否有更新\",{\"1\":{\"226\":1}}],[\"跟shouldcomponentupdate\",{\"1\":{\"549\":1}}],[\"跟vue一样\",{\"1\":{\"542\":1}}],[\"跟vue一致\",{\"1\":{\"492\":1}}],[\"跟上述方式三一样\",{\"1\":{\"513\":1}}],[\"跟上面讲的原型式继承一样\",{\"1\":{\"262\":1}}],[\"跟最后修改时间没有关系\",{\"1\":{\"226\":1}}],[\"跟flex弹性布局一样的简单\",{\"1\":{\"83\":1}}],[\"场景\",{\"0\":{\"225\":1,\"279\":1,\"719\":1,\"738\":1,\"764\":1,\"801\":1,\"805\":1}}],[\"发布版本\",{\"1\":{\"833\":1}}],[\"发布流程\",{\"0\":{\"833\":1}}],[\"发起完整的登录流程\",{\"1\":{\"830\":1}}],[\"发起一个针对\",{\"1\":{\"224\":1}}],[\"发现新旧节点d相同\",{\"1\":{\"731\":1}}],[\"发现旧key不存在了\",{\"1\":{\"542\":1}}],[\"发生脚本错误或api调用报错时触发\",{\"1\":{\"824\":1}}],[\"发生dom操作\",{\"1\":{\"769\":3}}],[\"发生样式变化\",{\"1\":{\"596\":1}}],[\"发生了改变\",{\"1\":{\"589\":1}}],[\"发生各个分片数据块\",{\"1\":{\"282\":1}}],[\"发给\",{\"1\":{\"244\":1}}],[\"发送请求获取数据\",{\"1\":{\"825\":1}}],[\"发送到浏览器\",{\"1\":{\"448\":1}}],[\"发送能力正常\",{\"1\":{\"243\":1}}],[\"发送能力是正常的\",{\"1\":{\"243\":1}}],[\"发送能力\",{\"1\":{\"243\":1}}],[\"发送整个新的实体\",{\"1\":{\"224\":1}}],[\"发送该消息的日期和时间\",{\"1\":{\"224\":1}}],[\"发送的一个\",{\"1\":{\"224\":1}}],[\"发送\",{\"0\":{\"190\":1}}],[\"发送端只负责将数据发送到网络\",{\"1\":{\"183\":1}}],[\"发送方tcp会将数据放入\",{\"1\":{\"182\":1}}],[\"仅衡量网页上首次互动的输入延迟\",{\"1\":{\"882\":1}}],[\"仅将差异部分应用到真实dom\",{\"1\":{\"811\":1}}],[\"仅包含默认生命周期函数和默认事件\",{\"1\":{\"773\":1}}],[\"仅在\",{\"1\":{\"520\":1}}],[\"仅在属性挂钩内有效\",{\"1\":{\"308\":1}}],[\"仅有两个值\",{\"1\":{\"371\":1}}],[\"仅请求某个实体的一部分\",{\"1\":{\"224\":1}}],[\"仅当依赖变化时重新计算\",{\"1\":{\"811\":1}}],[\"仅当参数未传递值时才使用默认值\",{\"1\":{\"322\":1}}],[\"仅当从用户上次更新某个资源以来\",{\"1\":{\"224\":1}}],[\"仅当客户端提供的实体与服务器上对应的实体相匹配时\",{\"1\":{\"224\":1}}],[\"仅需将容器设置为display\",{\"1\":{\"82\":1}}],[\"示例\",{\"1\":{\"224\":1,\"332\":1}}],[\"query\",{\"1\":{\"406\":1,\"605\":1,\"895\":1,\"946\":1}}],[\"queryselector\",{\"1\":{\"285\":2,\"291\":1,\"862\":1}}],[\"quotes\",{\"1\":{\"37\":1,\"324\":1}}],[\"qwxhzgrpbjpvcgvuihnlc2ftzq==\",{\"1\":{\"224\":1}}],[\"q=0\",{\"1\":{\"223\":3}}],[\"他是\",{\"1\":{\"952\":1}}],[\"他是管道式的\",{\"1\":{\"744\":1}}],[\"他的简短含义是\",{\"1\":{\"970\":1}}],[\"他的生态体系完善覆盖全开发流程\",{\"0\":{\"812\":1}}],[\"他的核心特性与技术原理如下\",{\"0\":{\"811\":1}}],[\"他们会写入你的每一次提交中\",{\"1\":{\"687\":1}}],[\"他们的版本库其实都是一样的\",{\"1\":{\"684\":1}}],[\"他们都是不安全的\",{\"1\":{\"219\":1}}],[\"他在不同的命名空间中的含义互不相干\",{\"1\":{\"665\":1}}],[\"他还有以下类型\",{\"1\":{\"640\":1}}],[\"他只提供抽象定义\",{\"1\":{\"127\":1}}],[\"然而应该注意到点\",{\"1\":{\"408\":1}}],[\"然而\",{\"1\":{\"219\":1,\"347\":1,\"351\":1,\"401\":1,\"931\":1,\"942\":2}}],[\"然后产生式的一个或多个代换式在后续行跟随\",{\"1\":{\"992\":1}}],[\"然后继续执行\",{\"1\":{\"948\":1}}],[\"然后将模块的导出对象缓存起来供后续使用\",{\"1\":{\"941\":1}}],[\"然后将你项目中所需的每一个模块组合成一个或多个\",{\"1\":{\"931\":1}}],[\"然后将ref属性添加到react元素中\",{\"1\":{\"581\":1}}],[\"然后会在\",{\"1\":{\"926\":1}}],[\"然后才能响应用户互动\",{\"1\":{\"881\":1}}],[\"然后才能正式收发数据\",{\"1\":{\"200\":1}}],[\"然后开始进入启动状态\",{\"1\":{\"838\":1}}],[\"然后开始执行动画\",{\"1\":{\"633\":1}}],[\"然后校验有效期\",{\"1\":{\"829\":1}}],[\"然后带给服务端\",{\"1\":{\"829\":1}}],[\"然后根据对象渲染\",{\"1\":{\"818\":1}}],[\"然后根据不同的条件返回相应的生成代码字符串\",{\"1\":{\"753\":1}}],[\"然后调用这些策略函数来合并配置\",{\"1\":{\"792\":1}}],[\"然后调用实例对象的render方法\",{\"1\":{\"460\":1}}],[\"然后以校验和来引用\",{\"1\":{\"685\":1}}],[\"然后添加\",{\"1\":{\"633\":1}}],[\"然后对其进行加工\",{\"1\":{\"626\":1}}],[\"然后对方用自己的私钥解密拿到\",{\"1\":{\"237\":1}}],[\"然后重新执行render函数\",{\"1\":{\"612\":1}}],[\"然后决定是否执行渲染组件\",{\"1\":{\"609\":1}}],[\"然后执行对应操作\",{\"1\":{\"575\":1}}],[\"然后执行完成组件内事件绑定和一些交互\",{\"1\":{\"450\":1}}],[\"然后嵌套执行\",{\"1\":{\"575\":1}}],[\"然后作为第二个参数传入到createstore中\",{\"1\":{\"572\":1}}],[\"然后把它添加到\",{\"1\":{\"953\":1}}],[\"然后把子vnode\",{\"1\":{\"538\":1}}],[\"然后把这个节点返回给用户\",{\"1\":{\"134\":1}}],[\"然后处理\",{\"1\":{\"505\":1}}],[\"然后就可以把自身组件的作为错误边界的子组件\",{\"1\":{\"500\":1}}],[\"然后在映射里找到真正的事件处理函数并调用\",{\"1\":{\"504\":1}}],[\"然后在组件中直接引入\",{\"1\":{\"486\":1}}],[\"然后在已有的路由表内查找到对应的组件\",{\"1\":{\"450\":1}}],[\"然后渲染\",{\"1\":{\"480\":1}}],[\"然后通过context将location数据往后代组件传递\",{\"1\":{\"608\":1}}],[\"然后通过实例将对象进行保存\",{\"1\":{\"582\":1}}],[\"然后通过props对象传递到子组件\",{\"1\":{\"458\":1}}],[\"然后通过这个函数的回调\",{\"1\":{\"414\":1}}],[\"然后基于\",{\"1\":{\"450\":1}}],[\"然后可以通过index\",{\"1\":{\"449\":1}}],[\"然后再vue范围之外渲染他\",{\"1\":{\"817\":1}}],[\"然后再删除dom\",{\"1\":{\"635\":1}}],[\"然后再做动画\",{\"1\":{\"635\":1}}],[\"然后再客户端执行以下react代码\",{\"1\":{\"449\":1}}],[\"然后再服务器中编写react代码\",{\"1\":{\"449\":1}}],[\"然后再重新执行优先级低的任务\",{\"1\":{\"428\":1}}],[\"然后为其绑定状态与事件\",{\"1\":{\"448\":1}}],[\"然后等到整棵vdom树计算完成后\",{\"1\":{\"427\":1}}],[\"然后跟一个普通的变量声明来组成\",{\"1\":{\"345\":1}}],[\"然后自己在内部存储其自身状态\",{\"1\":{\"466\":1}}],[\"然后自\",{\"1\":{\"345\":1}}],[\"然后获取该环境记录器上的this值\",{\"1\":{\"270\":1}}],[\"然后\",{\"1\":{\"249\":1,\"940\":1}}],[\"然后释放其内存\",{\"1\":{\"248\":1}}],[\"然后分配这个已签名的公开密钥\",{\"1\":{\"240\":1}}],[\"然后利用网站的公钥将会话密钥加密\",{\"1\":{\"231\":1}}],[\"然后访问只有内网ip才能访问的时候则返回\",{\"1\":{\"212\":1}}],[\"然后递增\",{\"1\":{\"122\":1}}],[\"然后进行组件的渲染\",{\"1\":{\"595\":1}}],[\"然后进行\",{\"1\":{\"587\":1}}],[\"然后进行声明实例化\",{\"1\":{\"118\":1}}],[\"然后进行全局声明实例化\",{\"1\":{\"106\":1}}],[\"比较时\",{\"1\":{\"981\":1}}],[\"比较e\",{\"1\":{\"769\":2}}],[\"比较d\",{\"1\":{\"769\":2}}],[\"比较c\",{\"1\":{\"769\":3}}],[\"比较b\",{\"1\":{\"769\":2}}],[\"比较a\",{\"1\":{\"769\":2}}],[\"比较只会再同层级进行\",{\"1\":{\"731\":1}}],[\"比较两个浮点数是否相等是有问题的\",{\"1\":{\"376\":1}}],[\"比较\",{\"0\":{\"376\":1},\"1\":{\"587\":1,\"816\":1}}],[\"比较运算\",{\"0\":{\"356\":1}}],[\"比\",{\"1\":{\"219\":1}}],[\"比如布局组件\",{\"1\":{\"805\":1}}],[\"比如构建流程\",{\"1\":{\"689\":1}}],[\"比如修饰符和抽象类\",{\"1\":{\"648\":1}}],[\"比如有一个按钮需要在on和off之间切换\",{\"1\":{\"634\":1}}],[\"比如props\",{\"1\":{\"596\":1}}],[\"比如伪类\",{\"1\":{\"485\":1}}],[\"比如操作\",{\"1\":{\"479\":1}}],[\"比如组件的滚动位置之类的\",{\"1\":{\"441\":1}}],[\"比如bignumber\",{\"1\":{\"304\":1}}],[\"比如0\",{\"1\":{\"304\":1}}],[\"比如可以parsefloat\",{\"1\":{\"304\":1}}],[\"比如重定向\",{\"1\":{\"192\":1}}],[\"比如节点的\",{\"1\":{\"134\":1}}],[\"比如\",{\"1\":{\"74\":1,\"345\":1,\"760\":1,\"870\":1}}],[\"比如当浏览器的宽度或者高度发生变化时\",{\"1\":{\"57\":1}}],[\"比如给小屏幕手机设置\",{\"1\":{\"56\":1}}],[\"比如我们为不同分辨率的屏幕\",{\"1\":{\"56\":1}}],[\"安全的支付功能\",{\"1\":{\"834\":1}}],[\"安全性\",{\"1\":{\"227\":1}}],[\"安全\",{\"0\":{\"219\":1},\"1\":{\"219\":1}}],[\"要预渲染的页面访问路由\",{\"1\":{\"909\":1}}],[\"要改个文字或权限信息\",{\"1\":{\"702\":2}}],[\"要保证旧数据同时可用且不变\",{\"1\":{\"525\":1}}],[\"要执行的工作\",{\"1\":{\"429\":1}}],[\"要执行父类的构造函数\",{\"1\":{\"339\":1}}],[\"要注意\",{\"1\":{\"408\":1}}],[\"要么无限循环\",{\"1\":{\"394\":1}}],[\"要么抛出异常\",{\"1\":{\"394\":1}}],[\"要测试浮点数是否相等\",{\"1\":{\"376\":1}}],[\"要使用一个仅比该数值大一丁点的最小误差值\",{\"1\":{\"376\":1}}],[\"要使用\",{\"1\":{\"374\":1}}],[\"要处理任意属性名称\",{\"1\":{\"348\":1}}],[\"要确保不要嵌套\",{\"1\":{\"333\":1}}],[\"要输出大段文本时\",{\"1\":{\"331\":1}}],[\"要消耗比较多的资源\",{\"1\":{\"218\":1}}],[\"要求服务端必须返回一个对应加密的\",{\"1\":{\"200\":1}}],[\"理论上没有长度限制\",{\"1\":{\"218\":1}}],[\"理解\",{\"1\":{\"208\":1}}],[\"理解也很简单\",{\"1\":{\"87\":1}}],[\"限制的大多是浏览器和服务器的原因\",{\"1\":{\"218\":1}}],[\"明确指出get请求中的有效负载\",{\"1\":{\"217\":1}}],[\"貌似从上面看到get与post请求区别非常大\",{\"1\":{\"217\":1}}],[\"因而如果有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串\",{\"1\":{\"840\":1}}],[\"因而即使在函数内部改变参数值\",{\"1\":{\"321\":1}}],[\"因而通信速度很快\",{\"1\":{\"230\":1}}],[\"因为这样可以减少源码中样板文件的代码量\",{\"1\":{\"949\":1}}],[\"因为他们并没有实例\",{\"1\":{\"583\":1}}],[\"因为它没有实例\",{\"1\":{\"479\":1}}],[\"因为可以显式指定索引\",{\"1\":{\"385\":1}}],[\"因为在react会在类组件构造函数生成实例后再给this\",{\"1\":{\"627\":1}}],[\"因为在受控组件中\",{\"1\":{\"467\":1}}],[\"因为在\",{\"1\":{\"357\":1}}],[\"因为访问类属性的优先级要更高\",{\"1\":{\"338\":1}}],[\"因为当\",{\"1\":{\"331\":1}}],[\"因为本指令是在文件编译时处理的\",{\"1\":{\"314\":1}}],[\"因为用此方法是在编译时定义的\",{\"1\":{\"306\":1}}],[\"因为object\",{\"1\":{\"261\":1}}],[\"因为回调函数中包含对someresource的引用\",{\"1\":{\"251\":1}}],[\"因为是手动管理内存\",{\"1\":{\"247\":1}}],[\"因为谁都可以发布公钥\",{\"1\":{\"239\":1}}],[\"因为别人假冒不了发送方的签名\",{\"1\":{\"239\":1}}],[\"因为\",{\"1\":{\"219\":1,\"409\":1}}],[\"因为数据在地址栏上不可见\",{\"1\":{\"219\":1}}],[\"因为参数直接暴露在url上\",{\"1\":{\"216\":1}}],[\"因此settimeout的实际执行时间可能会比其设定的时间晚一些\",{\"1\":{\"916\":1}}],[\"因此逻辑层和渲染层之间需要有一定的机制保证时序正确\",{\"1\":{\"836\":1}}],[\"因此在小程序中\",{\"1\":{\"836\":1}}],[\"因此在某一时刻给定的变量是何种类型并不明显\",{\"1\":{\"409\":1}}],[\"因此并不适合多人版本开发\",{\"1\":{\"677\":1}}],[\"因此即使没有设置选项也不能忽略\",{\"1\":{\"668\":1}}],[\"因此如果用到constructor就必须写super\",{\"1\":{\"627\":1}}],[\"因此key的值需要为每一个元素赋予一个确定的标识\",{\"1\":{\"542\":1}}],[\"因此优先考虑hooks\",{\"1\":{\"522\":1}}],[\"因此c节点进行移动操作\",{\"1\":{\"496\":1}}],[\"因此d节点不动\",{\"1\":{\"496\":1}}],[\"因此a节点进行移动操作\",{\"1\":{\"496\":1}}],[\"因此b节点不动\",{\"1\":{\"496\":1}}],[\"因此无需进行节点删除和创建\",{\"1\":{\"496\":1}}],[\"因此同样是点击\",{\"1\":{\"461\":1}}],[\"因此需要用到dns缓存\",{\"1\":{\"871\":1}}],[\"因此需要引入script标签\",{\"1\":{\"449\":1}}],[\"因此需要将组件代码在浏览器中再执行一遍\",{\"1\":{\"449\":1}}],[\"因此需要四次挥手\",{\"1\":{\"244\":1}}],[\"因此不同设备的刷新频率可能会不同\",{\"1\":{\"916\":1}}],[\"因此不会被当前组件直接使用\",{\"1\":{\"696\":1}}],[\"因此不能访问到组件的实例\",{\"1\":{\"436\":1}}],[\"因此不支持\",{\"1\":{\"378\":1}}],[\"因此会马上执行流程\",{\"1\":{\"422\":1}}],[\"因此对于购物车程序\",{\"1\":{\"407\":1}}],[\"因此通常被称为自动全局变量\",{\"1\":{\"400\":1}}],[\"因此认证中心能够根据cookie知道用户是否已经登陆过了\",{\"1\":{\"287\":1}}],[\"因此也证明了这种方式是较优的解决继承的方式\",{\"1\":{\"264\":1}}],[\"因此它内部的所有引用都不会释放\",{\"1\":{\"251\":1}}],[\"因此引用次数为1\",{\"1\":{\"250\":1}}],[\"因此可以将这块内存释放\",{\"1\":{\"250\":1}}],[\"因此可能在\",{\"1\":{\"223\":1}}],[\"因此有可能遭遇伪装\",{\"1\":{\"233\":1}}],[\"因此我们通常把该层简单地称为\",{\"1\":{\"162\":1}}],[\"因此\",{\"1\":{\"13\":1,\"161\":1,\"331\":1,\"393\":1,\"394\":1,\"406\":1,\"407\":1,\"418\":1,\"461\":1,\"465\":1,\"517\":1,\"542\":1,\"592\":1,\"879\":1,\"885\":1,\"925\":1,\"942\":1}}],[\"书签\",{\"1\":{\"216\":1}}],[\"于未登陆的用户访问用户中心重定向到登录页面\",{\"1\":{\"212\":1}}],[\"于是本地dns会向负载均衡系统再发送请求\",{\"1\":{\"134\":1}}],[\"于是\",{\"1\":{\"132\":1}}],[\"新一代构建工具\",{\"1\":{\"812\":1}}],[\"新节点在旧节点中的位置\",{\"1\":{\"770\":1}}],[\"新节点的start索引+1\",{\"1\":{\"732\":1}}],[\"新节点的end索引\",{\"1\":{\"732\":1}}],[\"新旧头尾指针进行比较\",{\"1\":{\"733\":1}}],[\"新旧节点自身不一样\",{\"1\":{\"732\":1}}],[\"新旧节点自身一样\",{\"1\":{\"732\":1}}],[\"新旧节点c相同\",{\"1\":{\"731\":1}}],[\"新老节点的end索引\",{\"1\":{\"732\":1}}],[\"新老节点的end相同\",{\"1\":{\"732\":1}}],[\"新老节点的start索引+1\",{\"1\":{\"732\":1}}],[\"新老节点的start相同\",{\"1\":{\"732\":1}}],[\"新建一个空分支\",{\"1\":{\"690\":1}}],[\"新建一个分支\",{\"1\":{\"690\":1}}],[\"新建webpack\",{\"1\":{\"449\":1}}],[\"新特性\",{\"0\":{\"817\":1},\"1\":{\"689\":1}}],[\"新组件再进入\",{\"1\":{\"634\":1}}],[\"新的子虚拟节点数组\",{\"1\":{\"770\":1}}],[\"新的state\",{\"1\":{\"575\":1}}],[\"新的变量简单的引用了原始变量\",{\"1\":{\"399\":1}}],[\"新key在之前没有\",{\"1\":{\"542\":1}}],[\"新增列表项\",{\"1\":{\"851\":1}}],[\"新增的属性自然不具备响应式\",{\"1\":{\"713\":1}}],[\"新增节点6至下标为4的位置\",{\"1\":{\"497\":1}}],[\"新增了一些请求头和响应头\",{\"1\":{\"153\":1}}],[\"新增了一些请求方法\",{\"1\":{\"153\":1}}],[\"新增了几个关于背景的属性\",{\"1\":{\"42\":1}}],[\"新集合的遍历下标\",{\"1\":{\"496\":1}}],[\"新版生命周期整体流程如下图所示\",{\"1\":{\"445\":1}}],[\"新架构下的\",{\"1\":{\"428\":1}}],[\"新域名替换旧域名\",{\"1\":{\"212\":1}}],[\"永久改变this指向\",{\"1\":{\"271\":1}}],[\"永久重定向会缓存\",{\"1\":{\"212\":1}}],[\"永久移动\",{\"1\":{\"209\":1}}],[\"看有没有没用到的节点\",{\"1\":{\"496\":1}}],[\"看服务器是否处理post的数据\",{\"1\":{\"212\":1}}],[\"看用户所在的运营商网络\",{\"1\":{\"134\":1}}],[\"看用户的\",{\"1\":{\"134\":1}}],[\"征询服务器情况\",{\"1\":{\"212\":1}}],[\"错误边界在渲染期间\",{\"1\":{\"500\":1}}],[\"错误边界是一种\",{\"1\":{\"500\":1}}],[\"错误处理\",{\"0\":{\"500\":1,\"741\":1}}],[\"错误控制\",{\"0\":{\"359\":1}}],[\"错误\",{\"1\":{\"253\":1,\"500\":1}}],[\"错误网关\",{\"1\":{\"211\":1}}],[\"错误请求\",{\"1\":{\"210\":1}}],[\"尚未实施\",{\"1\":{\"211\":1}}],[\"类继承后\",{\"1\":{\"650\":1}}],[\"类实例\",{\"1\":{\"508\":1}}],[\"类组件基于es6\",{\"1\":{\"628\":1}}],[\"类组件是基于es6的规范实现的\",{\"1\":{\"627\":1}}],[\"类组件只要执行了\",{\"1\":{\"589\":1}}],[\"类组件重新渲染\",{\"1\":{\"588\":1}}],[\"类组件调用\",{\"1\":{\"588\":1}}],[\"类组件使用一个名为\",{\"1\":{\"530\":1}}],[\"类组件通过this\",{\"1\":{\"519\":2}}],[\"类组件通过constructor\",{\"1\":{\"519\":1}}],[\"类组件在基于现有工具的优化上存在些许问题\",{\"1\":{\"517\":1}}],[\"类组件中的this增加学习成本\",{\"1\":{\"517\":1}}],[\"类组件对应如下\",{\"1\":{\"461\":1}}],[\"类组件和函数式组件\",{\"0\":{\"453\":1}}],[\"类组件必须实现的方法\",{\"1\":{\"437\":1}}],[\"类组件\",{\"0\":{\"454\":1,\"627\":1},\"1\":{\"429\":1,\"454\":1,\"457\":1,\"533\":1,\"538\":2}}],[\"类\",{\"0\":{\"648\":1},\"1\":{\"367\":1,\"660\":1,\"662\":1,\"984\":1}}],[\"类自动引入\",{\"0\":{\"351\":1}}],[\"类常量基础上的约束层\",{\"1\":{\"389\":1}}],[\"类常量可以通过子类重新定义\",{\"1\":{\"350\":1}}],[\"类常量的默认可见性是\",{\"1\":{\"350\":1}}],[\"类常量\",{\"0\":{\"350\":1}}],[\"类应该实现魔术方法\",{\"1\":{\"348\":1}}],[\"类属性和方法可以通过\",{\"1\":{\"344\":1}}],[\"类的变量成员叫做属性\",{\"1\":{\"345\":1}}],[\"类的属性和方法存在于不同的\",{\"1\":{\"338\":1}}],[\"类的方法名\",{\"1\":{\"308\":1}}],[\"类名后的括号则可以省略掉\",{\"1\":{\"337\":1}}],[\"类名包括其被声明的作用域\",{\"1\":{\"308\":1}}],[\"类型支持\",{\"1\":{\"812\":1}}],[\"类型索引\",{\"0\":{\"645\":1}}],[\"类型擦除\",{\"1\":{\"639\":1}}],[\"类型推断更友好\",{\"1\":{\"813\":1}}],[\"类型推断\",{\"1\":{\"639\":1}}],[\"类型批注和编译时类型检查\",{\"1\":{\"639\":1}}],[\"类型可用于\",{\"1\":{\"395\":1}}],[\"类型只有一个值\",{\"1\":{\"370\":1}}],[\"类型别名\",{\"0\":{\"369\":1,\"644\":1}}],[\"类型的\",{\"1\":{\"368\":3}}],[\"类型输出不同信息\",{\"1\":{\"368\":1}}],[\"类型系统\",{\"0\":{\"366\":1}}],[\"类型\",{\"0\":{\"365\":1,\"391\":1},\"1\":{\"428\":1}}],[\"类型运算符\",{\"0\":{\"362\":1}}],[\"类型声明来表示\",{\"1\":{\"391\":1}}],[\"类型声明\",{\"0\":{\"346\":1}}],[\"类型转换\",{\"0\":{\"274\":1}}],[\"类型为\",{\"1\":{\"227\":1}}],[\"类似于object\",{\"1\":{\"645\":1}}],[\"类似于单引号\",{\"1\":{\"382\":1}}],[\"类似\",{\"1\":{\"210\":1,\"526\":2}}],[\"类选择器\",{\"1\":{\"35\":1,\"36\":2}}],[\"禁用自动绑定到根元素\",{\"1\":{\"696\":1}}],[\"禁用请求中指定的方法\",{\"1\":{\"210\":1}}],[\"禁止\",{\"1\":{\"210\":1}}],[\"未处理的promise拒绝时触发\",{\"1\":{\"824\":1}}],[\"未批准变量自动推断类型\",{\"1\":{\"639\":1}}],[\"未完成的任务\",{\"1\":{\"429\":1}}],[\"未提供键值\",{\"1\":{\"383\":1}}],[\"未定义和\",{\"1\":{\"370\":1}}],[\"未定义的常量\",{\"1\":{\"306\":1}}],[\"未找到\",{\"1\":{\"210\":1}}],[\"未授权\",{\"1\":{\"210\":2}}],[\"妨碍了服务器的处理\",{\"1\":{\"210\":1}}],[\"临时创建一个没有指定名称的函数\",{\"1\":{\"326\":1}}],[\"临时重定向不会缓存\",{\"1\":{\"212\":1}}],[\"临时重定向\",{\"1\":{\"209\":1}}],[\"临时移动\",{\"1\":{\"209\":1}}],[\"时间格式化\",{\"1\":{\"747\":1}}],[\"时的首选\",{\"1\":{\"680\":1}}],[\"时就不会创建单独的函数实例\",{\"1\":{\"555\":1}}],[\"时则会重新编号\",{\"1\":{\"386\":1}}],[\"时反引号运算符是无效的\",{\"1\":{\"360\":1}}],[\"时返回\",{\"1\":{\"357\":1}}],[\"时自动去加载\",{\"1\":{\"351\":1}}],[\"时不抛出异常\",{\"1\":{\"344\":1}}],[\"时结束\",{\"1\":{\"333\":1}}],[\"时省略掉会更好些\",{\"1\":{\"332\":1}}],[\"时钟周期\",{\"1\":{\"315\":1}}],[\"时\",{\"1\":{\"209\":1,\"337\":1,\"517\":1,\"543\":1,\"885\":1,\"955\":1}}],[\"忽略undefined\",{\"1\":{\"277\":1}}],[\"忽略这个响应\",{\"1\":{\"207\":1}}],[\"忽略盒之间的距离\",{\"1\":{\"46\":1}}],[\"且仍然有一些特性还没有加入\",{\"1\":{\"648\":1}}],[\"且仍未被拒绝\",{\"1\":{\"207\":1}}],[\"且不让浏览器像服务器发送请求\",{\"1\":{\"606\":1}}],[\"且不匹配任何已知的健名或保留字\",{\"1\":{\"408\":1}}],[\"且转换后的键值后者覆盖前者\",{\"1\":{\"383\":1}}],[\"且必须在他的声明作用域内初始化\",{\"1\":{\"347\":1}}],[\"且他的比较是严格比较\",{\"1\":{\"313\":1}}],[\"且把服务端的序列号值\",{\"1\":{\"244\":1}}],[\"且把客户端的序列号值\",{\"1\":{\"244\":1}}],[\"且指定一个序列号\",{\"1\":{\"244\":1}}],[\"且默认端口使用80或443\",{\"1\":{\"199\":1}}],[\"代替super\",{\"1\":{\"627\":1}}],[\"代理服务器都可以缓存\",{\"1\":{\"866\":1}}],[\"代理\",{\"0\":{\"349\":1},\"1\":{\"723\":1}}],[\"代表工具为git\",{\"1\":{\"681\":1}}],[\"代表工具有svn\",{\"1\":{\"678\":1}}],[\"代表任务在未来的哪个时间点应该被完成\",{\"1\":{\"428\":1}}],[\"代表着任何不同值\",{\"1\":{\"377\":1}}],[\"代表了客户端看起来可能发生了错误\",{\"1\":{\"210\":1}}],[\"代表请求已成功被服务器接收\",{\"1\":{\"208\":1}}],[\"代表请求已被接受\",{\"1\":{\"207\":1}}],[\"代码点\",{\"1\":{\"999\":1}}],[\"代码打包目录和以前配置的目录保持一致\",{\"1\":{\"909\":1}}],[\"代码侵入性大\",{\"1\":{\"908\":1}}],[\"代码分割是一种将代码拆分为多个小块\",{\"1\":{\"859\":1}}],[\"代码中本身逻辑错误\",{\"1\":{\"741\":1}}],[\"代码中的结束标记隐含表示了一个分号\",{\"1\":{\"332\":1}}],[\"代码格式修改\",{\"1\":{\"689\":1}}],[\"代码重构\",{\"1\":{\"689\":1}}],[\"代码集中化管理\",{\"1\":{\"678\":1,\"681\":1}}],[\"代码最后都会转换成react\",{\"1\":{\"539\":1}}],[\"代码混乱\",{\"1\":{\"485\":1}}],[\"代码量少\",{\"1\":{\"467\":1}}],[\"代码将被显示出来\",{\"1\":{\"333\":1}}],[\"代码块\",{\"1\":{\"333\":1}}],[\"代码\",{\"1\":{\"330\":1}}],[\"代码段结束标记可以不要\",{\"1\":{\"332\":1}}],[\"代码段中的最后一行可以不用分号结束\",{\"1\":{\"332\":1}}],[\"代码段中解释器每执行\",{\"1\":{\"315\":1}}],[\"代码段的行为\",{\"1\":{\"314\":1}}],[\"代码实现\",{\"1\":{\"254\":1}}],[\"代码创建的执行上下文还有一个词法环境\",{\"1\":{\"92\":1}}],[\"代码少\",{\"1\":{\"76\":1}}],[\"代码如下所示\",{\"1\":{\"89\":1}}],[\"代码如下\",{\"1\":{\"75\":1,\"82\":1,\"83\":1}}],[\"英语\",{\"1\":{\"205\":1}}],[\"状态情况如下\",{\"1\":{\"685\":1}}],[\"状态由外部控制\",{\"1\":{\"563\":1}}],[\"状态管理\",{\"0\":{\"458\":1,\"563\":1},\"1\":{\"456\":1,\"812\":1}}],[\"状态\",{\"1\":{\"243\":3,\"244\":3,\"885\":1}}],[\"状态码第一位数字决定了不同的响应状态\",{\"1\":{\"206\":1}}],[\"状态码\",{\"0\":{\"205\":1}}],[\"状态行\",{\"1\":{\"191\":1}}],[\"股票基金报价实时更新\",{\"1\":{\"202\":1}}],[\"协商\",{\"1\":{\"883\":1}}],[\"协商服务器是否更新资源\",{\"1\":{\"863\":1}}],[\"协商缓存是利用的是\",{\"1\":{\"226\":1}}],[\"协商缓存\",{\"0\":{\"226\":1},\"1\":{\"212\":1,\"863\":1,\"866\":1}}],[\"协同编辑\",{\"1\":{\"202\":1}}],[\"协议相同\",{\"1\":{\"722\":1}}],[\"协议与各种应用层协议之间\",{\"1\":{\"231\":1}}],[\"协议位于\",{\"1\":{\"231\":1}}],[\"协议没有body和\",{\"1\":{\"218\":1}}],[\"协议版本\",{\"1\":{\"211\":1}}],[\"协议的客户端连接\",{\"1\":{\"200\":1}}],[\"协议名\",{\"0\":{\"199\":1}}],[\"协议能够实现数据包简单\",{\"1\":{\"172\":1}}],[\"协议保证了数据的传输可靠性\",{\"1\":{\"172\":1}}],[\"协议等\",{\"1\":{\"158\":1}}],[\"协议\",{\"1\":{\"158\":1,\"176\":1}}],[\"媒体聊天\",{\"1\":{\"202\":1}}],[\"媒体查询等\",{\"1\":{\"483\":1}}],[\"媒体查询\",{\"0\":{\"56\":1},\"1\":{\"55\":1}}],[\"弹框显示内容等\",{\"1\":{\"805\":1}}],[\"弹幕\",{\"1\":{\"202\":1}}],[\"弹性布局\",{\"0\":{\"61\":1}}],[\"延迟加载\",{\"2\":{\"874\":1,\"924\":1}}],[\"延迟加载资源\",{\"1\":{\"856\":1}}],[\"延迟明显更少\",{\"1\":{\"201\":1}}],[\"延迟时间\",{\"1\":{\"49\":1}}],[\"更快地调试和定位\",{\"1\":{\"949\":1}}],[\"更高效的组件初始化\",{\"1\":{\"816\":1}}],[\"更易于使用\",{\"1\":{\"816\":1}}],[\"更易维护\",{\"1\":{\"816\":1}}],[\"更接近原生\",{\"1\":{\"816\":1}}],[\"更简洁的api\",{\"1\":{\"812\":1}}],[\"更符合逻辑\",{\"1\":{\"627\":1}}],[\"更多其他特性\",{\"1\":{\"946\":1}}],[\"更多情况我们是通过props与state的方式进行去重新渲染子元素\",{\"1\":{\"584\":1}}],[\"更多代码\",{\"1\":{\"330\":1}}],[\"更容易被理解和维护\",{\"1\":{\"533\":1}}],[\"更改immutable数据\",{\"1\":{\"527\":1}}],[\"更改时更新\",{\"1\":{\"520\":1}}],[\"更优雅\",{\"1\":{\"522\":1}}],[\"更新和销毁\",{\"1\":{\"773\":1}}],[\"更新节点\",{\"1\":{\"770\":1}}],[\"更新相应的视图\",{\"1\":{\"732\":1}}],[\"更新类型\",{\"0\":{\"613\":1}}],[\"更新到屏幕上\",{\"1\":{\"537\":1}}],[\"更新\",{\"1\":{\"500\":1,\"519\":1,\"538\":1,\"587\":1,\"607\":1}}],[\"更新为新集合中节点的位置\",{\"1\":{\"496\":1}}],[\"更新阶段\",{\"0\":{\"439\":1},\"1\":{\"433\":1,\"811\":1}}],[\"更新→渲染\",{\"1\":{\"432\":1}}],[\"更好的分割方式\",{\"1\":{\"859\":1}}],[\"更好的压缩效果\",{\"1\":{\"201\":1}}],[\"更好的二进制支持\",{\"1\":{\"201\":1}}],[\"更好处理二进制内容\",{\"1\":{\"201\":1}}],[\"更强的实时性\",{\"1\":{\"201\":1}}],[\"更侧重于提高传输效率\",{\"1\":{\"198\":1}}],[\"更侧重于\",{\"1\":{\"198\":1}}],[\"较少的控制开销\",{\"1\":{\"201\":1}}],[\"较大者优先级更高\",{\"1\":{\"36\":1}}],[\"再调用\",{\"1\":{\"849\":1}}],[\"再发送请求\",{\"1\":{\"846\":1}}],[\"再经过对比前后差异\",{\"1\":{\"836\":1}}],[\"再次进入\",{\"1\":{\"828\":1}}],[\"再次进入列表页\",{\"1\":{\"764\":1}}],[\"再统一进行更新\",{\"1\":{\"800\":1}}],[\"再执行resize事件中的代码\",{\"1\":{\"846\":1}}],[\"再执行render函数\",{\"1\":{\"538\":1}}],[\"再执行组建的钩子\",{\"1\":{\"791\":1}}],[\"再开始加载子组件\",{\"1\":{\"784\":1}}],[\"再完成父组件挂载\",{\"1\":{\"784\":1}}],[\"再返回\",{\"1\":{\"764\":1}}],[\"再初始化super\",{\"1\":{\"626\":1}}],[\"再来举一个原生dom事件的例子\",{\"1\":{\"615\":1}}],[\"再输出到响应中\",{\"1\":{\"560\":1}}],[\"再去循环比较\",{\"1\":{\"549\":1}}],[\"再插入父node中\",{\"1\":{\"538\":1}}],[\"再处理\",{\"1\":{\"505\":1}}],[\"再比如组件渲染性能监控\",{\"1\":{\"480\":1}}],[\"再比对原文验证完整性\",{\"1\":{\"239\":1}}],[\"再加上目前推崇函数式编程\",{\"1\":{\"475\":1}}],[\"再继续之前\",{\"1\":{\"429\":1}}],[\"再对结果做除法\",{\"1\":{\"304\":1}}],[\"再在后台\",{\"1\":{\"301\":1}}],[\"再计算摘要\",{\"1\":{\"200\":1}}],[\"再通过\",{\"1\":{\"89\":1}}],[\"编码\",{\"1\":{\"1008\":1}}],[\"编码的密文\",{\"1\":{\"200\":1}}],[\"编译生命周期都可以访问\",{\"1\":{\"956\":1}}],[\"编译条件\",{\"1\":{\"757\":1}}],[\"编译过程\",{\"1\":{\"757\":1}}],[\"编译过程中批准的内容\",{\"1\":{\"639\":1}}],[\"编译模板优化\",{\"1\":{\"816\":1}}],[\"编译模板\",{\"1\":{\"432\":1,\"775\":1}}],[\"编写超长的配置\",{\"1\":{\"925\":1}}],[\"编写并执行函数\",{\"1\":{\"925\":1}}],[\"编写hooks为函数式编程\",{\"1\":{\"522\":1}}],[\"编写方面\",{\"1\":{\"514\":1}}],[\"编写方式\",{\"0\":{\"479\":1}}],[\"编写起来简洁方便\",{\"1\":{\"483\":1}}],[\"编写形式\",{\"0\":{\"457\":1},\"1\":{\"456\":1}}],[\"编号与确认\",{\"1\":{\"183\":1}}],[\"握手\",{\"0\":{\"200\":1}}],[\"资源管理\",{\"1\":{\"953\":1}}],[\"资源定位\",{\"1\":{\"942\":1}}],[\"资源体积优化\",{\"0\":{\"892\":1},\"1\":{\"892\":1}}],[\"资源未修改返回304\",{\"1\":{\"868\":1,\"869\":1}}],[\"资源不会缓存到本地\",{\"1\":{\"866\":1}}],[\"资源会缓存到本地\",{\"1\":{\"866\":2}}],[\"资源加载优化\",{\"0\":{\"856\":1},\"1\":{\"856\":1}}],[\"资源是通过专门的函数来建立和使用的\",{\"1\":{\"390\":1}}],[\"资源类型变量保存有为打开文件\",{\"1\":{\"390\":1}}],[\"资源类型\",{\"0\":{\"390\":1}}],[\"资源变化都会导致etag变化\",{\"1\":{\"226\":1}}],[\"资源\",{\"1\":{\"195\":1,\"390\":1}}],[\"轮询的缺点也很明显\",{\"1\":{\"195\":1}}],[\"轮廓样式属性\",{\"1\":{\"37\":1}}],[\"开启定时器\",{\"1\":{\"848\":1}}],[\"开启计时\",{\"1\":{\"845\":1}}],[\"开启精准匹配\",{\"1\":{\"595\":1}}],[\"开发者可以将这些manifest数据导出为文件\",{\"1\":{\"942\":1}}],[\"开发者将程序分解为功能离散的\",{\"1\":{\"935\":1}}],[\"开发环境不配置\",{\"1\":{\"895\":1}}],[\"开发环境秒启动\",{\"1\":{\"812\":1}}],[\"开发过程中\",{\"1\":{\"844\":1}}],[\"开发模式\",{\"1\":{\"449\":2}}],[\"开发实时web应用的方式为轮询\",{\"1\":{\"195\":1}}],[\"开始执行\",{\"1\":{\"948\":1}}],[\"开始支持\",{\"1\":{\"375\":1}}],[\"开始\",{\"1\":{\"346\":1,\"385\":1,\"931\":1,\"992\":1}}],[\"开始和结束标记之外\",{\"1\":{\"331\":1}}],[\"开始和停止解析二者之间的代码\",{\"1\":{\"330\":1}}],[\"开始输出这些空白\",{\"1\":{\"330\":1}}],[\"开始引入了命名参数作为现有位置参数的扩展\",{\"1\":{\"324\":1}}],[\"开辟一个新的栈\",{\"1\":{\"277\":1}}],[\"开销小\",{\"1\":{\"181\":1}}],[\"绘制页面像素信息\",{\"1\":{\"192\":1}}],[\"绘制\",{\"1\":{\"192\":1}}],[\"规范类型\",{\"1\":{\"968\":1}}],[\"规范来定义合成事件\",{\"1\":{\"504\":1}}],[\"规则如下\",{\"1\":{\"496\":1}}],[\"规则\",{\"1\":{\"192\":1,\"932\":2}}],[\"规则树\",{\"1\":{\"192\":1}}],[\"规定当文本溢出时\",{\"1\":{\"87\":1}}],[\"规定文本的书写方向\",{\"1\":{\"37\":1}}],[\"规定元素的字体系列\",{\"1\":{\"37\":1}}],[\"树结构的节点单位\",{\"1\":{\"428\":1}}],[\"树和\",{\"1\":{\"192\":1}}],[\"树\",{\"1\":{\"192\":4,\"587\":1}}],[\"解绑副作用\",{\"1\":{\"780\":1}}],[\"解释器会在条件未达成时直接跳过该段条件语句块\",{\"1\":{\"331\":1}}],[\"解释器会根据条件判断来决定哪些输出\",{\"1\":{\"331\":1}}],[\"解释器碰到\",{\"1\":{\"331\":1}}],[\"解决什么\",{\"0\":{\"522\":1}}],[\"解决这个问题的方法是在事件函数后使用\",{\"1\":{\"510\":1}}],[\"解决首屏白屏问题\",{\"1\":{\"448\":1}}],[\"解决\",{\"0\":{\"304\":1,\"429\":1,\"714\":1}}],[\"解决方法只需要将路由信息在服务端执行一遍\",{\"1\":{\"449\":1}}],[\"解决方法\",{\"1\":{\"251\":1}}],[\"解除引用\",{\"1\":{\"251\":1}}],[\"解压gzip\",{\"1\":{\"192\":1}}],[\"解析模块依赖\",{\"1\":{\"932\":1}}],[\"解析模块\",{\"1\":{\"932\":1}}],[\"解析模式通常比将文本通过\",{\"1\":{\"331\":1}}],[\"解析其中的配置信息\",{\"1\":{\"932\":1}}],[\"解析ip地址的方式\",{\"1\":{\"871\":1}}],[\"解析流程\",{\"1\":{\"758\":1}}],[\"解析原理\",{\"0\":{\"758\":1}}],[\"解析速度慢\",{\"1\":{\"423\":1}}],[\"解析器看到是一个名为\",{\"1\":{\"408\":1}}],[\"解析器忽略\",{\"1\":{\"330\":1}}],[\"解析的例子\",{\"1\":{\"332\":1}}],[\"解析\",{\"1\":{\"192\":1}}],[\"解析html\",{\"1\":{\"192\":1}}],[\"解析html文件\",{\"1\":{\"146\":1}}],[\"解析起来更高效\",{\"1\":{\"150\":1}}],[\"解析域名的过程如下\",{\"1\":{\"142\":1}}],[\"解析得到目的主机的ip地址→根据ip地址访问发出请求→得到请求数据并回复\",{\"1\":{\"133\":1}}],[\"流程控制\",{\"0\":{\"311\":1}}],[\"流程\",{\"0\":{\"288\":1,\"433\":1},\"1\":{\"282\":1}}],[\"流程图如下所示\",{\"1\":{\"231\":1}}],[\"流程如下所示\",{\"1\":{\"301\":1}}],[\"流程如下\",{\"1\":{\"189\":1,\"240\":1}}],[\"流量控制\",{\"1\":{\"183\":1}}],[\"整个\",{\"1\":{\"956\":1}}],[\"整个过程是一个同步的操作\",{\"1\":{\"571\":1}}],[\"整个流程结束\",{\"1\":{\"450\":1}}],[\"整个查询过程如下图所示\",{\"1\":{\"188\":1}}],[\"整体使用方式与react\",{\"1\":{\"583\":1}}],[\"整体风格更清爽\",{\"1\":{\"522\":1}}],[\"整体react服务端渲染原理并不复杂\",{\"1\":{\"450\":1}}],[\"整体例子如下\",{\"1\":{\"7\":1}}],[\"整数除法\",{\"0\":{\"374\":1}}],[\"整型数值\",{\"1\":{\"372\":1}}],[\"原生标签节点\",{\"1\":{\"538\":1}}],[\"原生事件\",{\"1\":{\"504\":1,\"505\":7}}],[\"原生事件绑定方式\",{\"1\":{\"504\":1}}],[\"原生组件等等\",{\"1\":{\"429\":1}}],[\"原因在于\",{\"1\":{\"881\":1}}],[\"原因在于每个route组件外面包裹着一层div\",{\"1\":{\"449\":1}}],[\"原因是任何在上下文中的变量都访问不到它们了\",{\"1\":{\"249\":1}}],[\"原子类型\",{\"0\":{\"367\":1}}],[\"原始事件模型\",{\"1\":{\"273\":1}}],[\"原型prototype属性\",{\"1\":{\"267\":1}}],[\"原型对象也可能有原型\",{\"1\":{\"268\":1}}],[\"原型对象有一个自有属性constructor\",{\"1\":{\"267\":1}}],[\"原型对象又包含一个指向构造函数的指针\",{\"1\":{\"258\":1}}],[\"原型链\",{\"0\":{\"267\":1,\"268\":1}}],[\"原型链继承是比较常见的继承方式之一\",{\"1\":{\"258\":1}}],[\"原型链继承\",{\"0\":{\"258\":1},\"1\":{\"257\":1}}],[\"原型方法\",{\"1\":{\"264\":1}}],[\"原型和实例\",{\"1\":{\"258\":1}}],[\"原型式继承\",{\"0\":{\"261\":1},\"1\":{\"257\":1}}],[\"原封不动将报文交给上层应用\",{\"1\":{\"183\":1}}],[\"原理基本一致\",{\"1\":{\"549\":1}}],[\"原理其实很简单\",{\"1\":{\"239\":1}}],[\"原理\",{\"0\":{\"133\":1,\"450\":1,\"493\":1,\"575\":1,\"655\":1,\"713\":1,\"728\":1,\"732\":1,\"748\":1,\"770\":1,\"807\":1},\"1\":{\"248\":1,\"819\":1}}],[\"原理如下\",{\"1\":{\"78\":1,\"575\":1}}],[\"计时功能\",{\"1\":{\"844\":1,\"847\":1}}],[\"计时器等手段确保数据无差错\",{\"1\":{\"183\":1}}],[\"计算属性可以被声明为类的属性访问器\",{\"1\":{\"667\":1}}],[\"计算广告元素的曝光情况\",{\"1\":{\"284\":1}}],[\"计算机中dns的记录也分成了两种缓存方式\",{\"1\":{\"141\":1}}],[\"计算高度时考虑浮动的元素\",{\"1\":{\"78\":1}}],[\"计算bfc的高度时\",{\"1\":{\"19\":1,\"21\":1}}],[\"快捷\",{\"1\":{\"834\":1}}],[\"快速简历小程序内的用户体系\",{\"1\":{\"829\":1}}],[\"快速定位问题\",{\"1\":{\"717\":1}}],[\"快速确定子树中是否有不在等待的变化\",{\"1\":{\"428\":1}}],[\"快速地传输\",{\"1\":{\"172\":1}}],[\"快\",{\"1\":{\"183\":1}}],[\"快恢复\",{\"1\":{\"183\":1}}],[\"快重传\",{\"1\":{\"183\":1}}],[\"慢\",{\"1\":{\"183\":1}}],[\"慢开始\",{\"1\":{\"183\":1}}],[\"慢慢变慢\",{\"1\":{\"11\":1}}],[\"慢慢变快\",{\"1\":{\"11\":1}}],[\"拥有了类组件相似的功能\",{\"1\":{\"522\":1}}],[\"拥有与浏览器原生事件相同的接口\",{\"1\":{\"504\":1}}],[\"拥有left\",{\"1\":{\"285\":1}}],[\"拥有此realm的agent代理\",{\"1\":{\"96\":1}}],[\"拥塞避免\",{\"1\":{\"183\":1}}],[\"拥塞控制\",{\"1\":{\"183\":1}}],[\"滑动窗口\",{\"1\":{\"183\":1}}],[\"双线程同时运行\",{\"1\":{\"835\":1}}],[\"双花括号插值\",{\"1\":{\"745\":1}}],[\"双向绑定的实现​​\",{\"1\":{\"811\":1}}],[\"双向绑定\",{\"1\":{\"699\":1,\"811\":1}}],[\"双引号的写法\",{\"1\":{\"1009\":1}}],[\"双引号\",{\"0\":{\"380\":1},\"1\":{\"378\":1,\"380\":1}}],[\"双精度数\",{\"1\":{\"375\":1}}],[\"双方已建立起了连接\",{\"1\":{\"243\":1}}],[\"双共性\",{\"1\":{\"183\":1}}],[\"双栏布局非常常见\",{\"1\":{\"75\":1}}],[\"双栏布局\",{\"0\":{\"75\":1}}],[\"效率也有很大提升\",{\"1\":{\"504\":1}}],[\"效率低\",{\"1\":{\"423\":1}}],[\"效率\",{\"1\":{\"183\":1}}],[\"效果曲线\",{\"1\":{\"49\":1}}],[\"连接和\",{\"1\":{\"883\":1}}],[\"连接成功后\",{\"1\":{\"195\":1}}],[\"连接\",{\"1\":{\"186\":1,\"368\":1}}],[\"连接性\",{\"1\":{\"183\":1}}],[\"连接管理以及窗口控制等机制实现\",{\"1\":{\"182\":1}}],[\"区别主要如下\",{\"1\":{\"514\":1}}],[\"区别\",{\"0\":{\"183\":1,\"216\":1,\"232\":1,\"422\":1,\"456\":1,\"475\":1,\"489\":1,\"514\":1,\"622\":1,\"666\":1,\"718\":1,\"727\":1},\"1\":{\"622\":1}}],[\"确定资源是否有变更\",{\"1\":{\"866\":1}}],[\"确定是否要重新渲染\",{\"1\":{\"548\":1}}],[\"确定变量类型\",{\"0\":{\"409\":1}}],[\"确保模块能够按照正确的顺序被加载和执行\",{\"1\":{\"941\":1}}],[\"确保你的网站在真实用户的设备上表现卓越\",{\"1\":{\"890\":1}}],[\"确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建\",{\"1\":{\"757\":1}}],[\"确保用户只能访问到被分配的资源\",{\"1\":{\"702\":1}}],[\"确保由不同人所编辑的同一程序文件都得到同步\",{\"1\":{\"675\":1}}],[\"确保了\",{\"1\":{\"627\":1}}],[\"确保后面对$color\",{\"1\":{\"387\":1}}],[\"确保数据按时成功传送\",{\"1\":{\"162\":1}}],[\"确认无误后\",{\"1\":{\"287\":1}}],[\"确认\",{\"1\":{\"243\":1}}],[\"确认应答\",{\"1\":{\"182\":1}}],[\"额外开销大\",{\"1\":{\"182\":1}}],[\"蓄水池\",{\"1\":{\"182\":1}}],[\"面向对象程序设计语言中的类\",{\"1\":{\"787\":1}}],[\"面向报文\",{\"1\":{\"183\":1}}],[\"面向字节流\",{\"1\":{\"183\":2}}],[\"面向字节流的通信协议\",{\"1\":{\"182\":1}}],[\"面向连接\",{\"1\":{\"183\":1}}],[\"面向无连接的\",{\"1\":{\"172\":1}}],[\"立即按照原样发送到网络上的一种机制\",{\"1\":{\"181\":1}}],[\"立体效果\",{\"1\":{\"8\":1}}],[\"采用一些压缩方案\",{\"1\":{\"893\":1}}],[\"采用函数返回一个全新的data形式\",{\"1\":{\"727\":1}}],[\"采用python语言实现\",{\"1\":{\"683\":1}}],[\"采用服务端渲染端方式\",{\"1\":{\"560\":1}}],[\"采用的是对称加密+非对称加密\",{\"1\":{\"237\":1}}],[\"采用的七层模型\",{\"1\":{\"177\":1}}],[\"采用协商的密钥对数据加密\",{\"1\":{\"234\":1}}],[\"采用这种方式可以节省传输时间\",{\"1\":{\"230\":1}}],[\"采用了二进制帧结构\",{\"1\":{\"198\":1}}],[\"采用二进制格式而非文本格式\",{\"1\":{\"153\":1}}],[\"采用二进制格式传输数据\",{\"1\":{\"150\":1}}],[\"超全局数组中的内容\",{\"1\":{\"409\":1}}],[\"超出这个精度\",{\"1\":{\"303\":1}}],[\"超出部分以省略号的形式展现\",{\"1\":{\"87\":1}}],[\"超过的精度会自动做凑整处理\",{\"1\":{\"303\":1}}],[\"超过限速\",{\"1\":{\"212\":1}}],[\"超文本传输协议cookie\",{\"1\":{\"224\":1}}],[\"超文本传输协议\",{\"1\":{\"176\":1}}],[\"报错\",{\"1\":{\"645\":1}}],[\"报错的原因是\",{\"1\":{\"626\":1}}],[\"报文的序列号值\",{\"1\":{\"244\":2}}],[\"报文中会指定一个序列号\",{\"1\":{\"244\":1}}],[\"报文作为应答\",{\"1\":{\"243\":1,\"244\":1}}],[\"报文之后才会进入\",{\"1\":{\"244\":1}}],[\"报文之后\",{\"1\":{\"243\":3,\"244\":1}}],[\"报文\",{\"1\":{\"183\":1,\"243\":2,\"244\":3}}],[\"报文段\",{\"1\":{\"176\":1}}],[\"报头head和数据data两部分\",{\"1\":{\"163\":1}}],[\"反斜杠\",{\"1\":{\"1009\":1}}],[\"反斜杠转义\",{\"1\":{\"379\":1}}],[\"反斜线\",{\"1\":{\"380\":1}}],[\"反引号\",{\"1\":{\"360\":1}}],[\"反射型\",{\"1\":{\"299\":2}}],[\"反过来\",{\"1\":{\"236\":1}}],[\"反复发送无效查询请求耗费了大量的带宽和\",{\"1\":{\"195\":1}}],[\"反向地址解析协议\",{\"1\":{\"176\":1}}],[\"反之亦然\",{\"1\":{\"19\":1,\"355\":1,\"399\":1}}],[\"高级类型\",{\"0\":{\"641\":1}}],[\"高级链路控制协议\",{\"1\":{\"176\":1}}],[\"高效灵活\",{\"1\":{\"534\":1}}],[\"高阶组件能够提高代码的复用性和灵活性\",{\"1\":{\"480\":1}}],[\"高阶组件可以传递所有的props\",{\"1\":{\"479\":1}}],[\"高阶组件的主要功能是封装并分离组件的通用逻辑\",{\"1\":{\"479\":1}}],[\"高阶组件的这种实现方式\",{\"1\":{\"478\":1}}],[\"高阶组件即接受一个或多个组件作为参数并且返回一个组件\",{\"1\":{\"478\":1}}],[\"高阶组件\",{\"0\":{\"478\":1}}],[\"高阶函数\",{\"0\":{\"295\":1},\"1\":{\"478\":1,\"844\":1,\"847\":1}}],[\"高门槛\",{\"1\":{\"280\":1}}],[\"高度可配置性\",{\"1\":{\"931\":1}}],[\"高度固定的情况下\",{\"1\":{\"89\":1}}],[\"高度\",{\"1\":{\"37\":1}}],[\"帧\",{\"1\":{\"176\":1}}],[\"帧是http2通信中最小单位信息\",{\"1\":{\"150\":1}}],[\"功能共享的目的\",{\"1\":{\"571\":1}}],[\"功能越强大的证书费用越高\",{\"1\":{\"232\":1}}],[\"功能\",{\"1\":{\"176\":1,\"571\":1}}],[\"功能特性\",{\"1\":{\"164\":1}}],[\"保证访问的正确性\",{\"1\":{\"871\":1}}],[\"保证了并行开发的可行\",{\"1\":{\"675\":1}}],[\"保持空白\",{\"1\":{\"871\":1}}],[\"保持接口不变的情况下\",{\"1\":{\"717\":1}}],[\"保持一致\",{\"1\":{\"479\":1}}],[\"保持node中require的引用方式\",{\"1\":{\"449\":1}}],[\"保持创连接状态\",{\"1\":{\"201\":1}}],[\"保存事件参数\",{\"1\":{\"845\":1}}],[\"保存display原始值\",{\"1\":{\"759\":1}}],[\"保存了下次将提交的文件列表信息\",{\"1\":{\"685\":1}}],[\"保存了该组件的类型\",{\"1\":{\"429\":1}}],[\"保存了到外部资源的一个引用\",{\"1\":{\"390\":1}}],[\"保存了内存里面所有的资源\",{\"1\":{\"250\":1}}],[\"保存到浏览器的localstorage中\",{\"1\":{\"287\":1}}],[\"保存到父域中\",{\"1\":{\"287\":1}}],[\"保存当前状态\",{\"1\":{\"783\":1}}],[\"保存当前上下文的词法环境oldenv\",{\"1\":{\"122\":1}}],[\"保存当前指向上下文的词法环境oldenv\",{\"1\":{\"119\":1}}],[\"保数据可以在各种物理媒介上进行传输\",{\"1\":{\"175\":1}}],[\"附加的信息可能包括\",{\"1\":{\"165\":1}}],[\"附加字段\",{\"1\":{\"114\":1,\"116\":1,\"117\":1}}],[\"运行在\",{\"1\":{\"946\":1}}],[\"运行于\",{\"1\":{\"934\":1}}],[\"运行时语义由抽象操作\",{\"1\":{\"967\":1}}],[\"运行时语义\",{\"0\":{\"967\":1},\"1\":{\"977\":1}}],[\"运行时\",{\"0\":{\"941\":1},\"1\":{\"908\":1,\"941\":1,\"955\":1}}],[\"运行机制\",{\"0\":{\"837\":1}}],[\"运行环境下的一些功能\",{\"1\":{\"592\":1}}],[\"运行环境\",{\"1\":{\"400\":1,\"822\":1}}],[\"运行环境中就有几条作用域链\",{\"1\":{\"111\":1}}],[\"运算符只对\",{\"1\":{\"359\":1}}],[\"运算符\",{\"0\":{\"354\":1},\"1\":{\"357\":1,\"359\":1}}],[\"运输层则向网络层传递该报文段\",{\"1\":{\"165\":1}}],[\"运输层收取到报文并附上附加信息\",{\"1\":{\"165\":1}}],[\"电气特性\",{\"1\":{\"164\":1}}],[\"电子邮件系统采用的\",{\"1\":{\"158\":1}}],[\"机械特性\",{\"1\":{\"164\":1}}],[\"物理层的作用是实现计算机节点之间比特流的透明传送\",{\"1\":{\"164\":1}}],[\"物理层\",{\"0\":{\"164\":1,\"175\":1}}],[\"网页的总阻塞时间是在\",{\"1\":{\"885\":1}}],[\"网页性能会受到很大影响\",{\"1\":{\"871\":1}}],[\"网页开发中\",{\"1\":{\"835\":1}}],[\"网站服务器将恶意代码从url中取出\",{\"1\":{\"299\":1}}],[\"网站服务端将恶意代码从数据库中取出\",{\"1\":{\"299\":1}}],[\"网站的布局会根据视口来调整模块的大小和位置\",{\"1\":{\"54\":1}}],[\"网关超时\",{\"1\":{\"211\":1,\"212\":1}}],[\"网络状况或其他条件来决定是否加载某个模块\",{\"1\":{\"858\":1}}],[\"网络代理\",{\"1\":{\"723\":1}}],[\"网络文件系统协议\",{\"1\":{\"176\":1}}],[\"网络接口层\",{\"1\":{\"169\":1,\"176\":1}}],[\"网络层把运输层产生的报文段或用户数据封装成分组或包进行传送\",{\"1\":{\"173\":1}}],[\"网络层把传输层产生的报文或用户数据报封装成分组和包\",{\"1\":{\"162\":1}}],[\"网络层数据报接下来被传递给链路层\",{\"1\":{\"165\":1}}],[\"网络层增加了如源和目的端系统地址等网络层首部信息\",{\"1\":{\"165\":1}}],[\"网络层的主要任务就是选择合适的网间路由和交换节点\",{\"1\":{\"162\":1}}],[\"网络层\",{\"0\":{\"162\":1,\"173\":1},\"1\":{\"169\":2,\"176\":1}}],[\"网际控制消息协议\",{\"1\":{\"176\":1}}],[\"网际互联层\",{\"1\":{\"169\":1}}],[\"网际协议\",{\"1\":{\"168\":2,\"176\":1}}],[\"向\",{\"1\":{\"937\":1}}],[\"向循环中间靠拢\",{\"1\":{\"733\":1}}],[\"向一个响应式对象中添加一个property\",{\"1\":{\"714\":1}}],[\"向子组件中传入一个函数\",{\"1\":{\"414\":1}}],[\"向它运行的任何脚本提供了大量的预定义常量\",{\"1\":{\"307\":1}}],[\"向被攻击者发送跨站请求\",{\"1\":{\"300\":1}}],[\"向下传递事件\",{\"1\":{\"699\":1}}],[\"向下传输到数据链路层\",{\"1\":{\"162\":1}}],[\"向下捕获事件\",{\"1\":{\"699\":1}}],[\"向下接收来自会话层的服务\",{\"1\":{\"159\":1}}],[\"向上为应用层提供服务\",{\"1\":{\"159\":1}}],[\"参考如下\",{\"1\":{\"569\":1,\"570\":1}}],[\"参考模型作为一种简化的分层结构是可以的\",{\"1\":{\"177\":1}}],[\"参考模型虽然网络划分为七层\",{\"1\":{\"177\":1}}],[\"参考模型对服务和协议做了明确的区分\",{\"1\":{\"177\":1}}],[\"参考模型没有对网络接口层进行细分\",{\"1\":{\"177\":1}}],[\"参考模型都采用了层次结构\",{\"1\":{\"177\":1}}],[\"参考模型区别如下\",{\"1\":{\"177\":1}}],[\"参考模型与\",{\"1\":{\"177\":2}}],[\"参考模型的传输层\",{\"1\":{\"172\":1}}],[\"参考模型的第六层\",{\"1\":{\"159\":1}}],[\"参考模型的第七层\",{\"1\":{\"158\":1}}],[\"参考模型中的会话层\",{\"1\":{\"171\":1}}],[\"参考模型中最低的一层\",{\"1\":{\"164\":1}}],[\"参数可以为空\",{\"1\":{\"996\":1}}],[\"参数的产生式\",{\"1\":{\"996\":1}}],[\"参数来设置选项\",{\"1\":{\"946\":1}}],[\"参数\",{\"1\":{\"662\":1,\"925\":1}}],[\"参数传递\",{\"0\":{\"602\":1}}],[\"参数处理\",{\"1\":{\"539\":1}}],[\"参数为state默认的值\",{\"1\":{\"519\":1}}],[\"参数名必须是一个标识符\",{\"1\":{\"324\":1}}],[\"参数与顺序无关\",{\"1\":{\"324\":1}}],[\"参数值将作为\",{\"1\":{\"323\":1}}],[\"参数列表可能包含\",{\"1\":{\"323\":1}}],[\"参数列表\",{\"1\":{\"271\":2}}],[\"参数列表的产生式\",{\"1\":{\"128\":1}}],[\"参数数组\",{\"1\":{\"271\":1}}],[\"参数对象arguments\",{\"1\":{\"270\":1}}],[\"参数长度\",{\"0\":{\"218\":1}}],[\"参数位置\",{\"0\":{\"217\":1}}],[\"参数有误\",{\"1\":{\"212\":1}}],[\"参数化产生式的完整样子\",{\"1\":{\"129\":1}}],[\"参数化的产生式\",{\"1\":{\"129\":1,\"983\":1}}],[\"参数化的产生式是一组产生式的简写\",{\"1\":{\"129\":1}}],[\"参数中有名为arguments的参数\",{\"1\":{\"123\":1}}],[\"划分\",{\"0\":{\"157\":1,\"169\":1}}],[\"提前加载\",{\"1\":{\"933\":1}}],[\"提前链接\",{\"1\":{\"907\":1}}],[\"提升代码可读性和复用性\",{\"1\":{\"813\":1}}],[\"提升代码健壮性\",{\"1\":{\"812\":1}}],[\"提取\",{\"1\":{\"479\":1}}],[\"提交审核\",{\"1\":{\"833\":1}}],[\"提交代码到本地仓库\",{\"1\":{\"689\":1}}],[\"提交时显示所有的diff信息\",{\"1\":{\"689\":1}}],[\"提交时验证\",{\"1\":{\"467\":1}}],[\"提交某些文件到缓冲区\",{\"1\":{\"689\":1}}],[\"提交全部文件修改到缓存区\",{\"1\":{\"686\":1,\"689\":1}}],[\"提交更新\",{\"1\":{\"685\":1}}],[\"提交\",{\"1\":{\"466\":1,\"467\":1}}],[\"提高了用户的满意度\",{\"1\":{\"910\":1}}],[\"提高资源的加载速度\",{\"1\":{\"892\":1}}],[\"提高页面的多次渲染效率主要在于正确使用setdata\",{\"1\":{\"840\":1}}],[\"提高可维护性\",{\"1\":{\"717\":1}}],[\"提高代码复用率\",{\"1\":{\"534\":1}}],[\"提高性能\",{\"1\":{\"423\":1}}],[\"提高用户访问响应速度和命中率\",{\"1\":{\"132\":1}}],[\"提供自己的api\",{\"1\":{\"717\":1}}],[\"提供git仓库托管服务\",{\"1\":{\"684\":1}}],[\"提供的\",{\"1\":{\"479\":1}}],[\"提供了可靠的抽象和封装界限\",{\"1\":{\"935\":1}}],[\"提供了非常完善\",{\"1\":{\"834\":1}}],[\"提供了方法的实现\",{\"1\":{\"787\":1}}],[\"提供了\",{\"1\":{\"496\":1}}],[\"提供了一套附加的预定数组\",{\"1\":{\"400\":1}}],[\"提供了一些流程控制的替代语法\",{\"1\":{\"312\":1}}],[\"提供了许多\",{\"1\":{\"400\":1}}],[\"提供可靠的服务\",{\"1\":{\"183\":1}}],[\"提供面向无连接的通信服务\",{\"1\":{\"181\":1}}],[\"提出的一个试图使各种计算机在世界范围内互连为网络的标准框架\",{\"1\":{\"156\":1}}],[\"降低界面开发成本\",{\"1\":{\"812\":1}}],[\"降低系统的耦合度\",{\"1\":{\"717\":1}}],[\"降低开销\",{\"1\":{\"153\":1}}],[\"降低网络拥塞\",{\"1\":{\"132\":1}}],[\"完整的类名\",{\"1\":{\"308\":1}}],[\"完整地证明公钥关联的各种信息\",{\"1\":{\"240\":1}}],[\"完全\",{\"1\":{\"422\":1}}],[\"完全不兼容\",{\"1\":{\"198\":1}}],[\"完全多路复用\",{\"1\":{\"153\":1}}],[\"完成语句语义的表达\",{\"1\":{\"977\":1}}],[\"完成语义的一个雷子\",{\"1\":{\"968\":1}}],[\"完成记录是一个正常完成\",{\"1\":{\"970\":1}}],[\"完成这个复用组件在不同场景的应用\",{\"1\":{\"805\":1}}],[\"完成效果的速度曲线\",{\"1\":{\"11\":1}}],[\"完成过渡效果需要的时间单位\",{\"1\":{\"11\":1}}],[\"完成滚动视觉差就需要将background\",{\"1\":{\"7\":1}}],[\"后缀\",{\"1\":{\"949\":1}}],[\"后者指示\",{\"1\":{\"948\":1}}],[\"后发生的每项长任务的阻塞时间的总和\",{\"1\":{\"885\":1}}],[\"后端nginx配置\",{\"1\":{\"895\":2}}],[\"后端从数据库中查找openid\",{\"1\":{\"829\":1}}],[\"后端把appid\",{\"1\":{\"829\":1}}],[\"后端接口错误\",{\"1\":{\"741\":1}}],[\"后台运行或跳转到其他页面时\",{\"1\":{\"828\":1}}],[\"后台运行一定时间\",{\"1\":{\"828\":1}}],[\"后台进入前台或重新进入页面时\",{\"1\":{\"828\":1}}],[\"后台进入前台\",{\"1\":{\"828\":1}}],[\"后的副作用\",{\"1\":{\"782\":1}}],[\"后续每一个提交都会使用这些信息\",{\"1\":{\"687\":1}}],[\"后续的调用则会使用\",{\"1\":{\"538\":1}}],[\"后续更改成\",{\"1\":{\"497\":1}}],[\"后\",{\"1\":{\"495\":1,\"527\":1}}],[\"后面的组件就不应该继续匹配\",{\"1\":{\"598\":1}}],[\"后面的字符键会覆盖之前的字符键\",{\"1\":{\"386\":1}}],[\"后面并不会导致foo\",{\"1\":{\"588\":1}}],[\"后面跟着一个或多个冒号\",{\"1\":{\"992\":1}}],[\"后面跟着一个裸字符串\",{\"1\":{\"408\":1}}],[\"后面跟着一个字符串连接运算符\",{\"1\":{\"408\":1}}],[\"后面跟上任意数量的字母\",{\"1\":{\"398\":1}}],[\"后面\",{\"1\":{\"326\":1}}],[\"后面就会有许多请求排队等着\",{\"1\":{\"153\":1}}],[\"后代元素会自动拥有这些属性\",{\"1\":{\"37\":1}}],[\"后代选择器\",{\"1\":{\"35\":1}}],[\"才指明确切的类型\",{\"1\":{\"660\":1}}],[\"才初始化this\",{\"1\":{\"627\":1}}],[\"才会渲染对应的组件\",{\"1\":{\"595\":1}}],[\"才会交给渲染的线程\",{\"1\":{\"427\":1}}],[\"才会接着处理下一个请求\",{\"1\":{\"153\":1}}],[\"才返回最终的计算表达式\",{\"1\":{\"253\":1}}],[\"才发送fin报文断开连接\",{\"1\":{\"244\":1}}],[\"才更新该资源\",{\"1\":{\"224\":1}}],[\"才进行对应的操作\",{\"1\":{\"224\":1}}],[\"才能知道确切的值\",{\"1\":{\"107\":1}}],[\"总阻塞时间\",{\"1\":{\"885\":1}}],[\"总的来讲\",{\"1\":{\"519\":1}}],[\"总是可变的\",{\"1\":{\"461\":1}}],[\"总是在一段一段的链路上传送的\",{\"1\":{\"163\":1}}],[\"总结\",{\"0\":{\"153\":1,\"177\":1,\"418\":1,\"445\":1,\"539\":1,\"543\":1,\"551\":1,\"589\":1,\"628\":1,\"733\":1}}],[\"总来来说\",{\"1\":{\"122\":1}}],[\"免得客户端再次创建连接发送请求到服务器端获取\",{\"1\":{\"152\":1}}],[\"二进制数字\",{\"1\":{\"372\":1}}],[\"二进制帧\",{\"0\":{\"198\":1}}],[\"二进制分帧\",{\"0\":{\"150\":1},\"1\":{\"148\":1}}],[\"二级域名\",{\"1\":{\"139\":1}}],[\"二级缓存配置低一些\",{\"1\":{\"135\":1}}],[\"允许你在\",{\"1\":{\"948\":1}}],[\"允许将代码分割成多个bundle\",{\"1\":{\"941\":1}}],[\"允许一个通过这个服务与另一个网络终端进行非直接的连接\",{\"1\":{\"723\":1}}],[\"允许操作浏览器的曾经在标签页或者框架里访问的会话历史记录\",{\"1\":{\"606\":1}}],[\"允许我们访问\",{\"1\":{\"578\":1}}],[\"允许开发者在一个类中定义一个方法作为构造函数\",{\"1\":{\"339\":1}}],[\"允许\",{\"1\":{\"326\":1}}],[\"允许使用保留关键字作为参数名\",{\"1\":{\"324\":1}}],[\"允许攻击者将恶意代码植入到提供给其他用户使用的页面中\",{\"1\":{\"299\":1}}],[\"允许在\",{\"1\":{\"945\":1}}],[\"允许在运行时动态的导入模块\",{\"1\":{\"858\":1}}],[\"允许在对应的内容未被修改的情况下返回304未修改\",{\"1\":{\"224\":2}}],[\"允许在单词内换行\",{\"1\":{\"47\":1}}],[\"允许接收端运输层向上向适当的应用程序交付报文的信息以及差错检测位信息\",{\"1\":{\"165\":1}}],[\"允许服务端推送资源给客户端\",{\"1\":{\"152\":1}}],[\"允许值请求资源某个部分\",{\"1\":{\"147\":1}}],[\"引擎和页面渲染引擎两个线程是互斥的\",{\"1\":{\"427\":1}}],[\"引起\",{\"1\":{\"315\":4}}],[\"引入一个名为\",{\"1\":{\"954\":1}}],[\"引入其他文件\",{\"1\":{\"925\":1}}],[\"引入vue\",{\"1\":{\"667\":1}}],[\"引入\",{\"1\":{\"489\":1}}],[\"引入样式组件也很简单\",{\"1\":{\"488\":1}}],[\"引入css就不如vue方便简洁\",{\"1\":{\"483\":1}}],[\"引入home组件\",{\"1\":{\"449\":1}}],[\"引入host\",{\"1\":{\"147\":1}}],[\"引入路由\",{\"1\":{\"449\":1}}],[\"引入react以支持jsx\",{\"1\":{\"449\":1}}],[\"引入react以支持jsx的语法\",{\"1\":{\"449\":3}}],[\"引入rendertostring方法\",{\"1\":{\"449\":3}}],[\"引入range\",{\"1\":{\"147\":1}}],[\"引入ws和wss分别代表明文和密文的websocket协议\",{\"1\":{\"199\":1}}],[\"引入了持久连接\",{\"1\":{\"153\":1}}],[\"引入了更多的缓存控制策略\",{\"1\":{\"147\":1}}],[\"引用的类名\",{\"1\":{\"487\":1}}],[\"引用赋值\",{\"0\":{\"399\":1}}],[\"引用类型\",{\"1\":{\"367\":1}}],[\"引用类型的内存地址\",{\"1\":{\"276\":1}}],[\"引用传递\",{\"0\":{\"321\":1}}],[\"引用次数变为\",{\"1\":{\"250\":1}}],[\"引用数却不为0\",{\"1\":{\"250\":1}}],[\"引用表\",{\"1\":{\"250\":1}}],[\"引用计数\",{\"0\":{\"250\":1},\"1\":{\"248\":1}}],[\"引用\",{\"1\":{\"37\":1,\"399\":1}}],[\"本质为reactdom\",{\"1\":{\"578\":1}}],[\"本质是通过函数的调用\",{\"1\":{\"488\":1}}],[\"本质也就是一个函数\",{\"1\":{\"478\":1}}],[\"本质上\",{\"1\":{\"931\":1}}],[\"本质上是一个对象\",{\"1\":{\"665\":1}}],[\"本质上是一个函数\",{\"1\":{\"661\":1}}],[\"本质上是一个装饰者设计模式\",{\"1\":{\"478\":1}}],[\"本质上是对象\",{\"1\":{\"655\":1}}],[\"本质上是以\",{\"1\":{\"421\":1}}],[\"本质上他只是个普通函数\",{\"1\":{\"339\":1}}],[\"本身就不存在this\",{\"1\":{\"461\":1}}],[\"本地仓库\",{\"1\":{\"685\":1}}],[\"本地版本控制系统\",{\"1\":{\"676\":1}}],[\"本地存储方式\",{\"0\":{\"280\":1}}],[\"本地域名服务器将得到的\",{\"1\":{\"142\":1}}],[\"本地域名服务器根据权限域名服务器的地址向其发起请求\",{\"1\":{\"142\":1}}],[\"本地域名服务器拿到这个顶级域名服务器的地址后\",{\"1\":{\"142\":1}}],[\"本地域名服务器采用递归查询自己的\",{\"1\":{\"142\":1}}],[\"本文只对ecma的内容进行简单的介绍\",{\"1\":{\"127\":1}}],[\"若无修改过则使用本地资源\",{\"1\":{\"867\":1}}],[\"若无则为null\",{\"1\":{\"587\":1}}],[\"若不改变this指向\",{\"1\":{\"845\":1}}],[\"若想实现数据与视图更新\",{\"1\":{\"714\":1}}],[\"若该函数作为属性值传给子组件的时候\",{\"1\":{\"514\":1}}],[\"若此时元素滑动达到最大值\",{\"1\":{\"291\":1}}],[\"若本地域名服务器的\",{\"1\":{\"142\":1}}],[\"若仍然没有命中\",{\"1\":{\"142\":1}}],[\"若没有命中\",{\"1\":{\"142\":1}}],[\"首屏加载块\",{\"1\":{\"908\":1}}],[\"首屏加载更快\",{\"1\":{\"908\":1}}],[\"首字节到达时间\",{\"1\":{\"883\":1}}],[\"首页\",{\"1\":{\"764\":2}}],[\"首次有意义内容绘制\",{\"1\":{\"886\":1}}],[\"首次互动延迟\",{\"1\":{\"881\":1}}],[\"首次内容渲染\",{\"1\":{\"877\":1,\"886\":1}}],[\"首次打开\",{\"1\":{\"837\":1}}],[\"首次显示页面\",{\"1\":{\"828\":1}}],[\"首次渲染大量dom时\",{\"1\":{\"423\":1}}],[\"首次加载应用\",{\"1\":{\"59\":1}}],[\"首部表在http\",{\"1\":{\"151\":1}}],[\"首部表\",{\"1\":{\"151\":1}}],[\"首部压缩\",{\"0\":{\"151\":1},\"1\":{\"148\":1}}],[\"首先看看applymiddlewares的源码\",{\"1\":{\"575\":1}}],[\"首先对基本类型进行比较\",{\"1\":{\"549\":1}}],[\"首先给出一个例子\",{\"1\":{\"519\":1}}],[\"首先给出一个示例\",{\"1\":{\"461\":1}}],[\"首先被这个统一的事件监听器处理\",{\"1\":{\"504\":1}}],[\"首先通过express启动一个app\",{\"1\":{\"449\":1}}],[\"首先\",{\"1\":{\"429\":1}}],[\"首先客户端通过url访问服务器建立ssl连接\",{\"1\":{\"231\":1}}],[\"首先会对资源进行解析\",{\"1\":{\"192\":1}}],[\"首先判断你输入的是一个合法的\",{\"1\":{\"187\":1}}],[\"首先本地域名服务器向根域名服务器发起请求\",{\"1\":{\"142\":1}}],[\"首先搜索浏览器的\",{\"1\":{\"142\":1}}],[\"接受数据输入\",{\"1\":{\"533\":1}}],[\"接受一个或多个函数作为输入\",{\"1\":{\"478\":1}}],[\"接受多个不同类型的值\",{\"1\":{\"368\":1}}],[\"接受者\",{\"1\":{\"163\":1}}],[\"接口权限\",{\"1\":{\"702\":1}}],[\"接口\",{\"1\":{\"351\":1,\"367\":1,\"639\":1,\"660\":1}}],[\"接到证书的客户端可使用数字证书认证机构的公开密钥\",{\"1\":{\"240\":1}}],[\"接到后直接去除首部\",{\"1\":{\"181\":1}}],[\"接收一个抽象语法树\",{\"1\":{\"753\":1}}],[\"接收三个参数\",{\"1\":{\"587\":1}}],[\"接收输入的数据并返回需要展示的内容\",{\"1\":{\"530\":1}}],[\"接收客户端请求\",{\"1\":{\"450\":1}}],[\"接收能力也正常\",{\"1\":{\"243\":1}}],[\"接收方去除报文首部后\",{\"1\":{\"183\":1}}],[\"接收端从消息队列读取\",{\"1\":{\"183\":1}}],[\"接收者\",{\"1\":{\"140\":1}}],[\"接着从末尾向内收缩比较\",{\"1\":{\"769\":1}}],[\"接着借助react\",{\"1\":{\"449\":1}}],[\"接着对for块不断创建环境\",{\"1\":{\"122\":1}}],[\"接着推送到执行上下文栈\",{\"1\":{\"106\":1}}],[\"所期望的\",{\"1\":{\"946\":1}}],[\"所在组件的vnode更新时调用\",{\"1\":{\"737\":1}}],[\"所面临的问题\",{\"1\":{\"427\":1}}],[\"所代表的结果\",{\"1\":{\"377\":1}}],[\"所有其他码位都编码为字符串的两个码位元素\",{\"1\":{\"1008\":1}}],[\"所有代码点都可以直接出现在字符串文本中\",{\"1\":{\"1008\":1}}],[\"所有中间件被放进了一个数组chain\",{\"1\":{\"575\":1}}],[\"所有事件都挂载在\",{\"1\":{\"505\":1}}],[\"所有的节点都是全新的\",{\"1\":{\"732\":1}}],[\"所有的li标签都需要进行修改\",{\"1\":{\"542\":1}}],[\"所有的\",{\"1\":{\"487\":1}}],[\"所有的数据通信是按次序进行的\",{\"1\":{\"153\":1}}],[\"所有这些\",{\"1\":{\"308\":1}}],[\"所传输的信息甚至可能经过很多通信子网\",{\"1\":{\"162\":1}}],[\"所需要的准确内容\",{\"1\":{\"140\":1}}],[\"所以渲染层存在多个webview线程\",{\"1\":{\"835\":1}}],[\"所以切换时页面需要重新加载\",{\"1\":{\"832\":1}}],[\"所以每次都会追踪他的变化\",{\"1\":{\"818\":1}}],[\"所以无论有没有constructor\",{\"1\":{\"627\":1}}],[\"所以在我们修改或者删除文件的时候\",{\"1\":{\"685\":1}}],[\"所以在实现团队协作的时候\",{\"1\":{\"684\":1}}],[\"所以在constructor中必须使用super\",{\"1\":{\"628\":1}}],[\"所以在不传递props且super的情况下\",{\"1\":{\"627\":1}}],[\"所以在子类constructor中\",{\"1\":{\"626\":1}}],[\"所以在传输上没有区别\",{\"1\":{\"217\":1}}],[\"所以他的主要作用是从父组件向子组件中传递数据\",{\"1\":{\"621\":1}}],[\"所以他自身的的事件仍然是可以触发的\",{\"1\":{\"69\":1}}],[\"所以他自身的事件不会触发\",{\"1\":{\"68\":1}}],[\"所以并不会进行覆盖现象\",{\"1\":{\"616\":1}}],[\"所以最终只加了一次\",{\"1\":{\"616\":1}}],[\"所以dispatch可以写成下述函数的形式\",{\"1\":{\"573\":1}}],[\"所以我们经常在组件顶部添加额外标签div\",{\"1\":{\"556\":1}}],[\"所以顶部要有一个公共标签\",{\"1\":{\"556\":1}}],[\"所以想要阻止不同时间段的冒泡行为\",{\"1\":{\"505\":1}}],[\"所以会先执行原生事件\",{\"1\":{\"505\":1}}],[\"所以这边的\",{\"1\":{\"479\":1}}],[\"所以这里建议都使用函数式的方式来创建组件\",{\"1\":{\"475\":1}}],[\"所以可以利用这一点\",{\"1\":{\"633\":1}}],[\"所以可以把props理解为从外部传入组件内部的数据\",{\"1\":{\"621\":1}}],[\"所以可以得到\",{\"1\":{\"421\":1}}],[\"所以可以使用\",{\"1\":{\"303\":1}}],[\"所以需要尽早检查\",{\"1\":{\"359\":1}}],[\"所以非常适合在使用对象之前做一些初始化工作\",{\"1\":{\"339\":1}}],[\"所以指令只接受字面量的值\",{\"1\":{\"314\":1}}],[\"所以永远不会发生\",{\"1\":{\"253\":1}}],[\"所以大多数语言提供自动内存管理\",{\"1\":{\"247\":1}}],[\"所以\",{\"1\":{\"238\":1,\"459\":1,\"479\":1,\"520\":1,\"589\":1,\"607\":1}}],[\"所以不能用来传递敏感信息\",{\"1\":{\"216\":1}}],[\"所以不建议使用百分比来实现响应式\",{\"1\":{\"57\":1}}],[\"所以两者的帧结构也有很大的区别\",{\"1\":{\"198\":1}}],[\"所以移动端常用该形式\",{\"1\":{\"90\":1}}],[\"所以兼容浏览器范围是pc端的webkit内核的浏览器\",{\"1\":{\"90\":1}}],[\"所以向上偏移到最右侧\",{\"1\":{\"80\":1}}],[\"所以向上偏移到左侧\",{\"1\":{\"80\":1}}],[\"所以宽高会按照我们的设置来显示\",{\"1\":{\"25\":1}}],[\"所以上面问题中\",{\"1\":{\"16\":1}}],[\"迭代查询\",{\"1\":{\"140\":1}}],[\"作为用户在这个小程序的唯一标识\",{\"1\":{\"829\":1}}],[\"作为webcomponents技术套件的一部分\",{\"1\":{\"804\":1}}],[\"作为模板编译成render函数\",{\"1\":{\"775\":1}}],[\"作为最顶层组件包裹其他组件\",{\"1\":{\"606\":1}}],[\"作为componentdidupdate第三个参数传入\",{\"1\":{\"441\":1}}],[\"作为动态的工作单元来说\",{\"1\":{\"429\":1}}],[\"作为静态的数据结构来说\",{\"1\":{\"429\":1}}],[\"作为类名\",{\"1\":{\"336\":1}}],[\"作为在客户端读取文件的偏移量\",{\"1\":{\"283\":1}}],[\"作为函数调用\",{\"1\":{\"251\":1}}],[\"作为自己\",{\"1\":{\"244\":1}}],[\"作为一段一般不超过\",{\"1\":{\"227\":1}}],[\"作为一种面向有连接的协议\",{\"1\":{\"182\":1}}],[\"作为\",{\"1\":{\"164\":1,\"244\":1,\"543\":1}}],[\"作为请求的接收者一定要给\",{\"1\":{\"140\":1}}],[\"作用是将所有的中间件组成一个数组\",{\"1\":{\"572\":1}}],[\"作用是生成一个虚拟dom对象\",{\"1\":{\"538\":1}}],[\"作用是设置文本不换行\",{\"1\":{\"87\":1}}],[\"作用是设置背景图像是否固定或者随着页面的其余部分滚动\",{\"1\":{\"7\":1}}],[\"作用域插槽\",{\"1\":{\"806\":1}}],[\"作用域类型\",{\"1\":{\"270\":1}}],[\"作用域\",{\"0\":{\"401\":1},\"2\":{\"126\":1}}],[\"作用域的分析\",{\"0\":{\"118\":1}}],[\"作用域链例子\",{\"1\":{\"111\":1}}],[\"作用域分析\",{\"0\":{\"111\":1}}],[\"作用\",{\"1\":{\"95\":2,\"825\":1}}],[\"查找\",{\"1\":{\"883\":1}}],[\"查找成功则返回结果\",{\"1\":{\"142\":1}}],[\"查看插件页面\",{\"1\":{\"952\":1}}],[\"查看本地和远程所有的分支\",{\"1\":{\"690\":1}}],[\"查看本地所有分支\",{\"1\":{\"690\":1}}],[\"查看远程所有的分支\",{\"1\":{\"690\":1}}],[\"查看当前分支状态\",{\"1\":{\"689\":1}}],[\"查看当前代码add后\",{\"1\":{\"689\":1}}],[\"查看现在commit提交后\",{\"1\":{\"689\":1}}],[\"查看其他位置\",{\"1\":{\"209\":1}}],[\"查看响应头的\",{\"1\":{\"192\":1}}],[\"查看响应头的信息\",{\"1\":{\"192\":1}}],[\"查询或添加语句插入到应用的输入参数中\",{\"1\":{\"301\":1}}],[\"查询结果等超文本\",{\"1\":{\"230\":1}}],[\"查询\",{\"1\":{\"186\":1,\"466\":1}}],[\"查询过程\",{\"0\":{\"142\":1}}],[\"查询的方式有两种\",{\"1\":{\"140\":1}}],[\"查询方式\",{\"0\":{\"140\":1}}],[\"查表得知地理位置\",{\"1\":{\"134\":1}}],[\"三元运算符是非关联的\",{\"1\":{\"357\":1}}],[\"三元运算符是从左到右执行的\",{\"1\":{\"357\":1}}],[\"三元运算符的例子\",{\"1\":{\"357\":1}}],[\"三元表达式\",{\"0\":{\"357\":1}}],[\"三种php标记\",{\"1\":{\"330\":1,\"386\":1}}],[\"三者之间存在着一定的关系\",{\"1\":{\"258\":1}}],[\"三次握手\",{\"1\":{\"243\":1}}],[\"三级域名\",{\"1\":{\"139\":1}}],[\"三栏布局按照左中右的顺序进行排列\",{\"1\":{\"74\":1}}],[\"三栏布局\",{\"0\":{\"77\":1},\"1\":{\"74\":1}}],[\"域名服务器协议\",{\"1\":{\"176\":1}}],[\"域名缓存\",{\"0\":{\"141\":1}}],[\"域名是一个具有层次的结构\",{\"1\":{\"139\":1}}],[\"域名\",{\"0\":{\"139\":1},\"1\":{\"138\":1}}],[\"域名系统\",{\"1\":{\"138\":1}}],[\"倍以上\",{\"1\":{\"135\":1}}],[\"9和a\",{\"1\":{\"685\":1}}],[\"98\",{\"1\":{\"605\":1}}],[\"999\",{\"1\":{\"224\":1}}],[\"9999px\",{\"1\":{\"71\":2}}],[\"9\",{\"1\":{\"223\":2,\"303\":1,\"994\":1,\"1011\":2}}],[\"90\",{\"1\":{\"135\":1}}],[\"直出有限\",{\"1\":{\"908\":1}}],[\"直接返回构建一个完成记录的结果时\",{\"1\":{\"973\":1}}],[\"直接返回应用completion\",{\"1\":{\"973\":1}}],[\"直接加载这些资源\",{\"1\":{\"870\":1}}],[\"直接拉取最新的资源\",{\"1\":{\"866\":1}}],[\"直接操作原生dom或调用子组件方法\",{\"1\":{\"811\":1}}],[\"直接patchvnode\",{\"1\":{\"732\":2}}],[\"直接删除dom\",{\"1\":{\"732\":1}}],[\"直接新建所有的新dom\",{\"1\":{\"732\":1}}],[\"直接更新文本内容\",{\"1\":{\"732\":1}}],[\"直接创建新节点\",{\"1\":{\"732\":1}}],[\"直接创建新的真实节点e\",{\"1\":{\"731\":1}}],[\"直接调用patchvnode去处理这两个节点\",{\"1\":{\"732\":1}}],[\"直接createelm新建节点\",{\"1\":{\"732\":1}}],[\"直接触发旧节点的destory钩子\",{\"1\":{\"732\":1}}],[\"直接拿到之前保存的元素对象即可\",{\"1\":{\"579\":1}}],[\"直接获取\",{\"1\":{\"519\":1}}],[\"直接在组件中书写css样式\",{\"1\":{\"485\":1}}],[\"直接一个值\",{\"1\":{\"349\":1}}],[\"直接使用缓存中的数据\",{\"1\":{\"212\":1}}],[\"直到响应的第一个字节到达\",{\"1\":{\"883\":1}}],[\"直到需要时才进行加载\",{\"1\":{\"860\":1}}],[\"直到目标返回页\",{\"1\":{\"832\":1}}],[\"直到碰到下一个开始标记\",{\"1\":{\"331\":1}}],[\"直到条件达成或循环终止条件\",{\"1\":{\"122\":1}}],[\"直至找到属性或到达原型链的末尾\",{\"1\":{\"267\":1}}],[\"直连用户\",{\"1\":{\"135\":1}}],[\"直连源站\",{\"1\":{\"135\":1}}],[\"分开\",{\"1\":{\"949\":1}}],[\"分为以下两种情况\",{\"1\":{\"732\":1}}],[\"分支更名\",{\"1\":{\"690\":1}}],[\"分支操作\",{\"0\":{\"690\":1}}],[\"分布式版本管理系统每个计算机都有一个完整仓库\",{\"1\":{\"681\":1}}],[\"分布式版本控制系统的客户端并不只是提取最新版本的文件快照\",{\"1\":{\"684\":1}}],[\"分布式版本控制系统\",{\"1\":{\"676\":1}}],[\"分发\",{\"1\":{\"575\":1}}],[\"分析事件执行顺序\",{\"1\":{\"505\":1}}],[\"分批完成\",{\"1\":{\"429\":1}}],[\"分配给\",{\"1\":{\"383\":1}}],[\"分配负整数\",{\"1\":{\"383\":1}}],[\"分割数据块\",{\"1\":{\"282\":1}}],[\"分片上传\",{\"0\":{\"281\":1,\"282\":1}}],[\"分类\",{\"0\":{\"206\":1,\"224\":1,\"806\":1}}],[\"分解为多个tcp报文段传输后\",{\"1\":{\"183\":1}}],[\"分成一级缓存节点和二级缓存节点\",{\"1\":{\"135\":1}}],[\"分别为\",{\"1\":{\"496\":1}}],[\"分别对应\",{\"1\":{\"369\":1}}],[\"分别返回一个小于\",{\"1\":{\"356\":1}}],[\"分别换成\",{\"1\":{\"312\":1}}],[\"分别是background\",{\"1\":{\"42\":1}}],[\"分别是\",{\"1\":{\"41\":1,\"688\":1}}],[\"分别如下\",{\"1\":{\"13\":1}}],[\"必须联网\",{\"1\":{\"678\":1}}],[\"必须先代用super才能引用this\",{\"1\":{\"626\":1}}],[\"必须通过setstate方法来告知react组件state已经发生了改变\",{\"1\":{\"612\":1}}],[\"必须通过引用传递\",{\"1\":{\"321\":1}}],[\"必须是目标元素的父级元素\",{\"1\":{\"285\":1}}],[\"必须自己用free方法释放内存\",{\"1\":{\"247\":1}}],[\"必须及时释放不再用到的内存\",{\"1\":{\"247\":1}}],[\"必须设置websocket\",{\"1\":{\"200\":1}}],[\"必须设置upgrade\",{\"1\":{\"200\":1}}],[\"必须用代理的方式回源站取\",{\"1\":{\"135\":1}}],[\"必须规定两项内容\",{\"1\":{\"49\":1}}],[\"回调函数参数会传入一个元素对象\",{\"1\":{\"582\":1}}],[\"回调函数中可以返回一个清除函数\",{\"1\":{\"520\":1}}],[\"回调函数不止可以是简单函数\",{\"1\":{\"391\":1}}],[\"回调可以通过\",{\"1\":{\"391\":1}}],[\"回车\",{\"1\":{\"380\":1,\"1008\":1}}],[\"回转给目标应用系统\",{\"1\":{\"287\":1}}],[\"回溯开始计算\",{\"1\":{\"253\":1}}],[\"回源的时候二级缓存只找一级缓存\",{\"1\":{\"135\":1}}],[\"回源次数与所有访问次数之比\",{\"1\":{\"135\":1}}],[\"回源率\",{\"1\":{\"135\":1}}],[\"回到上面的例子里\",{\"1\":{\"18\":1}}],[\"缓冲区是存在dom树中\",{\"1\":{\"920\":1}}],[\"缓冲区域\",{\"1\":{\"920\":1}}],[\"缓冲区构造器属性globalthis\",{\"1\":{\"101\":1}}],[\"缓存优化\",{\"1\":{\"942\":1}}],[\"缓存管理\",{\"1\":{\"941\":1}}],[\"缓存时间短\",{\"1\":{\"871\":1}}],[\"缓存时间长\",{\"1\":{\"871\":1}}],[\"缓存资源来减少阻塞和服务器请求\",{\"1\":{\"856\":1}}],[\"缓存资源等等\",{\"1\":{\"192\":1}}],[\"缓存当前页面\",{\"1\":{\"832\":1}}],[\"缓存高频事件处理函数\",{\"1\":{\"811\":1}}],[\"缓存的组件被激活时\",{\"1\":{\"765\":1}}],[\"缓存区\",{\"1\":{\"182\":1}}],[\"缓存没有命中\",{\"1\":{\"142\":1}}],[\"缓存中维护一张域名与\",{\"1\":{\"142\":1}}],[\"缓存\",{\"1\":{\"142\":3,\"764\":2},\"2\":{\"874\":1,\"924\":1}}],[\"缓存里没有\",{\"1\":{\"135\":1}}],[\"缓存系统也可以划分出层次\",{\"1\":{\"135\":1}}],[\"缓存系统会有选择地缓存那些最常用的那些资源\",{\"1\":{\"135\":1}}],[\"缓存系统是\",{\"1\":{\"135\":1}}],[\"缓存代理\",{\"0\":{\"135\":1}}],[\"响应后执行操作\",{\"1\":{\"811\":1}}],[\"响应链中的所有缓存机制\",{\"1\":{\"224\":1}}],[\"响应正文\",{\"1\":{\"191\":1}}],[\"响应头\",{\"1\":{\"191\":1}}],[\"响应请求\",{\"0\":{\"191\":1},\"1\":{\"186\":1}}],[\"响应时间等\",{\"1\":{\"134\":1}}],[\"响应式数据驱动视图\",{\"1\":{\"811\":1}}],[\"响应式系统基于proxy\",{\"1\":{\"813\":1}}],[\"响应式系统\",{\"0\":{\"819\":1},\"1\":{\"774\":1}}],[\"响应式截断\",{\"1\":{\"89\":1}}],[\"响应式设计的基本原理是通过媒体查询检测不同的设备屏幕尺寸做处理\",{\"1\":{\"55\":1}}],[\"响应式网站常见特点\",{\"1\":{\"54\":1}}],[\"响应式网站设计\",{\"1\":{\"54\":1}}],[\"响应式\",{\"0\":{\"54\":1}}],[\"带来更多特性\",{\"1\":{\"946\":1}}],[\"带来了跨平台的能力\",{\"1\":{\"423\":1}}],[\"带来非常出色的视觉体验\",{\"1\":{\"5\":1}}],[\"带有\",{\"1\":{\"386\":1}}],[\"带宽\",{\"1\":{\"134\":1}}],[\"服务不可用\",{\"1\":{\"211\":1}}],[\"服务器\",{\"1\":{\"400\":1,\"684\":1}}],[\"服务器上解析执行进行的攻击\",{\"1\":{\"301\":1}}],[\"服务器端返回\",{\"1\":{\"283\":1}}],[\"服务器自己的发送\",{\"1\":{\"243\":1}}],[\"服务器收到\",{\"1\":{\"243\":1}}],[\"服务器收到客户端的\",{\"1\":{\"243\":1}}],[\"服务器会核对资源的etag与if\",{\"1\":{\"869\":1}}],[\"服务器会核对资源的修改时间是否一致\",{\"1\":{\"868\":1}}],[\"服务器会将这份由数字证书认证机构颁发的数字证书发送给客户端\",{\"1\":{\"240\":1}}],[\"服务器会顺便把一些客户端需要的资源一起推送到客户端\",{\"1\":{\"152\":1}}],[\"服务器的行为使其可以容纳多用户\",{\"1\":{\"680\":1}}],[\"服务器的公开密钥是值得信赖的\",{\"1\":{\"240\":1}}],[\"服务器的运营人员向数字证书认证机构提出公开密钥的申请\",{\"1\":{\"240\":1}}],[\"服务器的域名\",{\"1\":{\"224\":1}}],[\"服务器利用会话密钥加密与客户端之间的通信\",{\"1\":{\"231\":1}}],[\"服务器利用自己的私钥解密出会话密钥\",{\"1\":{\"231\":1}}],[\"服务器处理完客户的请求\",{\"1\":{\"230\":1}}],[\"服务器处理长\",{\"1\":{\"218\":1}}],[\"服务器模式\",{\"1\":{\"230\":1}}],[\"服务器通过\",{\"1\":{\"224\":1}}],[\"服务器和浏览器上发现非标准的头字段\",{\"1\":{\"223\":1}}],[\"服务器响应100\",{\"1\":{\"220\":1}}],[\"服务器响应200\",{\"1\":{\"220\":2}}],[\"服务器停机维护时\",{\"1\":{\"212\":1}}],[\"服务器找不到资源时\",{\"1\":{\"212\":1}}],[\"服务器找不到请求的网页\",{\"1\":{\"210\":1}}],[\"服务器目前无法使用\",{\"1\":{\"211\":1}}],[\"服务器目前从不同位置的网页响应请求\",{\"1\":{\"209\":2}}],[\"服务器作为网关或代理\",{\"1\":{\"211\":2}}],[\"服务器无法识别请求方法时可能会返回此代码\",{\"1\":{\"211\":1}}],[\"服务器遇到错误\",{\"1\":{\"211\":1}}],[\"服务器内部错误\",{\"1\":{\"211\":1}}],[\"服务器等候请求时发生超时\",{\"1\":{\"210\":1}}],[\"服务器拒绝请求\",{\"1\":{\"210\":1}}],[\"服务器不支持请求中所用的\",{\"1\":{\"211\":1}}],[\"服务器不具备完成请求的功能\",{\"1\":{\"211\":1}}],[\"服务器不理解请求的语法\",{\"1\":{\"210\":1}}],[\"服务器不跟踪每个客户也不记录过去的请求\",{\"1\":{\"146\":1}}],[\"服务器返回此代码\",{\"1\":{\"209\":1}}],[\"服务器返回此响应\",{\"1\":{\"209\":1}}],[\"服务器可能返回此响应\",{\"1\":{\"210\":1}}],[\"服务器可根据请求者\",{\"1\":{\"209\":1}}],[\"服务器可执行多种操作\",{\"1\":{\"209\":1}}],[\"服务器成功处理了部分请求\",{\"1\":{\"208\":1}}],[\"服务器成功处理请求\",{\"1\":{\"208\":2}}],[\"服务器已成功处理请求\",{\"1\":{\"208\":1}}],[\"服务器已经接收请求\",{\"1\":{\"208\":1}}],[\"服务器根据客户端的请求切换协议\",{\"1\":{\"207\":1}}],[\"服务器必须在请求完成后向客户端发送一个最终响应\",{\"1\":{\"207\":1}}],[\"服务器只有处理完一个请求\",{\"1\":{\"153\":1}}],[\"服务器推送\",{\"0\":{\"152\":1},\"1\":{\"148\":1,\"153\":1}}],[\"服务器完成请求处理后立即断开tcp连接\",{\"1\":{\"146\":1}}],[\"服务能力\",{\"1\":{\"134\":1}}],[\"服务端判断无效登陆状态时再返回需重新执行登录过程的消息给小程序\",{\"1\":{\"830\":1}}],[\"服务端比对session对应的记录\",{\"1\":{\"829\":1}}],[\"服务端渲染\",{\"0\":{\"560\":1},\"1\":{\"500\":1,\"554\":1,\"560\":1}}],[\"服务端渲染完成页面结构\",{\"1\":{\"449\":1}}],[\"服务端根据数据上传是否完整\",{\"1\":{\"282\":1}}],[\"服务端在收到客户端断开连接fin报文后\",{\"1\":{\"244\":1}}],[\"服务端的接收\",{\"1\":{\"243\":1}}],[\"服务端的接收能力是正常的\",{\"1\":{\"243\":1}}],[\"服务端发包\",{\"1\":{\"243\":1}}],[\"服务端收到\",{\"1\":{\"244\":2}}],[\"服务端收到了\",{\"1\":{\"243\":2}}],[\"服务端收到客户端请求后\",{\"1\":{\"231\":1}}],[\"服务端返回的数据格式\",{\"1\":{\"200\":1}}],[\"服务端\",{\"1\":{\"100\":1}}],[\"健康状况\",{\"1\":{\"134\":1}}],[\"找到项目的起始点\",{\"1\":{\"932\":1}}],[\"找到入口文件\",{\"1\":{\"932\":1}}],[\"找到父级条件节点\",{\"1\":{\"760\":1}}],[\"找到对应的真实dom\",{\"1\":{\"733\":1}}],[\"找到暂存区域的文件\",{\"1\":{\"685\":1}}],[\"找到<div\",{\"1\":{\"421\":1}}],[\"找出sql漏洞的注入点\",{\"1\":{\"301\":1}}],[\"找出那些不在继续使用的变量\",{\"1\":{\"248\":1}}],[\"找不到则创建为隐式的全局变量\",{\"1\":{\"251\":1}}],[\"找负载较轻的节点\",{\"1\":{\"134\":1}}],[\"找相同网络的边缘节点\",{\"1\":{\"134\":1}}],[\"找相对最近的边缘节点\",{\"1\":{\"134\":1}}],[\"最佳实践\",{\"0\":{\"848\":1,\"851\":1,\"895\":1}}],[\"最初是为了更好地管理linux内核开发而设计\",{\"1\":{\"684\":1}}],[\"最小化element的移动\",{\"1\":{\"768\":1}}],[\"最小粒度的更新\",{\"1\":{\"546\":1}}],[\"最小值可以用常量\",{\"1\":{\"372\":1}}],[\"最常见的hooks有如下\",{\"1\":{\"518\":1}}],[\"最简单的事件绑定如下\",{\"1\":{\"508\":1}}],[\"最好传递\",{\"1\":{\"584\":1}}],[\"最好符合一贯的css风格特点\",{\"1\":{\"483\":1}}],[\"最好在文件末尾删除\",{\"1\":{\"330\":1}}],[\"最基本的高阶组件的编写模板如下\",{\"1\":{\"479\":1}}],[\"最新\",{\"1\":{\"461\":1}}],[\"最大内容渲染\",{\"1\":{\"879\":1}}],[\"最大整数键名目前不需要存在于\",{\"1\":{\"384\":1}}],[\"最大值可以用常量\",{\"1\":{\"372\":1}}],[\"最经常用作回调函数\",{\"1\":{\"326\":1}}],[\"最多能表示的精度\",{\"1\":{\"303\":1}}],[\"最多可以表达的位数是2^53=9007199254740992\",{\"1\":{\"303\":1}}],[\"最快的绑定速度\",{\"1\":{\"273\":1}}],[\"最终发布上线时如果web应用和接口服务器不在一起仍会跨域\",{\"1\":{\"723\":1}}],[\"最终可以通过一系列操作使这棵树映射到真实环境上\",{\"1\":{\"708\":1}}],[\"最终打印结果为hello\",{\"1\":{\"614\":1}}],[\"最终转化成真实dom\",{\"1\":{\"589\":1}}],[\"最终转换为真实dom\",{\"1\":{\"539\":1}}],[\"最终构造成一个虚拟dom对象\",{\"1\":{\"539\":1}}],[\"最终都会通过renderdom\",{\"1\":{\"537\":1}}],[\"最终的代码简单易于维护\",{\"1\":{\"532\":1}}],[\"最终会被渲染成a元素\",{\"1\":{\"596\":1}}],[\"最终会被babel编译为合法的js语句调用\",{\"1\":{\"530\":1}}],[\"最终会通过babel转化成react\",{\"1\":{\"473\":1}}],[\"最终创建出一个组件\",{\"1\":{\"488\":1}}],[\"最终将这个js对象一次性attach到dom树上\",{\"1\":{\"422\":1,\"709\":1}}],[\"最终执行10次流程\",{\"1\":{\"422\":1}}],[\"最终\",{\"1\":{\"188\":1}}],[\"最终产出的是一个应用数据包\",{\"1\":{\"177\":1}}],[\"最终导致\",{\"1\":{\"146\":1}}],[\"最终得到该域名对应的\",{\"1\":{\"142\":1}}],[\"最近的\",{\"1\":{\"132\":1}}],[\"最后以\",{\"1\":{\"948\":1}}],[\"最后\",{\"1\":{\"932\":1,\"946\":1}}],[\"最后到浏览器绘制下一个帧为止\",{\"1\":{\"882\":1}}],[\"最后执行store\",{\"1\":{\"575\":1}}],[\"最后真正执行\",{\"1\":{\"505\":1}}],[\"最后可以使用\",{\"1\":{\"348\":1}}],[\"最后得到三个列表\",{\"1\":{\"107\":1}}],[\"最后对脚本语句求值\",{\"1\":{\"106\":1}}],[\"依此类推\",{\"1\":{\"946\":1}}],[\"依赖解析\",{\"1\":{\"941\":1}}],[\"依赖关系\",{\"0\":{\"936\":1}}],[\"依赖图\",{\"1\":{\"931\":1}}],[\"依赖收集与触发更新\",{\"1\":{\"811\":1}}],[\"依赖新dom的操作\",{\"1\":{\"779\":1}}],[\"依赖管理\",{\"1\":{\"689\":1}}],[\"依次执行\",{\"1\":{\"572\":1}}],[\"依然需要使用内联样式的方式\",{\"1\":{\"487\":1}}],[\"依然是一个整体一样\",{\"1\":{\"46\":1}}],[\"依靠部署在各地的边缘服务器\",{\"1\":{\"132\":1}}],[\"全等\",{\"1\":{\"356\":1,\"361\":1}}],[\"全双工\",{\"0\":{\"197\":1},\"1\":{\"183\":1}}],[\"全称\",{\"1\":{\"132\":1}}],[\"全局只触发一次\",{\"1\":{\"824\":1}}],[\"全局混用会影响到每一个组件实例\",{\"1\":{\"790\":1}}],[\"全局混入\",{\"0\":{\"790\":1}}],[\"全局混入来添加一些组件选项\",{\"1\":{\"717\":1}}],[\"全局状态预加载\",{\"1\":{\"774\":1}}],[\"全局状态管理\",{\"1\":{\"696\":2}}],[\"全局守卫里\",{\"1\":{\"702\":1}}],[\"全局路由守卫里\",{\"1\":{\"702\":3}}],[\"全局变量\",{\"1\":{\"696\":1}}],[\"全局组件通信\",{\"1\":{\"696\":1}}],[\"全局\",{\"1\":{\"270\":1}}],[\"全局声明实例化\",{\"1\":{\"118\":1}}],[\"全局声明实例化以后的调用栈\",{\"1\":{\"106\":1,\"107\":1}}],[\"全局作用域中this返回的值\",{\"1\":{\"117\":1}}],[\"全局环境记录用于表示所有在同一个realm中处理的ecmascript\",{\"1\":{\"117\":1}}],[\"全局环境记录器\",{\"1\":{\"96\":1,\"104\":1,\"112\":1}}],[\"全局代码中的函数声明\",{\"1\":{\"117\":1}}],[\"全局代码\",{\"1\":{\"103\":1,\"123\":1}}],[\"全局对象\",{\"1\":{\"96\":1,\"117\":1,\"270\":1}}],[\"该指令将整个代码块至于严格模式\",{\"1\":{\"1013\":1}}],[\"该位置后面跟着的内容必须不属于\",{\"1\":{\"997\":1}}],[\"该位置后面跟着的内容必须属于\",{\"1\":{\"997\":1}}],[\"该位置后面不能是\",{\"1\":{\"997\":1}}],[\"该位置后面必须是\",{\"1\":{\"997\":1}}],[\"该数据应该在服务端校验登陆状态和约定时间做对比\",{\"1\":{\"830\":1}}],[\"该占位符可以在后期使用自己的标记语言填充\",{\"1\":{\"804\":1}}],[\"该节点包含创建dom节点所需信息\",{\"1\":{\"758\":1}}],[\"该组件下api提供给子组件使用\",{\"1\":{\"608\":1}}],[\"该回调将在组件被渲染或更新之后被执行\",{\"1\":{\"538\":1}}],[\"该函数负责具体配置项的合并策略\",{\"1\":{\"792\":1}}],[\"该函数会在\",{\"1\":{\"579\":1}}],[\"该函数组件等价于的类组件如下\",{\"1\":{\"519\":1}}],[\"该函数接受一个组件wrappedcomponent作为参数\",{\"1\":{\"478\":1}}],[\"该类必须继承react\",{\"1\":{\"454\":1}}],[\"该周期函数在render后执行\",{\"1\":{\"441\":1}}],[\"该阶段的函数主要为如下方法\",{\"1\":{\"439\":1}}],[\"该方法的跳转不会缓存页面\",{\"1\":{\"832\":1}}],[\"该方法返回的一个snapshot值\",{\"1\":{\"441\":1}}],[\"该方法需要返回一个新的对象作为新的state或者返回null表示state状态不需要更新\",{\"1\":{\"436\":1}}],[\"该方法是新增的生命周期方法\",{\"1\":{\"436\":1}}],[\"该实现过程是基于\",{\"1\":{\"429\":1}}],[\"该fiber对应的组件产生的update会存放在这个队列里面\",{\"1\":{\"428\":1}}],[\"该元素的更新操作队列\",{\"1\":{\"428\":1}}],[\"该关键字可以与变量列表或单个变量一起使用\",{\"1\":{\"402\":1}}],[\"该文件中的代码继承了包含语句所在行的变量作用域\",{\"1\":{\"401\":1}}],[\"该值也被称为机器极小值\",{\"1\":{\"376\":1}}],[\"该表达式可能产生的任何错误诊断都被抑制\",{\"1\":{\"359\":1}}],[\"该功能则是被默认禁用的\",{\"1\":{\"330\":1}}],[\"该定时器仍会存在\",{\"1\":{\"251\":1}}],[\"该资源未被修改的情况下\",{\"1\":{\"224\":1}}],[\"该浏览器想要优先使用的连接类型\",{\"1\":{\"224\":1}}],[\"该信息让接收端能够判断报文中的比特是否在途中已被改变\",{\"1\":{\"165\":1}}],[\"该首部将被接收端的运输层使用\",{\"1\":{\"165\":1}}],[\"该层对应于\",{\"1\":{\"172\":1}}],[\"该层主要是和硬件有关\",{\"1\":{\"164\":1}}],[\"该层的主要任务是确定与传输媒体的接口的一些特性\",{\"1\":{\"164\":1}}],[\"该层提供了数据交换的定界和同步功能\",{\"1\":{\"160\":1}}],[\"该层提供的服务主要包括数据压缩\",{\"1\":{\"159\":1}}],[\"该层协议定义了应用进程之间的交互规则\",{\"1\":{\"158\":1}}],[\"该连接可以承载任意数量的双向数据流\",{\"1\":{\"150\":1}}],[\"该产生式是以下的缩写\",{\"1\":{\"129\":1}}],[\"该全局环境范围内加载的所有ecmascript代码\",{\"1\":{\"96\":1}}],[\"显然v\",{\"1\":{\"752\":1}}],[\"显然他是语法参数\",{\"1\":{\"129\":1}}],[\"显示页面\",{\"1\":{\"828\":1}}],[\"显示隐藏\",{\"1\":{\"811\":1}}],[\"显示绑定\",{\"0\":{\"271\":1},\"1\":{\"270\":1}}],[\"显示在屏幕上\",{\"1\":{\"192\":1}}],[\"显示省略符号来代表被修剪的文本\",{\"1\":{\"47\":1,\"87\":1}}],[\"显示文本和图像\",{\"1\":{\"15\":1}}],[\"非八进制十进制转义\",{\"1\":{\"1011\":1,\"1012\":1}}],[\"非行终结符\",{\"1\":{\"1011\":1}}],[\"非转义\",{\"1\":{\"1011\":1}}],[\"非转义字符\",{\"1\":{\"1011\":1}}],[\"非终结\",{\"1\":{\"992\":1}}],[\"非终结符号为斜体类型\",{\"1\":{\"992\":1}}],[\"非终结符号在ecma中显示为斜体类型\",{\"1\":{\"128\":1}}],[\"非同源请求\",{\"1\":{\"722\":1}}],[\"非关系组件间通信\",{\"1\":{\"696\":1}}],[\"非关系组件传递\",{\"0\":{\"417\":1},\"1\":{\"412\":1}}],[\"非图形的各种逻辑均抽象为一个统一的概念来实现的开发模式\",{\"1\":{\"717\":1}}],[\"非图形的各种逻辑均抽象为一个统一的概念\",{\"1\":{\"470\":1}}],[\"非受控组件\",{\"0\":{\"466\":1},\"1\":{\"466\":1}}],[\"非法变量名\",{\"1\":{\"408\":1}}],[\"非严格模式\",{\"1\":{\"270\":2}}],[\"非严格模式函数标识符会被实例化并初始化为undefined\",{\"1\":{\"107\":1}}],[\"非对称加密\",{\"0\":{\"236\":1},\"1\":{\"234\":1,\"236\":1}}],[\"非授权信息\",{\"1\":{\"208\":1}}],[\"省略语义\",{\"1\":{\"127\":1}}],[\"大约有四个阶段\",{\"1\":{\"773\":1}}],[\"大部分是由dom操作引起的\",{\"1\":{\"709\":1}}],[\"大部分时候推荐使用受控组件来实现表单\",{\"1\":{\"467\":1}}],[\"大量的样式\",{\"1\":{\"485\":1}}],[\"大量的概念横跨整个文档\",{\"1\":{\"127\":1}}],[\"大多数情况下\",{\"1\":{\"546\":1}}],[\"大多数组件可以写为无状态组件\",{\"1\":{\"472\":1}}],[\"大多数\",{\"1\":{\"409\":1}}],[\"大于0的\",{\"1\":{\"356\":1}}],[\"大于0为向下滑动\",{\"1\":{\"291\":1}}],[\"大于或者等于\",{\"1\":{\"356\":1}}],[\"大于等于\",{\"1\":{\"356\":1}}],[\"大于\",{\"1\":{\"356\":2}}],[\"大文件断点续传\",{\"0\":{\"281\":1}}],[\"大家最常见的就是github\",{\"1\":{\"74\":1}}],[\"概念\",{\"1\":{\"127\":1}}],[\"阅读ecma有以下难点\",{\"1\":{\"127\":1}}],[\"闭包函数也可以接受常规参数\",{\"1\":{\"326\":1}}],[\"闭包可以从父作用域中继承变量\",{\"1\":{\"326\":1}}],[\"闭包内引用obj\",{\"1\":{\"251\":1}}],[\"闭包\",{\"0\":{\"124\":1},\"1\":{\"760\":1}}],[\"碰撞\",{\"1\":{\"123\":1}}],[\"普通\",{\"1\":{\"949\":1}}],[\"普通调用\",{\"1\":{\"270\":2}}],[\"普通参数\",{\"1\":{\"123\":1}}],[\"普通情况用在块级元素的外层隐藏内部溢出元素\",{\"1\":{\"87\":1}}],[\"复选框和单选按钮\",{\"1\":{\"881\":1}}],[\"复制childval\",{\"1\":{\"793\":1}}],[\"复制parentval\",{\"1\":{\"793\":1}}],[\"复制上一个记录器中的绑定和值\",{\"1\":{\"122\":1}}],[\"复合类型\",{\"0\":{\"368\":1}}],[\"复杂对象属性监控\",{\"1\":{\"811\":1}}],[\"复杂业务场景下\",{\"1\":{\"546\":1}}],[\"复杂计算的函数\",{\"1\":{\"279\":1}}],[\"复杂度\",{\"1\":{\"253\":1}}],[\"复杂度为o\",{\"1\":{\"253\":1}}],[\"复杂动画则是多个简单动画的组合\",{\"1\":{\"10\":1}}],[\"复用tcp连接\",{\"1\":{\"149\":1}}],[\"恢复组件状态\",{\"1\":{\"782\":1}}],[\"恢复后也可以复用之前的中间状态\",{\"1\":{\"429\":1}}],[\"恢复词法环境为oldenv\",{\"1\":{\"122\":1}}],[\"恢复与此执行上下文的关联代码所需的任何状态\",{\"1\":{\"95\":1}}],[\"返回这个完成记录\",{\"1\":{\"970\":1}}],[\"返回上一级或多级页面\",{\"1\":{\"832\":1}}],[\"返回上一个页面\",{\"1\":{\"828\":1}}],[\"返回到首页\",{\"1\":{\"764\":1}}],[\"返回列表页\",{\"1\":{\"764\":1}}],[\"返回原来值\",{\"1\":{\"699\":1}}],[\"返回其联合类型\",{\"1\":{\"645\":1}}],[\"返回的值传递给normalcompletion\",{\"1\":{\"973\":1}}],[\"返回的时候跳转到首页\",{\"1\":{\"832\":1}}],[\"返回的组件实例\",{\"1\":{\"578\":1}}],[\"返回的不再是\",{\"1\":{\"133\":1}}],[\"返回真实dom节点\",{\"1\":{\"538\":2}}],[\"返回加工过的新组件enhancedcomponent\",{\"1\":{\"478\":1}}],[\"返回html\",{\"1\":{\"449\":1}}],[\"返回值是一个数组\",{\"1\":{\"519\":1}}],[\"返回值是一个对象\",{\"1\":{\"421\":1}}],[\"返回值是一个domrect对象\",{\"1\":{\"285\":1}}],[\"返回数组中的\",{\"1\":{\"359\":1}}],[\"返回数据\",{\"1\":{\"220\":1}}],[\"返回类型在\",{\"1\":{\"326\":1}}],[\"返回类型声明必须放在\",{\"1\":{\"326\":1}}],[\"返回本次分片上传唯一标识\",{\"1\":{\"282\":1}}],[\"返回一个具有节流能力的函数\",{\"1\":{\"847\":1}}],[\"返回一个具有防抖能力的函数\",{\"1\":{\"844\":1}}],[\"返回一个promise对象\",{\"1\":{\"801\":1}}],[\"返回一个延迟执行的函数\",{\"1\":{\"760\":1}}],[\"返回一个node节点\",{\"1\":{\"760\":1}}],[\"返回一个this指向改变的函数\",{\"1\":{\"271\":1}}],[\"返回一个脚本记录器\",{\"1\":{\"105\":1}}],[\"返回\",{\"1\":{\"270\":1,\"303\":1,\"548\":1,\"832\":1,\"946\":1}}],[\"返回页面的只有头部信息\",{\"1\":{\"212\":1}}],[\"返回result\",{\"1\":{\"122\":1}}],[\"返回v\",{\"1\":{\"122\":1}}],[\"那整个通信过程就可以说具有了机密性\",{\"1\":{\"235\":1,\"237\":1}}],[\"那样定义流\",{\"1\":{\"198\":1}}],[\"那他很有可能是这样的\",{\"1\":{\"122\":1}}],[\"那么这条代换式存在\",{\"1\":{\"985\":1}}],[\"那么这条代换式就存在\",{\"1\":{\"985\":1}}],[\"那么这时候如果子级没有设置宽高\",{\"1\":{\"25\":1}}],[\"那么非终结符中也有\",{\"1\":{\"985\":1}}],[\"那么不如使用预渲染\",{\"1\":{\"908\":1}}],[\"那么所有的clone的机器\",{\"1\":{\"684\":1}}],[\"那么所有的组件都能够受到redux的控制\",{\"1\":{\"564\":1}}],[\"那么this\",{\"1\":{\"628\":1}}],[\"那么可以通过下面的形式\",{\"1\":{\"596\":1}}],[\"那么如果需要支持异步操作\",{\"1\":{\"571\":1}}],[\"那么直接删除这个组件下的所有子节点\",{\"1\":{\"495\":1}}],[\"那么直接删除b\",{\"1\":{\"494\":1}}],[\"那么ref\",{\"1\":{\"479\":1}}],[\"那么js线程会一直执行\",{\"1\":{\"427\":1}}],[\"那么渲染层面的更新就不得不长时间地等待\",{\"1\":{\"427\":1}}],[\"那么包含文件中的变量将如同在调用函数内部定义一样可用\",{\"1\":{\"401\":1}}],[\"那么就将页面跳转至认证中心\",{\"1\":{\"287\":1}}],[\"那么就可以近似地实现\",{\"1\":{\"195\":1}}],[\"那么子类将无法继承这些方法\",{\"1\":{\"259\":1}}],[\"那么对超过行数的部分进行限制高度\",{\"1\":{\"90\":1}}],[\"那么\",{\"1\":{\"36\":1,\"140\":1,\"603\":1}}],[\"那么他们滚动的上下距离\",{\"1\":{\"8\":1}}],[\"那么处于这个容器的子元素就将位于3d空间中\",{\"1\":{\"8\":1}}],[\"简言之\",{\"1\":{\"675\":1}}],[\"简单\",{\"1\":{\"677\":1}}],[\"简单使用\",{\"1\":{\"534\":1}}],[\"简单方便\",{\"1\":{\"423\":1}}],[\"简单的标量值\",{\"1\":{\"306\":1}}],[\"简单快速\",{\"1\":{\"230\":1}}],[\"简单邮件传输协议\",{\"1\":{\"176\":1}}],[\"简单来讲就是类组件通过调用setstate方法\",{\"1\":{\"547\":1}}],[\"简单来讲\",{\"1\":{\"132\":1,\"138\":1,\"146\":1,\"205\":1,\"465\":1,\"466\":1}}],[\"简略的表达了各种含义\",{\"1\":{\"127\":1}}],[\"简述步骤\",{\"1\":{\"119\":1,\"123\":1}}],[\"简写\",{\"1\":{\"11\":1}}],[\"块级\",{\"1\":{\"270\":1}}],[\"块级声明实例化\",{\"1\":{\"118\":1}}],[\"块级元素居中布局\",{\"0\":{\"33\":1},\"1\":{\"31\":1}}],[\"都是normalcompletion\",{\"1\":{\"973\":1}}],[\"都能触发渲染更新\",{\"1\":{\"622\":1}}],[\"都能够获取到redux中的数据\",{\"1\":{\"564\":1}}],[\"都能够提供面向连接和无连接两种通信服务机制\",{\"1\":{\"177\":1}}],[\"都会检查是否有更新版本\",{\"1\":{\"837\":1}}],[\"都会放到flushcallbacks\",{\"1\":{\"801\":1}}],[\"都会执行actived钩子\",{\"1\":{\"765\":1}}],[\"都会执行beforerouteenter\",{\"1\":{\"765\":1}}],[\"都会被重新render渲染\",{\"1\":{\"588\":1}}],[\"都会导致额外的渲染\",{\"1\":{\"514\":1}}],[\"都会重新进行bind的操作\",{\"1\":{\"510\":1}}],[\"都有一个表达式主体\",{\"1\":{\"313\":1}}],[\"都必须使用\",{\"1\":{\"487\":1}}],[\"都必须\",{\"1\":{\"224\":1}}],[\"都需要重新编译\",{\"1\":{\"702\":2}}],[\"都需要新开一个连接\",{\"1\":{\"146\":1}}],[\"都需要环境记录器\",{\"1\":{\"118\":1}}],[\"都相对于直接父元素的width\",{\"1\":{\"57\":1}}],[\"都相对于直接父亲元素的width\",{\"1\":{\"57\":1}}],[\"之外\",{\"1\":{\"1008\":1}}],[\"之所以在全局作用域内存在\",{\"1\":{\"402\":1}}],[\"之前三元运算符是左联的\",{\"1\":{\"357\":1}}],[\"之前的条件都匹配时运行\",{\"1\":{\"313\":1}}],[\"之前\",{\"1\":{\"306\":2,\"320\":1,\"351\":1,\"357\":1,\"383\":1,\"386\":1,\"403\":1,\"1013\":1}}],[\"之前首先调用\",{\"1\":{\"264\":1}}],[\"之间的映射关系\",{\"1\":{\"607\":1}}],[\"之间的字节\",{\"1\":{\"398\":1}}],[\"之间的描述来看\",{\"1\":{\"395\":1}}],[\"之间的数值\",{\"1\":{\"11\":1}}],[\"之间能够存放很多第三方\",{\"1\":{\"230\":1}}],[\"之后主线程被阻塞的时间足以阻止输入响应的总时间\",{\"1\":{\"885\":1}}],[\"之后版本改名为\",{\"1\":{\"428\":1}}],[\"之后的信息\",{\"1\":{\"406\":1}}],[\"之后的\",{\"1\":{\"333\":1}}],[\"之后仍然可以输出响应标头\",{\"1\":{\"332\":1}}],[\"之后\",{\"1\":{\"244\":2}}],[\"之后就可以正常通信了\",{\"1\":{\"243\":1}}],[\"之后通过传输介质传送到对端\",{\"1\":{\"165\":1}}],[\"之后对每个子语句进行求值\",{\"1\":{\"118\":1}}],[\"除右引号代码点\",{\"1\":{\"1008\":1}}],[\"除法取整运算符\",{\"1\":{\"374\":1}}],[\"除以\",{\"1\":{\"355\":1}}],[\"除外\",{\"1\":{\"346\":1}}],[\"除非路径或者域不同\",{\"1\":{\"407\":1}}],[\"除非马上紧接换行\",{\"1\":{\"331\":1}}],[\"除非是根目录\",{\"1\":{\"308\":1}}],[\"除非手动设置\",{\"1\":{\"216\":1}}],[\"除了常见的通过\",{\"1\":{\"946\":1}}],[\"除了js自身的数据类型\",{\"1\":{\"640\":1}}],[\"除了一些路由相关的组件之外\",{\"1\":{\"598\":1}}],[\"除了错误信息和\",{\"1\":{\"500\":1}}],[\"除了构造方法和私有方法\",{\"1\":{\"341\":1}}],[\"除了\",{\"1\":{\"117\":1,\"345\":1,\"377\":1}}],[\"除此之外还可以通过监听onerror事件\",{\"1\":{\"500\":1}}],[\"除此之外\",{\"1\":{\"59\":1,\"551\":1,\"844\":1}}],[\"针对大量数据的渲染优化\",{\"1\":{\"914\":1}}],[\"针对使用vite的vue项目\",{\"1\":{\"895\":1}}],[\"针对工程化项目才可以使用打包工具的gizp算法\",{\"1\":{\"893\":1}}],[\"针对特定客户端的缓存\",{\"1\":{\"866\":1}}],[\"针对tabr页面的跳转\",{\"1\":{\"832\":1}}],[\"针对两者的区别\",{\"1\":{\"467\":1}}],[\"针对两种react组件\",{\"1\":{\"456\":1}}],[\"针对请求\",{\"1\":{\"209\":1}}],[\"针对相关的realm\",{\"1\":{\"117\":1}}],[\"针对不同设备分辨率改变font\",{\"1\":{\"59\":1}}],[\"说明该用户没有注册\",{\"1\":{\"829\":1}}],[\"说明这些是新增的\",{\"1\":{\"770\":1}}],[\"说明用户在当前系统中尚未登录\",{\"1\":{\"287\":1}}],[\"说明\",{\"1\":{\"114\":1,\"116\":1,\"117\":1,\"224\":1,\"308\":1,\"824\":1,\"826\":1,\"827\":1}}],[\"把多个子元素的响应事件委托给父元素\",{\"1\":{\"850\":1}}],[\"把差异应用在原来的dom树上\",{\"1\":{\"836\":1}}],[\"把路由交给前端处理\",{\"1\":{\"693\":1}}],[\"把精确的定义放在前面\",{\"1\":{\"659\":1}}],[\"把所有的旧节点删除\",{\"1\":{\"732\":1}}],[\"把所有的尽可能的输入类型包含进去\",{\"1\":{\"659\":1}}],[\"把所有的角色导入\",{\"1\":{\"570\":1}}],[\"把所有节点都复制一遍带来的性能损耗\",{\"1\":{\"525\":1}}],[\"把redux中的数据映射到react中的props中去\",{\"1\":{\"566\":1}}],[\"把传递给当前组件的属性继续传递给被包装的组件wrappedcomponent\",{\"1\":{\"480\":1}}],[\"把\",{\"1\":{\"479\":1}}],[\"把通用的逻辑放在高阶组件中\",{\"1\":{\"479\":1}}],[\"把组件渲染为\",{\"1\":{\"450\":1}}],[\"把创建的h1标签渲染到root节点上\",{\"1\":{\"421\":1}}],[\"把b的数组元素附加到a的数组后面\",{\"1\":{\"361\":1}}],[\"把右花括号\",{\"1\":{\"312\":1}}],[\"把浮点数转化为字符串\",{\"1\":{\"304\":1}}],[\"把一个多参函数转化为一个嵌套的一元函数的过程\",{\"1\":{\"296\":1}}],[\"把一个对象中的属性方法抽取出来作为标识符绑定在环境中\",{\"1\":{\"112\":1}}],[\"把这些打成一个包再签名\",{\"1\":{\"240\":1}}],[\"把上面应用层交下来的数据看成无结构的字节流来发送\",{\"1\":{\"182\":1}}],[\"把盒之间的距离计算在内\",{\"1\":{\"46\":1}}],[\"常常用于与核心业务无关但又在多个模块使用的功能\",{\"1\":{\"480\":1}}],[\"常见性能优化常见的手段有如下\",{\"1\":{\"554\":1}}],[\"常见hooks\",{\"0\":{\"518\":1}}],[\"常见web攻击方式有\",{\"1\":{\"298\":1}}],[\"常见内存泄露情况\",{\"0\":{\"251\":1}}],[\"常见的字段有\",{\"1\":{\"866\":1}}],[\"常见的绑定方式有如下\",{\"1\":{\"509\":1}}],[\"常见的css引入方式有以下\",{\"1\":{\"484\":1}}],[\"常见的请求字段如下表所示\",{\"1\":{\"224\":1}}],[\"常见的有\",{\"1\":{\"207\":1,\"208\":1,\"209\":1,\"210\":1,\"211\":1}}],[\"常见的动画效果有很多\",{\"1\":{\"10\":1}}],[\"常用api\",{\"0\":{\"593\":1}}],[\"常用的中间件\",{\"0\":{\"572\":1}}],[\"常用\",{\"1\":{\"212\":1}}],[\"常用于post大数据传输\",{\"1\":{\"212\":1}}],[\"常用于绑定块级语句内的标识符\",{\"1\":{\"112\":1}}],[\"常量值\",{\"1\":{\"345\":1}}],[\"常量可以声明为\",{\"1\":{\"340\":1}}],[\"常量都在编译时解析\",{\"1\":{\"308\":1}}],[\"常量数组\",{\"1\":{\"306\":1}}],[\"常量不需要使用\",{\"1\":{\"306\":1}}],[\"常量\",{\"0\":{\"306\":1},\"1\":{\"113\":1,\"336\":1}}],[\"声明而没有赋值\",{\"1\":{\"654\":1}}],[\"声明一个叫\",{\"1\":{\"519\":1}}],[\"声明\",{\"1\":{\"383\":1,\"659\":1}}],[\"声明方法\",{\"1\":{\"336\":1}}],[\"声明属性\",{\"1\":{\"336\":1}}],[\"声明式模板\",{\"1\":{\"811\":1}}],[\"声明式的设计\",{\"1\":{\"534\":1}}],[\"声明式编程方式使得react组件很容易使用\",{\"1\":{\"532\":1}}],[\"声明式编程是一种编程范式\",{\"1\":{\"532\":1}}],[\"声明式编程范式和函数式编程概念\",{\"1\":{\"530\":1}}],[\"声明式编程\",{\"0\":{\"532\":1},\"1\":{\"293\":1,\"531\":1}}],[\"声明式环境记录绑定其范围内包含的声明所定义的一组标识符\",{\"1\":{\"113\":1}}],[\"声明式环境记录器\",{\"1\":{\"112\":1,\"117\":1}}],[\"声明实例化\",{\"1\":{\"107\":1}}],[\"绑定了变量的文本\",{\"1\":{\"811\":1}}],[\"绑定了事件以后只能触发一次\",{\"1\":{\"699\":1}}],[\"绑定值\",{\"1\":{\"737\":1}}],[\"绑定到当前组件的所有事件监听器​​的对象\",{\"1\":{\"696\":1}}],[\"绑定到全局环境记录器的\",{\"1\":{\"107\":2}}],[\"绑定方法\",{\"0\":{\"509\":1}}],[\"绑定标识符\",{\"1\":{\"122\":2}}],[\"绑定模块顶层代码的标识符\",{\"1\":{\"112\":1}}],[\"绑定函数体内的标识符\",{\"1\":{\"112\":1}}],[\"绑定全局顶层代码的标识符\",{\"1\":{\"112\":1}}],[\"环境\",{\"0\":{\"934\":1}}],[\"环境记录绑定的对象\",{\"1\":{\"116\":1}}],[\"环境记录器存放着标识符的绑定\",{\"1\":{\"112\":1}}],[\"环境记录器\",{\"1\":{\"111\":1}}],[\"环境会初始化一系列的内置对象\",{\"1\":{\"99\":1}}],[\"实验特性\",{\"1\":{\"662\":1}}],[\"实例挂载过程\",{\"0\":{\"796\":1}}],[\"实例销毁\",{\"1\":{\"781\":1}}],[\"实例过程中自动调用的方法\",{\"1\":{\"435\":1}}],[\"实例化\",{\"1\":{\"123\":1}}],[\"实例化函数对象\",{\"1\":{\"120\":1}}],[\"实例化的过程中\",{\"1\":{\"118\":1}}],[\"实例化相应的函数对象\",{\"1\":{\"107\":1}}],[\"实参\",{\"1\":{\"320\":1}}],[\"实时通信\",{\"1\":{\"195\":1,\"198\":1}}],[\"实际等价于如下\",{\"1\":{\"616\":1}}],[\"实际上等同于\",{\"1\":{\"662\":1}}],[\"实际上所有的\",{\"1\":{\"539\":1}}],[\"实际上是一个有序映射\",{\"1\":{\"383\":1}}],[\"实际上是成为全局对象的属性\",{\"1\":{\"107\":2}}],[\"实际输出是\",{\"1\":{\"357\":1}}],[\"实际存在潜在问题\",{\"1\":{\"258\":1}}],[\"实际应用还是\",{\"1\":{\"169\":1}}],[\"实现一个日志输出的原理也非常简单\",{\"1\":{\"575\":1}}],[\"实现一下阶乘\",{\"1\":{\"253\":1}}],[\"实现的原理是\",{\"1\":{\"525\":1}}],[\"实现的上述方式的是requestidlecallback方法\",{\"1\":{\"429\":1}}],[\"实现也非常的简单\",{\"1\":{\"513\":1}}],[\"实现ssr主要有两种形式\",{\"1\":{\"449\":1}}],[\"实现交集的类\",{\"1\":{\"368\":1}}],[\"实现方式\",{\"1\":{\"283\":1}}],[\"实现方式也很简单\",{\"1\":{\"87\":1}}],[\"实现完整性的手段主要是摘要算法\",{\"1\":{\"238\":1}}],[\"实现身份认证和密钥协商\",{\"1\":{\"234\":1}}],[\"实现部分自定义的子协议\",{\"1\":{\"201\":1}}],[\"实现了路由的核心功能\",{\"1\":{\"592\":1}}],[\"实现了对\",{\"1\":{\"546\":1}}],[\"实现了在一台web服务器上可以在同一个ip地址和端口号上使用不同的主机名来创建多个虚拟web站点\",{\"1\":{\"147\":1}}],[\"实现了百分比布局\",{\"1\":{\"59\":1}}],[\"实现原理很好理解\",{\"1\":{\"89\":1}}],[\"实现原理\",{\"0\":{\"607\":1,\"835\":1},\"1\":{\"81\":1}}],[\"实现过程\",{\"1\":{\"80\":1,\"82\":1}}],[\"实现流程\",{\"1\":{\"79\":1}}],[\"实现三栏布局中间自适应的布局方式有\",{\"1\":{\"77\":1}}],[\"实现思路也非常的简单\",{\"1\":{\"75\":1}}],[\"实现响应式布局的方式有如下\",{\"1\":{\"55\":1}}],[\"实现代码如下所示\",{\"1\":{\"90\":1}}],[\"实现代码如下\",{\"1\":{\"27\":1,\"78\":1}}],[\"实现水平垂直居中\",{\"1\":{\"26\":1}}],[\"实现元素水平垂直居中的方式\",{\"1\":{\"24\":1}}],[\"实现鼠标移动上去发生变化动画效果\",{\"1\":{\"11\":1}}],[\"实现自定义动画\",{\"0\":{\"13\":1},\"1\":{\"10\":1}}],[\"实现渐变动画\",{\"0\":{\"11\":1},\"1\":{\"10\":1}}],[\"实现\",{\"0\":{\"6\":1,\"24\":1,\"55\":1,\"66\":1,\"81\":1,\"86\":1,\"257\":1,\"272\":1,\"285\":1,\"287\":1,\"449\":1,\"632\":1,\"737\":1},\"1\":{\"77\":1,\"374\":1,\"659\":1,\"811\":1}}],[\"语句列表中不允许使用await\",{\"1\":{\"986\":1}}],[\"语句列表的静态语义\",{\"1\":{\"978\":1}}],[\"语句中的\",{\"1\":{\"984\":1}}],[\"语句中显式指定\",{\"1\":{\"947\":1}}],[\"语句添加前缀\",{\"1\":{\"949\":1}}],[\"语句或任何\",{\"1\":{\"949\":1}}],[\"语句\",{\"1\":{\"357\":1,\"358\":1,\"936\":4,\"986\":1,\"992\":1}}],[\"语句类似\",{\"1\":{\"313\":1}}],[\"语句之内用\",{\"1\":{\"306\":1}}],[\"语言值的语言标识\",{\"1\":{\"981\":1}}],[\"语言值使用samevalue抽象操作及其传递调用的抽象操作进行相等性比较\",{\"1\":{\"981\":1}}],[\"语言转译\",{\"1\":{\"946\":1}}],[\"语言结构解包数组\",{\"1\":{\"385\":1}}],[\"语言结构传递进去\",{\"1\":{\"326\":1}}],[\"语言引擎有一张\",{\"1\":{\"250\":1}}],[\"语言代码\",{\"1\":{\"247\":1}}],[\"语义与\",{\"1\":{\"198\":1}}],[\"语义收集词法声明语句\",{\"1\":{\"107\":1}}],[\"语法参数是由前缀参数\",{\"1\":{\"983\":1}}],[\"语法导向操作和抽象操作有两种类型\",{\"1\":{\"977\":1}}],[\"语法导向操作是一系列算法的总和\",{\"1\":{\"977\":1}}],[\"语法结构\",{\"1\":{\"378\":2}}],[\"语法如下\",{\"1\":{\"49\":1}}],[\"语法\",{\"1\":{\"18\":1,\"47\":1,\"198\":1,\"386\":1,\"500\":1,\"941\":1}}],[\"调试及测试变得轻而易举\",{\"1\":{\"935\":1}}],[\"调试虚拟dom结构\",{\"1\":{\"776\":1}}],[\"调试\",{\"1\":{\"774\":1}}],[\"调试方便\",{\"1\":{\"717\":1}}],[\"调试也相对麻烦\",{\"1\":{\"80\":1}}],[\"调度等功能模块\",{\"1\":{\"132\":1}}],[\"调用不仅会造成数据关系的混乱\",{\"1\":{\"844\":1}}],[\"调用wx\",{\"1\":{\"829\":1,\"830\":1}}],[\"调用$mount方法进行页面的挂载\",{\"1\":{\"797\":1}}],[\"调用beforecreate钩子\",{\"1\":{\"796\":1}}],[\"调用patch函数完成新旧虚拟dom的差异计算\",{\"1\":{\"778\":1}}],[\"调用parent函数\",{\"1\":{\"259\":1}}],[\"调用子组件方法\",{\"1\":{\"777\":1}}],[\"调用vm\",{\"1\":{\"775\":1}}],[\"调用varscopeddeclarations语义收集变量声明语句vardeclarations\",{\"1\":{\"107\":1}}],[\"调用created钩子\",{\"1\":{\"796\":1}}],[\"调用createelem创建一个新节点\",{\"1\":{\"733\":1}}],[\"调用createelm创建一个新的dom节点放到newstartidx的位置\",{\"1\":{\"732\":1}}],[\"调用createperiterationenvironment语义\",{\"1\":{\"122\":1}}],[\"调用updatechildren\",{\"1\":{\"732\":1}}],[\"调用其方法或访问属性\",{\"1\":{\"696\":1}}],[\"调用this\",{\"1\":{\"627\":1}}],[\"调用react的rendertostring方法\",{\"1\":{\"560\":1}}],[\"调用requestidlecallback\",{\"1\":{\"428\":1}}],[\"调用则是执行函数即可\",{\"1\":{\"460\":1}}],[\"调用方式\",{\"0\":{\"460\":1},\"1\":{\"456\":1}}],[\"调用方法\",{\"1\":{\"270\":1}}],[\"调用`createelement`的第一个参数\",{\"1\":{\"428\":1}}],[\"调用\",{\"1\":{\"325\":3,\"796\":1,\"956\":1}}],[\"调用目标网站接口执行攻击者指定的操作\",{\"1\":{\"299\":3}}],[\"调用栈\",{\"1\":{\"122\":1,\"253\":2}}],[\"调用栈上有几个ecmascript代码执行上下文\",{\"1\":{\"111\":1}}],[\"调用forbodyevaluation\",{\"1\":{\"122\":1}}],[\"调用lexicallyscopeddeclarations收集词法声明declarations\",{\"1\":{\"120\":1}}],[\"调用lexicallyscopeddeclarations\",{\"1\":{\"107\":1}}],[\"调用lexicallydeclarednames\",{\"1\":{\"107\":1}}],[\"使之包含在下次提交的快照中\",{\"1\":{\"685\":1}}],[\"使函数组件的功能得到了扩充\",{\"1\":{\"522\":1}}],[\"使下一次渲染能够显示降级后的\",{\"1\":{\"500\":1}}],[\"使我们的页面的构建效率提到了极大的提升\",{\"1\":{\"492\":1}}],[\"使应用场景更加丰富\",{\"1\":{\"256\":1}}],[\"使应用程序不必担心在各台计算机中表示和存储的内部格式差异\",{\"1\":{\"159\":1}}],[\"使得应用程序中每个模块都具备了条理清晰的设计和明确的目的\",{\"1\":{\"935\":1}}],[\"使得验证\",{\"1\":{\"935\":1}}],[\"使得多个\",{\"1\":{\"895\":1}}],[\"使得计算仅占用常量栈空间\",{\"1\":{\"253\":1}}],[\"使得http服务器的程序规模小\",{\"1\":{\"230\":1}}],[\"使其在函数体内可用\",{\"1\":{\"401\":1}}],[\"使其获得与父类别不同的功能\",{\"1\":{\"256\":1}}],[\"使其得不到释放\",{\"1\":{\"251\":1}}],[\"使其成为运行中的执行上下文\",{\"1\":{\"106\":1}}],[\"使用描述性短语来描述少数非终结符号\",{\"1\":{\"999\":1}}],[\"使用node\",{\"0\":{\"955\":1}}],[\"使用namespace来定义\",{\"1\":{\"665\":1}}],[\"使用正则表达式匹配文件时\",{\"1\":{\"948\":1}}],[\"使用hashedmoduleidsplugin等插件来生成稳定的模块id\",{\"1\":{\"941\":1}}],[\"使用hooks能够解决大多数问题\",{\"1\":{\"522\":1}}],[\"使用optimization\",{\"1\":{\"941\":1}}],[\"使用相应的加载器来加载模块的源代码\",{\"1\":{\"932\":1}}],[\"使用loader\",{\"0\":{\"947\":1},\"1\":{\"932\":1}}],[\"使用localstorage\",{\"1\":{\"287\":1}}],[\"使用不同的配置文件\",{\"0\":{\"927\":1}}],[\"使用常量或变量赋值\",{\"1\":{\"925\":1}}],[\"使用elementplus的骨架屏\",{\"1\":{\"911\":1}}],[\"使用express提供的static中间件\",{\"1\":{\"449\":2}}],[\"使用prerender\",{\"1\":{\"909\":1}}],[\"使用paint\",{\"1\":{\"878\":1}}],[\"使用海报图片加载时间或视频的第一帧呈现时间\",{\"1\":{\"879\":1}}],[\"使用webpack的require\",{\"1\":{\"858\":1}}],[\"使用vm\",{\"1\":{\"796\":1}}],[\"使用virtual\",{\"1\":{\"423\":1}}],[\"使用双指针从头尾向中间逼近的方式进行比较\",{\"1\":{\"770\":1}}],[\"使用对代码进行优化可获得系统的整体升级\",{\"1\":{\"717\":1}}],[\"使用对称加密方式进行通信\",{\"1\":{\"237\":1}}],[\"使用gzip压缩\",{\"1\":{\"895\":1}}],[\"使用git和gitlab搭建版本控制环境是现在互联网公司最流行的版本控制方式\",{\"1\":{\"682\":1}}],[\"使用get的请求应该只被用于获取数据\",{\"1\":{\"215\":1}}],[\"使用它\",{\"1\":{\"680\":1}}],[\"使用|或者\",{\"1\":{\"659\":1}}],[\"使用该组件\",{\"1\":{\"632\":1}}],[\"使用super\",{\"1\":{\"626\":1}}],[\"使用两者作为最顶层组件包裹其他组件\",{\"1\":{\"594\":1}}],[\"使用usestate来更新状态的时候\",{\"1\":{\"588\":1}}],[\"使用时\",{\"1\":{\"579\":1}}],[\"使用时获取到创建的对象中存在\",{\"1\":{\"579\":1}}],[\"使用时通过生成hook对象的\",{\"1\":{\"579\":1}}],[\"使用时通过\",{\"1\":{\"579\":1}}],[\"使用redux使用功能组织项目\",{\"1\":{\"570\":1}}],[\"使用react\",{\"1\":{\"539\":1,\"563\":1}}],[\"使用key与不使用key的区别\",{\"1\":{\"542\":1}}],[\"使用key与不使用key作用如下\",{\"1\":{\"497\":1}}],[\"使用虚拟dom来有效地操作dom\",{\"1\":{\"530\":1}}],[\"使用虚拟dom的优势如下\",{\"1\":{\"423\":1}}],[\"使用方法如下\",{\"1\":{\"526\":1,\"538\":1,\"665\":1}}],[\"使用方式如下\",{\"1\":{\"564\":1}}],[\"使用方式\",{\"1\":{\"50\":1}}],[\"使用immutable对象最主要的库是immutable\",{\"1\":{\"526\":1}}],[\"使用interface\",{\"1\":{\"367\":1}}],[\"使用起来更为简洁\",{\"1\":{\"519\":1}}],[\"使用一个统一的事件去监听\",{\"1\":{\"504\":1}}],[\"使用了旧式八进制转义\",{\"1\":{\"1013\":1}}],[\"使用了treeshanking\",{\"1\":{\"818\":1}}],[\"使用了\",{\"1\":{\"500\":2,\"525\":1}}],[\"使用使用staticrouter来替代browserrouter\",{\"1\":{\"449\":1}}],[\"使用babel\",{\"1\":{\"449\":2}}],[\"使用成熟的ssr\",{\"1\":{\"449\":1}}],[\"使用实例如下\",{\"1\":{\"416\":1}}],[\"使用简短的数组语法\",{\"1\":{\"386\":1}}],[\"使用简单\",{\"1\":{\"76\":1}}],[\"使用示例\",{\"1\":{\"368\":1}}],[\"使用联合类型\",{\"1\":{\"368\":1}}],[\"使用交集类型\",{\"1\":{\"368\":1}}],[\"使用a的\",{\"1\":{\"361\":1}}],[\"使用反引号运算符\",{\"1\":{\"360\":1}}],[\"使用条件结构\",{\"1\":{\"331\":1}}],[\"使用类似分配变量的语法定义参数的默认值\",{\"1\":{\"322\":1}}],[\"使用context提供了组件之间通讯的一种方式\",{\"1\":{\"416\":1}}],[\"使用cookie\",{\"1\":{\"287\":1}}],[\"使用css形式实现视觉差滚动效果的方式有\",{\"1\":{\"6\":1}}],[\"使用json转换\",{\"1\":{\"280\":1}}],[\"使用尾递归优化求斐波那契数列\",{\"1\":{\"254\":1}}],[\"使用完毕之后\",{\"1\":{\"247\":1}}],[\"使用连接方式不同\",{\"1\":{\"232\":1}}],[\"使用范围的可选属性组成\",{\"1\":{\"227\":1}}],[\"使用代理\",{\"1\":{\"209\":1}}],[\"使用报头压缩\",{\"1\":{\"153\":1}}],[\"使用缓存保存域名和ip地址的映射\",{\"1\":{\"141\":1}}],[\"使用户就近获取所需内容\",{\"1\":{\"132\":1}}],[\"使用flex实现\",{\"0\":{\"82\":1}}],[\"使用负\",{\"1\":{\"80\":1}}],[\"使用\",{\"0\":{\"81\":1,\"526\":1,\"556\":1,\"558\":1,\"662\":1,\"745\":1},\"1\":{\"56\":1,\"75\":1,\"276\":1,\"306\":2,\"343\":1,\"384\":1,\"385\":1,\"388\":1,\"406\":1,\"479\":1,\"500\":1,\"526\":2,\"527\":2,\"554\":2,\"642\":1,\"643\":1,\"770\":1,\"858\":1,\"879\":1,\"925\":2,\"942\":1,\"947\":1,\"949\":4}}],[\"使用浏览器默认的换行\",{\"1\":{\"47\":1}}],[\"使用图片来绘制边框\",{\"1\":{\"41\":1}}],[\"使用前把它变成block\",{\"1\":{\"12\":1}}],[\"变化时直接找到该地方进行比较\",{\"1\":{\"818\":1}}],[\"变化引起\",{\"1\":{\"607\":1}}],[\"变化\",{\"1\":{\"537\":1}}],[\"变为\",{\"1\":{\"406\":1}}],[\"变成了\",{\"1\":{\"406\":1}}],[\"变成\",{\"1\":{\"254\":1}}],[\"变量名中的合法字符\",{\"1\":{\"408\":1}}],[\"变量名中的点\",{\"0\":{\"408\":1}}],[\"变量名中的点和空格被转换成下划线\",{\"1\":{\"406\":1}}],[\"变量名\",{\"1\":{\"406\":1}}],[\"变量名是区分大小写的\",{\"1\":{\"398\":1}}],[\"变量作用域的另一个重要特性是\",{\"1\":{\"403\":1}}],[\"变量用一个美元符号后面跟变量名来表示\",{\"1\":{\"398\":1}}],[\"变量将被替换\",{\"1\":{\"381\":1}}],[\"变量是否属于某一类\",{\"1\":{\"362\":1}}],[\"变量\",{\"0\":{\"398\":1},\"1\":{\"336\":1,\"379\":1,\"399\":1,\"401\":1,\"403\":1,\"407\":1,\"519\":1}}],[\"变量arr是仅有的对这个值的引用\",{\"1\":{\"250\":1}}],[\"变量声明绑定\",{\"1\":{\"117\":1}}],[\"变量环境指向全局环境记录器等\",{\"1\":{\"106\":1}}],[\"变换时\",{\"1\":{\"8\":1}}],[\"每条产生式的目标符实例都可以通过调用自身的语法导向操作\",{\"1\":{\"977\":1}}],[\"每页\",{\"1\":{\"918\":1}}],[\"每页多少条\",{\"1\":{\"916\":1,\"918\":1}}],[\"每调用usehook一次都会生成一份独立的状态\",{\"1\":{\"522\":1}}],[\"每一个块就是组件\",{\"1\":{\"530\":1}}],[\"每一个变量为一个元素\",{\"1\":{\"402\":1}}],[\"每一个对象都是被构造函数new出来的\",{\"1\":{\"267\":1}}],[\"每一次移动都表示\",{\"1\":{\"355\":2}}],[\"每一次返回的就是一个新的函数\",{\"1\":{\"253\":1}}],[\"每一帧的数据可以分成\",{\"1\":{\"163\":1}}],[\"每一层实现各自的功能和协议\",{\"1\":{\"156\":1}}],[\"每一段脚本执行前\",{\"1\":{\"105\":1}}],[\"每次都会协商缓存\",{\"1\":{\"866\":1}}],[\"每次冷启动时\",{\"1\":{\"837\":1}}],[\"每次组件渲染时\",{\"1\":{\"765\":1}}],[\"每次路由跳转都要做权限判断\",{\"1\":{\"702\":1}}],[\"每次路由跳转都要做判断\",{\"1\":{\"702\":3}}],[\"每次路由跳转前做校验\",{\"1\":{\"702\":1}}],[\"每次只做一小部分\",{\"1\":{\"429\":1}}],[\"每次\",{\"1\":{\"315\":1}}],[\"每次请求中都会被发送\",{\"1\":{\"280\":1}}],[\"每次请求都需要创建连接\",{\"1\":{\"146\":1}}],[\"每次请求都需要与服务器建立一个tcp连接\",{\"1\":{\"146\":1}}],[\"每次与服务器交互\",{\"1\":{\"146\":1}}],[\"每个部分都会相对于当前目录解析\",{\"1\":{\"949\":1}}],[\"每个部分使用一个线程进行上传\",{\"1\":{\"283\":1}}],[\"每个模块都拥有小于完整程序的体积\",{\"1\":{\"935\":1}}],[\"每个页面可以看成一个pagemodel\",{\"1\":{\"831\":1}}],[\"每个阶段包含多个钩子函数\",{\"1\":{\"773\":1}}],[\"每个计算机都是一个完整仓库\",{\"1\":{\"681\":1}}],[\"每个目录下包含同样的角色文件\",{\"1\":{\"570\":1}}],[\"每个功能模块对应一个目录\",{\"1\":{\"570\":1}}],[\"每个功能都包裹在函数中\",{\"1\":{\"522\":1}}],[\"每个组件的实例都会共用一个内存地址\",{\"1\":{\"727\":1}}],[\"每个组件应具有单个父标签\",{\"1\":{\"556\":1}}],[\"每个组件都是具有独立功能的\",{\"1\":{\"533\":1}}],[\"每个组件都需要重复写componentwillmount中的代码\",{\"1\":{\"480\":1}}],[\"每个小的组件仅仅包含自身的逻辑\",{\"1\":{\"533\":1}}],[\"每个生命周期函数中可能会包含着各种互不相关的逻辑在里面\",{\"1\":{\"517\":1}}],[\"每个节点在对应的层级用唯一的key作为标识\",{\"1\":{\"496\":1}}],[\"每个\",{\"1\":{\"429\":3}}],[\"每个字段占用2个字节\",{\"1\":{\"181\":1}}],[\"每个数据流都以消息的形式发送\",{\"1\":{\"150\":1}}],[\"每个环境记录器都有一个\",{\"1\":{\"111\":1}}],[\"每个agent至多只有一个正在实际执行代码的执行上下文\",{\"1\":{\"95\":1}}],[\"每个agent包含一个执行上下文栈\",{\"1\":{\"92\":1}}],[\"每个agent对于一个js程序\",{\"1\":{\"92\":1}}],[\"每个元素的左外边距与包含块的左边界相接触\",{\"1\":{\"19\":1,\"21\":1}}],[\"图表之类的信息\",{\"1\":{\"702\":2}}],[\"图形画布区域等的特殊句柄\",{\"1\":{\"390\":1}}],[\"图片等\",{\"1\":{\"932\":1}}],[\"图片体积上也更小\",{\"1\":{\"896\":1}}],[\"图片\",{\"1\":{\"870\":1,\"877\":1,\"906\":1}}],[\"图片资源压缩率有限\",{\"1\":{\"839\":1}}],[\"图片懒加载\",{\"1\":{\"284\":1,\"738\":1}}],[\"图片文件等\",{\"1\":{\"932\":1}}],[\"图片文件\",{\"1\":{\"230\":1}}],[\"图片是会以左上角对齐\",{\"1\":{\"44\":1}}],[\"图示\",{\"1\":{\"104\":1}}],[\"固定值\",{\"1\":{\"290\":1}}],[\"固定在两侧\",{\"1\":{\"79\":1}}],[\"固有对象\",{\"1\":{\"104\":1}}],[\"创建compiler\",{\"1\":{\"932\":1}}],[\"创建compiler对象\",{\"1\":{\"932\":1}}],[\"创建documentfragment\",{\"1\":{\"918\":1}}],[\"创建watcher实例\",{\"1\":{\"811\":1}}],[\"创建vue实例对象\",{\"1\":{\"773\":1}}],[\"创建newstrtidx和newendidx之间的所有节点\",{\"1\":{\"731\":1}}],[\"创建b的真实节点\",{\"1\":{\"731\":1}}],[\"创建或在当前目录初始化一个git代码库\",{\"1\":{\"688\":1}}],[\"创建ref的形式有四种种\",{\"1\":{\"579\":1}}],[\"创建refs\",{\"0\":{\"579\":1}}],[\"创建真实dom节点\",{\"1\":{\"538\":1}}],[\"创建地图\",{\"1\":{\"532\":1}}],[\"创建标记\",{\"1\":{\"532\":2}}],[\"创建操作\",{\"1\":{\"494\":1}}],[\"创建的方式过于冗杂\",{\"1\":{\"475\":1}}],[\"创建的函数环境记录器的outenv就会使用这个值\",{\"1\":{\"123\":1}}],[\"创建一个新的对象\",{\"1\":{\"714\":1}}],[\"创建一个style\",{\"1\":{\"488\":1}}],[\"创建一个配置文件webpack\",{\"1\":{\"449\":1}}],[\"创建一个简单的数组\",{\"1\":{\"384\":1}}],[\"创建阶段主要分成了以下几个生命周期方法\",{\"1\":{\"434\":1}}],[\"创建阶段\",{\"0\":{\"434\":1},\"1\":{\"433\":1}}],[\"创建h1标签\",{\"1\":{\"421\":1}}],[\"创建虚拟dom目的就是为了更好将虚拟的节点渲染到页面视图中\",{\"1\":{\"421\":1}}],[\"创建观察者\",{\"1\":{\"285\":1}}],[\"创建新节点\",{\"1\":{\"770\":1}}],[\"创建新对象\",{\"1\":{\"261\":1}}],[\"创建新的\",{\"1\":{\"495\":1}}],[\"创建新的数据\",{\"1\":{\"276\":1}}],[\"创建新的环境记录器loopenv\",{\"1\":{\"122\":1}}],[\"创建新的声明式环境记录器blockenv\",{\"1\":{\"119\":1}}],[\"创建\",{\"0\":{\"474\":1},\"1\":{\"251\":1,\"471\":1,\"581\":1,\"773\":1}}],[\"创建通信后\",{\"1\":{\"201\":1}}],[\"创建arguments对象\",{\"1\":{\"123\":1}}],[\"创建函数的执行上下文以及函数环境记录器\",{\"1\":{\"123\":1}}],[\"创建记录器\",{\"1\":{\"122\":2}}],[\"创建此环境记录的函数对象\",{\"1\":{\"114\":1}}],[\"创建ecmascript代码执行上下文\",{\"1\":{\"106\":1}}],[\"创建全局执行上下文\",{\"1\":{\"104\":1}}],[\"创建圆角边框\",{\"1\":{\"41\":1}}],[\"⑦\",{\"1\":{\"103\":1}}],[\"⑥\",{\"1\":{\"103\":1}}],[\"⑤\",{\"1\":{\"103\":1}}],[\"④\",{\"1\":{\"103\":1}}],[\"③\",{\"1\":{\"103\":1}}],[\"程序的运行需要内存\",{\"1\":{\"247\":1}}],[\"程序执行过程\",{\"0\":{\"103\":1}}],[\"程序初始化操作\",{\"1\":{\"94\":1}}],[\"程序初始化\",{\"1\":{\"94\":1}}],[\"宿主可以提供任何ecmascript对象值\",{\"1\":{\"117\":1}}],[\"宿主对象\",{\"1\":{\"99\":1}}],[\"宿主环境会被wxml转为对应的js对象\",{\"1\":{\"836\":1}}],[\"宿主环境\",{\"0\":{\"98\":1},\"1\":{\"99\":1}}],[\"宿主环境保留字段\",{\"1\":{\"96\":1}}],[\"宿主环境中有多个agent\",{\"1\":{\"92\":1}}],[\"俗称\",{\"1\":{\"99\":1}}],[\"列表项高不一定是固定的\",{\"1\":{\"920\":1}}],[\"列表项高度\",{\"1\":{\"920\":1}}],[\"列表数据\",{\"1\":{\"852\":1}}],[\"列表渲染\",{\"1\":{\"811\":1}}],[\"列表页的某些数据=>详情页\",{\"1\":{\"840\":1}}],[\"列表页应该缓存\",{\"1\":{\"764\":1}}],[\"列表页\",{\"1\":{\"764\":2}}],[\"列表无限滚动\",{\"1\":{\"284\":1}}],[\"列表\",{\"1\":{\"96\":2}}],[\"列表属性\",{\"1\":{\"37\":1}}],[\"此操作用于强调正在返回一个完成记录\",{\"1\":{\"968\":1}}],[\"此插件不能使用太高的版本\",{\"1\":{\"895\":1}}],[\"此类元素被视为不稳定元素\",{\"1\":{\"880\":1}}],[\"此字段拥有强大的缓存控制能力\",{\"1\":{\"866\":1}}],[\"此功能并不是\",{\"1\":{\"488\":1}}],[\"此方法用于组件卸载前\",{\"1\":{\"444\":1}}],[\"此方法的目的在于获取组件更新前的一些信息\",{\"1\":{\"441\":1}}],[\"此方法多用于执行一些数据获取\",{\"1\":{\"438\":1}}],[\"此结果代表着一个在浮点数运算中未定义或不可表述的值\",{\"1\":{\"377\":1}}],[\"此函数的返回结果会随着每次错误的发生而相应变化\",{\"1\":{\"359\":1}}],[\"此种解析方式使得\",{\"1\":{\"330\":1}}],[\"此种情况下\",{\"1\":{\"324\":1}}],[\"此状态代码与\",{\"1\":{\"210\":1}}],[\"此外注意如果将\",{\"1\":{\"331\":1}}],[\"此外\",{\"1\":{\"123\":1,\"163\":1,\"182\":1,\"675\":1}}],[\"此环境记录是否为with语句创建\",{\"1\":{\"116\":1}}],[\"此范围使用的全局对象\",{\"1\":{\"96\":1}}],[\"此时await\",{\"1\":{\"986\":1}}],[\"此时小程序需要重新加载启动\",{\"1\":{\"837\":1}}],[\"此时装饰器接受参数如下\",{\"1\":{\"662\":3}}],[\"此时需要采取一些措施来提升运行性能\",{\"1\":{\"546\":1}}],[\"此时maxindex=3\",{\"1\":{\"496\":1}}],[\"此时maxindex=1\",{\"1\":{\"496\":2}}],[\"此时maxindex=\",{\"1\":{\"496\":3}}],[\"此时服务端处于\",{\"1\":{\"244\":2}}],[\"此时服务器处于\",{\"1\":{\"243\":1}}],[\"此时\",{\"1\":{\"243\":1,\"331\":1,\"496\":1,\"696\":1}}],[\"此时客户端处于\",{\"1\":{\"243\":2,\"244\":2}}],[\"此时为宽的10等分\",{\"1\":{\"59\":1}}],[\"此时1rem\",{\"1\":{\"59\":1}}],[\"含义\",{\"1\":{\"96\":1,\"380\":1,\"844\":1,\"847\":1,\"850\":1}}],[\"含元素的尺寸\",{\"1\":{\"45\":1}}],[\"字符连接符号\",{\"1\":{\"306\":1}}],[\"字符串文本位于指令\",{\"1\":{\"1013\":1}}],[\"字符串文本是\",{\"1\":{\"1008\":1}}],[\"字符串形式的指令表达式\",{\"1\":{\"737\":1}}],[\"字符串枚举\",{\"1\":{\"654\":1}}],[\"字符串\",{\"1\":{\"238\":1}}],[\"字符串列表\",{\"1\":{\"117\":1}}],[\"字段应当代替操作的返回值使用\",{\"1\":{\"972\":1}}],[\"字段直接引用一个模块\",{\"1\":{\"946\":1}}],[\"字段的值\",{\"1\":{\"270\":1}}],[\"字段名\",{\"1\":{\"224\":1}}],[\"字段指向另一个环境记录器\",{\"1\":{\"111\":1}}],[\"字段上\",{\"1\":{\"107\":3}}],[\"字段\",{\"1\":{\"96\":1,\"114\":1,\"116\":1,\"117\":1,\"649\":1}}],[\"字体系列属性\",{\"1\":{\"37\":1}}],[\"存放到根目录的build文件夹\",{\"1\":{\"449\":2}}],[\"存放这个fiber依赖的context\",{\"1\":{\"428\":1}}],[\"存放在私有环境记录\",{\"1\":{\"95\":1}}],[\"存放在环境记录器\",{\"1\":{\"95\":2}}],[\"存储在只读属性中的对象\",{\"1\":{\"347\":1}}],[\"存储二进制时小数点的偏移量最大为52位\",{\"1\":{\"303\":1}}],[\"存储型\",{\"1\":{\"299\":2}}],[\"存储量理论上没有上限\",{\"1\":{\"280\":1}}],[\"存储cookie\",{\"1\":{\"192\":1}}],[\"存储了计算机之间交互的数据\",{\"1\":{\"163\":1}}],[\"存在着若干次页面数据通信\",{\"1\":{\"836\":1}}],[\"存在逻辑处理\",{\"1\":{\"563\":1}}],[\"存在一个组件\",{\"1\":{\"480\":1}}],[\"存在篡改的可能\",{\"1\":{\"261\":1}}],[\"存在两个秘钥\",{\"1\":{\"236\":1}}],[\"存在\",{\"1\":{\"72\":2}}],[\"指在ecma的产生式中的以\",{\"1\":{\"983\":1}}],[\"指标用于衡量在first\",{\"1\":{\"885\":1}}],[\"指针移动\",{\"1\":{\"770\":2}}],[\"指针向后移动\",{\"1\":{\"770\":1}}],[\"指的是请求资源到响应第一个字节开始到达之间的时间\",{\"1\":{\"883\":1}}],[\"指的是用户访问网页期间发生的所有互动\",{\"1\":{\"882\":1}}],[\"指的是函数组件本身\",{\"1\":{\"587\":1}}],[\"指的是render方法\",{\"1\":{\"587\":1}}],[\"指由服务侧完成页面的\",{\"1\":{\"448\":1}}],[\"指令绑定的前一个值\",{\"1\":{\"737\":1}}],[\"指令绑定的元素\",{\"1\":{\"737\":1}}],[\"指令与元素解绑时调用\",{\"1\":{\"737\":1}}],[\"指令所在的组件vnode及其子vnode全部更新后调用\",{\"1\":{\"737\":1}}],[\"指令第一次绑定到元素时调用\",{\"1\":{\"737\":1}}],[\"指令\",{\"1\":{\"717\":1,\"760\":1}}],[\"指令分隔符\",{\"0\":{\"332\":1},\"1\":{\"331\":1}}],[\"指令来对每段脚本指定其编码方式\",{\"1\":{\"316\":1}}],[\"指纹\",{\"1\":{\"238\":1}}],[\"指某些网站为了辨别用户身份而储存在用户本地终端上的数据\",{\"1\":{\"227\":1}}],[\"指向的是最外层容器组件实例的\",{\"1\":{\"479\":1}}],[\"指向右边第一个兄弟fiber节点\",{\"1\":{\"429\":1}}],[\"指向子fiber节点\",{\"1\":{\"429\":1}}],[\"指向父级fiber节点\",{\"1\":{\"429\":1}}],[\"指向自己的兄弟结构\",{\"1\":{\"428\":1}}],[\"指向自己的第一个子节点\",{\"1\":{\"428\":1}}],[\"指向自己的构造函数\",{\"1\":{\"260\":1}}],[\"指向他在fiber节点树中的`parent`\",{\"1\":{\"428\":1}}],[\"指向undefined\",{\"1\":{\"270\":1}}],[\"指向构造器函数的原型\",{\"1\":{\"267\":1}}],[\"指向对象的构造器函数\",{\"1\":{\"267\":1}}],[\"指向cdn的全局负载均衡\",{\"1\":{\"133\":1}}],[\"指向包含类中的类元素创建的私有名称\",{\"1\":{\"95\":1}}],[\"指向代码中创建的变量声明\",{\"1\":{\"95\":1}}],[\"指向代码中创建的标识符引用\",{\"1\":{\"95\":1}}],[\"指定语义\",{\"1\":{\"967\":1}}],[\"指定自己的初始化序列号为后面的可靠性传送做准备\",{\"1\":{\"243\":1}}],[\"指定空的元素\",{\"1\":{\"35\":1}}],[\"指定\",{\"1\":{\"13\":1,\"18\":1}}],[\"指定动画播放状态\",{\"1\":{\"13\":1}}],[\"指定动画播放的方向\",{\"1\":{\"13\":1}}],[\"指定动画播放的次数\",{\"1\":{\"13\":1}}],[\"指定动画填充模式\",{\"1\":{\"13\":1}}],[\"指定动画延迟时间\",{\"1\":{\"13\":1}}],[\"指定动画计时函数\",{\"1\":{\"13\":1}}],[\"指定动画完成一个周期所需要时间\",{\"1\":{\"13\":1}}],[\"关闭所有的页面\",{\"1\":{\"832\":1}}],[\"关闭当前页面\",{\"1\":{\"832\":1}}],[\"关闭了\",{\"1\":{\"360\":1}}],[\"关联数组\",{\"1\":{\"383\":1}}],[\"关联到\",{\"1\":{\"383\":1}}],[\"关联代码使用的内置值\",{\"1\":{\"96\":1}}],[\"关联代码来源的模块记录器\",{\"1\":{\"95\":1}}],[\"关键字\",{\"1\":{\"626\":1}}],[\"关键字用于将变量从全局作用域绑定到局部作用域\",{\"1\":{\"402\":1}}],[\"关键字实例化为对象\",{\"1\":{\"388\":1}}],[\"关键字继承另一个类的方法和属性\",{\"1\":{\"340\":1}}],[\"关键字定义常量必须处于最顶端的作用域\",{\"1\":{\"306\":1}}],[\"关键字或者自\",{\"1\":{\"345\":1}}],[\"关键字或\",{\"1\":{\"306\":1}}],[\"关系连接\",{\"1\":{\"146\":1}}],[\"关于\",{\"1\":{\"796\":1}}],[\"关于提交信息的格式\",{\"1\":{\"689\":1}}],[\"关于state方法的定义是从react\",{\"1\":{\"612\":1}}],[\"关于react\",{\"1\":{\"505\":1}}],[\"关于页面的渲染过程如下\",{\"1\":{\"192\":1}}],[\"关于函数的环境记录器的指向问题\",{\"1\":{\"123\":1}}],[\"关于严格模式\",{\"1\":{\"107\":1}}],[\"关于继承属性\",{\"1\":{\"37\":1}}],[\"关于css属性选择器常用的有\",{\"1\":{\"35\":1}}],[\"组织\",{\"1\":{\"939\":1}}],[\"组\",{\"1\":{\"937\":1}}],[\"组成字符串\",{\"1\":{\"685\":1}}],[\"组价会再次会调用render\",{\"1\":{\"474\":1}}],[\"组合式api\",{\"1\":{\"813\":1,\"817\":1}}],[\"组合高阶组件\",{\"1\":{\"479\":1}}],[\"组合比较符\",{\"1\":{\"356\":1}}],[\"组合函数执行是从右到左的\",{\"1\":{\"297\":1}}],[\"组合函数\",{\"1\":{\"297\":1}}],[\"组合与管道\",{\"0\":{\"297\":1}}],[\"组合继承则将前两种方式继承起来\",{\"1\":{\"260\":1}}],[\"组合继承\",{\"0\":{\"260\":1},\"1\":{\"257\":1}}],[\"组合字体\",{\"1\":{\"37\":1}}],[\"组件所在的页面被隐藏时执行\",{\"1\":{\"827\":1}}],[\"组件所在的页面被展示时执行\",{\"1\":{\"827\":1}}],[\"组件所在页面的生命周期\",{\"0\":{\"827\":1}}],[\"组件方法抛出错误\",{\"1\":{\"826\":1}}],[\"组件定义\",{\"1\":{\"813\":1}}],[\"组件化开发\",{\"1\":{\"811\":1}}],[\"组件通过mixins属性调用mixin对象\",{\"1\":{\"789\":1}}],[\"组件通信主要分为以下几类\",{\"1\":{\"696\":1}}],[\"组件通信\",{\"0\":{\"412\":1,\"696\":1}}],[\"组件未挂载\",{\"1\":{\"775\":1}}],[\"组件或普通元素处理\",{\"1\":{\"753\":1}}],[\"组件创建完成\",{\"1\":{\"826\":1}}],[\"组件创建时进行选项合并\",{\"1\":{\"728\":1}}],[\"组件创建和更新阶段\",{\"1\":{\"436\":1}}],[\"组件是业务模块\",{\"1\":{\"719\":1}}],[\"组件是把图形\",{\"1\":{\"717\":1}}],[\"组件注册有全局注册和局部注册\",{\"1\":{\"718\":1}}],[\"组件有vue单文件\",{\"1\":{\"718\":1}}],[\"组件和插件的区别\",{\"0\":{\"717\":1}}],[\"组件接受属性的装饰器\",{\"1\":{\"670\":1}}],[\"组件从概念上看就是一个函数\",{\"1\":{\"621\":1}}],[\"组件内的\",{\"1\":{\"588\":1}}],[\"组件内部就能够通过props获取到store中的数据\",{\"1\":{\"566\":1}}],[\"组件里暴露\",{\"1\":{\"584\":1}}],[\"组件可以派发dispatch行为action给store\",{\"1\":{\"563\":1}}],[\"组件可以是一个函数或者是一个类\",{\"1\":{\"533\":1}}],[\"组件式开发\",{\"1\":{\"534\":1}}],[\"组件式开发选择合适的css解决方案尤为重要\",{\"1\":{\"483\":1}}],[\"组件在加载和更新阶段都执行同样操作\",{\"1\":{\"520\":1}}],[\"组件中引入css文件\",{\"0\":{\"486\":1}}],[\"组件中引入\",{\"0\":{\"487\":1},\"1\":{\"484\":2,\"486\":1,\"489\":1}}],[\"组件渲染时间为\",{\"1\":{\"480\":1}}],[\"组件上使用\",{\"1\":{\"479\":1}}],[\"组件的生命周期\",{\"0\":{\"826\":1}}],[\"组件的选项\",{\"1\":{\"792\":1}}],[\"组件的\",{\"1\":{\"589\":1}}],[\"组件的创建主要分成了三种方式\",{\"1\":{\"471\":1}}],[\"组件的状态全程响应外部数据\",{\"1\":{\"465\":1}}],[\"组件就是把图形\",{\"1\":{\"470\":1}}],[\"组件更新结束后触发\",{\"1\":{\"442\":1}}],[\"组件挂载到真实dom节点后执行\",{\"1\":{\"438\":1}}],[\"组件传递的方式有很多种\",{\"1\":{\"412\":1}}],[\"组件\",{\"1\":{\"95\":2,\"470\":1,\"500\":1,\"563\":1,\"696\":3}}],[\"函数会根据模块id在已安装的模块缓存\",{\"1\":{\"941\":1}}],[\"函数加载背景图片的元素\",{\"1\":{\"879\":1}}],[\"函数合并到\",{\"1\":{\"792\":2}}],[\"函数实现时\",{\"1\":{\"659\":1}}],[\"函数重载\",{\"0\":{\"659\":1}}],[\"函数返回的树与旧版本的树进行比较\",{\"1\":{\"587\":1}}],[\"函数式组件如下\",{\"1\":{\"533\":1}}],[\"函数式组件创建的组件通过使用hooks方法也能使之成为有状态组件\",{\"1\":{\"475\":1}}],[\"函数式组件可以视为无状态组件\",{\"1\":{\"472\":1}}],[\"函数式创建\",{\"0\":{\"472\":1},\"1\":{\"471\":1}}],[\"函数式编程旨在尽可能的提高代码的无状态性和不变性\",{\"1\":{\"294\":1}}],[\"函数式编程更加强调程序执行的结果而非执行的过程\",{\"1\":{\"293\":1}}],[\"函数式编程\",{\"0\":{\"293\":1},\"1\":{\"293\":1}}],[\"函数第一个参数为props用于接收父组件传递过来的参数\",{\"1\":{\"455\":1}}],[\"函数组件使用usestate更改状态不一定导致重新render\",{\"1\":{\"589\":1}}],[\"函数组件重新渲染\",{\"1\":{\"588\":1}}],[\"函数组件通过usestate这种形式更新数据\",{\"1\":{\"588\":1}}],[\"函数组件通过usestate\",{\"1\":{\"588\":1}}],[\"函数组件也被称为无状态的组件\",{\"1\":{\"517\":1}}],[\"函数组件不得不改为类组件等等\",{\"1\":{\"517\":1}}],[\"函数组件对应如下\",{\"1\":{\"461\":1}}],[\"函数组件就是无状态组件\",{\"1\":{\"458\":1}}],[\"函数组件\",{\"0\":{\"455\":1},\"1\":{\"429\":1,\"455\":1,\"457\":1,\"538\":2}}],[\"函数也有同样的限制\",{\"1\":{\"407\":1}}],[\"函数也是对象\",{\"1\":{\"267\":1}}],[\"函数必须在向浏览器发送任何输出之前调用\",{\"1\":{\"407\":1}}],[\"函数设定\",{\"1\":{\"407\":1}}],[\"函数可以更好地进行四舍五入\",{\"1\":{\"374\":1}}],[\"函数可以注册任意数量的自动加载器\",{\"1\":{\"351\":1}}],[\"函数调用时\",{\"1\":{\"845\":1}}],[\"函数调用\",{\"1\":{\"359\":1}}],[\"函数调用要比静态属性优先\",{\"1\":{\"325\":1}}],[\"函数调用中使用的this值\",{\"1\":{\"114\":1}}],[\"函数表在内的一些用途\",{\"1\":{\"325\":1}}],[\"函数在实际调用之前\",{\"1\":{\"320\":1}}],[\"函数参数值通过值传递\",{\"1\":{\"321\":1}}],[\"函数参数使用尾部逗号\",{\"1\":{\"320\":1}}],[\"函数参数\",{\"0\":{\"320\":1}}],[\"函数来获取名称\",{\"1\":{\"306\":1}}],[\"函数两种方法来定义一个常量\",{\"1\":{\"306\":1}}],[\"函数缓存\",{\"0\":{\"278\":1}}],[\"函数逐个解析字符\",{\"1\":{\"274\":1}}],[\"函数作用域的this解析\",{\"1\":{\"270\":1}}],[\"函数\",{\"0\":{\"319\":1},\"1\":{\"270\":1,\"277\":1,\"306\":1,\"660\":1,\"770\":1,\"792\":2,\"858\":1,\"941\":1}}],[\"函数的执行\",{\"1\":{\"589\":1}}],[\"函数的调用方式\",{\"1\":{\"269\":1}}],[\"函数的类型\",{\"1\":{\"269\":1}}],[\"函数是否处于严格模式\",{\"1\":{\"269\":1}}],[\"函数是箭头函数\",{\"1\":{\"123\":1}}],[\"函数定义处进行声明实例化的时候\",{\"1\":{\"123\":1}}],[\"函数体内有名为arguments的函数或标识符为arguments的词法声明语句\",{\"1\":{\"123\":1}}],[\"函数被调用时会触发函数的内部方法\",{\"1\":{\"123\":1}}],[\"函数求值\",{\"0\":{\"123\":1}}],[\"函数声明实例化\",{\"1\":{\"118\":1}}],[\"函数声明和变量声明的绑定名称\",{\"1\":{\"117\":1}}],[\"函数声明的标识符\",{\"1\":{\"107\":1}}],[\"函数对象\",{\"1\":{\"114\":1}}],[\"函数环境记录器\",{\"1\":{\"112\":1}}],[\"函数执行完毕后重置定时器\",{\"1\":{\"848\":1}}],[\"函数执行\",{\"1\":{\"94\":1,\"589\":1}}],[\"函数中定义自己的值\",{\"1\":{\"11\":1}}],[\"脚本产生式\",{\"1\":{\"986\":1}}],[\"脚本可以为空\",{\"1\":{\"986\":1}}],[\"脚本的语法导向操作\",{\"1\":{\"977\":1}}],[\"脚本时\",{\"1\":{\"406\":1}}],[\"脚本引擎在\",{\"1\":{\"351\":1}}],[\"脚本在此处结束\",{\"1\":{\"330\":1}}],[\"脚本记录器\",{\"1\":{\"95\":1}}],[\"脚本求值\",{\"1\":{\"94\":1}}],[\"脚本执行\",{\"1\":{\"94\":1}}],[\"执行这些逻辑\",{\"1\":{\"977\":1}}],[\"执行以上的顺序\",{\"1\":{\"828\":1}}],[\"执行过程\",{\"0\":{\"828\":1}}],[\"执行beforeenter\",{\"1\":{\"759\":1}}],[\"执行blockdeclarationinstantiation\",{\"1\":{\"119\":1}}],[\"执行的结果保存到vnode中的text属性中\",{\"1\":{\"748\":1}}],[\"执行this\",{\"1\":{\"612\":1}}],[\"执行中间件\",{\"1\":{\"575\":1}}],[\"执行函数\",{\"1\":{\"538\":1,\"848\":1}}],[\"执行函数体中的语句\",{\"1\":{\"123\":1}}],[\"执行一次改变多个数据\",{\"1\":{\"527\":1}}],[\"执行顺序如下\",{\"1\":{\"828\":1}}],[\"执行顺序\",{\"0\":{\"505\":1,\"663\":1}}],[\"执行操作\",{\"1\":{\"500\":1}}],[\"执行之时dom元素还没有被更新\",{\"1\":{\"441\":1}}],[\"执行时机\",{\"1\":{\"436\":1,\"440\":1,\"442\":1}}],[\"执行运算符\",{\"0\":{\"360\":1}}],[\"执行了两次\",{\"1\":{\"260\":1}}],[\"执行createperiterationenvironment\",{\"1\":{\"122\":1}}],[\"执行\",{\"1\":{\"95\":1,\"948\":1}}],[\"执行上下文的关联代码所需的资源的realm记录器\",{\"1\":{\"95\":1}}],[\"执行上下文栈用于跟踪执行上下文\",{\"1\":{\"94\":1}}],[\"执行上下文是代码的执行环境\",{\"1\":{\"92\":1}}],[\"执行环境会负责管理代码执行过程中使用的内存\",{\"1\":{\"248\":1}}],[\"执行环境\",{\"0\":{\"92\":1}}],[\"$uri\",{\"1\":{\"895\":4}}],[\"$user2\",{\"1\":{\"368\":2}}],[\"$user1\",{\"1\":{\"368\":2}}],[\"$user\",{\"1\":{\"344\":3,\"346\":3}}],[\"$watch等方法\",{\"1\":{\"797\":1}}],[\"$parent\",{\"1\":{\"696\":3}}],[\"$listeners\",{\"1\":{\"696\":1}}],[\"$$a\",{\"1\":{\"404\":2}}],[\"$hello\",{\"1\":{\"404\":2}}],[\"$get\",{\"1\":{\"797\":1}}],[\"$globals\",{\"1\":{\"402\":7}}],[\"$greet\",{\"1\":{\"326\":3}}],[\"$item\",{\"1\":{\"407\":1}}],[\"$int++\",{\"1\":{\"403\":1}}],[\"$int\",{\"1\":{\"403\":4}}],[\"$i\",{\"1\":{\"384\":2}}],[\"$id\",{\"1\":{\"346\":3,\"368\":3,\"385\":2}}],[\"$emit\",{\"1\":{\"696\":3,\"797\":1}}],[\"$either\",{\"1\":{\"379\":2}}],[\"$epsilon\",{\"1\":{\"376\":2}}],[\"$expand\",{\"1\":{\"379\":2}}],[\"$expression\",{\"1\":{\"331\":1}}],[\"$extended\",{\"1\":{\"340\":2}}],[\"$example\",{\"1\":{\"326\":12,\"349\":3}}],[\"$key\",{\"1\":{\"359\":2}}],[\"$mount方法\",{\"1\":{\"796\":1}}],[\"$mount方法挂载元素\",{\"1\":{\"796\":1}}],[\"$mounted\",{\"1\":{\"775\":1}}],[\"$modified\",{\"1\":{\"349\":1}}],[\"$my\",{\"1\":{\"359\":1}}],[\"$message\",{\"1\":{\"326\":14}}],[\"$three\",{\"1\":{\"385\":3}}],[\"$this\",{\"1\":{\"325\":1,\"326\":1,\"336\":3,\"338\":1,\"345\":1,\"346\":2,\"349\":5,\"368\":7}}],[\"$test\",{\"1\":{\"347\":3}}],[\"$off等事件\",{\"1\":{\"797\":1}}],[\"$off\",{\"1\":{\"797\":1}}],[\"$options\",{\"1\":{\"748\":1,\"752\":1}}],[\"$on\",{\"1\":{\"672\":1,\"696\":1}}],[\"$object\",{\"1\":{\"368\":3}}],[\"$obj2\",{\"1\":{\"351\":1}}],[\"$obj\",{\"1\":{\"338\":2,\"339\":3,\"347\":1,\"351\":1}}],[\"$output\",{\"1\":{\"313\":2,\"360\":1}}],[\"$destroy生命周期\",{\"1\":{\"797\":1}}],[\"$destroy之时\",{\"1\":{\"779\":1}}],[\"$delete\",{\"1\":{\"797\":1}}],[\"$duck\",{\"1\":{\"368\":2}}],[\"$d\",{\"1\":{\"324\":2,\"375\":1}}],[\"$varname\",{\"1\":{\"408\":2}}],[\"$var\",{\"1\":{\"336\":1,\"370\":1}}],[\"$variable\",{\"1\":{\"325\":6}}],[\"$variablestoringparamname\",{\"1\":{\"324\":1}}],[\"$value\",{\"1\":{\"324\":3,\"349\":2,\"359\":1,\"384\":1}}],[\"$version=1\",{\"1\":{\"224\":1}}],[\"$name\",{\"1\":{\"325\":1,\"326\":2,\"346\":3,\"350\":2,\"368\":3,\"381\":2,\"385\":2}}],[\"$n\",{\"1\":{\"323\":2}}],[\"$numbers\",{\"1\":{\"323\":2}}],[\"$forceupdate\",{\"1\":{\"797\":1}}],[\"$forceupdated\",{\"1\":{\"714\":1}}],[\"$foo\",{\"1\":{\"325\":4,\"349\":1,\"371\":2,\"385\":2,\"399\":6}}],[\"$funcname\",{\"1\":{\"325\":1}}],[\"$flavour\",{\"1\":{\"322\":3}}],[\"$first\",{\"1\":{\"320\":1}}],[\"$set解决\",{\"1\":{\"811\":1}}],[\"$second\",{\"1\":{\"320\":1}}],[\"$s\",{\"1\":{\"389\":1}}],[\"$source\",{\"1\":{\"385\":10}}],[\"$str\",{\"1\":{\"321\":3}}],[\"$string\",{\"1\":{\"321\":2,\"324\":2}}],[\"$clolor\",{\"1\":{\"387\":1}}],[\"$class\",{\"1\":{\"350\":3,\"351\":2}}],[\"$classname\",{\"1\":{\"350\":2}}],[\"$count\",{\"1\":{\"407\":4}}],[\"$color\",{\"1\":{\"387\":4}}],[\"$colors\",{\"1\":{\"387\":2}}],[\"$container\",{\"1\":{\"322\":2}}],[\"$cache\",{\"1\":{\"359\":1}}],[\"$c\",{\"1\":{\"313\":2,\"324\":2,\"343\":2,\"375\":1}}],[\"$baz\",{\"1\":{\"385\":8}}],[\"$bar\",{\"1\":{\"338\":1,\"385\":2,\"388\":2,\"399\":6}}],[\"$b时\",{\"1\":{\"356\":1}}],[\"$b\",{\"1\":{\"313\":2,\"324\":3,\"355\":10,\"356\":19,\"361\":11,\"375\":1,\"376\":3,\"385\":4,\"402\":7}}],[\"$x\",{\"1\":{\"313\":1}}],[\"$repository\",{\"1\":{\"344\":3}}],[\"$result\",{\"1\":{\"313\":1,\"344\":4}}],[\"$return\",{\"1\":{\"313\":1}}],[\"$attrs\",{\"1\":{\"696\":3}}],[\"$a++\",{\"1\":{\"403\":1}}],[\"$arr6\",{\"1\":{\"386\":1}}],[\"$arr5\",{\"1\":{\"386\":1}}],[\"$arr4\",{\"1\":{\"386\":1}}],[\"$arr3\",{\"1\":{\"386\":1}}],[\"$arr2\",{\"1\":{\"386\":2}}],[\"$arr1\",{\"1\":{\"386\":6}}],[\"$arr\",{\"1\":{\"384\":5}}],[\"$array\",{\"1\":{\"383\":6,\"384\":11}}],[\"$arg\",{\"1\":{\"320\":1,\"326\":2}}],[\"$action\",{\"1\":{\"357\":3,\"358\":3}}],[\"$acc\",{\"1\":{\"323\":3}}],[\"$again\",{\"1\":{\"320\":1}}],[\"$age\",{\"1\":{\"313\":6,\"368\":3}}],[\"$a\",{\"1\":{\"312\":3,\"313\":2,\"315\":4,\"320\":1,\"324\":2,\"355\":12,\"356\":19,\"361\":11,\"362\":9,\"372\":6,\"375\":1,\"376\":3,\"385\":4,\"401\":2,\"402\":4,\"403\":2,\"404\":4}}],[\"$\",{\"1\":{\"90\":7,\"270\":2,\"292\":4,\"306\":1,\"357\":4,\"358\":3,\"380\":1,\"406\":7,\"407\":4,\"409\":4,\"449\":4,\"480\":1,\"488\":2,\"520\":4,\"662\":1,\"760\":1,\"884\":1,\"909\":1,\"928\":1,\"954\":1}}],[\"用单引号或双引号括起来\",{\"1\":{\"1008\":1}}],[\"用ast得到的js对象拼装成render和staticrenderfns函数\",{\"1\":{\"758\":1}}],[\"用对象的属性来描述节点\",{\"1\":{\"708\":1}}],[\"用到了key属性\",{\"1\":{\"635\":1}}],[\"用法如下\",{\"1\":{\"565\":1}}],[\"用一种数据结构来保存数据\",{\"1\":{\"525\":1}}],[\"用e\",{\"1\":{\"505\":2}}],[\"用类似这样的标记\",{\"1\":{\"406\":1}}],[\"用\",{\"1\":{\"306\":1,\"316\":1,\"386\":1,\"884\":1}}],[\"用途\",{\"1\":{\"240\":1}}],[\"用作像\",{\"1\":{\"224\":1}}],[\"用来表示抽象操作或语法导向操作的调用绝不会返回一个abrupt\",{\"1\":{\"972\":1}}],[\"用来记录side\",{\"1\":{\"428\":1}}],[\"用来在处理完这个节点之后向上返回\",{\"1\":{\"428\":1}}],[\"用来指定在这次的请求\",{\"1\":{\"224\":1}}],[\"用来限制在一个块元素显示的文本的行数\",{\"1\":{\"90\":1}}],[\"用的都是同一个传输层协议\",{\"1\":{\"217\":1}}],[\"用以表示网页服务器超文本传输协议响应状态的3位数字代码\",{\"1\":{\"205\":1}}],[\"用户现在可以更加灵活地引入细粒度逻辑\",{\"1\":{\"946\":1}}],[\"用户体验优化\",{\"0\":{\"905\":1},\"1\":{\"905\":1}}],[\"用户名\",{\"1\":{\"846\":1}}],[\"用户登陆后\",{\"1\":{\"702\":1}}],[\"用户登陆过了用户\",{\"1\":{\"287\":1}}],[\"用户创建新组件时\",{\"1\":{\"556\":1}}],[\"用户可能会感觉到卡顿\",{\"1\":{\"427\":1}}],[\"用户可以扩展websocket协议\",{\"1\":{\"201\":1}}],[\"用户定义的类型\",{\"1\":{\"367\":1}}],[\"用户打开带有恶意代码的url\",{\"1\":{\"299\":1}}],[\"用户打开带有恶意代码的url时\",{\"1\":{\"299\":1}}],[\"用户打开目标网站时\",{\"1\":{\"299\":1}}],[\"用户浏览器接收到响应后解析执行\",{\"1\":{\"299\":3}}],[\"用户下拉刷新需要触发的动作\",{\"1\":{\"291\":1}}],[\"用户统一在认证中心登录\",{\"1\":{\"287\":1}}],[\"用户只需要登陆一次就可以访问所有相互信任的应用系统\",{\"1\":{\"286\":1}}],[\"用户访问旧域名时用301就重定向到新的域名\",{\"1\":{\"212\":1}}],[\"用户访问的资源恰好在缓存系统里\",{\"1\":{\"135\":1}}],[\"用户数据包协议\",{\"1\":{\"181\":1}}],[\"用户数据报协议\",{\"1\":{\"176\":1}}],[\"用户就能够就近访问cdn的缓存代理\",{\"1\":{\"134\":1}}],[\"用户提交域名→浏览器对域名进行解释→dns\",{\"1\":{\"133\":1}}],[\"用户在上网的时候不用直接访问源站\",{\"1\":{\"132\":1}}],[\"用省略号\",{\"1\":{\"90\":1}}],[\"用于自定义编译过程中的进度报告\",{\"1\":{\"954\":1}}],[\"用于访问内置插件\",{\"1\":{\"953\":1}}],[\"用于转换某些类型的模块\",{\"1\":{\"953\":1}}],[\"用于简单dom\",{\"1\":{\"915\":1}}],[\"用于简单的认证秘钥\",{\"1\":{\"200\":1}}],[\"用于衡量网页的主要内容何时对用户可见\",{\"1\":{\"886\":1}}],[\"用于衡量收到输入事件与主线程下次空闲之间的时间差\",{\"1\":{\"881\":1}}],[\"用于监听名称为\",{\"1\":{\"878\":1}}],[\"用于监听3000端口的请求\",{\"1\":{\"449\":1}}],[\"用于懒加载图片或其他dom元素\",{\"1\":{\"862\":1}}],[\"用于合并\",{\"1\":{\"792\":1}}],[\"用于高效地更新子节点列表\",{\"1\":{\"770\":1}}],[\"用于判断两个虚拟节点\",{\"1\":{\"770\":1}}],[\"用于实际构建条件分支的代码节点\",{\"1\":{\"760\":1}}],[\"用于一些常见的文本格式化\",{\"1\":{\"744\":1}}],[\"用于存储​​父组件通过\",{\"1\":{\"696\":1}}],[\"用于具体实现\",{\"1\":{\"659\":1}}],[\"用于声明一组命名的常数\",{\"1\":{\"654\":1}}],[\"用于取值被限定在一定范围内的场景\",{\"1\":{\"639\":1}}],[\"用于可以实时的获取到更新之后的数据\",{\"1\":{\"612\":1}}],[\"用于路由的重定向\",{\"1\":{\"597\":1}}],[\"用于设置匹配到的路径\",{\"1\":{\"595\":1}}],[\"用于配置静态路由的工具库\",{\"1\":{\"592\":1}}],[\"用于生成虚拟dom\",{\"1\":{\"589\":1}}],[\"用于让我们可以获取之前的一些状态\",{\"1\":{\"573\":1}}],[\"用于日志记录\",{\"1\":{\"572\":1}}],[\"用于异步操作\",{\"1\":{\"572\":1}}],[\"用于构建用户界面的\",{\"1\":{\"530\":1}}],[\"用于服务端渲染参数传递\",{\"1\":{\"449\":1}}],[\"用于告知组件本身基于当前的props和state是否需要重新渲染组件\",{\"1\":{\"440\":1}}],[\"用于渲染dom结构\",{\"1\":{\"437\":1}}],[\"用于标记fiber的worktag类型\",{\"1\":{\"428\":1}}],[\"用于将你创建好的虚拟dom节点插入到某个真实节点上\",{\"1\":{\"421\":1}}],[\"用于表达真\",{\"1\":{\"371\":1}}],[\"用于表示\",{\"1\":{\"115\":1}}],[\"用于确定一个\",{\"1\":{\"362\":1}}],[\"用于确定背景画区\",{\"1\":{\"43\":1}}],[\"用于客户端存储大量结构化数据\",{\"1\":{\"280\":1}}],[\"用于dom是一个树结构\",{\"1\":{\"273\":1}}],[\"用于虚拟主机\",{\"1\":{\"224\":1}}],[\"用于超文本传输协议的认证的认证信息\",{\"1\":{\"224\":1}}],[\"用于封包交换数据网络的协议\",{\"1\":{\"168\":1}}],[\"用于在数据传输时对计算机的定位标识\",{\"1\":{\"138\":1}}],[\"用于跟踪运行时执行的代码\",{\"1\":{\"95\":1}}],[\"用于选取指定选择器的首字母\",{\"1\":{\"35\":1}}],[\"控制流表达式\",{\"1\":{\"925\":1}}],[\"控制协商缓存的标头分别是last\",{\"1\":{\"867\":1}}],[\"控制强缓存的标头分别是expires和cache\",{\"1\":{\"864\":1}}],[\"控制小程序包的大小\",{\"1\":{\"839\":1}}],[\"控制手段\",{\"1\":{\"757\":1}}],[\"控制台都会输出foo\",{\"1\":{\"588\":1}}],[\"控制\",{\"1\":{\"584\":1}}],[\"控制能力较弱\",{\"1\":{\"467\":1}}],[\"控制传输协议\",{\"1\":{\"176\":1}}],[\"控制显示行数\",{\"1\":{\"89\":1}}],[\"控制文本大小写\",{\"1\":{\"37\":1}}],[\"设想中的应用程序维度的分层是无法实现的\",{\"1\":{\"177\":1}}],[\"设定多个值\",{\"1\":{\"407\":1}}],[\"设定了自定义的错误处理函数\",{\"1\":{\"359\":1}}],[\"设定当前元素高度\",{\"1\":{\"89\":1}}],[\"设定行高\",{\"1\":{\"89\":1}}],[\"设置bundle\",{\"0\":{\"940\":1}}],[\"设置缓存的最大有效期\",{\"1\":{\"866\":1}}],[\"设置一个新的\",{\"0\":{\"928\":1}}],[\"设置一个合适的时间间隔\",{\"1\":{\"849\":1}}],[\"设置一次\",{\"1\":{\"59\":1}}],[\"设置key与不设置key的差异\",{\"0\":{\"769\":1}}],[\"设置了缓存的组件会多出来两个生命周期钩子\",{\"1\":{\"763\":1}}],[\"设置主分支\",{\"1\":{\"760\":1}}],[\"设置display\",{\"1\":{\"759\":1}}],[\"设置全局错误处理函数\",{\"1\":{\"741\":1}}],[\"设置新旧vnode的头尾指针\",{\"1\":{\"733\":1}}],[\"设置提交代码的用户信息命令如下\",{\"1\":{\"687\":1}}],[\"设置匹配到路径后\",{\"1\":{\"595\":2}}],[\"设置限速\",{\"1\":{\"212\":1}}],[\"设置为它真正的值\",{\"1\":{\"970\":1}}],[\"设置为\",{\"1\":{\"123\":1,\"970\":1}}],[\"设置当前上下文的词法环境为loopenv\",{\"1\":{\"122\":1}}],[\"设置当前上下文的词法环境为blockenv\",{\"1\":{\"119\":1}}],[\"设置scriptcontext的词法环境\",{\"1\":{\"106\":1}}],[\"设置或检索伸缩盒对象的子元素的排列方式\",{\"1\":{\"90\":1}}],[\"设置省略号样式\",{\"1\":{\"89\":1}}],[\"设置单行文本溢出较为简单\",{\"1\":{\"87\":1}}],[\"设置\",{\"1\":{\"81\":1,\"371\":1}}],[\"设置元素的visibility为hidden也是一种常用的隐藏元素的方法\",{\"1\":{\"68\":1}}],[\"设置元素的display为none是最常用的隐藏元素的方法\",{\"1\":{\"67\":1}}],[\"设置元素阴影\",{\"1\":{\"41\":1}}],[\"设置height\",{\"0\":{\"70\":1},\"1\":{\"66\":1}}],[\"设置html文档\",{\"1\":{\"35\":1}}],[\"设置根元素字体大小\",{\"1\":{\"59\":1}}],[\"设置不同的背景图片\",{\"1\":{\"56\":1}}],[\"设置特定字体大小18px\",{\"1\":{\"56\":1}}],[\"设置文字在一行显示\",{\"1\":{\"87\":1}}],[\"设置文字边界宽度\",{\"1\":{\"47\":1}}],[\"设置文字边界填充颜色\",{\"1\":{\"47\":1}}],[\"设置文字内部填充颜色\",{\"1\":{\"47\":1}}],[\"设置属性如下\",{\"1\":{\"41\":1}}],[\"设置嵌套引用的引号类型\",{\"1\":{\"37\":1}}],[\"设置相邻单元格的边框间的距离\",{\"1\":{\"37\":1}}],[\"设置字体的尺寸\",{\"1\":{\"37\":1}}],[\"设置字体的粗细\",{\"1\":{\"37\":1}}],[\"设置父元素为display\",{\"1\":{\"28\":1}}],[\"设置父元素为相对定位\",{\"1\":{\"26\":1}}],[\"设置盒子为\",{\"1\":{\"18\":1}}],[\"设置width为200px\",{\"1\":{\"16\":1}}],[\"优化项目的依赖关系\",{\"1\":{\"941\":1}}],[\"优化模块id\",{\"1\":{\"941\":1}}],[\"优化webpack\",{\"1\":{\"941\":1}}],[\"优化\",{\"1\":{\"939\":1}}],[\"优化等\",{\"1\":{\"932\":1}}],[\"优化图片等手段\",{\"1\":{\"892\":1}}],[\"优化手段\",{\"0\":{\"838\":1}}],[\"优化了第一种继承方式的弊端\",{\"1\":{\"259\":1}}],[\"优秀\",{\"1\":{\"834\":1}}],[\"优势\",{\"0\":{\"534\":1},\"1\":{\"717\":1}}],[\"优缺点\",{\"0\":{\"423\":1}}],[\"优点的一种协议\",{\"1\":{\"169\":1}}],[\"优点\",{\"0\":{\"201\":1},\"1\":{\"82\":1,\"675\":1,\"677\":1,\"678\":1,\"681\":1,\"870\":1}}],[\"优先级处理\",{\"1\":{\"793\":1}}],[\"优先级高的任务可以中断低优先级的任务\",{\"1\":{\"428\":1}}],[\"优先级等特性\",{\"1\":{\"198\":1}}],[\"优先级是由\",{\"1\":{\"36\":1}}],[\"优先级\",{\"0\":{\"36\":1}}],[\"或语法导向操作\",{\"1\":{\"967\":1}}],[\"或从下到上\",{\"1\":{\"948\":1}}],[\"或从后台进入前台显示时触发\",{\"1\":{\"824\":1}}],[\"或编译\",{\"1\":{\"946\":1}}],[\"或其他指定的配置文件\",{\"1\":{\"932\":1}}],[\"或动画\",{\"1\":{\"879\":1}}],[\"或关闭当前页面返回上一页wx\",{\"1\":{\"828\":1}}],[\"或系统资源占用高\",{\"1\":{\"828\":1}}],[\"或proxy对象代理\",{\"1\":{\"811\":1}}],[\"或$root\",{\"1\":{\"696\":1}}],[\"或未被\",{\"1\":{\"696\":1}}],[\"或在生成器中使用\",{\"1\":{\"395\":1}}],[\"或最小单元取整数\",{\"1\":{\"376\":1}}],[\"或实数\",{\"1\":{\"375\":1}}],[\"或三元\",{\"1\":{\"357\":1}}],[\"或资源\",{\"1\":{\"347\":1}}],[\"或token\",{\"1\":{\"287\":2}}],[\"或是一个尾调用本身的其他函数等等\",{\"1\":{\"253\":1}}],[\"或\",{\"1\":{\"209\":1,\"306\":1,\"329\":1,\"331\":2,\"332\":1,\"333\":1,\"391\":1,\"398\":1,\"407\":1,\"643\":1,\"760\":1,\"948\":1}}],[\"或提供操作列表供请求者选择\",{\"1\":{\"209\":1}}],[\"或称为算法\",{\"1\":{\"130\":1}}],[\"或一个参数列表通过逗号\",{\"1\":{\"128\":1}}],[\"或函数声明\",{\"1\":{\"113\":1}}],[\"或者一个\",{\"1\":{\"949\":1}}],[\"或者是一个函数\",{\"1\":{\"612\":1}}],[\"或者是视频文件等大文件的加载\",{\"1\":{\"212\":1}}],[\"或者支持错误处理\",{\"1\":{\"571\":1}}],[\"或者嵌套在另一个组件内部\",{\"1\":{\"533\":1}}],[\"或者取消订阅的网络请求等\",{\"1\":{\"444\":1}}],[\"或者用此功能从多选输入框中取得值\",{\"1\":{\"406\":1}}],[\"或者超全局变量\",{\"1\":{\"400\":1}}],[\"或者下划线\",{\"1\":{\"398\":1}}],[\"或者下划线开头\",{\"1\":{\"398\":1}}],[\"或者使用子包预加载技术\",{\"1\":{\"839\":1}}],[\"或者使用\",{\"1\":{\"374\":1,\"925\":1}}],[\"或者它们的类型不同\",{\"1\":{\"356\":1}}],[\"或者叫字段\",{\"1\":{\"345\":1}}],[\"或者\",{\"1\":{\"332\":1,\"333\":1,\"372\":1,\"385\":1,\"936\":1}}],[\"或者和参数重名\",{\"1\":{\"326\":1}}],[\"或者在编译时已经包括进去了\",{\"1\":{\"307\":1}}],[\"或者动态加载后\",{\"1\":{\"307\":1}}],[\"或者冒充用户的行为\",{\"1\":{\"299\":3}}],[\"或者get请求中的body携带参数\",{\"1\":{\"217\":1}}],[\"或者服务器拒绝请求又不想说明理由时\",{\"1\":{\"212\":1}}],[\"或者如果请求已经完成\",{\"1\":{\"207\":1}}],[\"或者说代理\",{\"1\":{\"133\":1}}],[\"或者配合下面两个属性实现文本溢出省略\",{\"1\":{\"87\":1}}],[\"或者设为flex\",{\"1\":{\"82\":1}}],[\"或毫秒\",{\"1\":{\"13\":1}}],[\"盒内元素的高度撑开容器的高度\",{\"1\":{\"82\":1}}],[\"盒内元素两端对其\",{\"1\":{\"82\":1}}],[\"盒子总高度\",{\"1\":{\"16\":1,\"17\":1}}],[\"盒子总宽度\",{\"1\":{\"16\":1,\"17\":1}}],[\"盒子模型的属性\",{\"1\":{\"37\":1}}],[\"盒子模型为w3c\",{\"1\":{\"15\":1}}],[\"盒子模型可以分成\",{\"1\":{\"15\":1}}],[\"盒子模型\",{\"0\":{\"15\":1},\"1\":{\"15\":1,\"18\":1}}],[\"填充剩下的宽度\",{\"1\":{\"81\":1}}],[\"填写需要变化的css属性\",{\"1\":{\"11\":1}}],[\"结尾的文件\",{\"1\":{\"948\":1}}],[\"结束索引\",{\"1\":{\"920\":1}}],[\"结束标记时就简单地将其后内容原样输出\",{\"1\":{\"331\":1}}],[\"结束标记之后万一意外加入了空格或者换行符\",{\"1\":{\"330\":1}}],[\"结束标记\",{\"1\":{\"330\":2}}],[\"结论\",{\"0\":{\"797\":1}}],[\"结果\",{\"1\":{\"355\":1,\"356\":1,\"361\":1}}],[\"结果和过渡应该一样\",{\"1\":{\"51\":1}}],[\"结合\",{\"1\":{\"632\":1}}],[\"结合上面的因素\",{\"1\":{\"134\":1}}],[\"结合元素高度\",{\"1\":{\"89\":1}}],[\"结构\",{\"1\":{\"760\":1}}],[\"结构如下图所示\",{\"1\":{\"677\":1,\"678\":1,\"681\":1}}],[\"结构共享\",{\"1\":{\"525\":1}}],[\"结构拼接的页面处理技术\",{\"1\":{\"448\":1}}],[\"结构中含有复杂的变量时要像\",{\"1\":{\"381\":1}}],[\"结构中单引号不用被转义\",{\"1\":{\"381\":1}}],[\"结构用来设定一段代码的执行指令\",{\"1\":{\"314\":1}}],[\"结构用替代语法格式写的例子\",{\"1\":{\"312\":1}}],[\"结构简单直观\",{\"1\":{\"82\":1}}],[\"结构变复杂\",{\"1\":{\"80\":1}}],[\"缺点\",{\"1\":{\"80\":1,\"280\":2,\"423\":2,\"485\":1,\"677\":1,\"678\":1,\"681\":1,\"702\":3,\"916\":1}}],[\"外部可以自由访问\",{\"1\":{\"651\":1}}],[\"外层是全局作用域\",{\"1\":{\"270\":1}}],[\"外层是浮动的\",{\"1\":{\"80\":1}}],[\"外层通过\",{\"1\":{\"81\":1}}],[\"外阴影\",{\"1\":{\"41\":1}}],[\"基本配置\",{\"0\":{\"926\":1}}],[\"基本上都能找回\",{\"1\":{\"675\":1}}],[\"基本上是相对视口的属性\",{\"1\":{\"285\":1}}],[\"基本使用如下\",{\"1\":{\"488\":1,\"559\":1}}],[\"基于dom元素的事件冒泡\",{\"1\":{\"850\":1}}],[\"基于浏览器内核重构的内置解析器\",{\"1\":{\"822\":1}}],[\"基于webpack\",{\"1\":{\"812\":1}}],[\"基于websocket的事实通信的特点\",{\"1\":{\"202\":1}}],[\"基于es模块\",{\"1\":{\"812\":1}}],[\"基于模块化状态树\",{\"1\":{\"812\":1}}],[\"基于响应式数据缓存计算结果\",{\"1\":{\"811\":1}}],[\"基于当前分支新建分支\",{\"1\":{\"690\":1}}],[\"基于当前分支\",{\"1\":{\"690\":1}}],[\"基于\",{\"1\":{\"592\":2,\"685\":1}}],[\"基于虚拟\",{\"1\":{\"546\":1}}],[\"基于这个值进行渲染工作\",{\"1\":{\"416\":1}}],[\"基于位置的应用\",{\"1\":{\"202\":1}}],[\"基于字节流的传输层通信协议\",{\"1\":{\"168\":1}}],[\"基于行数截断\",{\"0\":{\"90\":1},\"1\":{\"88\":1}}],[\"基于高度截断\",{\"0\":{\"89\":1},\"1\":{\"88\":1}}],[\"基于绝对定位的三栏布局\",{\"1\":{\"79\":1}}],[\"基础框盒模型\",{\"1\":{\"15\":1}}],[\"主线程都会被视为阻塞\",{\"1\":{\"885\":1}}],[\"主线程上运行超过\",{\"1\":{\"885\":1}}],[\"主机相同\",{\"1\":{\"722\":1}}],[\"主动销毁后再次打开的情况\",{\"1\":{\"837\":1}}],[\"主动将localstorage的数据传递给服务端\",{\"1\":{\"287\":1}}],[\"主动用503响应请求或\",{\"1\":{\"212\":1}}],[\"主题等\",{\"1\":{\"227\":1}}],[\"主体内容是最后加载的\",{\"1\":{\"78\":1}}],[\"主要通过mountcomponent方法\",{\"1\":{\"797\":1}}],[\"主要通过检验和\",{\"1\":{\"182\":1}}],[\"主要做了如下判断\",{\"1\":{\"732\":2}}],[\"主要做了以下的操作\",{\"1\":{\"428\":1}}],[\"主要分成了四个部分\",{\"1\":{\"685\":1}}],[\"主要是提供了一些组件\",{\"1\":{\"593\":1}}],[\"主要是因为不写key是将所有的文本内容替换一下\",{\"1\":{\"542\":1}}],[\"主要是做一个预设的动画\",{\"1\":{\"51\":1}}],[\"主要体现在减少渲染的次数\",{\"1\":{\"527\":1,\"558\":1}}],[\"主要表示当前fiber代表的组件类型如functioncomponent\",{\"1\":{\"428\":1}}],[\"主要思想是组件不会改变接收的数据\",{\"1\":{\"418\":1}}],[\"主要的错误来源包括\",{\"1\":{\"741\":1}}],[\"主要的功能如下\",{\"1\":{\"667\":1}}],[\"主要的方法如下\",{\"1\":{\"526\":1}}],[\"主要的编程范式有三种\",{\"1\":{\"293\":1}}],[\"主要的传输层协议是tcp和udp\",{\"1\":{\"161\":1}}],[\"主要作用就是为了确认双方的接收能力和发送能力是否正常\",{\"1\":{\"243\":1}}],[\"主要作用时\",{\"1\":{\"224\":1}}],[\"主要用于以下三个方面\",{\"1\":{\"227\":1}}],[\"主要用于websocket或http2升级\",{\"1\":{\"207\":1}}],[\"主要用于设定图片本身\",{\"1\":{\"45\":1}}],[\"右移\",{\"1\":{\"355\":1}}],[\"右边千万不能加引号\",{\"1\":{\"421\":1}}],[\"右边通过使用负\",{\"1\":{\"80\":1}}],[\"右边在主体内容之前\",{\"1\":{\"78\":1}}],[\"右边模块使用\",{\"1\":{\"75\":1}}],[\"右侧部分会被挤下去\",{\"1\":{\"78\":1}}],[\"中重复使用\",{\"1\":{\"956\":1}}],[\"中指定\",{\"1\":{\"949\":1}}],[\"中被弃用\",{\"1\":{\"947\":1}}],[\"中使用\",{\"1\":{\"946\":1}}],[\"中查找模块\",{\"1\":{\"941\":1}}],[\"中包含可见区域上方的内容\",{\"1\":{\"886\":1}}],[\"中用于存储​​父组件通过\",{\"1\":{\"696\":1}}],[\"中文件的内容或目录结构计算出来\",{\"1\":{\"685\":1}}],[\"中初始化\",{\"1\":{\"620\":1,\"622\":1}}],[\"中接收到的history对象具有一些方便的方法\",{\"1\":{\"596\":1}}],[\"中组件的首字母\",{\"1\":{\"537\":1}}],[\"中做对比\",{\"1\":{\"527\":1,\"558\":1}}],[\"中是不识别的\",{\"1\":{\"487\":1}}],[\"中是不可变的所以它永远不会改变\",{\"1\":{\"461\":1}}],[\"中读取\",{\"1\":{\"461\":1}}],[\"中任务切割为多个步骤\",{\"1\":{\"429\":1}}],[\"中任何一个为\",{\"1\":{\"355\":1}}],[\"中在\",{\"1\":{\"406\":1}}],[\"中写成\",{\"1\":{\"368\":1}}],[\"中为\",{\"1\":{\"355\":1}}],[\"中一个为\",{\"1\":{\"355\":1}}],[\"中都为\",{\"1\":{\"355\":1}}],[\"中都没有\",{\"1\":{\"182\":1}}],[\"中则需要使用\",{\"1\":{\"331\":1}}],[\"中出现的事件是由\",{\"1\":{\"315\":1}}],[\"中\",{\"1\":{\"150\":1,\"217\":1,\"312\":1,\"338\":1,\"384\":1,\"533\":1,\"589\":1,\"792\":2,\"946\":1}}],[\"中才能发挥作用\",{\"1\":{\"98\":1}}],[\"中间件内部\",{\"1\":{\"575\":1}}],[\"中间件就是放在就是在dispatch过程\",{\"1\":{\"571\":1}}],[\"中间件\",{\"0\":{\"571\":1},\"1\":{\"571\":1}}],[\"中间件会将所有静态文件的路由指向public文件夹\",{\"1\":{\"449\":2}}],[\"中间设置\",{\"1\":{\"81\":1}}],[\"中间占满一行\",{\"1\":{\"79\":1}}],[\"中间宽度自适应\",{\"1\":{\"78\":1}}],[\"中间使用了双层标签\",{\"1\":{\"80\":1}}],[\"中间使用\",{\"0\":{\"78\":1,\"79\":1},\"1\":{\"77\":2}}],[\"中的定义进行\",{\"1\":{\"1008\":1}}],[\"中的问题\",{\"1\":{\"949\":1}}],[\"中的所有\",{\"1\":{\"949\":1}}],[\"中的内容时注册\",{\"1\":{\"886\":1}}],[\"中的字符串\",{\"1\":{\"775\":1}}],[\"中的元素时\",{\"1\":{\"581\":1}}],[\"中的位向右移动\",{\"1\":{\"355\":1}}],[\"中的位向左移动\",{\"1\":{\"355\":1}}],[\"中的extends\",{\"0\":{\"264\":1}}],[\"中的每个参数都经过组合\",{\"1\":{\"129\":1}}],[\"中的绑定\",{\"1\":{\"117\":1}}],[\"中的增加了更多的媒体查询\",{\"1\":{\"56\":1}}],[\"中的\",{\"1\":{\"18\":1,\"315\":1,\"383\":1,\"526\":2,\"578\":1}}],[\"两次调用\",{\"1\":{\"925\":1}}],[\"两个冒号便是此法\",{\"1\":{\"992\":1}}],[\"两个组件显示和隐藏切换时\",{\"1\":{\"632\":1}}],[\"两个参数给其回调函数\",{\"1\":{\"479\":1}}],[\"两个秘钥是不同的\",{\"1\":{\"236\":1}}],[\"两者都是用于保存信息\",{\"1\":{\"622\":1}}],[\"两者都是\",{\"1\":{\"622\":1}}],[\"两者都能主动的向对方发送或接受数据\",{\"1\":{\"195\":1}}],[\"两者看起来实现功能是一致的\",{\"1\":{\"461\":1}}],[\"两者最明显的区别在于编写形式的不同\",{\"1\":{\"457\":1}}],[\"两者最大的区别为第一行方法名不同\",{\"1\":{\"217\":1}}],[\"两者的区别如下\",{\"1\":{\"422\":1}}],[\"两者之间就可以创建持久性的连接\",{\"1\":{\"195\":1}}],[\"两者区别如下表所示\",{\"1\":{\"183\":1}}],[\"两台主机之间的数据传输\",{\"1\":{\"163\":1}}],[\"两台计算机之间传送数据时其通信链路往往不止一条\",{\"1\":{\"162\":1}}],[\"两边固定宽度\",{\"1\":{\"78\":1}}],[\"两边使用\",{\"0\":{\"78\":1,\"79\":1,\"80\":1},\"1\":{\"77\":3}}],[\"两栏布局实现效果就是将页面分割成左右宽度不等的两列\",{\"1\":{\"74\":1}}],[\"两栏布局\",{\"1\":{\"74\":1}}],[\"留出左边浮动元素的宽度\",{\"1\":{\"75\":1}}],[\"撑出内容块做内容展示\",{\"1\":{\"75\":1}}],[\"左移\",{\"1\":{\"355\":1}}],[\"左右设置固定宽度\",{\"1\":{\"81\":1}}],[\"左右两边使用绝对定位\",{\"1\":{\"79\":1}}],[\"左右两列次之\",{\"1\":{\"74\":1}}],[\"左边通过使用负\",{\"1\":{\"80\":1}}],[\"左浮左边栏\",{\"1\":{\"75\":1}}],[\"往往是以一个定宽栏和一个自适应的栏并排展示存在\",{\"1\":{\"75\":1}}],[\"蓝色区域为主要内容布局容器\",{\"1\":{\"74\":1}}],[\"布局偏移\",{\"1\":{\"880\":1}}],[\"布局\",{\"0\":{\"74\":1},\"1\":{\"192\":1}}],[\"能在组件切换过程中将状态保留在内存中\",{\"1\":{\"763\":1}}],[\"能记录任何工程项目内各个模块的改动历程\",{\"1\":{\"675\":1}}],[\"能追踪工程蓝图从诞生一直到定案的过程\",{\"1\":{\"675\":1}}],[\"能用无状态组件则用无状态组件\",{\"1\":{\"475\":1}}],[\"能够产生额外的任意文件\",{\"1\":{\"946\":1}}],[\"能够达到资源共享\",{\"1\":{\"571\":1}}],[\"能够避免在render操作中重复绑定\",{\"1\":{\"513\":1}}],[\"能够有效避免真实dom数频繁更新\",{\"1\":{\"423\":1}}],[\"能够被上层应用识别\",{\"1\":{\"230\":1}}],[\"能够接受的回应内容的自然语言列表\",{\"1\":{\"224\":1}}],[\"能够接受的回应内容类型\",{\"1\":{\"224\":1}}],[\"能够接受的编码方式列表\",{\"1\":{\"224\":1}}],[\"能够接受的字符集\",{\"1\":{\"224\":1}}],[\"能够规定水平阴影\",{\"1\":{\"47\":1}}],[\"能更好的节省服务器资源和带宽并达到实时通迅\",{\"1\":{\"195\":1}}],[\"能\",{\"1\":{\"72\":3}}],[\"会调用这个函数\",{\"1\":{\"941\":1}}],[\"会假定项目的入口起点为\",{\"1\":{\"926\":1}}],[\"会根据manifest来加载和解析模块\",{\"1\":{\"942\":1}}],[\"会根据该配置定义的属性进行处理\",{\"1\":{\"925\":1}}],[\"会根据条件来忽略之\",{\"1\":{\"331\":1}}],[\"会加载各种各样的资源\",{\"1\":{\"870\":1}}],[\"会协商服务器资源是否修改\",{\"1\":{\"867\":1}}],[\"会有一定的延时\",{\"1\":{\"836\":1}}],[\"会关闭其他的非tabar的页面\",{\"1\":{\"832\":1}}],[\"会触发一系列的生命周期事件\",{\"1\":{\"932\":1}}],[\"会触发onready方法\",{\"1\":{\"828\":1}}],[\"会触发组件的生命周期\",{\"1\":{\"757\":1}}],[\"会用createstaticvnode方法在客户端去生成一个static\",{\"1\":{\"818\":1}}],[\"会做静态提升\",{\"1\":{\"818\":1}}],[\"会合并为一个数组\",{\"1\":{\"791\":1}}],[\"会被销毁\",{\"1\":{\"828\":1}}],[\"会被直接innerhtml\",{\"1\":{\"818\":1}}],[\"会被直接remove或者destoryed\",{\"1\":{\"768\":1}}],[\"会被bebel转化成如下\",{\"1\":{\"537\":1}}],[\"会影响节点是否被包含在最终的渲染函数中\",{\"1\":{\"760\":1}}],[\"会影响效率\",{\"1\":{\"440\":1}}],[\"会传入过渡对象\",{\"1\":{\"759\":1}}],[\"会自动绑定根元素\",{\"1\":{\"696\":1}}],[\"会自动将请求者转到新位置\",{\"1\":{\"209\":1}}],[\"会保留之前分支的所有文件\",{\"1\":{\"690\":1}}],[\"会提交哪些内容\",{\"1\":{\"689\":1}}],[\"会提供两类重要的宿主对象\",{\"1\":{\"100\":1}}],[\"会add哪些内容\",{\"1\":{\"689\":1}}],[\"会移除两个class\",{\"1\":{\"633\":1}}],[\"会在用户可见\",{\"1\":{\"886\":1}}],[\"会在setstate调用完成并且组件开始重新渲染时被调用\",{\"1\":{\"620\":1}}],[\"会在函数环境记录器上再创建一个声明式环境记录器\",{\"1\":{\"123\":1}}],[\"会判断当前值有无发生改变确定是否执行render方法\",{\"1\":{\"589\":1}}],[\"会判断变量类型并在需要时进行转换\",{\"1\":{\"409\":1}}],[\"会使组件的实例或者是dom结构暴露\",{\"1\":{\"584\":1}}],[\"会重新生成一个数字\",{\"1\":{\"543\":1}}],[\"会返回当前\",{\"1\":{\"601\":1}}],[\"会返回一个对象\",{\"1\":{\"525\":1}}],[\"会返回503\",{\"1\":{\"212\":1}}],[\"会冒泡到\",{\"1\":{\"505\":1}}],[\"会把渲染期间发生的所有错误打印到控制台\",{\"1\":{\"500\":1}}],[\"会导致页面响应度变差\",{\"1\":{\"427\":1}}],[\"会导致\",{\"1\":{\"330\":1}}],[\"会寻找起始和结束标记\",{\"1\":{\"330\":1}}],[\"会抛出\",{\"1\":{\"313\":1}}],[\"会建立一个局部会话\",{\"1\":{\"286\":1}}],[\"会报错\",{\"1\":{\"259\":1}}],[\"会发现输入的内容并无法显示出来\",{\"1\":{\"465\":1}}],[\"会发现s2也跟着发生变化了\",{\"1\":{\"258\":1}}],[\"会发送\",{\"1\":{\"244\":1}}],[\"会发送一个\",{\"1\":{\"243\":1}}],[\"会占用内存\",{\"1\":{\"250\":1}}],[\"会标记内存中存储的所有变量\",{\"1\":{\"249\":1}}],[\"会以自己的\",{\"1\":{\"243\":1}}],[\"会对已申请的公开密钥做数字签名\",{\"1\":{\"240\":1}}],[\"会将转换应用在已处理过的资源上\",{\"1\":{\"946\":1}}],[\"会将指令系统转为可执行的render函数\",{\"1\":{\"752\":1}}],[\"会将下一个\",{\"1\":{\"383\":1}}],[\"会将网站支持的证书信息\",{\"1\":{\"231\":1}}],[\"会将各层合成\",{\"1\":{\"192\":1}}],[\"会话状态管理\",{\"1\":{\"227\":1}}],[\"会话状态\",{\"0\":{\"227\":1}}],[\"会话层就是负责建立\",{\"1\":{\"160\":1}}],[\"会话层\",{\"0\":{\"160\":1}}],[\"会给\",{\"1\":{\"218\":1}}],[\"会ordinaryfunctioncreate创建函数对象\",{\"1\":{\"123\":1}}],[\"会收集自身区域的标识符并绑定到相应的环境记录器\",{\"1\":{\"118\":1}}],[\"会忽略所有的函数声明\",{\"1\":{\"107\":1}}],[\"会创建迭代器的内置对象方法\",{\"1\":{\"94\":1}}],[\"会\",{\"1\":{\"72\":3,\"811\":1}}],[\"会照成布局的复杂度\",{\"1\":{\"57\":1}}],[\"其语义通过语法导向操作进行表达\",{\"1\":{\"977\":1}}],[\"其导出对象会被缓存起来\",{\"1\":{\"941\":1}}],[\"其作用是用来跟踪管理版本的\",{\"1\":{\"685\":1}}],[\"其作用是通过应用程序间的交互来完成特定的网络应用\",{\"1\":{\"158\":1}}],[\"其是一个开源协作社区\",{\"1\":{\"684\":1}}],[\"其不支持远程操作\",{\"1\":{\"677\":1}}],[\"其不会向组件引入任何额外标记\",{\"1\":{\"556\":1}}],[\"其不会被再次挂载\",{\"1\":{\"444\":1}}],[\"其处理方式如下\",{\"1\":{\"635\":1}}],[\"其主要提供了三个主要的组件\",{\"1\":{\"632\":1}}],[\"其为元素添加enter\",{\"1\":{\"632\":1}}],[\"其特性如下\",{\"1\":{\"606\":1}}],[\"其本质上一个函数\",{\"1\":{\"571\":1}}],[\"其渲染流程如下所示\",{\"1\":{\"539\":1}}],[\"其被认定为自定义组件\",{\"1\":{\"537\":1}}],[\"其被认定为原生\",{\"1\":{\"537\":1}}],[\"其出现场景在于弥补\",{\"1\":{\"526\":1}}],[\"其它节点则进行共享\",{\"1\":{\"525\":1}}],[\"其它\",{\"0\":{\"521\":1}}],[\"其在老集合的最大下标\",{\"1\":{\"496\":1}}],[\"其在render方法之后执行\",{\"1\":{\"438\":1}}],[\"其引入css的方式有很多种\",{\"1\":{\"483\":1}}],[\"其应用场景如下图所示\",{\"1\":{\"467\":1}}],[\"其区别主要分成以下几大方向\",{\"1\":{\"456\":1}}],[\"其解决的问题主要有两个\",{\"1\":{\"448\":1}}],[\"其数据结构如下\",{\"1\":{\"428\":1}}],[\"其下存在provider组件用于创建数据源\",{\"1\":{\"416\":1}}],[\"其值并不丢失\",{\"1\":{\"403\":1}}],[\"其值为undefined\",{\"1\":{\"114\":1}}],[\"其实现动画的原理在于\",{\"1\":{\"633\":1}}],[\"其实也是一个高阶组件\",{\"1\":{\"550\":1}}],[\"其实这三个方法仍然存在\",{\"1\":{\"445\":1}}],[\"其实不然\",{\"1\":{\"304\":1}}],[\"其实就是指建立一个tcp连接时\",{\"1\":{\"243\":1}}],[\"其实就是缓存了源站内容的代理服务器\",{\"1\":{\"132\":1}}],[\"其优缺点也很明显\",{\"1\":{\"262\":1}}],[\"其安全性由ssl来保证\",{\"1\":{\"233\":1}}],[\"其限制取决于操作系统的支持\",{\"1\":{\"218\":1}}],[\"其存在的应用场景大概有\",{\"1\":{\"202\":1}}],[\"其位于\",{\"1\":{\"159\":1}}],[\"其他打包程序或任务执行器的可能并不支持\",{\"1\":{\"946\":1}}],[\"其他的类可以访问mixin类的方法而不必成为子类\",{\"1\":{\"787\":1}}],[\"其他修改\",{\"1\":{\"689\":1}}],[\"其他每个人都从这个\",{\"1\":{\"684\":1}}],[\"其他所有的属性\",{\"1\":{\"667\":1}}],[\"其他区域可重复使用该名字而不冲突\",{\"1\":{\"639\":1}}],[\"其他route\",{\"1\":{\"603\":1}}],[\"其他组件都被包裹在顶层元素之上\",{\"1\":{\"564\":1}}],[\"其他组件通过订阅store中的状态state来更新自身的视图\",{\"1\":{\"563\":1}}],[\"其他浏览器一次渲染\",{\"1\":{\"539\":1}}],[\"其他类型\",{\"1\":{\"538\":1}}],[\"其他数据都能读取对应的数据\",{\"1\":{\"416\":1}}],[\"其他页面会触发storage事件\",{\"1\":{\"280\":1}}],[\"其他\",{\"1\":{\"134\":1,\"518\":1}}],[\"其子元素不能设置opacity来达到显示的效果\",{\"1\":{\"69\":1}}],[\"其中主要分成了两种模式\",{\"1\":{\"606\":1}}],[\"其中属性to代替a标题的href属性\",{\"1\":{\"596\":1}}],[\"其中index模块用于导出对外的接口\",{\"1\":{\"570\":1}}],[\"其中采用了批处理\",{\"1\":{\"539\":1}}],[\"其中css由\",{\"1\":{\"488\":1}}],[\"其中每个任务更新单元为\",{\"1\":{\"429\":1}}],[\"其中每个字符等同于一个字节\",{\"1\":{\"378\":1}}],[\"其中一些类型可以写成类型声明\",{\"1\":{\"366\":1}}],[\"其中包含恶意代码\",{\"1\":{\"299\":2}}],[\"其中涉及的构造函数\",{\"1\":{\"258\":1}}],[\"其中面向连接的\",{\"1\":{\"172\":1}}],[\"其中\",{\"1\":{\"161\":1,\"345\":1,\"526\":1}}],[\"其中有两个衡量cdn服务质量的指标\",{\"1\":{\"135\":1}}],[\"其中水平阴影和垂直阴影是必须设置的\",{\"1\":{\"41\":1}}],[\"其中它们的值计算规则如下\",{\"1\":{\"36\":1}}],[\"其中timing\",{\"1\":{\"11\":1}}],[\"层级\",{\"1\":{\"493\":2}}],[\"层次名称\",{\"1\":{\"176\":1}}],[\"层次选择器\",{\"1\":{\"35\":1}}],[\"层\",{\"1\":{\"162\":1}}],[\"层面的解决方案\",{\"1\":{\"530\":1}}],[\"层面的\",{\"1\":{\"69\":1}}],[\"对该位置后面紧跟的内容进行限制\",{\"1\":{\"997\":1}}],[\"对该节点的引用可以在\",{\"1\":{\"581\":1}}],[\"对加载的模块进行一系列的转换操作\",{\"1\":{\"932\":1}}],[\"对非可见区域中的数据不渲染或部分渲染的技术\",{\"1\":{\"919\":1}}],[\"对大量的数据分批渲染\",{\"1\":{\"915\":1}}],[\"对调试很有用\",{\"1\":{\"909\":1}}],[\"对按需加载\",{\"1\":{\"907\":1}}],[\"对超过10kb的文件进行压缩\",{\"1\":{\"895\":1}}],[\"对这些静态文件的加载速度也会得到提升\",{\"1\":{\"893\":1}}],[\"对不参与更新的元素\",{\"1\":{\"818\":1}}],[\"对会发生变化的地方增加了flag标记\",{\"1\":{\"818\":1}}],[\"对比数据变化\",{\"1\":{\"778\":1}}],[\"对性能会有影响\",{\"1\":{\"702\":1}}],[\"对联合类型实现遍历\",{\"1\":{\"646\":1}}],[\"对同一个值进行多次\",{\"1\":{\"616\":1}}],[\"对dom元素的操作和对组件实例的操作\",{\"1\":{\"584\":1}}],[\"对dom元素的内容设置及媒体播放\",{\"1\":{\"584\":1}}],[\"对dom元素的焦点控制\",{\"1\":{\"584\":1}}],[\"对declarations中的元素\",{\"1\":{\"120\":1}}],[\"对store\",{\"1\":{\"571\":1}}],[\"对嵌套对象或数组取值\",{\"1\":{\"526\":1}}],[\"对数据或对象取值\",{\"1\":{\"526\":1}}],[\"对两个对象进行比较\",{\"1\":{\"526\":1}}],[\"对组件实现一致的处理\",{\"1\":{\"479\":1}}],[\"对主流浏览器最近两个版本进行兼容\",{\"1\":{\"449\":2}}],[\"对react\",{\"1\":{\"449\":1}}],[\"对所有js文件进行打包\",{\"1\":{\"449\":2}}],[\"对单引号转义\",{\"1\":{\"379\":1}}],[\"对新手来说一个简单的规则就是\",{\"1\":{\"359\":1}}],[\"对应每一个属性\",{\"1\":{\"670\":1}}],[\"对应css如下\",{\"1\":{\"635\":1}}],[\"对应css样式如下\",{\"1\":{\"633\":1}}],[\"对应两个值\",{\"1\":{\"634\":1}}],[\"对应两个队列\",{\"1\":{\"428\":1}}],[\"对应如下\",{\"1\":{\"505\":1}}],[\"对应使用不同的方法\",{\"1\":{\"505\":1}}],[\"对应过程如图所示\",{\"1\":{\"505\":1}}],[\"对应的渲染函数\",{\"1\":{\"753\":1}}],[\"对应的index序列为value值的哈希表中寻找到与newstartvnode一致key的旧的vnode节点\",{\"1\":{\"732\":1}}],[\"对应的属性如下\",{\"1\":{\"595\":1}}],[\"对应的useeffect示例如下\",{\"1\":{\"520\":1}}],[\"对应的\",{\"1\":{\"429\":2}}],[\"对应分别如下\",{\"1\":{\"416\":1}}],[\"对应科学计数尾数是\",{\"1\":{\"303\":1}}],[\"对应osi参考模型的上三层\",{\"1\":{\"176\":1}}],[\"对应osi参考模型的第四层\",{\"1\":{\"176\":1}}],[\"对应osi参考模型的第三层\",{\"1\":{\"176\":1}}],[\"对应osi参考模型的下两层\",{\"1\":{\"176\":1}}],[\"对访问数据库的web应用程序采用web应用防火墙\",{\"1\":{\"301\":1}}],[\"对那张证书上的数字签名进行验证\",{\"1\":{\"240\":1}}],[\"对公钥的签名认证要求包括序列号\",{\"1\":{\"240\":1}}],[\"对称的密钥\",{\"1\":{\"237\":2}}],[\"对称加密指的是加密和解密使用的秘钥都是同一个\",{\"1\":{\"235\":1}}],[\"对称加密\",{\"0\":{\"235\":1},\"1\":{\"234\":1}}],[\"对参数的数据类型\",{\"1\":{\"216\":1}}],[\"对参数标识符进行实例化\",{\"1\":{\"123\":1}}],[\"对端再一步步解开封装\",{\"1\":{\"165\":1}}],[\"对函数进行声明实例化\",{\"1\":{\"123\":1}}],[\"对其求值\",{\"1\":{\"122\":1}}],[\"对标识符进行对应的绑定\",{\"1\":{\"122\":1}}],[\"对块中语句挨个执行\",{\"1\":{\"119\":1}}],[\"对象配置\",{\"1\":{\"946\":1}}],[\"对象形式的指令\",{\"1\":{\"759\":1}}],[\"对象形式存在的对\",{\"1\":{\"421\":1}}],[\"对象或函数都可以\",{\"1\":{\"728\":1}}],[\"对象是通过\",{\"1\":{\"579\":1}}],[\"对象深层的数据已改变却没有触发\",{\"1\":{\"549\":1}}],[\"对象的任何修改或添加删除操作都会返回一个新的\",{\"1\":{\"525\":1}}],[\"对象的原型\",{\"0\":{\"267\":1}}],[\"对象后\",{\"1\":{\"505\":1}}],[\"对象上的\",{\"1\":{\"607\":1}}],[\"对象上\",{\"1\":{\"505\":1}}],[\"对象运算符\",{\"1\":{\"345\":1}}],[\"对象引用解析\",{\"1\":{\"344\":1}}],[\"对象属性完全相同\",{\"1\":{\"277\":1}}],[\"对象自身\",{\"1\":{\"270\":1}}],[\"对象方法调用\",{\"1\":{\"270\":1}}],[\"对象方法\",{\"1\":{\"270\":1}}],[\"对象环境记录\",{\"1\":{\"117\":1}}],[\"对象环境记录绑定一组字符串标识符名称\",{\"1\":{\"116\":1}}],[\"对象环境记录器\",{\"1\":{\"112\":1}}],[\"对象\",{\"1\":{\"114\":1,\"116\":1,\"117\":1,\"428\":1,\"525\":1,\"601\":1,\"622\":1,\"949\":1,\"956\":2}}],[\"对各大主流浏览器有好的支持\",{\"1\":{\"89\":1}}],[\"对于脚本内容的情况返回undefined\",{\"1\":{\"977\":1}}],[\"对于开发者来说\",{\"1\":{\"942\":1}}],[\"对于其他文件需要loader将其他的类型的文件转换为有效模块\",{\"1\":{\"945\":1}}],[\"对于其他的类型的模块\",{\"1\":{\"937\":1}}],[\"对于其他浏览器\",{\"1\":{\"218\":1}}],[\"对于解析出的每个模块\",{\"1\":{\"932\":1}}],[\"对于大量数据渲染的时候\",{\"1\":{\"914\":1}}],[\"对于一些不经常变的内容\",{\"1\":{\"870\":1}}],[\"对于一些无状态的组件创建\",{\"1\":{\"475\":1}}],[\"对于事件的分发处理\",{\"1\":{\"836\":1}}],[\"对于每个小程序\",{\"1\":{\"829\":1}}],[\"对于子组件中存在但父组件不存在的配置项\",{\"1\":{\"792\":1}}],[\"对于keep\",{\"1\":{\"773\":1}}],[\"对于以上\",{\"1\":{\"769\":1}}],[\"对于多人协作项目\",{\"1\":{\"675\":1}}],[\"对于错误边界无法捕获的异常\",{\"1\":{\"500\":1}}],[\"对于简单列表渲染而言\",{\"1\":{\"497\":1}}],[\"对于比较同一层级的节点们\",{\"1\":{\"496\":1}}],[\"对于\",{\"1\":{\"407\":1}}],[\"对于负数键值也成立\",{\"1\":{\"383\":1}}],[\"对于包含的变量\",{\"1\":{\"380\":1}}],[\"对于系统的键值对\",{\"1\":{\"361\":1}}],[\"对于尾递归来说\",{\"1\":{\"253\":1}}],[\"对于持续运行的服务进程\",{\"1\":{\"247\":1}}],[\"对于post\",{\"1\":{\"220\":1}}],[\"对于get方式的请求\",{\"1\":{\"220\":1}}],[\"对于需要登录的网页\",{\"1\":{\"210\":1}}],[\"对于相同的数据\",{\"1\":{\"151\":1}}],[\"对于vardeclarations中的标识符\",{\"1\":{\"107\":1}}],[\"对于functionstoinitialize\",{\"1\":{\"107\":1}}],[\"对于lexdeclarations中的标识符\",{\"1\":{\"107\":1}}],[\"对于文本的溢出\",{\"1\":{\"85\":1}}],[\"对于同一个bfc的俩个相邻的盒子的margin会发生重叠\",{\"1\":{\"19\":1}}],[\"对\",{\"1\":{\"69\":1,\"209\":1,\"218\":1,\"525\":1,\"546\":1,\"925\":1}}],[\"给定长任务的阻塞时间是指其超过\",{\"1\":{\"885\":1}}],[\"给原始组件包裹其他元素等\",{\"1\":{\"479\":1}}],[\"给自己并在提交时显示数据\",{\"1\":{\"406\":1}}],[\"给省略号绝对定位\",{\"1\":{\"89\":1}}],[\"给人的效果是隐藏了\",{\"1\":{\"68\":1}}],[\"给相应符合条件的媒体调用相对应的样式表\",{\"1\":{\"56\":1}}],[\"自动将点转换成了下划线\",{\"1\":{\"406\":1}}],[\"自动加载类和接口\",{\"1\":{\"351\":1}}],[\"自定义渲染器\",{\"1\":{\"776\":1,\"817\":1}}],[\"自定义过滤器\",{\"1\":{\"744\":1}}],[\"自定义指令也存在钩子函数\",{\"1\":{\"737\":1}}],[\"自定义指令\",{\"0\":{\"736\":1},\"1\":{\"702\":1}}],[\"自定义标签属性\",{\"1\":{\"699\":1}}],[\"自定义\",{\"1\":{\"402\":1,\"953\":1}}],[\"自\",{\"1\":{\"324\":1,\"336\":1,\"342\":1,\"343\":1,\"344\":2,\"347\":1,\"348\":1,\"350\":1,\"357\":1,\"385\":1,\"393\":1,\"394\":1,\"403\":2}}],[\"自身抛出来的错误\",{\"1\":{\"500\":1}}],[\"自身就是全双工\",{\"1\":{\"198\":1}}],[\"自身绑定事件\",{\"1\":{\"72\":1}}],[\"自身绑定的事件不会触发\",{\"1\":{\"67\":1}}],[\"自适应多栏布局\",{\"1\":{\"21\":1}}],[\"消失后\",{\"1\":{\"67\":1}}],[\"它表示该产生式的右侧不包含任何终结符号或非终结符号\",{\"1\":{\"996\":1}}],[\"它表达逻辑而不显式地定义步骤\",{\"1\":{\"532\":1}}],[\"它执行以下步骤\",{\"1\":{\"968\":1}}],[\"它\",{\"1\":{\"953\":1}}],[\"它记录了关于打包后模块\",{\"1\":{\"942\":1}}],[\"它仍然有着\",{\"1\":{\"931\":1}}],[\"它提供了友好的前端模块化开发支持\",{\"1\":{\"931\":1}}],[\"它能够将项目中的多个文件和资源\",{\"1\":{\"932\":1}}],[\"它能够把任意长度的数据\",{\"1\":{\"238\":1}}],[\"它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次\",{\"1\":{\"917\":1}}],[\"它通过显示简单的灰色块和线条\",{\"1\":{\"910\":1}}],[\"它通过比较新旧虚拟节点数组\",{\"1\":{\"770\":1}}],[\"它专注于测量核心web\",{\"1\":{\"890\":1}}],[\"它根据配置项的类型选择对应的合并策略函数\",{\"1\":{\"792\":1}}],[\"它的变化不会触发dom树的重新渲染\",{\"1\":{\"918\":1}}],[\"它的键是事件名\",{\"1\":{\"696\":1}}],[\"它的长度是\",{\"1\":{\"303\":1}}],[\"它只能继承父类的this对象\",{\"1\":{\"626\":1}}],[\"它只要在上次\",{\"1\":{\"384\":1}}],[\"它使用系统软件所提供的基础服务\",{\"1\":{\"571\":1}}],[\"它可以根据项目需求快速生成\",{\"1\":{\"928\":1}}],[\"它可以出现在任何地方\",{\"1\":{\"817\":1}}],[\"它可以有效地处理任何规模的项目\",{\"1\":{\"683\":1}}],[\"它可以被使用在多个ui场景\",{\"1\":{\"533\":1}}],[\"它可以让你在不编写\",{\"1\":{\"517\":1}}],[\"它现在并会自定绑定其this到当前组件\",{\"1\":{\"510\":1}}],[\"它不能是联合类型声明的一部分\",{\"1\":{\"394\":1}}],[\"它不能成为联合类型声明的一部分\",{\"1\":{\"393\":1}}],[\"它允许在运行时动态地加载模块\",{\"1\":{\"941\":1}}],[\"它允许不需要存储就能描述对象的属性\",{\"1\":{\"349\":1}}],[\"它允许直接使用属性\",{\"1\":{\"349\":1}}],[\"它并不会改变函数外部的值\",{\"1\":{\"321\":1}}],[\"它会在内部从一个或多个入口点构建一个\",{\"1\":{\"931\":1}}],[\"它会在创建配置文件之前询问几个问题\",{\"1\":{\"928\":1}}],[\"它会像三元表达式一样求值\",{\"1\":{\"313\":1}}],[\"它会将所有在上下文中的变量\",{\"1\":{\"249\":1}}],[\"它等价于\",{\"1\":{\"308\":1}}],[\"它还是会持续占用内存\",{\"1\":{\"250\":1}}],[\"它们表示其中之一\",{\"1\":{\"994\":1}}],[\"它们被设计为可以在浏览器中高效地加载和执行\",{\"1\":{\"938\":1}}],[\"它们包含了用户点击图像的坐标\",{\"1\":{\"406\":1}}],[\"它们分别允许重写属性的读和写行为\",{\"1\":{\"349\":1}}],[\"它们定义了一个超文本传输协议事务中的操作参数\",{\"1\":{\"223\":1}}],[\"它们看起来实现的效果是一致的\",{\"1\":{\"65\":1}}],[\"它由一个名称\",{\"1\":{\"227\":1}}],[\"它由\",{\"1\":{\"205\":1}}],[\"它在能力上相当于两个单工通信方式的结合\",{\"1\":{\"197\":1}}],[\"它统统发送\",{\"1\":{\"181\":1}}],[\"它必须要接入到一个宿主环境\",{\"1\":{\"98\":1}}],[\"它需要组合其他的webkit属性\",{\"1\":{\"90\":1}}],[\"它是基于客户端\",{\"1\":{\"680\":1}}],[\"它是一个函数\",{\"1\":{\"620\":1}}],[\"它是\",{\"1\":{\"351\":1,\"428\":1}}],[\"它是计算机通信体系结构中关键的一层\",{\"1\":{\"161\":1}}],[\"它是元素和其他部分组合起来告诉浏览器哪个html元素应当是被选为应用规则中的css属性值的方式\",{\"1\":{\"35\":1}}],[\"它是页面中的一块渲染区域\",{\"1\":{\"19\":1}}],[\"始终设置rem为width的1\",{\"1\":{\"59\":1}}],[\"无mutation\",{\"1\":{\"812\":1}}],[\"无需特地提供\",{\"1\":{\"865\":1}}],[\"无需重新启动\",{\"1\":{\"837\":1}}],[\"无需额外包裹div\",{\"1\":{\"811\":1}}],[\"无需刷新页面\",{\"1\":{\"607\":1}}],[\"无需考虑html中结构的顺序\",{\"1\":{\"79\":1}}],[\"无须通过props获取\",{\"1\":{\"599\":1}}],[\"无序索引集\",{\"1\":{\"526\":1}}],[\"无类型的属性和静态属性不能用\",{\"1\":{\"342\":1}}],[\"无状态\",{\"1\":{\"230\":1,\"479\":1}}],[\"无论触发多少次事件\",{\"1\":{\"847\":1}}],[\"无论是宏任务还是微任务\",{\"1\":{\"801\":1}}],[\"无论是否传入props\",{\"1\":{\"628\":1}}],[\"无论count发生变化辩护\",{\"1\":{\"588\":1}}],[\"无论基于什么框架都可以用它\",{\"1\":{\"526\":1}}],[\"无论\",{\"1\":{\"217\":1}}],[\"无论设备可视窗口如何变化\",{\"1\":{\"59\":1}}],[\"无法继续展开\",{\"1\":{\"991\":1}}],[\"无法访问options的任何部分\",{\"1\":{\"774\":1}}],[\"无法单机工作\",{\"1\":{\"678\":1}}],[\"无法中断\",{\"1\":{\"427\":1}}],[\"无法进行针对性的极致优化\",{\"1\":{\"423\":1}}],[\"无法解包\",{\"1\":{\"386\":1}}],[\"无法使用变量和常量\",{\"1\":{\"314\":1}}],[\"无法使用请求的内容特性响应请求的网页\",{\"1\":{\"210\":1}}],[\"无法设置过期时间\",{\"1\":{\"280\":1}}],[\"无法完成请求\",{\"1\":{\"211\":1}}],[\"无法响应点击事件\",{\"1\":{\"67\":1,\"68\":1,\"70\":1,\"72\":1}}],[\"无内容\",{\"1\":{\"208\":1}}],[\"无\",{\"1\":{\"183\":2,\"270\":2}}],[\"无连接的含义是限制每次连接只处理一个请求\",{\"1\":{\"230\":1}}],[\"无连接\",{\"1\":{\"183\":1,\"230\":1}}],[\"无继承的属性\",{\"1\":{\"37\":1}}],[\"重定向时间\",{\"1\":{\"883\":1}}],[\"重定向方法wx\",{\"1\":{\"828\":1}}],[\"重写了虚拟dom实现\",{\"1\":{\"816\":1}}],[\"重做上一次commit\",{\"1\":{\"689\":1}}],[\"重置\",{\"1\":{\"326\":1}}],[\"重置内容\",{\"1\":{\"208\":1}}],[\"重叠区域占被观察者面积的比例\",{\"1\":{\"285\":1}}],[\"重叠区域的位置矩形\",{\"1\":{\"285\":1}}],[\"重命名为正式文件即可\",{\"1\":{\"283\":1}}],[\"重新发起请求\",{\"1\":{\"864\":1}}],[\"重新计算延迟时间\",{\"1\":{\"844\":1}}],[\"重新计算布局\",{\"1\":{\"779\":1}}],[\"重新计时\",{\"1\":{\"844\":1}}],[\"重新赋值\",{\"1\":{\"793\":1}}],[\"重新绑定事件\",{\"1\":{\"782\":1}}],[\"重新执行\",{\"1\":{\"428\":1}}],[\"重新执行函数\",{\"1\":{\"254\":1}}],[\"重新索引\",{\"1\":{\"384\":1}}],[\"重新生成索引后曾经存在于\",{\"1\":{\"384\":1}}],[\"重新设置\",{\"1\":{\"59\":2}}],[\"重则导致进程崩溃\",{\"1\":{\"247\":1}}],[\"重发控制\",{\"1\":{\"182\":1}}],[\"重复输入值的递归函数\",{\"1\":{\"279\":1}}],[\"重复\",{\"1\":{\"122\":1}}],[\"重绘\",{\"1\":{\"72\":1,\"811\":1}}],[\"重排\",{\"1\":{\"72\":1}}],[\"重要\",{\"1\":{\"12\":1,\"122\":1,\"217\":1,\"270\":1,\"306\":2,\"313\":1,\"339\":1,\"340\":1,\"342\":1,\"345\":1,\"348\":1,\"349\":1,\"350\":2,\"351\":1,\"357\":1,\"359\":1,\"360\":1,\"406\":2,\"437\":1,\"549\":1,\"615\":1,\"769\":1,\"790\":1,\"926\":1,\"946\":1,\"947\":1,\"948\":1,\"949\":1,\"970\":1,\"972\":1,\"973\":1,\"977\":2,\"986\":1,\"999\":1}}],[\"动态加载\",{\"1\":{\"941\":1}}],[\"动态内容直出html\",{\"1\":{\"908\":1}}],[\"动态url的异步请求\",{\"1\":{\"908\":1}}],[\"动态导入是es6提供的新特性\",{\"1\":{\"858\":1}}],[\"动态地加载所需的组件\",{\"1\":{\"857\":1}}],[\"动态地扩展对象功能\",{\"1\":{\"661\":1}}],[\"动态的属性不具备响应式\",{\"1\":{\"819\":1}}],[\"动态添加属性的问题\",{\"0\":{\"712\":1}}],[\"动态路由的概念指的是路由中的路径并不会固定\",{\"1\":{\"603\":1}}],[\"动态路由的方式\",{\"1\":{\"602\":1}}],[\"动态路由\",{\"0\":{\"603\":1}}],[\"动态输入\",{\"1\":{\"467\":1}}],[\"动态创建的属性将仅能在此类实例上使用\",{\"1\":{\"348\":1}}],[\"动态属性\",{\"0\":{\"348\":1}}],[\"动态为根元素设置字体大小\",{\"1\":{\"59\":1}}],[\"动画等任务无法立即得到处理\",{\"1\":{\"427\":1}}],[\"动画填充模式\",{\"1\":{\"51\":1}}],[\"动画播放状态\",{\"1\":{\"51\":1}}],[\"动画执行方向\",{\"1\":{\"51\":1}}],[\"动画执行次数\",{\"1\":{\"51\":1}}],[\"动画延迟时间\",{\"1\":{\"51\":1}}],[\"动画时间函数\",{\"1\":{\"51\":1}}],[\"动画持续时间\",{\"1\":{\"51\":1}}],[\"动画名称\",{\"1\":{\"51\":1}}],[\"动画这个平常用的也很多\",{\"1\":{\"51\":1}}],[\"动画只需要定义一些关键的帧\",{\"1\":{\"13\":1}}],[\"动画的名称\",{\"1\":{\"13\":1}}],[\"动画效果的延迟触发时间\",{\"1\":{\"11\":1}}],[\"动画\",{\"0\":{\"10\":1,\"51\":1},\"1\":{\"69\":1,\"483\":1}}],[\"来将一个\",{\"1\":{\"946\":1}}],[\"来解析不同类型的文件\",{\"1\":{\"932\":1}}],[\"来解决的性能问题\",{\"1\":{\"526\":1}}],[\"来改进\",{\"1\":{\"882\":1}}],[\"来降低内存的使用\",{\"1\":{\"850\":1}}],[\"来提高性能\",{\"1\":{\"843\":1}}],[\"来提升性能\",{\"1\":{\"770\":1}}],[\"来完成过渡动画效果\",{\"1\":{\"632\":1}}],[\"来完成更复杂的逻辑\",{\"1\":{\"297\":1}}],[\"来自php之外的变量\",{\"0\":{\"405\":1}}],[\"来检查\",{\"1\":{\"377\":1}}],[\"来表示\",{\"1\":{\"372\":1}}],[\"来表示一个负的\",{\"1\":{\"372\":1}}],[\"来表示作用域\",{\"1\":{\"111\":1}}],[\"来直接禁用\",{\"1\":{\"330\":1}}],[\"来指定的\",{\"1\":{\"315\":2}}],[\"来定义代码分割点\",{\"1\":{\"859\":1}}],[\"来定义常量\",{\"1\":{\"306\":1}}],[\"来定义常量相反的是\",{\"1\":{\"306\":1}}],[\"来定义关键帧\",{\"1\":{\"13\":1}}],[\"来获取常量的值\",{\"1\":{\"306\":1}}],[\"来访问的\",{\"1\":{\"406\":1}}],[\"来访问键值对\",{\"1\":{\"384\":1}}],[\"来访问被覆盖的方法或属性\",{\"1\":{\"340\":1}}],[\"来访问\",{\"1\":{\"306\":1}}],[\"来做精度运算\",{\"1\":{\"303\":1}}],[\"来跟踪和存储之前发送的键值对\",{\"1\":{\"151\":1}}],[\"来实现开发的模式\",{\"1\":{\"470\":1}}],[\"来实现布局的效果\",{\"1\":{\"81\":1}}],[\"来实现响应式的效果\",{\"1\":{\"57\":1}}],[\"6666\",{\"1\":{\"895\":2}}],[\"64\",{\"1\":{\"224\":1}}],[\"6\",{\"1\":{\"103\":1,\"130\":1,\"312\":3,\"326\":1,\"383\":1,\"384\":1,\"497\":2,\"886\":1,\"895\":1,\"928\":2,\"994\":1}}],[\"6000\",{\"1\":{\"287\":1}}],[\"600px\",{\"1\":{\"56\":1}}],[\"600px之间\",{\"1\":{\"56\":1}}],[\"60\",{\"1\":{\"253\":2,\"291\":1}}],[\"60px\",{\"1\":{\"90\":1}}],[\"67c23a\",{\"1\":{\"8\":1}}],[\"百分比\",{\"0\":{\"57\":1},\"1\":{\"55\":1}}],[\"百分比是相对包\",{\"1\":{\"45\":1}}],[\"u+000a\",{\"1\":{\"1008\":1}}],[\"u+000d\",{\"1\":{\"1008\":1}}],[\"u+005c\",{\"1\":{\"1008\":1}}],[\"ul\",{\"1\":{\"916\":2,\"917\":2,\"918\":2}}],[\"ul>\",{\"1\":{\"542\":1,\"594\":1,\"595\":1,\"851\":1,\"916\":1,\"917\":1,\"918\":1}}],[\"u\",{\"1\":{\"380\":1,\"647\":1,\"1010\":1,\"1011\":2}}],[\"update将虚拟dom生成真实dom结构\",{\"1\":{\"797\":1}}],[\"update主要功能是调用patch\",{\"1\":{\"796\":1}}],[\"update方法\",{\"1\":{\"796\":1}}],[\"updated\",{\"0\":{\"779\":1},\"1\":{\"759\":1}}],[\"updatecomponent主要执行初始化声明的render\",{\"1\":{\"796\":1}}],[\"updatecount\",{\"1\":{\"620\":2}}],[\"updatechildren\",{\"1\":{\"770\":2}}],[\"updatechildren主要做了以下操作\",{\"1\":{\"733\":1}}],[\"updateclasscomponent\",{\"1\":{\"538\":2}}],[\"updater\",{\"1\":{\"612\":1}}],[\"updatenode\",{\"1\":{\"538\":2}}],[\"updatefunctioncomponent\",{\"1\":{\"538\":2}}],[\"update\",{\"1\":{\"527\":1,\"612\":1,\"737\":1,\"797\":1}}],[\"updatequeue<any>\",{\"1\":{\"428\":1}}],[\"updatequeue\",{\"1\":{\"428\":1}}],[\"up\",{\"1\":{\"292\":1,\"654\":1,\"655\":2}}],[\"upgrade\",{\"1\":{\"200\":5,\"223\":1,\"224\":1}}],[\"utf\",{\"1\":{\"224\":1,\"324\":1,\"1008\":1}}],[\"usort\",{\"1\":{\"391\":1}}],[\"using\",{\"1\":{\"382\":2,\"928\":2}}],[\"use进行注册\",{\"1\":{\"718\":1}}],[\"uselocation\",{\"0\":{\"601\":1},\"1\":{\"598\":1,\"601\":3}}],[\"useparams\",{\"0\":{\"600\":1},\"1\":{\"598\":1,\"600\":1}}],[\"usehistory可以让组件内部直接访问history\",{\"1\":{\"599\":1}}],[\"usehistory\",{\"0\":{\"599\":1},\"1\":{\"598\":1,\"599\":2}}],[\"usememo\",{\"1\":{\"521\":1}}],[\"usecallback\",{\"1\":{\"521\":1}}],[\"usecapture\",{\"1\":{\"273\":2}}],[\"usecapture用于指定是否在捕获阶段处理\",{\"1\":{\"273\":1}}],[\"useeffect相当于componentdidmount\",{\"1\":{\"520\":1}}],[\"useeffect会在第一次渲染和更新之后都会执行\",{\"1\":{\"520\":1}}],[\"useeffect第一个参数接受一个回调函数\",{\"1\":{\"520\":1}}],[\"useeffect可以让我们在函数组件中进行一些带有副作用的操作\",{\"1\":{\"520\":1}}],[\"useeffect\",{\"0\":{\"520\":1},\"1\":{\"459\":2,\"518\":1,\"520\":4}}],[\"usestate\",{\"0\":{\"519\":1},\"1\":{\"458\":1,\"518\":1,\"519\":4,\"520\":2,\"588\":2,\"589\":1}}],[\"use\",{\"1\":{\"292\":2,\"326\":8,\"330\":2,\"449\":2,\"909\":1,\"928\":3,\"948\":1,\"953\":1,\"954\":1,\"1013\":2}}],[\"userid\",{\"1\":{\"598\":1}}],[\"useref\",{\"1\":{\"521\":1,\"579\":1,\"583\":1}}],[\"usereducer\",{\"1\":{\"521\":1}}],[\"username并不会自动更新\",{\"1\":{\"465\":1}}],[\"username所控制住\",{\"1\":{\"465\":1}}],[\"username\",{\"1\":{\"406\":3,\"465\":3}}],[\"user\",{\"1\":{\"55\":2,\"181\":1,\"199\":1,\"209\":1,\"223\":1,\"224\":2,\"346\":2,\"368\":5,\"391\":1,\"461\":4,\"598\":1,\"687\":2,\"858\":2}}],[\"us\",{\"1\":{\"223\":1,\"224\":1}}],[\"uri\",{\"1\":{\"217\":2}}],[\"url路径变化\",{\"1\":{\"608\":1}}],[\"urlencoded\",{\"1\":{\"217\":1,\"224\":1}}],[\"url的解析第过程中的第一步\",{\"1\":{\"187\":1}}],[\"url的行为\",{\"0\":{\"186\":1}}],[\"url解析\",{\"0\":{\"187\":1},\"1\":{\"186\":1}}],[\"url到回车后发生的行为如下\",{\"1\":{\"186\":1}}],[\"url\",{\"1\":{\"7\":4,\"187\":1,\"218\":4,\"406\":1,\"488\":1,\"601\":2,\"606\":1,\"607\":3,\"688\":1,\"879\":1,\"936\":1,\"945\":1}}],[\"uuid\",{\"1\":{\"200\":1}}],[\"udp协议面向报文\",{\"1\":{\"183\":1}}],[\"udp是面向无连接\",{\"1\":{\"183\":1}}],[\"udp与tcp两者的都位于传输层\",{\"1\":{\"183\":1}}],[\"udp没有纠正的功能\",{\"1\":{\"181\":1}}],[\"udp报头包括4个字段\",{\"1\":{\"181\":1}}],[\"udp\",{\"0\":{\"180\":1,\"181\":1},\"1\":{\"168\":1,\"172\":2,\"176\":1,\"181\":4,\"182\":1,\"183\":3}}],[\"unobserve\",{\"1\":{\"862\":1}}],[\"undate性能提高\",{\"1\":{\"816\":1}}],[\"underline\",{\"1\":{\"486\":1}}],[\"undefined\",{\"1\":{\"114\":1,\"130\":1,\"270\":2,\"326\":1,\"508\":1,\"627\":1,\"770\":1,\"895\":1,\"977\":1}}],[\"unbind\",{\"1\":{\"737\":1}}],[\"unmountonexit=\",{\"1\":{\"633\":1}}],[\"unmodified\",{\"1\":{\"147\":1}}],[\"unsubscribefromfriendstatus\",{\"1\":{\"520\":1}}],[\"unset\",{\"1\":{\"370\":1,\"384\":3,\"387\":1}}],[\"uncontroll\",{\"1\":{\"466\":1}}],[\"unction\",{\"1\":{\"322\":1}}],[\"unicode转义\",{\"1\":{\"1011\":1}}],[\"unicode\",{\"1\":{\"378\":1,\"380\":1,\"999\":1,\"1008\":3}}],[\"unix\",{\"1\":{\"333\":1}}],[\"uninitialized\",{\"1\":{\"114\":1}}],[\"unhandledmatcherror\",{\"1\":{\"313\":1}}],[\"unused\",{\"1\":{\"251\":1}}],[\"ui库方案\",{\"0\":{\"911\":1}}],[\"ui框架\",{\"1\":{\"812\":1}}],[\"ui\",{\"1\":{\"59\":1,\"500\":4,\"530\":1,\"563\":1,\"607\":2,\"812\":2}}],[\"平板\",{\"1\":{\"54\":1}}],[\"平移\",{\"1\":{\"12\":1}}],[\"屏幕定向等\",{\"1\":{\"54\":1}}],[\"屏幕尺寸\",{\"1\":{\"54\":1}}],[\"页面更新是异步操作\",{\"1\":{\"836\":1}}],[\"页面不断出栈\",{\"1\":{\"832\":1}}],[\"页面不会触发更新\",{\"1\":{\"712\":1}}],[\"页面之间通过hide\",{\"1\":{\"832\":1}}],[\"页面载入后触发onshow\",{\"1\":{\"828\":1}}],[\"页面生命周期\",{\"1\":{\"828\":1}}],[\"页面卸载\",{\"1\":{\"825\":1}}],[\"页面隐藏\",{\"1\":{\"825\":1}}],[\"页面初次渲染完成\",{\"1\":{\"825\":1}}],[\"页面加载触发\",{\"1\":{\"702\":1}}],[\"页面会被切分成一些独立的\",{\"1\":{\"621\":1}}],[\"页面显示\",{\"1\":{\"616\":1}}],[\"页面组件就可以接收到一些路由相关的东西\",{\"1\":{\"596\":1}}],[\"页面的生命周期\",{\"0\":{\"825\":1}}],[\"页面的性能问题\",{\"1\":{\"709\":1}}],[\"页面的显示结果可以根据url的变化而变化\",{\"1\":{\"592\":1}}],[\"页面的设计与开发应当根据用户行为以及设备环境\",{\"1\":{\"54\":1}}],[\"页面置于顶部时\",{\"1\":{\"291\":1}}],[\"页面触底或快要触底的操作\",{\"1\":{\"290\":1}}],[\"页面渲染\",{\"0\":{\"192\":1},\"1\":{\"186\":1}}],[\"页面中\",{\"1\":{\"72\":1}}],[\"页面头部必须有meta声明viewport\",{\"1\":{\"55\":1}}],[\"页面样式属性\",{\"1\":{\"37\":1}}],[\"径向渐变\",{\"1\":{\"52\":1}}],[\"渐变\",{\"0\":{\"52\":1},\"1\":{\"879\":1}}],[\"渐显渐隐效果\",{\"1\":{\"11\":1}}],[\"zoom=\",{\"1\":{\"532\":1}}],[\"zoom\",{\"1\":{\"532\":1}}],[\"z\",{\"1\":{\"50\":1,\"254\":1,\"398\":2}}],[\"z轴方向距离屏幕\",{\"1\":{\"8\":1}}],[\"围绕那个点进行转换\",{\"1\":{\"50\":1}}],[\"围绕元素内容的内边距的一条或多条线\",{\"1\":{\"15\":1}}],[\"转义序列不能使用\",{\"1\":{\"1012\":1}}],[\"转为render语法字符串\",{\"1\":{\"796\":1}}],[\"转为数值类型\",{\"1\":{\"699\":1}}],[\"转为immutable对象\",{\"1\":{\"526\":1}}],[\"转化成createelement这种形式\",{\"1\":{\"589\":1}}],[\"转化成如下\",{\"1\":{\"473\":1}}],[\"转化为全局对象\",{\"1\":{\"270\":1}}],[\"转化为如下\",{\"1\":{\"254\":1}}],[\"转换为\",{\"1\":{\"945\":1}}],[\"转换器\",{\"0\":{\"945\":1}}],[\"转换代码\",{\"1\":{\"932\":2}}],[\"转换元素的位置\",{\"1\":{\"50\":1}}],[\"转换\",{\"0\":{\"50\":1},\"1\":{\"939\":1}}],[\"转变动画\",{\"0\":{\"12\":1},\"1\":{\"10\":1}}],[\"上绑定数据\",{\"1\":{\"811\":1}}],[\"上一次的修改时间\",{\"0\":{\"868\":1}}],[\"上一次渲染的时候的state\",{\"1\":{\"428\":1}}],[\"上一次渲染完成之后的props\",{\"1\":{\"428\":1}}],[\"上一个虚拟节点\",{\"1\":{\"737\":1}}],[\"上挂载的事件\",{\"1\":{\"505\":1}}],[\"上赋值不存在的属性\",{\"1\":{\"348\":1}}],[\"上边那行代码等价于以下代码\",{\"1\":{\"344\":1}}],[\"上例中\",{\"1\":{\"331\":1}}],[\"上拉加载更多\",{\"1\":{\"292\":2}}],[\"上拉加载\",{\"0\":{\"290\":1}}],[\"上传代码\",{\"1\":{\"833\":1}}],[\"上传到服务器从此偏移量继续写入文件即可\",{\"1\":{\"283\":1}}],[\"上传过程中将文件在服务器端写为临时文件\",{\"1\":{\"283\":1}}],[\"上传任务划分为几个部分\",{\"1\":{\"283\":1}}],[\"上传完成后\",{\"1\":{\"282\":1}}],[\"上的事件间的冒泡\",{\"1\":{\"505\":1}}],[\"上的\",{\"1\":{\"259\":1}}],[\"上面的例子中\",{\"1\":{\"615\":1}}],[\"上面的过程中\",{\"1\":{\"449\":1}}],[\"上面可以看到\",{\"1\":{\"485\":1}}],[\"上面代码看似没问题\",{\"1\":{\"258\":1}}],[\"上面代码中\",{\"1\":{\"250\":1}}],[\"上面是\",{\"1\":{\"247\":1}}],[\"上面为简写模式\",{\"1\":{\"49\":1}}],[\"上次返回的last\",{\"1\":{\"226\":1}}],[\"上某一台计算机或计算机组的名称\",{\"1\":{\"138\":1}}],[\"上述name属性与onnamechanged方法都能在子组件的props变量中访问\",{\"1\":{\"621\":1}}],[\"上述组件当接收到的路由参数name\",{\"1\":{\"597\":1}}],[\"上述三种情况都是ref属性用于原生html元素上\",{\"1\":{\"583\":1}}],[\"上述的例子\",{\"1\":{\"616\":1}}],[\"上述的中间件都需要通过applymiddlewares进行注册\",{\"1\":{\"572\":1}}],[\"上述的代码看似没有问题\",{\"1\":{\"508\":1}}],[\"上述这种类似\",{\"1\":{\"530\":1}}],[\"上述传入第二个参数后\",{\"1\":{\"520\":1}}],[\"上述四种方法的方式\",{\"1\":{\"514\":1}}],[\"上述操作中\",{\"1\":{\"494\":1}}],[\"上述代码当然可以实现该功能\",{\"1\":{\"480\":1}}],[\"上述代码中\",{\"1\":{\"478\":1}}],[\"上述简单的例子对应类组件中的componentdidmount生命周期\",{\"1\":{\"459\":1}}],[\"上述vdom转化为如下\",{\"1\":{\"421\":1}}],[\"上述中\",{\"1\":{\"421\":1}}],[\"上述使用严格模式\",{\"1\":{\"251\":1}}],[\"上述使用了webkit的css属性扩展\",{\"1\":{\"90\":1}}],[\"上述每一次握手的作用如下\",{\"1\":{\"243\":1}}],[\"上述是一个从二维的角度观察盒子\",{\"1\":{\"15\":1}}],[\"花费时间\",{\"1\":{\"49\":1}}],[\"过多的页面会挤占微信分配给小程序的内存\",{\"1\":{\"832\":1}}],[\"过多使用refs\",{\"1\":{\"584\":1}}],[\"过滤列表\",{\"1\":{\"811\":1}}],[\"过滤器处理后的结果会当作当前参数传递给tostring函数\",{\"1\":{\"748\":1}}],[\"过滤器函数总接受表达式的值作为第一个参数\",{\"1\":{\"746\":1}}],[\"过滤器\",{\"0\":{\"744\":1},\"1\":{\"717\":1}}],[\"过滤首空格\",{\"1\":{\"699\":1}}],[\"过滤和转义特殊字符\",{\"1\":{\"301\":1}}],[\"过滤用户输入的恶劣代码\",{\"1\":{\"299\":1}}],[\"过程中被广泛使用\",{\"1\":{\"770\":1}}],[\"过程\",{\"0\":{\"538\":1}}],[\"过程对应如下图\",{\"1\":{\"449\":1}}],[\"过程如下\",{\"1\":{\"243\":1,\"244\":1}}],[\"过程特性\",{\"1\":{\"164\":1}}],[\"过度效果\",{\"1\":{\"49\":1}}],[\"过渡动画\",{\"0\":{\"631\":1}}],[\"过渡\",{\"0\":{\"49\":1},\"1\":{\"717\":1}}],[\"多数插件可以通过选项\",{\"1\":{\"953\":1}}],[\"多达13种拦截方法\",{\"1\":{\"819\":1}}],[\"多人协作并行开发\",{\"1\":{\"675\":1}}],[\"多维数组\",{\"1\":{\"385\":1}}],[\"多出了2个特征\",{\"1\":{\"253\":1}}],[\"多媒体类型\",{\"1\":{\"224\":1}}],[\"多种选择\",{\"1\":{\"209\":1}}],[\"多对多\",{\"1\":{\"183\":1}}],[\"多对一和多对多的交互通信\",{\"1\":{\"183\":1}}],[\"多对一\",{\"1\":{\"183\":1}}],[\"多个文件压缩就有多个\",{\"1\":{\"895\":1}}],[\"多个子元素\",{\"1\":{\"850\":1}}],[\"多个\",{\"1\":{\"429\":1}}],[\"多个实例的引用类型属性指向相同的内存\",{\"1\":{\"261\":1}}],[\"多个帧之间可以乱序发送\",{\"1\":{\"150\":1}}],[\"多个属性之间用逗号进行分隔\",{\"1\":{\"49\":1}}],[\"多路复用\",{\"0\":{\"149\":1},\"1\":{\"148\":1}}],[\"多次请求均由这个连接完成\",{\"1\":{\"147\":1}}],[\"多行文本的情况下\",{\"1\":{\"90\":1}}],[\"多行文本溢出的时候\",{\"1\":{\"88\":1}}],[\"多行文本溢出省略\",{\"0\":{\"88\":1}}],[\"多行文本溢出\",{\"0\":{\"85\":1},\"1\":{\"85\":1}}],[\"多行文本父元素确认高度\",{\"1\":{\"32\":1}}],[\"以供应用程序使用\",{\"1\":{\"945\":1}}],[\"以优化页面加载时间和提高应用的性能\",{\"1\":{\"939\":1}}],[\"以占位符形式展示页面结构的技术\",{\"1\":{\"910\":1}}],[\"以防\",{\"1\":{\"895\":1}}],[\"以秒为单位\",{\"1\":{\"886\":1}}],[\"以时间较短者为准\",{\"1\":{\"879\":1}}],[\"以js对象作为基础的树\",{\"1\":{\"708\":1}}],[\"以此类推\",{\"1\":{\"675\":1}}],[\"以使前端应用程序更高效\",{\"1\":{\"530\":1}}],[\"以便它可以在所有\",{\"1\":{\"956\":1}}],[\"以便在需要时查阅或使用\",{\"1\":{\"942\":1}}],[\"以便在浏览器中运行你的应用\",{\"1\":{\"940\":1}}],[\"以便后续再次需要该模块时能够直接从缓存中获取\",{\"1\":{\"941\":1}}],[\"以便于在浏览器中加载和运行\",{\"1\":{\"932\":2}}],[\"以便按需加载\",{\"1\":{\"859\":1}}],[\"以便生成最终的组件配置对象\",{\"1\":{\"792\":1}}],[\"以便您可以在\",{\"1\":{\"461\":1}}],[\"以便左中右能在同一行展示\",{\"1\":{\"80\":1}}],[\"以后\",{\"1\":{\"372\":1}}],[\"以函数为输入或者输出的函数被称为高阶函数\",{\"1\":{\"295\":1}}],[\"以下的是一般运行时语义\",{\"1\":{\"967\":1}}],[\"以下的情况是普通调用\",{\"1\":{\"270\":1}}],[\"以下示例展示了如何创建一个监听\",{\"1\":{\"884\":1}}],[\"以下所有\",{\"1\":{\"881\":1}}],[\"以下列出两种常见的组织结构\",{\"1\":{\"568\":1}}],[\"以下列出了当前有效的方法\",{\"1\":{\"406\":1}}],[\"以下情况不需要创建\",{\"1\":{\"123\":1}}],[\"以下情况会创建执行上下文\",{\"1\":{\"94\":1}}],[\"以prototype属性为原型创建的对象\",{\"1\":{\"270\":1}}],[\"以进行非对称加密方式通信\",{\"1\":{\"240\":1}}],[\"以明文方式发送内容\",{\"1\":{\"230\":1}}],[\"以\",{\"1\":{\"224\":1}}],[\"以避免继续占用网络资源\",{\"1\":{\"163\":1}}],[\"以保证客户端能够区分出每次请求的响应内容\",{\"1\":{\"147\":1}}],[\"以上表示\",{\"1\":{\"995\":1,\"996\":1}}],[\"以上例子等同于于以下\",{\"1\":{\"358\":1}}],[\"以上等同于以下的\",{\"1\":{\"357\":1}}],[\"以上示例会输出\",{\"1\":{\"332\":1,\"382\":1}}],[\"以上\",{\"1\":{\"135\":1}}],[\"以上的属性可通过这属性集合\",{\"1\":{\"37\":1}}],[\"以及被添加到依赖图中\",{\"1\":{\"945\":1}}],[\"以及被在上下文中的变量引用的变量的标记去掉\",{\"1\":{\"249\":1}}],[\"以及优化应用的加载性能\",{\"1\":{\"942\":1}}],[\"以及webpack在打包过程中对这些模块进行的一系列转换和优化后的结果\",{\"1\":{\"938\":1}}],[\"以及代码压缩混淆\",{\"1\":{\"931\":1}}],[\"以及本次会话密钥session\",{\"1\":{\"829\":1}}],[\"以及原生的css都能完成切换动画\",{\"1\":{\"631\":1}}],[\"以及原型的原型\",{\"1\":{\"267\":1}}],[\"以及组件中的状态发生了变化之后\",{\"1\":{\"537\":1}}],[\"以及在地图上添加的标记的步骤如下\",{\"1\":{\"532\":1}}],[\"以及函数\",{\"1\":{\"336\":1}}],[\"以及\",{\"1\":{\"312\":1}}],[\"以及big\",{\"1\":{\"304\":1}}],[\"以及服务器所监听的传输控制协议端口号\",{\"1\":{\"224\":1}}],[\"以及其他有用的诊断性性能指标\",{\"1\":{\"890\":1}}],[\"以及其他的\",{\"1\":{\"517\":1}}],[\"以及其他一些关键传输问题\",{\"1\":{\"161\":1}}],[\"以及其他相关状态和资源组成\",{\"1\":{\"96\":1}}],[\"以及一些特别的定时器方法globalthis\",{\"1\":{\"101\":1}}],[\"以及许多事件监听方法\",{\"1\":{\"101\":1}}],[\"以及阴影的颜色\",{\"1\":{\"47\":1}}],[\"缩小图片至指定的大小\",{\"1\":{\"45\":2}}],[\"缩小图片以适合元素\",{\"1\":{\"45\":1}}],[\"缩放等等\",{\"1\":{\"10\":1}}],[\"缩放\",{\"1\":{\"8\":1,\"12\":1,\"50\":2}}],[\"通俗的理解\",{\"1\":{\"931\":1}}],[\"通知后端开启gzip\",{\"1\":{\"894\":1}}],[\"通知相关的依赖函数\",{\"1\":{\"819\":1}}],[\"通信\",{\"0\":{\"836\":1}}],[\"通信使用明文\",{\"1\":{\"233\":1}}],[\"通信允许数据在两个方向上同时传输\",{\"1\":{\"197\":1}}],[\"通常不需要开发者直接干预\",{\"1\":{\"942\":1}}],[\"通常相同\",{\"1\":{\"886\":1}}],[\"通常做法是在登陆状态中保存有效期数据\",{\"1\":{\"830\":1}}],[\"通常会改变整个\",{\"1\":{\"760\":1}}],[\"通常会遵循以下规则\",{\"1\":{\"483\":1}}],[\"通常版本控制系统都支持分支\",{\"1\":{\"675\":1}}],[\"通常路径的跳转是使用link组件\",{\"1\":{\"596\":1}}],[\"通常将应用程序的整个逻辑分解为小的单个部分\",{\"1\":{\"533\":1}}],[\"通常的操作为初始化state状态或者在this上挂载方法\",{\"1\":{\"435\":1}}],[\"通常条件表达式和参数表达式都不可计时\",{\"1\":{\"315\":1}}],[\"通常是各种值\",{\"1\":{\"250\":1}}],[\"通常导致在服务器上的状态变化或副作用\",{\"1\":{\"215\":1}}],[\"通常\",{\"1\":{\"209\":1,\"408\":1,\"939\":1}}],[\"通常中间列最宽\",{\"1\":{\"74\":1}}],[\"通常情况下\",{\"1\":{\"409\":1}}],[\"通常情况下有两种实现方式\",{\"1\":{\"248\":1}}],[\"通常情况\",{\"1\":{\"43\":1}}],[\"通过为内联\",{\"1\":{\"949\":1}}],[\"通过一些插件\",{\"1\":{\"942\":1}}],[\"通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力\",{\"1\":{\"773\":1}}],[\"通过manifest\",{\"1\":{\"942\":1}}],[\"通过互相引用\",{\"1\":{\"937\":1}}],[\"通过分页\",{\"1\":{\"914\":1}}],[\"通过预加载关键资源\",{\"1\":{\"905\":1}}],[\"通过压缩\",{\"1\":{\"892\":1}}],[\"通过这个库\",{\"1\":{\"890\":1}}],[\"通过这些属性就能找到下一个执行目标\",{\"1\":{\"429\":1}}],[\"通过观察网页上的所有互动\",{\"1\":{\"882\":1}}],[\"通过缓存资源\",{\"1\":{\"863\":1}}],[\"通过按需加载\",{\"1\":{\"856\":1}}],[\"通过防抖\",{\"1\":{\"843\":1}}],[\"通过宿主环境提供的setdata\",{\"1\":{\"836\":1}}],[\"通过getcurrentpages\",{\"1\":{\"832\":1}}],[\"通过wx\",{\"1\":{\"829\":1,\"832\":1}}],[\"通过window\",{\"1\":{\"608\":1}}],[\"通过微信提供的登录能力\",{\"1\":{\"829\":1}}],[\"通过tree\",{\"1\":{\"813\":1}}],[\"通过definecomponent\",{\"1\":{\"812\":1}}],[\"通过diff算法比较新旧虚拟dom的差异\",{\"1\":{\"811\":1}}],[\"通过类似于原生h5的语法描述ui结构\",{\"1\":{\"811\":1}}],[\"通过类型检查\",{\"1\":{\"368\":1}}],[\"通过虚拟dom实现高效dom更新\",{\"1\":{\"811\":1}}],[\"通过单文件组件\",{\"1\":{\"811\":1}}],[\"通过v\",{\"1\":{\"811\":1}}],[\"通过vue\",{\"1\":{\"737\":1,\"790\":1}}],[\"通过劫持数据对象的getter\",{\"1\":{\"811\":1}}],[\"通过app\",{\"1\":{\"752\":1}}],[\"通过issamevnode进行判断\",{\"1\":{\"733\":1}}],[\"通过iframe+postmessage\",{\"1\":{\"287\":1}}],[\"通过服务端实现代理请求转发\",{\"1\":{\"723\":1}}],[\"通过把他们添加到vue\",{\"1\":{\"717\":1}}],[\"通过函数运行时的为组件添加属性\",{\"1\":{\"712\":1}}],[\"通过函数简单创建组件的示例如下\",{\"1\":{\"472\":1}}],[\"通过动态重写当前页面来与用户交互\",{\"1\":{\"705\":1}}],[\"通过共同祖辈$parent或者$root搭建通信桥连\",{\"1\":{\"696\":1}}],[\"通过文档控制\",{\"1\":{\"675\":1}}],[\"通过extends关键字实现类的继承\",{\"1\":{\"626\":1}}],[\"通过es6的上下文来将this的指向绑定给当前组件\",{\"1\":{\"511\":1}}],[\"通过点击按钮触发onclick事件\",{\"1\":{\"612\":1}}],[\"通过props传进来的path与context传进来的pathname进行匹配\",{\"1\":{\"609\":1}}],[\"通过props属性接收父组件传递的参数\",{\"1\":{\"413\":1}}],[\"通过ref获取dom元素或子组件的实例\",{\"1\":{\"811\":1}}],[\"通过redux将整个应用状态存储到store中\",{\"1\":{\"563\":1}}],[\"通过route作为顶层组件包裹其他组件后\",{\"1\":{\"596\":1}}],[\"通过useref创建一个ref\",{\"1\":{\"583\":1}}],[\"通过命令式创建地图\",{\"1\":{\"532\":1}}],[\"通过自定义hook能够更好的封装我们的功能\",{\"1\":{\"522\":1}}],[\"通过对\",{\"1\":{\"549\":1}}],[\"通过对上面的初步认识\",{\"1\":{\"522\":1}}],[\"通过对传入的原始组件\",{\"1\":{\"479\":1}}],[\"通过判断e\",{\"1\":{\"505\":1}}],[\"通过key可以准确地发现新旧集合中的节点都是相同的节点\",{\"1\":{\"496\":1}}],[\"通过上面的初步了解\",{\"1\":{\"534\":1}}],[\"通过上面的了解\",{\"1\":{\"480\":1}}],[\"通过上面四种样式的引入\",{\"1\":{\"489\":1}}],[\"通过setup函数或<\",{\"1\":{\"813\":1}}],[\"通过set方法合并\",{\"1\":{\"793\":1}}],[\"通过slot插槽向组件内部指定位置传递内容\",{\"1\":{\"805\":1}}],[\"通过samevnode判断节点是否一样\",{\"1\":{\"732\":1}}],[\"通过super关键字引用父类的属性和方法\",{\"1\":{\"650\":1}}],[\"通过shouldcomponentupdate生命周期函数来比对\",{\"1\":{\"548\":1}}],[\"通过style属性直接引入\",{\"1\":{\"485\":1}}],[\"通过script标签为页面引入客户端执行的react代码\",{\"1\":{\"449\":1}}],[\"通过继承react\",{\"1\":{\"474\":1}}],[\"通过简单组合构建其他组件\",{\"1\":{\"472\":1}}],[\"通过两个图的对比\",{\"1\":{\"445\":1}}],[\"通过返回true或者false告知组件更新与否\",{\"1\":{\"440\":1}}],[\"通过context进行参数传递\",{\"1\":{\"449\":1}}],[\"通过console\",{\"1\":{\"421\":1}}],[\"通过css的transition属性\",{\"1\":{\"633\":1}}],[\"通过css\",{\"1\":{\"489\":1}}],[\"通过css实现隐藏元素方法有如下\",{\"1\":{\"66\":1}}],[\"通过css隐藏元素的方法有很多种\",{\"1\":{\"65\":1}}],[\"通过使用react\",{\"1\":{\"416\":1}}],[\"通过使用父组件传递\",{\"1\":{\"415\":1}}],[\"通过实现多个接口\",{\"1\":{\"368\":1}}],[\"通过注册自动加载器\",{\"1\":{\"351\":1}}],[\"通过引用继承\",{\"1\":{\"326\":1}}],[\"通过设置arr为null\",{\"1\":{\"250\":1}}],[\"通过三次握手\",{\"1\":{\"243\":1}}],[\"通过响应头set\",{\"1\":{\"227\":1}}],[\"通过配合请求头和响应头\",{\"1\":{\"225\":1}}],[\"通过状态码就能判断和分析服务器的运行状态\",{\"1\":{\"205\":1}}],[\"通过不同的应用层协议为不同的应用提供服务\",{\"1\":{\"171\":1}}],[\"通过不同的应用层协议为不同的网络应用提供服务\",{\"1\":{\"158\":1}}],[\"通过控制信息我们可以知道一个帧的起止比特位置\",{\"1\":{\"163\":1}}],[\"通过中心平台的负载均衡\",{\"1\":{\"132\":1}}],[\"通过该字段连接起来的所有的环境记录器共同构成一条作用域链\",{\"1\":{\"111\":1}}],[\"通过裁剪的形式\",{\"1\":{\"72\":1}}],[\"通过百分比单位\",{\"1\":{\"57\":2}}],[\"通过媒体查询就能很方便的实现\",{\"1\":{\"56\":1}}],[\"通过媒体查询\",{\"1\":{\"56\":1}}],[\"通过\",{\"0\":{\"473\":1},\"1\":{\"13\":1,\"231\":1,\"399\":1,\"471\":1,\"480\":1,\"483\":1,\"526\":1,\"696\":1,\"925\":2,\"937\":1}}],[\"有单引号\",{\"1\":{\"1009\":1}}],[\"有两种使用\",{\"1\":{\"947\":1}}],[\"有两个阶段\",{\"1\":{\"273\":1}}],[\"有大量的配置项\",{\"1\":{\"928\":1}}],[\"有局限性\",{\"1\":{\"908\":1}}],[\"有关的dom元素\",{\"1\":{\"879\":1}}],[\"有一些事件会频繁触发\",{\"1\":{\"844\":1}}],[\"有一个可用的伪变量\",{\"1\":{\"336\":1}}],[\"有额外的两个生命周期钩子\",{\"1\":{\"773\":1}}],[\"有很多优秀的redux中间件\",{\"1\":{\"572\":1}}],[\"有很多的操作序列被简化成简单的词汇存在于各种代换式中\",{\"1\":{\"127\":1}}],[\"有状态组件\",{\"1\":{\"533\":1}}],[\"有状态的组件也就是组件内部存在维护的数据\",{\"1\":{\"474\":1}}],[\"有状态的组件只能通过继承react\",{\"1\":{\"474\":1}}],[\"有序索引集\",{\"1\":{\"526\":1}}],[\"有的话\",{\"1\":{\"496\":1}}],[\"有的语句的求值过程中\",{\"1\":{\"118\":1}}],[\"有条件地禁用提交按钮\",{\"1\":{\"467\":1}}],[\"有经验的用户可能会注意到被浏览器发送的实际变量名包含的是一个点而不是下划线\",{\"1\":{\"406\":1}}],[\"有几个方法访问此信息\",{\"1\":{\"406\":1}}],[\"有时候使用可变变量名是很方便的\",{\"1\":{\"404\":1}}],[\"有些情况下当使用\",{\"1\":{\"332\":1}}],[\"有限且输入高度重复的函数\",{\"1\":{\"279\":1}}],[\"有函数作用域和全局作用域\",{\"1\":{\"401\":1}}],[\"有函数作用域\",{\"1\":{\"251\":1}}],[\"有效减轻服务端压力\",{\"1\":{\"849\":1}}],[\"有效的变量名由字母\",{\"1\":{\"398\":1}}],[\"有效\",{\"1\":{\"359\":1}}],[\"有效时间等等\",{\"1\":{\"240\":1}}],[\"有效期是通过expires来指定的\",{\"1\":{\"865\":1}}],[\"有效期\",{\"1\":{\"227\":1}}],[\"有意义的数据\",{\"1\":{\"230\":1}}],[\"有变动就会发送新的资源回来\",{\"1\":{\"226\":1}}],[\"有更新的话就会将新的资源发送回来\",{\"1\":{\"226\":1}}],[\"有如下\",{\"1\":{\"206\":1}}],[\"有如下几种\",{\"1\":{\"10\":1}}],[\"有数据的话服务器就用响应报文回应\",{\"1\":{\"195\":1}}],[\"有以下类型\",{\"1\":{\"654\":1}}],[\"有以下简述步骤\",{\"1\":{\"122\":1}}],[\"有以下可能的属性\",{\"1\":{\"45\":1}}],[\"有以下几种可能的属性\",{\"1\":{\"43\":1}}],[\"阴影颜色\",{\"1\":{\"41\":1}}],[\"阴影尺寸\",{\"1\":{\"41\":1}}],[\"模板语法\",{\"1\":{\"811\":1}}],[\"模板标签处理\",{\"1\":{\"753\":1}}],[\"模板编译器代码\",{\"1\":{\"753\":1}}],[\"模板编译阶段过滤器表达式将会被编译为过滤器函数\",{\"1\":{\"748\":1}}],[\"模板指令的代码都会生成在render函数中\",{\"1\":{\"752\":1}}],[\"模拟原生\",{\"1\":{\"504\":1}}],[\"模拟实际运算的过程\",{\"1\":{\"304\":1}}],[\"模式路由就是利用\",{\"1\":{\"607\":1}}],[\"模式\",{\"1\":{\"333\":1,\"606\":2}}],[\"模式并返回了\",{\"1\":{\"333\":1}}],[\"模块产生式\",{\"1\":{\"986\":1}}],[\"模块内容条目中的其中一个代换式\",{\"1\":{\"986\":1}}],[\"模块也可以为空\",{\"1\":{\"986\":1}}],[\"模块导出为\",{\"1\":{\"946\":1}}],[\"模块中\",{\"1\":{\"945\":1}}],[\"模块解析\",{\"1\":{\"942\":1}}],[\"模块加载\",{\"1\":{\"941\":1}}],[\"模块会被合并成\",{\"1\":{\"937\":1}}],[\"模块能以各种方式表达它们的依赖关系\",{\"1\":{\"936\":1}}],[\"模块相比\",{\"1\":{\"936\":1}}],[\"模块规范\",{\"1\":{\"925\":1}}],[\"模块或功能\",{\"1\":{\"857\":1}}],[\"模块化与复用\",{\"1\":{\"811\":1}}],[\"模块声明实例化\",{\"1\":{\"118\":1}}],[\"模块环境记录器\",{\"1\":{\"112\":1}}],[\"模块环境初始化\",{\"1\":{\"94\":2}}],[\"模块\",{\"0\":{\"935\":1},\"1\":{\"95\":1,\"113\":1,\"115\":1,\"270\":1,\"935\":2,\"937\":5}}],[\"模块执行\",{\"1\":{\"94\":2}}],[\"模糊距离\",{\"1\":{\"41\":1,\"47\":1}}],[\"模型将\",{\"1\":{\"171\":1}}],[\"模型全称为开放式通信系统互连参考模型\",{\"1\":{\"156\":1}}],[\"模型\",{\"1\":{\"18\":1}}],[\"垂直制表符\",{\"1\":{\"380\":1}}],[\"垂直阴影\",{\"1\":{\"41\":1,\"47\":1}}],[\"垂直居中\",{\"1\":{\"32\":1,\"33\":1}}],[\"边框\",{\"0\":{\"41\":1}}],[\"边框等\",{\"1\":{\"37\":1}}],[\"位运算\",{\"0\":{\"355\":1}}],[\"位置的计算\",{\"1\":{\"192\":1}}],[\"位置等\",{\"1\":{\"37\":1}}],[\"位于osi模型的应用层\",{\"1\":{\"195\":1}}],[\"位于块内的声明语句\",{\"1\":{\"103\":1}}],[\"位于函数体内声明语句\",{\"1\":{\"103\":1}}],[\"位移\",{\"1\":{\"12\":1,\"50\":1}}],[\"颜色渐变是指在两个颜色之间平稳的过渡\",{\"1\":{\"52\":1}}],[\"颜色\",{\"0\":{\"48\":1},\"1\":{\"37\":1}}],[\"颜色三部分组成\",{\"1\":{\"15\":1}}],[\"宽度小于左右部分宽度之和时\",{\"1\":{\"78\":1}}],[\"宽度较大的列父元素为主要布局容器\",{\"1\":{\"74\":1}}],[\"宽度较小的列设置为固定宽度\",{\"1\":{\"74\":1}}],[\"宽度\",{\"1\":{\"37\":1,\"57\":1,\"82\":1}}],[\"光标属性\",{\"1\":{\"37\":1}}],[\"文法符号\",{\"0\":{\"990\":1}}],[\"文法前缀参数的含义是不一样的\",{\"1\":{\"985\":1}}],[\"文法前缀参数的含义\",{\"0\":{\"985\":1}}],[\"文法参数的含义\",{\"0\":{\"984\":1}}],[\"文法参数\",{\"0\":{\"983\":1},\"1\":{\"983\":1}}],[\"文件内导出了一个\",{\"1\":{\"925\":1}}],[\"文件指纹\",{\"0\":{\"869\":1}}],[\"文件状态对应的\",{\"1\":{\"685\":1}}],[\"文件能够解决局部作用域问题\",{\"1\":{\"489\":1}}],[\"文件符合我们日常的编写习惯\",{\"1\":{\"489\":1}}],[\"文件末尾的\",{\"1\":{\"332\":1}}],[\"文件所在的目录\",{\"1\":{\"308\":1}}],[\"文件的完整路径和文件名\",{\"1\":{\"308\":1}}],[\"文件中指定\",{\"1\":{\"947\":1}}],[\"文件中的图片链接\",{\"1\":{\"936\":1}}],[\"文件中的\",{\"1\":{\"936\":1}}],[\"文件中的当前行号\",{\"1\":{\"308\":1}}],[\"文件中多个请求和响应就可以在一个连接中传输\",{\"1\":{\"147\":1}}],[\"文件传输协议\",{\"1\":{\"176\":1}}],[\"文件\",{\"0\":{\"487\":1},\"1\":{\"141\":1,\"230\":1,\"329\":1,\"401\":1,\"484\":2,\"925\":1,\"945\":1,\"946\":1,\"953\":1,\"954\":2}}],[\"文档修改\",{\"1\":{\"689\":1}}],[\"文档\",{\"1\":{\"74\":1}}],[\"文字长度超出限定宽度\",{\"1\":{\"87\":1}}],[\"文字\",{\"0\":{\"47\":1}}],[\"文字前面的小点点样式\",{\"1\":{\"37\":1}}],[\"文本的计算结果为\",{\"1\":{\"1008\":1}}],[\"文本字段\",{\"1\":{\"881\":1}}],[\"文本块\",{\"1\":{\"879\":1}}],[\"文本格式化\",{\"1\":{\"747\":1}}],[\"文本节点\",{\"1\":{\"538\":1}}],[\"文本溢出限定的宽度就隐藏内容\",{\"1\":{\"89\":1,\"90\":1}}],[\"文本属性\",{\"1\":{\"37\":1}}],[\"文本颜色\",{\"1\":{\"37\":1}}],[\"文本水平对刘\",{\"1\":{\"37\":1}}],[\"文本缩进\",{\"1\":{\"37\":1}}],[\"文本系列属性\",{\"1\":{\"37\":1}}],[\"表单验证\",{\"1\":{\"849\":1}}],[\"表单输入内容\",{\"1\":{\"783\":1}}],[\"表单修饰符\",{\"1\":{\"699\":1}}],[\"表单数据就由dom本身处理\",{\"1\":{\"467\":1}}],[\"表单数据由react组件负责处理\",{\"1\":{\"467\":1}}],[\"表单也类似\",{\"1\":{\"406\":1}}],[\"表单中的数据\",{\"1\":{\"406\":1}}],[\"表单中的信息会自动在脚本中可用\",{\"1\":{\"406\":1}}],[\"表达式之前\",{\"1\":{\"359\":1}}],[\"表达式\",{\"1\":{\"357\":1,\"359\":1}}],[\"表达式必须详尽列出所有情况\",{\"1\":{\"313\":1}}],[\"表达式结构\",{\"1\":{\"313\":1}}],[\"表达式基于值的一致性进行分支计算\",{\"1\":{\"313\":1}}],[\"表达式参数\",{\"1\":{\"123\":1}}],[\"表明已经收到客户端的报文了\",{\"1\":{\"244\":1}}],[\"表明客户端要求服务器做出特定的行为\",{\"1\":{\"224\":1}}],[\"表格列\",{\"1\":{\"805\":1}}],[\"表格的宽度由什么决定\",{\"1\":{\"37\":1}}],[\"表格布局属性\",{\"1\":{\"37\":1}}],[\"表示一个可选符号\",{\"1\":{\"993\":1}}],[\"表示没有产生式的元素\",{\"1\":{\"991\":1}}],[\"表示如果目标符不带有该参数\",{\"1\":{\"985\":1}}],[\"表示如果目标符带有该参数\",{\"1\":{\"985\":1}}],[\"表示非终结符不可以带有该参数\",{\"1\":{\"985\":1}}],[\"表示非终结符可以带有该参数\",{\"1\":{\"985\":1}}],[\"表示in是in操作符还是for\",{\"1\":{\"984\":1}}],[\"表示是否可以使用return语句\",{\"1\":{\"984\":1}}],[\"表示是否可以使用无名函数\",{\"1\":{\"984\":1}}],[\"表示是否可以使用yield语句\",{\"1\":{\"984\":1}}],[\"表示是否可以使用await语句\",{\"1\":{\"984\":1}}],[\"表示是否可以使用数字分隔符\",{\"1\":{\"984\":1}}],[\"表示应用returnifabrupt\",{\"1\":{\"971\":1}}],[\"表示数据已经安全的保存在本地数据库中\",{\"1\":{\"685\":1}}],[\"表示对一个已修改文件的当前版本做了标记\",{\"1\":{\"685\":1}}],[\"表示修改了文件\",{\"1\":{\"685\":1}}],[\"表示旧组件先移除\",{\"1\":{\"634\":1}}],[\"表示新组件先进入\",{\"1\":{\"634\":1}}],[\"表示位置\",{\"1\":{\"526\":1}}],[\"表示当前fibernode对应的element组件实例\",{\"1\":{\"428\":1}}],[\"表示当前代表的节点类型\",{\"1\":{\"428\":1}}],[\"表示函数不会终止\",{\"1\":{\"394\":1}}],[\"表示函数不返回值\",{\"1\":{\"393\":1}}],[\"表示函数的顶级作用域\",{\"1\":{\"114\":1}}],[\"表示\",{\"1\":{\"372\":1}}],[\"表示该函数接受可变数量的参数值\",{\"1\":{\"323\":1}}],[\"表示该容器内部的元素将按照flex进行布局\",{\"1\":{\"29\":1}}],[\"表示body的所有元素的总长度\",{\"1\":{\"290\":1}}],[\"表示可视区域的高度\",{\"1\":{\"290\":1}}],[\"表示本地文件最后修改日期\",{\"1\":{\"226\":1}}],[\"表示的请求体的长度\",{\"1\":{\"224\":1}}],[\"表示要完成请求\",{\"1\":{\"209\":1}}],[\"表示服务器无法完成明显有效的请求\",{\"1\":{\"211\":1}}],[\"表示服务器错误\",{\"1\":{\"206\":1}}],[\"表示服务端接受\",{\"1\":{\"200\":1}}],[\"表示请求错误\",{\"1\":{\"206\":1}}],[\"表示重定向\",{\"1\":{\"206\":1}}],[\"表示成功\",{\"1\":{\"206\":1}}],[\"表示消息\",{\"1\":{\"206\":1}}],[\"表示支持的websocket版本\",{\"1\":{\"200\":1}}],[\"表示希望升级到websocket协议\",{\"1\":{\"200\":1}}],[\"表示客户端希望连接升级\",{\"1\":{\"200\":1}}],[\"表示层和应用层的功能合并到一个应用层实现\",{\"1\":{\"171\":1}}],[\"表示层的作用是使通信的应用程序能够解释交换数据的含义\",{\"1\":{\"159\":1}}],[\"表示层\",{\"0\":{\"159\":1},\"1\":{\"177\":1}}],[\"表示结束时的那一帧\",{\"1\":{\"13\":1}}],[\"表示最开始的那一帧\",{\"1\":{\"13\":1}}],[\"行终结符的组合\",{\"1\":{\"1009\":1}}],[\"行终结符\",{\"1\":{\"998\":1,\"1009\":1}}],[\"行高\",{\"1\":{\"37\":1}}],[\"行内元素可设置\",{\"1\":{\"32\":1}}],[\"则表示该生成式是受限生成式\",{\"1\":{\"998\":1}}],[\"则上次间隔的函数执行完成\",{\"1\":{\"848\":1}}],[\"则解析模板文件\",{\"1\":{\"796\":1}}],[\"则递归地将每个\",{\"1\":{\"792\":1}}],[\"则执行updatechildren函数比较子节点\",{\"1\":{\"733\":1}}],[\"则删除el子节点\",{\"1\":{\"733\":1}}],[\"则没有节点可以复用\",{\"1\":{\"732\":1}}],[\"则处理比较更新子节点\",{\"1\":{\"732\":1}}],[\"则发出警告\",{\"1\":{\"728\":1}}],[\"则发生了跨域\",{\"1\":{\"722\":1}}],[\"则它的内容被视为全局可见的\",{\"1\":{\"664\":1}}],[\"则调用setstate方法\",{\"1\":{\"588\":1}}],[\"则可以通过在命令行中使用\",{\"1\":{\"927\":1}}],[\"则可以设置navlink的一下属性\",{\"1\":{\"596\":1}}],[\"则可以使用现成的redux\",{\"1\":{\"574\":1}}],[\"则可以依据自身的业务需求\",{\"1\":{\"99\":1}}],[\"则每次调用render函数时都会创建一个新的函数实例\",{\"1\":{\"555\":1}}],[\"则插入\",{\"1\":{\"542\":1}}],[\"则对应如下\",{\"1\":{\"526\":1}}],[\"则能够将相同的逻辑抽离出来\",{\"1\":{\"520\":1}}],[\"则能够得到虚拟vdom消息\",{\"1\":{\"421\":1}}],[\"则会指向fn定义环境\",{\"1\":{\"845\":1}}],[\"则会覆盖\",{\"1\":{\"793\":1}}],[\"则会引发报错\",{\"1\":{\"626\":1}}],[\"则会发现控制台输出undefined\",{\"1\":{\"508\":1}}],[\"则会继续往下diff运算\",{\"1\":{\"495\":1}}],[\"则会被拉开到和父级一样宽高\",{\"1\":{\"25\":1}}],[\"则使用react\",{\"1\":{\"479\":1}}],[\"则return函数会在组件卸载的时候执行\",{\"1\":{\"459\":1}}],[\"则父组件作为中间层来实现数据的互通\",{\"1\":{\"415\":1}}],[\"则将vnode的子节点真实化后添加到el\",{\"1\":{\"733\":1}}],[\"则将其删除\",{\"1\":{\"542\":1}}],[\"则将其标记为\",{\"1\":{\"249\":1}}],[\"则将会忽略尾随字符\",{\"1\":{\"406\":1}}],[\"则将在全局作用域内创建该变量并赋值为\",{\"1\":{\"402\":1}}],[\"则为\",{\"1\":{\"361\":3}}],[\"则不允许使用该生成式\",{\"1\":{\"998\":1}}],[\"则不加载某些资源\",{\"1\":{\"858\":1}}],[\"则不应使用setdata来设置这些数据\",{\"1\":{\"840\":1}}],[\"则不用像集中版本管理那样因为断网情况而无法工作\",{\"1\":{\"681\":1}}],[\"则不会发出通知\",{\"1\":{\"359\":1}}],[\"则不能被子类重新定义\",{\"1\":{\"350\":1}}],[\"则不可被覆盖\",{\"1\":{\"340\":1}}],[\"则必须使用其完整名称\",{\"1\":{\"337\":1}}],[\"则代码段的结束标记包含了行结束\",{\"1\":{\"332\":1}}],[\"则返回被包括的文件所在的目录\",{\"1\":{\"308\":1}}],[\"则返回被包含的文件名\",{\"1\":{\"308\":1}}],[\"则触发callback\",{\"1\":{\"291\":1}}],[\"则需要插入到新的dom树中\",{\"1\":{\"542\":1}}],[\"则需要将组件进行实例化\",{\"1\":{\"460\":1}}],[\"则需要创建一个类组件或者state提升到你的父组件中\",{\"1\":{\"458\":1}}],[\"则需要在使用\",{\"1\":{\"264\":1}}],[\"则需要添加word\",{\"1\":{\"90\":1}}],[\"则如下\",{\"1\":{\"253\":1}}],[\"则证明\",{\"1\":{\"240\":1}}],[\"则向我发送我所缺少的那一个或多个部分\",{\"1\":{\"224\":1}}],[\"则post上传数据\",{\"1\":{\"212\":1}}],[\"则经历三次握手建立tcp连接\",{\"1\":{\"189\":1}}],[\"则尽可能传递数据\",{\"1\":{\"183\":1}}],[\"则本地域名服务器向上级域名服务器进行迭代查询\",{\"1\":{\"142\":1}}],[\"则操作系统将域名发送至本地域名服务器\",{\"1\":{\"142\":1}}],[\"则继续搜索操作系统的\",{\"1\":{\"142\":1}}],[\"则继续往右移动一位进行比较\",{\"1\":{\"36\":1}}],[\"则进入到cdn的全局负载均衡系统进行智能调度\",{\"1\":{\"134\":1}}],[\"则初始化为这个值\",{\"1\":{\"123\":2}}],[\"则\",{\"1\":{\"114\":1}}],[\"则这是一个箭头函数\",{\"1\":{\"114\":1}}],[\"则提供一个\",{\"1\":{\"114\":1}}],[\"则抛出\",{\"1\":{\"107\":1}}],[\"则在全局对象上新增了进程属性globalthis\",{\"1\":{\"101\":1}}],[\"则值为null\",{\"1\":{\"95\":1}}],[\"则隐藏超出的内容\",{\"1\":{\"87\":1}}],[\"则只会触发\",{\"1\":{\"69\":1}}],[\"则是相对于自身的宽度\",{\"1\":{\"57\":1}}],[\"则相对于直接非static定位\",{\"1\":{\"57\":1}}],[\"则后面的会覆盖前面的\",{\"1\":{\"36\":1}}],[\"就到等待逻辑层的指令才能进行下一步工作\",{\"1\":{\"836\":1}}],[\"就可将这些csstransition放入到一个transitiongroup中来完成动画\",{\"1\":{\"635\":1}}],[\"就可以获取用户的openid\",{\"1\":{\"829\":1}}],[\"就可以用这种缩写\",{\"1\":{\"313\":1}}],[\"就可以减少组合继承中多进行一次构造的过程\",{\"1\":{\"263\":1}}],[\"就可以使用尾递归\",{\"1\":{\"253\":1}}],[\"就可以像签署文件一样证明消息确实是你发的\",{\"1\":{\"239\":1}}],[\"就可以在这基础上进行通信\",{\"1\":{\"190\":1}}],[\"就可以随同页面的其它资源\",{\"1\":{\"152\":1}}],[\"就可以发出下一次请求\",{\"1\":{\"147\":1}}],[\"就可以发现盒子的所占据的宽度为200px\",{\"1\":{\"18\":1}}],[\"就一定会触发\",{\"1\":{\"589\":1}}],[\"就删除\",{\"1\":{\"496\":1}}],[\"就只能使用类组件\",{\"1\":{\"459\":1}}],[\"就像全局数据一样\",{\"1\":{\"416\":1}}],[\"就像if条件表达式一样\",{\"1\":{\"56\":1}}],[\"就行了\",{\"1\":{\"384\":1}}],[\"就不需要创建对象\",{\"1\":{\"818\":1}}],[\"就不用因为用户的操作而进行页面的重新加载或者跳转\",{\"1\":{\"606\":1}}],[\"就不会触发render\",{\"1\":{\"588\":1}}],[\"就不会看到由包含文件生成的不期望的空白符\",{\"1\":{\"332\":1}}],[\"就不能再被更改的数据\",{\"1\":{\"525\":1}}],[\"就不能再改变或者取消定义\",{\"1\":{\"306\":1}}],[\"就把这个b称为\",{\"1\":{\"256\":1}}],[\"就容易造成栈溢出\",{\"1\":{\"253\":1}}],[\"就被垃圾回收了\",{\"1\":{\"250\":1}}],[\"就解除了对数组\",{\"1\":{\"250\":1}}],[\"就表示这个值不再用到了\",{\"1\":{\"250\":1}}],[\"就标记这个变量为\",{\"1\":{\"249\":1}}],[\"就处于关闭连接了\",{\"1\":{\"244\":1}}],[\"就是查询dns映射表\",{\"1\":{\"871\":1}}],[\"就是将父类中的this对象继承给子类的\",{\"1\":{\"626\":1}}],[\"就是3\",{\"1\":{\"496\":1}}],[\"就是1\",{\"1\":{\"496\":1}}],[\"就是不受我们控制的组件\",{\"1\":{\"466\":1}}],[\"就是不区分大小写的常量\",{\"1\":{\"370\":1}}],[\"就是受我们控制的组件\",{\"1\":{\"465\":1}}],[\"就是通过函数编写的形式去实现一个react组件\",{\"1\":{\"455\":1}}],[\"就是通过伪元素绝对定位到行尾并遮住文字\",{\"1\":{\"89\":1}}],[\"就是一个\",{\"1\":{\"428\":1}}],[\"就是说\",{\"1\":{\"404\":1}}],[\"就是由一系列的字符组成\",{\"1\":{\"378\":1}}],[\"就是\",{\"1\":{\"371\":1}}],[\"就是证书验证机构\",{\"1\":{\"239\":1}}],[\"就是用私钥加密\",{\"1\":{\"239\":1}}],[\"就能在它前面加上\",{\"1\":{\"359\":1}}],[\"就能确定双方的接收和发送能力是正常的\",{\"1\":{\"243\":1}}],[\"就能够保证数据的完整性\",{\"1\":{\"238\":1}}],[\"就能完整地获取数据报文\",{\"1\":{\"219\":1}}],[\"就好像是给这段数据生成了一个数字\",{\"1\":{\"238\":1}}],[\"就会执行跳转到对应的to路径中\",{\"1\":{\"597\":1}}],[\"就会导致子组件的重新渲染\",{\"1\":{\"589\":1}}],[\"就会导致整个大组件的渲染\",{\"1\":{\"551\":1}}],[\"就会导致render\",{\"1\":{\"547\":1}}],[\"就会存在一个顺序问题\",{\"1\":{\"273\":1}}],[\"就会进行逻辑操作\",{\"1\":{\"191\":1}}],[\"就会展示如下的伪代码\",{\"1\":{\"130\":1}}],[\"就向其发起请求\",{\"1\":{\"142\":1}}],[\"就新增了许多访问页面尺寸和位置的属性\",{\"1\":{\"101\":1}}],[\"就需要使用\",{\"1\":{\"36\":1}}],[\"就来看看比较规则\",{\"1\":{\"36\":1}}],[\"知道了优先级是如何计算之后\",{\"1\":{\"36\":1}}],[\"否则不存在\",{\"1\":{\"985\":2}}],[\"否则没有\",{\"1\":{\"985\":1}}],[\"否则报错\",{\"1\":{\"895\":1}}],[\"否则使用el属性\",{\"1\":{\"775\":1}}],[\"否则只会监听自定义事件\",{\"1\":{\"699\":1}}],[\"否则子组件的props和展示形式不会改变\",{\"1\":{\"621\":1}}],[\"否则会根据模块的路径加载模块并执行\",{\"1\":{\"941\":1}}],[\"否则会导致无限循环调用更新\",{\"1\":{\"440\":1}}],[\"否则会触发死循环导致内存崩溃\",{\"1\":{\"437\":1}}],[\"否则返回\",{\"1\":{\"357\":1}}],[\"否则目录中名不包括末尾的斜杠\",{\"1\":{\"308\":1}}],[\"否则客户端会抛出错误\",{\"1\":{\"200\":1}}],[\"否则为表达式中的默认值\",{\"1\":{\"123\":1}}],[\"否则为undefined\",{\"1\":{\"123\":1}}],[\"否则右侧会臣在中间内容的下方\",{\"1\":{\"78\":1}}],[\"否则\",{\"1\":{\"36\":1,\"114\":1,\"224\":1,\"247\":1,\"864\":1,\"970\":1}}],[\"伪代码\",{\"1\":{\"127\":1}}],[\"伪元素\",{\"1\":{\"36\":1,\"89\":1,\"485\":1}}],[\"伪元素选择器\",{\"1\":{\"35\":1}}],[\"伪类\",{\"1\":{\"36\":1,\"483\":1}}],[\"伪类选择器\",{\"1\":{\"35\":2}}],[\"父子组件渲染顺序\",{\"0\":{\"784\":1}}],[\"父子组件通信\",{\"1\":{\"696\":1}}],[\"父组件生命周期完成后\",{\"1\":{\"784\":1}}],[\"父组件编译完模板后\",{\"1\":{\"784\":1}}],[\"父组件先进行模板编译\",{\"1\":{\"775\":1}}],[\"父组件\",{\"1\":{\"696\":1}}],[\"父组件通过props传递b\",{\"1\":{\"696\":1}}],[\"父组件中转\",{\"1\":{\"696\":1}}],[\"父组件或者祖先组件的\",{\"1\":{\"589\":1}}],[\"父组件变化不会渲染子组件\",{\"1\":{\"588\":1}}],[\"父组件渲染导致子组件渲染\",{\"1\":{\"547\":1}}],[\"父组件一旦发生render渲染\",{\"1\":{\"547\":1}}],[\"父组件对应代码如下\",{\"1\":{\"414\":1}}],[\"父组件在调用子组件的时候\",{\"1\":{\"413\":1}}],[\"父组件向子组件传一个函数\",{\"1\":{\"414\":1}}],[\"父组件向子组件传递是最常见的方式\",{\"1\":{\"413\":1}}],[\"父组件向子组件传递\",{\"0\":{\"413\":1},\"1\":{\"412\":1}}],[\"父组件向后代组件传递数据是一件最普通的事情\",{\"1\":{\"416\":1}}],[\"父组件向后代组件传递\",{\"0\":{\"416\":1},\"1\":{\"412\":1}}],[\"父级真实dom\",{\"1\":{\"770\":1}}],[\"父级不能有两个标签\",{\"1\":{\"556\":1}}],[\"父级作用域改变的值反映在函数调用中\",{\"1\":{\"326\":1}}],[\"父级设置为相对定位\",{\"1\":{\"25\":1}}],[\"父类的引用属性不会被共享\",{\"1\":{\"259\":1}}],[\"父类原型对象中一旦存在父类之前自己定义的方法\",{\"1\":{\"259\":1}}],[\"父元素事件监听\",{\"1\":{\"505\":2}}],[\"父元素\",{\"1\":{\"505\":2}}],[\"父元素中唯一子元素\",{\"1\":{\"35\":1}}],[\"父元素的特定类型的唯一子元素\",{\"1\":{\"35\":1}}],[\"父元素的最后一个元素\",{\"1\":{\"35\":2}}],[\"父元素的首个元素\",{\"1\":{\"35\":1}}],[\"父元素的首个子元素\",{\"1\":{\"35\":1}}],[\"选项用于以各种方式自定义\",{\"1\":{\"952\":1}}],[\"选项可以传递查询参数\",{\"1\":{\"949\":1}}],[\"选取指定选择器的首行\",{\"1\":{\"35\":1}}],[\"选取已被访问的链接\",{\"1\":{\"35\":1}}],[\"选择下拉菜单\",{\"1\":{\"881\":1}}],[\"选择了hybrid的渲染方式\",{\"1\":{\"835\":1}}],[\"选择一项操作\",{\"1\":{\"209\":1}}],[\"选择非\",{\"1\":{\"35\":1}}],[\"选择选中的元素\",{\"1\":{\"35\":1}}],[\"选择被禁用元素\",{\"1\":{\"35\":2}}],[\"选择父元素中第n个子元素\",{\"1\":{\"35\":2}}],[\"选择父元素为\",{\"1\":{\"35\":1}}],[\"选择前面有p元素的每个ul元素\",{\"1\":{\"35\":1}}],[\"选择attribute属性结尾为value的所有元素\",{\"1\":{\"35\":1}}],[\"选择attribute属性开头为value的所有元素\",{\"1\":{\"35\":1}}],[\"选择attribute属性值包含value的所有元素\",{\"1\":{\"35\":1}}],[\"选择attribute属性以value开头的元素\",{\"1\":{\"35\":1}}],[\"选择attribute属性包含value的元素\",{\"1\":{\"35\":1}}],[\"选择所有使用attribute=value的元素\",{\"1\":{\"35\":1}}],[\"选择带有attribute属性的元素\",{\"1\":{\"35\":1}}],[\"选择具有焦点的\",{\"1\":{\"35\":1}}],[\"选择活动链接\",{\"1\":{\"35\":1}}],[\"选择未被访问的链接\",{\"1\":{\"35\":1}}],[\"选择div\",{\"1\":{\"35\":1}}],[\"选择紧接在\",{\"1\":{\"35\":1}}],[\"选择id为box元素内部所有的div元素\",{\"1\":{\"35\":1}}],[\"选择id为box的元素\",{\"1\":{\"35\":1}}],[\"选择标签为div的所有元素\",{\"1\":{\"35\":1}}],[\"选择类名为one的所有元素\",{\"1\":{\"35\":1}}],[\"选择器在被选元素的内容后面插入内容\",{\"1\":{\"35\":1}}],[\"选择器在被选元素的内容前面插入内容\",{\"1\":{\"35\":1}}],[\"选择器的对象\",{\"1\":{\"35\":1}}],[\"选择器所选择的元素\",{\"1\":{\"35\":1}}],[\"选择器\",{\"0\":{\"35\":1}}],[\"还保留源文件\",{\"1\":{\"895\":1}}],[\"还需要\",{\"1\":{\"933\":1}}],[\"还需要更多的的字段进行标识\",{\"1\":{\"702\":1}}],[\"还需要更多的字段进行标识\",{\"1\":{\"702\":1}}],[\"还需要向认证中心确认token的合法性\",{\"1\":{\"287\":1}}],[\"还有很多易用的数据类型\",{\"1\":{\"526\":1}}],[\"还有很多额外的hooks\",{\"1\":{\"521\":1}}],[\"还有一种特殊类型的静态语义是先觉错误\",{\"1\":{\"978\":1}}],[\"还有一种更为简单的使用则是采取\",{\"1\":{\"75\":1}}],[\"还有一个代码包的下载过程\",{\"1\":{\"839\":1}}],[\"还有一些使用频率相对没那么多的选择器\",{\"1\":{\"35\":1}}],[\"还提供了组件栈追踪\",{\"1\":{\"500\":1}}],[\"还会造成网络拥塞\",{\"1\":{\"844\":1}}],[\"还会整体遍历老集合中节点\",{\"1\":{\"496\":1}}],[\"还会搜寻该对象的原型\",{\"1\":{\"267\":1}}],[\"还允许使用动态表达式\",{\"1\":{\"403\":1}}],[\"还可以通过配置中的\",{\"1\":{\"955\":1}}],[\"还可以在\",{\"1\":{\"946\":1}}],[\"还可以访问源文件双重保障\",{\"1\":{\"895\":1}}],[\"还可以传递对象\",{\"1\":{\"621\":1}}],[\"还可以是对象的方法\",{\"1\":{\"391\":1}}],[\"还可以轻松输出任何文本\",{\"1\":{\"329\":1}}],[\"还可以对次序乱掉的分包进行顺序控制\",{\"1\":{\"182\":1}}],[\"还表示请求者应使用代理\",{\"1\":{\"209\":1}}],[\"还是等于\",{\"1\":{\"520\":1}}],[\"还是1\",{\"1\":{\"496\":1}}],[\"还是\",{\"1\":{\"217\":1}}],[\"还是一个待搜索的关键词\",{\"1\":{\"187\":1}}],[\"还是看看实现的整体代码\",{\"1\":{\"29\":1}}],[\"还能通过使用javascript实现配合css\",{\"1\":{\"90\":1}}],[\"还应该设置其overflow\",{\"1\":{\"70\":1}}],[\"群组选择器\",{\"1\":{\"35\":1}}],[\"相应的表单会被传送到服务器\",{\"1\":{\"406\":1}}],[\"相等\",{\"1\":{\"361\":1}}],[\"相同的响应处理过少\",{\"1\":{\"850\":1}}],[\"相同的响应事件过少\",{\"1\":{\"850\":1}}],[\"相同的响应事件\",{\"1\":{\"850\":1}}],[\"相同的事件处理\",{\"1\":{\"850\":1}}],[\"相同类型的节点\",{\"1\":{\"769\":10}}],[\"相同则调用patchvnode方法\",{\"1\":{\"733\":1}}],[\"相同\",{\"1\":{\"360\":1}}],[\"相同点\",{\"1\":{\"177\":1,\"622\":1}}],[\"相比h5\",{\"1\":{\"822\":1}}],[\"相比http\",{\"1\":{\"198\":1}}],[\"相比第一种原型链继承方式\",{\"1\":{\"259\":1}}],[\"相反的\",{\"1\":{\"217\":1}}],[\"相当于给onscroll事件整了一个\",{\"1\":{\"699\":1}}],[\"相当于本地克隆了远程仓库项目的一个副本\",{\"1\":{\"685\":1}}],[\"相当于本地写代码的区域\",{\"1\":{\"685\":1}}],[\"相当于一个可以装不同类型数据的数组\",{\"1\":{\"639\":1}}],[\"相当于调用sup\",{\"1\":{\"626\":1}}],[\"相当于类组件中componentwillunmount生命周期函数\",{\"1\":{\"520\":1}}],[\"相当于在componentdidmount和componentdidupdate两个生命周期函数中执行回调\",{\"1\":{\"520\":1}}],[\"相当于arguments\",{\"1\":{\"270\":1}}],[\"相当于把源站的服务能力放大了\",{\"1\":{\"135\":1}}],[\"相当于自身宽度\",{\"1\":{\"80\":1}}],[\"相当于中间的宽度\",{\"1\":{\"80\":1}}],[\"相对类的类型\",{\"1\":{\"367\":1}}],[\"相对更安全\",{\"1\":{\"232\":1}}],[\"相对于用户首次导航到网页的时间\",{\"1\":{\"879\":1}}],[\"相对于http请求需要等待客户端发起请求服务端才能响应\",{\"1\":{\"201\":1}}],[\"相对于最近的已经定位的祖先元素进行定位\",{\"1\":{\"79\":1}}],[\"相对屏幕\",{\"1\":{\"8\":1}}],[\"相信大家对css选择器的优先级都不陌生\",{\"1\":{\"36\":1}}],[\"相邻同胞选择器\",{\"1\":{\"35\":1}}],[\"标志修改\",{\"1\":{\"927\":1}}],[\"标识符的名字不能为保留字\",{\"1\":{\"995\":1}}],[\"标识符包裹的内容\",{\"1\":{\"381\":1}}],[\"标识符\",{\"1\":{\"381\":1}}],[\"标量类型\",{\"1\":{\"367\":1}}],[\"标记动态节点\",{\"1\":{\"811\":1}}],[\"标记为已处理\",{\"1\":{\"770\":1}}],[\"标记以保持符合标准\",{\"1\":{\"331\":1}}],[\"标记清除\",{\"0\":{\"249\":1},\"1\":{\"248\":1}}],[\"标题短\",{\"1\":{\"181\":1}}],[\"标明数据发送者\",{\"1\":{\"163\":1}}],[\"标准事件模型\",{\"1\":{\"273\":1}}],[\"标准中有如下\",{\"1\":{\"997\":1}}],[\"标准中有两类值\",{\"1\":{\"981\":1}}],[\"标准中有五种环境记录器\",{\"1\":{\"112\":1}}],[\"标准中的调用链是这样的\",{\"1\":{\"121\":1}}],[\"标准中宿主可以提高的内容\",{\"1\":{\"99\":1}}],[\"标准使用\",{\"1\":{\"111\":1}}],[\"标准\",{\"1\":{\"104\":1,\"105\":1,\"106\":1,\"330\":1,\"933\":1}}],[\"标准关于全局对象的定义\",{\"1\":{\"101\":1}}],[\"标准盒子模型\",{\"0\":{\"16\":1},\"1\":{\"15\":2,\"16\":1}}],[\"标签名是否一致\",{\"1\":{\"770\":1}}],[\"标签的子节点\",{\"1\":{\"587\":1}}],[\"标签的字体颜色不能被继承\",{\"1\":{\"37\":1}}],[\"标签属性\",{\"1\":{\"587\":1}}],[\"标签属性props及若干子元素children\",{\"1\":{\"538\":1}}],[\"标签\",{\"1\":{\"537\":1,\"587\":1}}],[\"标签编写样式\",{\"1\":{\"483\":1}}],[\"标签用于展示行列数据\",{\"1\":{\"81\":1}}],[\"标签导航在接近手持终端设备时改变为经典的抽屉式导航\",{\"1\":{\"54\":1}}],[\"标签选择器\",{\"1\":{\"35\":1,\"36\":2}}],[\"叫做\",{\"1\":{\"35\":1}}],[\"负责把react组件解析成html\",{\"1\":{\"449\":1}}],[\"负责各元素尺寸\",{\"1\":{\"192\":1}}],[\"负责实现一切与应用程序相关的功能\",{\"1\":{\"176\":1}}],[\"负责实际数据的传输\",{\"1\":{\"176\":1}}],[\"负责提供可靠的传输服务\",{\"1\":{\"176\":1}}],[\"负责网络间的寻址数据传输\",{\"1\":{\"176\":1}}],[\"负责为分组网络中的不同主机提供通信服务\",{\"1\":{\"173\":1}}],[\"负责将域名翻译成ip地址\",{\"1\":{\"138\":1}}],[\"负载均衡系统\",{\"0\":{\"134\":1}}],[\"负自身一半\",{\"1\":{\"33\":1}}],[\"负值\",{\"0\":{\"26\":1},\"1\":{\"24\":1}}],[\"绝对定位+left\",{\"1\":{\"33\":1}}],[\"绝大多数情况下\",{\"1\":{\"26\":1}}],[\"定时器\",{\"1\":{\"780\":1}}],[\"定时器外面的someresource也不会被释放\",{\"1\":{\"251\":1}}],[\"定时器没有被清除\",{\"1\":{\"251\":1}}],[\"定时器也常会造成内存泄露\",{\"1\":{\"251\":1}}],[\"定位并加载所需的代码块\",{\"1\":{\"942\":1}}],[\"定位\",{\"1\":{\"89\":1}}],[\"定位position等\",{\"1\":{\"37\":1}}],[\"定位属性\",{\"1\":{\"37\":1}}],[\"定位表格标题位置\",{\"1\":{\"37\":1}}],[\"定义了特定语法产生错误的条件\",{\"1\":{\"978\":1}}],[\"定义了二进制帧\",{\"1\":{\"201\":1}}],[\"定义updatecomponent更新函数\",{\"1\":{\"797\":1}}],[\"定义updatecomponent渲染页面视图的方法\",{\"1\":{\"796\":1}}],[\"定义$on\",{\"1\":{\"797\":1}}],[\"定义$set\",{\"1\":{\"797\":1}}],[\"定义一个mixin对象\",{\"1\":{\"789\":1}}],[\"定义好组件时\",{\"1\":{\"727\":1}}],[\"定义好了关键帧后\",{\"1\":{\"13\":1}}],[\"定义路由的时候还有添加菜单显示标题\",{\"1\":{\"702\":2}}],[\"定义的源码如下\",{\"1\":{\"612\":1}}],[\"定义的常量可能不区分大小写且可以包含保留字或非常规名称的常量\",{\"1\":{\"306\":1}}],[\"定义这个功能模块如果响应actions\",{\"1\":{\"570\":1}}],[\"定义action构造函数\",{\"1\":{\"570\":1}}],[\"定义action类型\",{\"1\":{\"570\":1}}],[\"定义阶段使用箭头函数绑定\",{\"0\":{\"513\":1},\"1\":{\"509\":1}}],[\"定义\",{\"0\":{\"649\":1,\"746\":1},\"1\":{\"489\":1,\"792\":1,\"797\":1,\"967\":1,\"992\":1,\"993\":1,\"995\":1}}],[\"定义包含可能值的封闭集合类型\",{\"1\":{\"389\":1}}],[\"定义类\",{\"1\":{\"388\":1}}],[\"定义时\",{\"1\":{\"386\":1}}],[\"定义属性\",{\"1\":{\"368\":1}}],[\"定义两个接口\",{\"1\":{\"368\":1}}],[\"定义字体的风格\",{\"1\":{\"37\":1}}],[\"定高\",{\"1\":{\"33\":1}}],[\"定宽\",{\"1\":{\"33\":1}}],[\"单转义字符\",{\"1\":{\"1010\":1,\"1011\":1}}],[\"单个冒号表示句法\",{\"1\":{\"992\":1}}],[\"单页应用spa是一种网络应用程序或网站的模型\",{\"1\":{\"705\":1}}],[\"单点故障\",{\"1\":{\"678\":1}}],[\"单点登录\",{\"0\":{\"286\":1},\"1\":{\"286\":1}}],[\"单向响应的数据流会比双向绑定的更安全\",{\"1\":{\"534\":1}}],[\"单向数据绑定\",{\"1\":{\"531\":1}}],[\"单链表用来快速查找下一个side\",{\"1\":{\"428\":1}}],[\"单引号\",{\"0\":{\"379\":1},\"1\":{\"378\":1,\"1009\":1}}],[\"单值类型\",{\"1\":{\"367\":1}}],[\"单例类型\",{\"1\":{\"367\":1}}],[\"单位s\",{\"1\":{\"866\":1}}],[\"单位转换\",{\"1\":{\"747\":1}}],[\"单位\",{\"1\":{\"176\":1}}],[\"单位秒\",{\"1\":{\"13\":1}}],[\"单行注释仅仅注释到行末或者当前的\",{\"1\":{\"333\":1}}],[\"单行文本溢出省略\",{\"0\":{\"87\":1}}],[\"单行文本溢出\",{\"1\":{\"85\":1}}],[\"单行文本父元素确认高度\",{\"1\":{\"32\":1}}],[\"单行\",{\"0\":{\"85\":1}}],[\"单元格的边框的出现与消失\",{\"1\":{\"37\":1}}],[\"水平制表符\",{\"1\":{\"380\":1}}],[\"水平阴影\",{\"1\":{\"41\":1}}],[\"水平居中\",{\"1\":{\"32\":1,\"33\":1}}],[\"水平垂直居中\",{\"0\":{\"23\":1}}],[\"根域名服务器返回顶级域名服务器的地址给本地服务器\",{\"1\":{\"142\":1}}],[\"根据配置参数\",{\"1\":{\"932\":1}}],[\"根据你在配置生成过程中的选择\",{\"1\":{\"928\":1}}],[\"根据http响应头内容的不同分两种\",{\"1\":{\"863\":1}}],[\"根据用户的需求\",{\"1\":{\"857\":1}}],[\"根据当前环境选择合适的方法\",{\"1\":{\"801\":1}}],[\"根据keys的顺序记录element\",{\"1\":{\"768\":1}}],[\"根据key更准确的找到对应的vnode节点\",{\"1\":{\"768\":1}}],[\"根据情况调用patchvnode进行patch重复流程\",{\"1\":{\"733\":1}}],[\"根据状态的变化生成不同的css样式\",{\"1\":{\"483\":1}}],[\"根据传送者和接收者可以分为如下\",{\"1\":{\"412\":1}}],[\"根据攻击的来源\",{\"1\":{\"299\":1}}],[\"根据请求头expires和cache\",{\"1\":{\"226\":1}}],[\"根据不同的资源类型采用不同的解析方式\",{\"1\":{\"192\":1}}],[\"根据不同的指示做对应处理\",{\"1\":{\"192\":1}}],[\"根据不同宽度做出调整\",{\"1\":{\"89\":1}}],[\"根据\",{\"1\":{\"182\":1,\"368\":1,\"504\":1}}],[\"根据帧首部的流标识可以重新组装\",{\"1\":{\"150\":1}}],[\"根据标识符的类型进行绑定\",{\"1\":{\"107\":1}}],[\"根据元素标签的性质\",{\"0\":{\"31\":1}}],[\"根元素位置矩形\",{\"1\":{\"285\":1}}],[\"根元素\",{\"1\":{\"20\":1}}],[\"join\",{\"1\":{\"909\":2}}],[\"johanasynccomponent\",{\"1\":{\"559\":1}}],[\"johancomponent\",{\"1\":{\"559\":2}}],[\"john\",{\"1\":{\"385\":1,\"600\":1}}],[\"jpg\",{\"1\":{\"861\":1,\"896\":2,\"906\":1}}],[\"jpeg\",{\"1\":{\"7\":3,\"895\":2}}],[\"jwt验证\",{\"1\":{\"702\":1}}],[\"j++\",{\"1\":{\"538\":1}}],[\"j\",{\"1\":{\"538\":3}}],[\"jack\",{\"1\":{\"626\":5}}],[\"jane\",{\"1\":{\"385\":1}}],[\"javascript最常用的垃圾收回机制\",{\"1\":{\"249\":1}}],[\"javascript\",{\"0\":{\"266\":1},\"1\":{\"248\":1,\"421\":1,\"427\":2,\"428\":1,\"487\":1,\"488\":1,\"500\":2,\"526\":3,\"530\":1,\"622\":1,\"884\":1,\"895\":6,\"925\":2,\"945\":1,\"946\":2,\"956\":1},\"2\":{\"252\":1,\"255\":1,\"265\":1,\"302\":1,\"305\":1}}],[\"javascript必须依赖一个宿主环境才能实现完整的功能\",{\"1\":{\"92\":1}}],[\"javascript代码如下\",{\"1\":{\"90\":1}}],[\"jquery\",{\"1\":{\"277\":1}}],[\"jerry\",{\"1\":{\"261\":3}}],[\"jumbotron>\",{\"1\":{\"533\":1}}],[\"jul\",{\"1\":{\"223\":1}}],[\"justify\",{\"1\":{\"29\":2,\"30\":1,\"32\":1,\"82\":1}}],[\"js|jsx\",{\"1\":{\"954\":1}}],[\"js运算并不是性能的瓶颈\",{\"1\":{\"914\":1}}],[\"js$|\",{\"1\":{\"895\":1}}],[\"js中配置插件\",{\"1\":{\"895\":2}}],[\"js中进行应引用\",{\"1\":{\"449\":1}}],[\"jscore线程运行js脚本\",{\"1\":{\"835\":1}}],[\"js是单线程的\",{\"1\":{\"835\":1}}],[\"js对象\",{\"1\":{\"811\":1}}],[\"js框架\",{\"2\":{\"673\":1,\"694\":1,\"697\":1,\"700\":1,\"703\":1,\"706\":1,\"710\":1,\"715\":1,\"720\":1,\"724\":1,\"729\":1,\"734\":1,\"739\":1,\"742\":1,\"749\":1,\"761\":1,\"766\":1,\"771\":1,\"785\":1,\"794\":1,\"798\":1,\"802\":1,\"808\":1,\"814\":1,\"820\":1,\"841\":1}}],[\"js拥有了class关键字\",{\"1\":{\"648\":1}}],[\"js每日一题\",{\"1\":{\"612\":1}}],[\"js定义的动作\",{\"1\":{\"570\":1}}],[\"js<\",{\"1\":{\"488\":1}}],[\"js引用路由信息\",{\"1\":{\"449\":1}}],[\"js作为客户端react代码的webpack配置文件如下\",{\"1\":{\"449\":1}}],[\"js并进行相关配置\",{\"1\":{\"449\":1}}],[\"js文件配置\",{\"1\":{\"723\":1}}],[\"js文件用于存放样式组件\",{\"1\":{\"488\":1}}],[\"js文件\",{\"1\":{\"449\":1,\"932\":1}}],[\"jsx通过babel编译后就会转化成我们熟悉的js格式\",{\"1\":{\"587\":1}}],[\"jsx通过babel最终转化成react\",{\"1\":{\"537\":1}}],[\"jsx通过babel的方式转化成react\",{\"1\":{\"421\":1}}],[\"jsx转为真实dom\",{\"0\":{\"537\":1}}],[\"jsx语法\",{\"1\":{\"531\":1}}],[\"jsx进行转换\",{\"1\":{\"449\":1}}],[\"jsx\",{\"1\":{\"449\":1,\"530\":1,\"537\":1,\"538\":1,\"539\":1,\"909\":2}}],[\"jsx就是为了简化直接调用react\",{\"1\":{\"421\":1}}],[\"jsx实际是一种语法糖\",{\"1\":{\"421\":1}}],[\"jsx是其一大特性\",{\"1\":{\"421\":1}}],[\"jsonp\",{\"1\":{\"723\":1}}],[\"json文件启动\",{\"1\":{\"662\":1}}],[\"json\",{\"1\":{\"251\":1,\"277\":1,\"329\":1,\"662\":1,\"927\":1,\"942\":1,\"946\":1,\"949\":1}}],[\"js宿主\",{\"1\":{\"101\":1}}],[\"js则会提供与服务端操作相关的对象\",{\"1\":{\"100\":1}}],[\"js\",{\"0\":{\"488\":1},\"1\":{\"98\":1,\"303\":1,\"304\":3,\"449\":9,\"484\":1,\"488\":1,\"489\":1,\"526\":2,\"569\":10,\"570\":19,\"769\":1,\"858\":1,\"906\":2,\"909\":3,\"926\":5,\"927\":1,\"928\":1,\"934\":1,\"936\":1,\"940\":1,\"945\":1,\"946\":1,\"947\":1,\"953\":1,\"954\":5,\"955\":2,\"956\":1}}],[\"v5\",{\"1\":{\"947\":1}}],[\"v10\",{\"1\":{\"934\":1}}],[\"v4\",{\"1\":{\"931\":1,\"947\":1}}],[\"vnd\",{\"1\":{\"895\":2}}],[\"vnodetomove\",{\"1\":{\"770\":4}}],[\"vnode\",{\"1\":{\"538\":13,\"737\":1,\"770\":1}}],[\"v表示穿插普通文本节点\",{\"1\":{\"807\":1}}],[\"vod\",{\"1\":{\"759\":1}}],[\"void\",{\"0\":{\"393\":1},\"1\":{\"368\":6,\"393\":1,\"428\":1,\"640\":1,\"650\":2,\"653\":2,\"669\":1,\"753\":1}}],[\"void类型\",{\"1\":{\"367\":1}}],[\"vshow\",{\"1\":{\"759\":1}}],[\"vm\",{\"1\":{\"758\":1,\"765\":1,\"792\":3,\"793\":2,\"796\":1}}],[\"vm实例为undefined\",{\"1\":{\"728\":1}}],[\"vue会在需要时加载该组件\",{\"1\":{\"858\":1}}],[\"vue会进行这样的操作\",{\"1\":{\"769\":2}}],[\"vuex\",{\"1\":{\"812\":1}}],[\"vuex特殊\",{\"1\":{\"696\":1}}],[\"vue组件渲染到页面上需要经过templete=>render=>vnode=>dom过程\",{\"1\":{\"807\":1}}],[\"vue将开启一个异步更新队列\",{\"1\":{\"800\":1}}],[\"vue调用\",{\"1\":{\"797\":1}}],[\"vue的构造函数\",{\"1\":{\"796\":1}}],[\"vue中的mixin\",{\"0\":{\"788\":1}}],[\"vue中有如下的常规通信方案\",{\"1\":{\"696\":1}}],[\"vue生命周期即vue组件从创建到销毁的过程\",{\"1\":{\"773\":1}}],[\"vue只会更改顺序\",{\"1\":{\"769\":1}}],[\"vue就会使用就地复地原则\",{\"1\":{\"768\":1}}],[\"vue编译器会将其转换为\",{\"1\":{\"760\":1}}],[\"vue3采用proxy重写了响应式系统\",{\"1\":{\"819\":1}}],[\"vue3优化\",{\"0\":{\"818\":1}}],[\"vue3核心代码用ts重写\",{\"1\":{\"813\":1}}],[\"vue3的关键更新\",{\"0\":{\"813\":1}}],[\"vue3全面支持typescript\",{\"1\":{\"812\":1}}],[\"vue3对虚拟dom的优化\",{\"1\":{\"811\":1}}],[\"vue3基于proxy的响应式系统解决了这一问题\",{\"1\":{\"811\":1}}],[\"vue3\",{\"0\":{\"816\":1},\"1\":{\"811\":1}}],[\"vue3和vue2的v\",{\"1\":{\"754\":1}}],[\"vue3中已废弃\",{\"1\":{\"744\":1}}],[\"vue模板编译时\",{\"1\":{\"752\":1}}],[\"vue最终都会通过vue\",{\"1\":{\"727\":1}}],[\"vue权限管理\",{\"0\":{\"702\":1}}],[\"vue2使用defineproperty来劫持整个对象\",{\"1\":{\"819\":1}}],[\"vue2使用object\",{\"1\":{\"713\":1}}],[\"vue2对对象新增属性\",{\"1\":{\"811\":1}}],[\"vue2\",{\"1\":{\"696\":3,\"811\":1}}],[\"vue\",{\"0\":{\"810\":1,\"1020\":1},\"1\":{\"668\":3,\"669\":1,\"670\":3,\"671\":3,\"672\":3,\"696\":1,\"714\":1,\"717\":3,\"723\":1,\"769\":2,\"770\":1,\"773\":1,\"789\":1,\"790\":1,\"792\":3,\"801\":1,\"812\":2,\"858\":6,\"895\":2},\"2\":{\"695\":1,\"698\":1,\"701\":1,\"704\":1,\"707\":1,\"711\":1,\"716\":1,\"721\":1,\"725\":1,\"730\":1,\"735\":1,\"740\":1,\"743\":1,\"750\":1,\"762\":1,\"767\":1,\"772\":1,\"786\":1,\"795\":1,\"799\":1,\"803\":1,\"809\":1,\"815\":1,\"821\":1}}],[\"vue使用css起来更为简洁\",{\"1\":{\"483\":1}}],[\"vvnode\",{\"1\":{\"538\":4}}],[\"vdom\",{\"1\":{\"421\":4}}],[\"v\",{\"0\":{\"751\":3,\"752\":1,\"755\":1,\"759\":1,\"760\":1},\"1\":{\"254\":4,\"380\":1,\"527\":2,\"689\":1,\"696\":5,\"699\":1,\"702\":1,\"745\":1,\"752\":3,\"753\":7,\"756\":3,\"757\":7,\"759\":1,\"760\":7,\"769\":1,\"811\":6,\"932\":1,\"1010\":1}}],[\"vant\",{\"1\":{\"812\":1}}],[\"validator\",{\"1\":{\"670\":1}}],[\"valid\",{\"1\":{\"368\":1}}],[\"val\",{\"1\":{\"297\":2,\"671\":3,\"972\":5}}],[\"value=\",{\"1\":{\"406\":5,\"413\":1,\"416\":1,\"465\":1,\"466\":1,\"555\":2,\"608\":1}}],[\"values\",{\"1\":{\"383\":1,\"384\":1}}],[\"value\",{\"1\":{\"227\":1,\"313\":1,\"314\":2,\"336\":1,\"349\":1,\"350\":1,\"466\":1,\"527\":1,\"555\":2,\"608\":2,\"644\":1,\"670\":3,\"737\":1,\"759\":8,\"925\":1,\"949\":1,\"970\":1,\"972\":2}}],[\"vary\",{\"1\":{\"895\":2}}],[\"var2=123\",{\"1\":{\"409\":1}}],[\"var2\",{\"1\":{\"409\":1}}],[\"var1=null\",{\"1\":{\"409\":1}}],[\"var1\",{\"1\":{\"409\":1}}],[\"varnames\",{\"1\":{\"117\":1}}],[\"vardeclarations\",{\"1\":{\"107\":1}}],[\"vardeclarednames对语句递归的调用\",{\"1\":{\"107\":1}}],[\"vardeclarednames语义收集标识符\",{\"1\":{\"107\":1}}],[\"variabledeclaration\",{\"1\":{\"983\":1,\"993\":1}}],[\"variables\",{\"1\":{\"379\":2,\"612\":2}}],[\"variable\",{\"1\":{\"251\":2,\"325\":5,\"326\":1}}],[\"variableenvironment\",{\"1\":{\"95\":1}}],[\"variant\",{\"1\":{\"37\":1}}],[\"var\",{\"1\":{\"59\":1,\"90\":2,\"103\":6,\"111\":1,\"123\":2,\"251\":5,\"258\":2,\"260\":2,\"270\":2,\"273\":1,\"287\":2,\"291\":1,\"292\":1,\"313\":1,\"324\":3,\"326\":5,\"346\":2,\"362\":6,\"374\":3,\"575\":4,\"655\":1,\"665\":1,\"789\":1,\"793\":2,\"845\":1,\"851\":3}}],[\"verbose\",{\"1\":{\"895\":1}}],[\"very\",{\"1\":{\"320\":1}}],[\"version\",{\"0\":{\"1019\":1},\"1\":{\"200\":2,\"675\":1,\"895\":2}}],[\"vertical\",{\"1\":{\"28\":1,\"32\":1,\"37\":1,\"90\":2}}],[\"vh表示相对于视图窗口高度\",{\"1\":{\"58\":1}}],[\"vh\",{\"0\":{\"58\":1},\"1\":{\"55\":1}}],[\"vw表示相对于视图窗口的宽度\",{\"1\":{\"58\":1}}],[\"vw\",{\"0\":{\"58\":1},\"1\":{\"55\":1}}],[\"viii\",{\"1\":{\"932\":1}}],[\"vii\",{\"1\":{\"932\":1}}],[\"vi\",{\"1\":{\"932\":1}}],[\"vitals的测量功能\",{\"1\":{\"890\":1}}],[\"vitals和其他关键性能指标\",{\"1\":{\"890\":1}}],[\"vitals库\",{\"0\":{\"890\":1}}],[\"vitals\",{\"1\":{\"884\":2,\"890\":2}}],[\"vite\",{\"1\":{\"812\":1,\"895\":4}}],[\"video元素\",{\"1\":{\"879\":1}}],[\"virtual\",{\"1\":{\"421\":1}}],[\"view\",{\"1\":{\"570\":3}}],[\"views\",{\"1\":{\"570\":4}}],[\"viewheight\",{\"1\":{\"285\":2}}],[\"viewwidth\",{\"1\":{\"285\":2}}],[\"viewportheight\",{\"1\":{\"285\":1}}],[\"viewportheight=window\",{\"1\":{\"285\":1}}],[\"viewport\",{\"1\":{\"55\":1}}],[\"visibility\",{\"0\":{\"68\":1},\"1\":{\"37\":1,\"66\":1,\"68\":1,\"72\":1}}],[\"visible\",{\"1\":{\"20\":1}}],[\"visited\",{\"1\":{\"35\":1}}],[\"将argument\",{\"1\":{\"970\":1}}],[\"将生成一个\",{\"1\":{\"954\":1}}],[\"将禁用所有已配置的\",{\"1\":{\"949\":3}}],[\"将资源中的\",{\"1\":{\"949\":1}}],[\"将其结果\",{\"1\":{\"946\":1}}],[\"将其转换为解析树\",{\"1\":{\"105\":1}}],[\"将按照从右到左的顺序执行\",{\"1\":{\"946\":1}}],[\"将文件从不同的语言\",{\"1\":{\"945\":1}}],[\"将runtime代码单独打包成一个或多个chunk\",{\"1\":{\"941\":1}}],[\"将redux中的dispatch映射到组件内部的props中\",{\"1\":{\"567\":1}}],[\"将png\",{\"1\":{\"896\":1}}],[\"将多次的setdata合并为一次setdata\",{\"1\":{\"840\":1}}],[\"将多个类型合并在一起\",{\"1\":{\"642\":1}}],[\"将多个动画组件包裹在其中\",{\"1\":{\"632\":1}}],[\"将访问率低的页面放入子包内\",{\"1\":{\"839\":1}}],[\"将用户访问率高的页面放在主包内\",{\"1\":{\"839\":1}}],[\"将逻辑层和视图层分开\",{\"1\":{\"835\":1}}],[\"将逻辑按功能聚合\",{\"1\":{\"813\":1}}],[\"将code作为参数传递为微信服务器指定接口\",{\"1\":{\"829\":1}}],[\"将css文件作为一个模块引入\",{\"1\":{\"487\":1}}],[\"将css单独写在一个css文件中\",{\"1\":{\"486\":1}}],[\"将组件模板转换为虚拟dom\",{\"1\":{\"811\":1}}],[\"将模板\",{\"1\":{\"811\":1}}],[\"将模板template转为ast结构的js对象\",{\"1\":{\"758\":1}}],[\"将输入事件\",{\"1\":{\"811\":1}}],[\"将回调函数压入\",{\"1\":{\"801\":1}}],[\"将vue的开发模型扩展到其他平台\",{\"1\":{\"817\":1}}],[\"将vnode转为真实dom\",{\"1\":{\"796\":1}}],[\"将v值给予result\",{\"1\":{\"122\":1}}],[\"将html解析成ast树\",{\"1\":{\"796\":1}}],[\"将父组件的所有配置项通过\",{\"1\":{\"792\":1}}],[\"将共有的功能以对象的方式传入mixins\",{\"1\":{\"788\":1}}],[\"将差异应用到真实dom\",{\"1\":{\"778\":1}}],[\"将f插入到c之前\",{\"1\":{\"769\":2}}],[\"将e插入到dom中\",{\"1\":{\"769\":1}}],[\"将el文本节点设置为vnode的文本节点\",{\"1\":{\"733\":1}}],[\"将当前真实dom移动到oldendvnode前面\",{\"1\":{\"732\":1}}],[\"将当前真实dom移动到oldendvnode后面\",{\"1\":{\"732\":1}}],[\"将当前节点移动到index的位置\",{\"1\":{\"496\":1}}],[\"将命名变为驼峰命名法\",{\"1\":{\"699\":1}}],[\"将快照永久性存储到git本地仓库\",{\"1\":{\"685\":1}}],[\"将设计恢复到之前任一状态的选择权\",{\"1\":{\"675\":1}}],[\"将由上至下依次对装饰器表达式求值\",{\"1\":{\"663\":1}}],[\"将类型联合起来\",{\"1\":{\"643\":1}}],[\"将类标记为\",{\"1\":{\"342\":1}}],[\"将新调用的\",{\"1\":{\"587\":1}}],[\"将根组件渲染成字符串\",{\"1\":{\"560\":1}}],[\"将数据转化成immutable数据\",{\"1\":{\"527\":1}}],[\"将数据作为\",{\"1\":{\"450\":1}}],[\"将对前一次渲染的\",{\"1\":{\"520\":1}}],[\"将对象作为弹性伸缩盒子模型显示\",{\"1\":{\"90\":1}}],[\"将t的所有属性映射为只读的\",{\"1\":{\"646\":1}}],[\"将t的所有属性映射为可选的\",{\"1\":{\"646\":1}}],[\"将this绑定到当前组件中\",{\"1\":{\"510\":1}}],[\"将token写入cookie\",{\"1\":{\"287\":1}}],[\"将一个类型映射为另一个类型\",{\"1\":{\"646\":1}}],[\"将一个immutable数据转换为js类型的数据\",{\"1\":{\"526\":1}}],[\"将一个js数据转换为immutable类型的数据\",{\"1\":{\"526\":1}}],[\"将一个\",{\"1\":{\"497\":1}}],[\"将oldindex的值赋值给maxindex\",{\"1\":{\"496\":1}}],[\"将控制权交回给浏览器\",{\"1\":{\"429\":1}}],[\"将时间控制权交给主线程\",{\"1\":{\"429\":1}}],[\"将包含字符串\",{\"1\":{\"409\":2}}],[\"将保留为字符串\",{\"1\":{\"409\":1}}],[\"将替换浏览器中先前的同名\",{\"1\":{\"407\":1}}],[\"将表单\",{\"1\":{\"406\":1}}],[\"将创建引用同名全局变量的局部变量\",{\"1\":{\"402\":1}}],[\"将创建该类的一个新实例\",{\"1\":{\"337\":1}}],[\"将在\",{\"1\":{\"401\":1}}],[\"将索引\",{\"1\":{\"385\":3}}],[\"将尝试将反引号中的内容作为\",{\"1\":{\"360\":1}}],[\"将\",{\"1\":{\"355\":3,\"399\":1}}],[\"将把\",{\"1\":{\"355\":3}}],[\"将会给函数传入参数值\",{\"1\":{\"573\":1}}],[\"将会改变\",{\"1\":{\"461\":1}}],[\"将会自动重定向到首页\",{\"1\":{\"597\":1}}],[\"将会自动将变量名中的点替换成下划线\",{\"1\":{\"408\":1}}],[\"将会自动创建相应的属性\",{\"1\":{\"348\":1}}],[\"将会被解释为\",{\"1\":{\"373\":1}}],[\"将会覆盖父类的方法\",{\"1\":{\"340\":1}}],[\"将会将元素位移自己宽度和高度的\",{\"1\":{\"27\":1}}],[\"将跳过条件语句未达成的段落\",{\"1\":{\"331\":1}}],[\"将寻找与变量的值同名的函数\",{\"1\":{\"325\":1}}],[\"将浮点数转为整数运算\",{\"1\":{\"304\":1}}],[\"将恶意代码提交到目标网站的数据库中\",{\"1\":{\"299\":1}}],[\"将同一份token写入到了多个域下的localstorage中\",{\"1\":{\"287\":1}}],[\"将sessionid\",{\"1\":{\"287\":2}}],[\"将下载\",{\"1\":{\"283\":1}}],[\"将整个文件分隔成多个数据块来进行分片上传\",{\"1\":{\"282\":1}}],[\"将所有的事件拦截后\",{\"1\":{\"836\":1}}],[\"将所有元素表示为一个个矩形的盒子\",{\"1\":{\"15\":1}}],[\"将所要上传的文件\",{\"1\":{\"282\":1}}],[\"将参数和对应结果存在一个对象中\",{\"1\":{\"278\":1}}],[\"将函数的运算结果进行缓存\",{\"1\":{\"278\":1}}],[\"将事件向上传递依次触发\",{\"1\":{\"273\":1}}],[\"将之前大写的键属性删除\",{\"1\":{\"254\":1}}],[\"将修改后的属性名重新赋值给temp\",{\"1\":{\"254\":1}}],[\"将客户端的\",{\"1\":{\"243\":1}}],[\"将应用层报文看成一串无结构的字节流\",{\"1\":{\"183\":1}}],[\"将网络层交下来的ip数据报组装成帧\",{\"1\":{\"174\":1}}],[\"将计算机网络体系结构划分为七层\",{\"1\":{\"156\":1}}],[\"将请求和响应数据分割为更小的帧\",{\"1\":{\"150\":1}}],[\"将告诉请求者\",{\"1\":{\"140\":1}}],[\"将中间元素设置为100\",{\"1\":{\"82\":1}}],[\"将元素移出可视区域\",{\"1\":{\"71\":1}}],[\"将元素的margin\",{\"1\":{\"70\":1}}],[\"将元素的透明度设置为0后\",{\"1\":{\"69\":1}}],[\"将元素设置为display\",{\"1\":{\"67\":1}}],[\"子包也不建议太大\",{\"1\":{\"839\":1}}],[\"子节点不完全一致\",{\"1\":{\"732\":1}}],[\"子类和类的内部可以访问\",{\"1\":{\"651\":1}}],[\"子类可以对父类的方法重新定义\",{\"1\":{\"650\":1}}],[\"子类就得不到this对象\",{\"1\":{\"626\":1}}],[\"子类是没有自己的this对象的\",{\"1\":{\"626\":1}}],[\"子类中存在构造函数\",{\"1\":{\"264\":1}}],[\"子级没有值\",{\"1\":{\"526\":2}}],[\"子级绝对定位\",{\"1\":{\"25\":1}}],[\"子树中最后一个side\",{\"1\":{\"428\":1}}],[\"子树中第一个side\",{\"1\":{\"428\":1}}],[\"子组件的配置会覆盖父组件的同名属性\",{\"1\":{\"793\":1}}],[\"子组件的mounted早于父组件的mounted\",{\"1\":{\"777\":1}}],[\"子组件等\",{\"1\":{\"780\":1}}],[\"子组件交互\",{\"1\":{\"777\":1}}],[\"子组件后进行模板编译\",{\"1\":{\"775\":1}}],[\"子组件也会渲染\",{\"1\":{\"589\":1}}],[\"子组件并没有发生任何改变\",{\"1\":{\"547\":1}}],[\"子组件一定也会执行render渲染\",{\"1\":{\"547\":1}}],[\"子组件对应代码如下\",{\"1\":{\"414\":1}}],[\"子组件向父组件通信的基本思路是\",{\"1\":{\"414\":1}}],[\"子组件向父组件传递\",{\"0\":{\"414\":1},\"1\":{\"412\":1}}],[\"子组件通过props属性就能接收父组件传递过来的参数\",{\"1\":{\"413\":1}}],[\"子句的后面\",{\"1\":{\"326\":1}}],[\"子句的\",{\"1\":{\"326\":1}}],[\"子系统可以拿着令牌获取各自受保护的资源\",{\"1\":{\"286\":1}}],[\"子系统本身不参与登录操作\",{\"1\":{\"286\":1}}],[\"子系统的登录均通过passport\",{\"1\":{\"286\":1}}],[\"子选择器\",{\"1\":{\"35\":1}}],[\"子元素事件监听\",{\"1\":{\"505\":2}}],[\"子元素可复原\",{\"1\":{\"72\":1}}],[\"子元素的margin如果设置成百分比\",{\"1\":{\"57\":1}}],[\"子元素的padding如果设置百分比\",{\"1\":{\"57\":1}}],[\"子元素的top\",{\"1\":{\"57\":1}}],[\"子元素设置\",{\"1\":{\"28\":1}}],[\"子元素设置不同的\",{\"1\":{\"8\":1}}],[\"子元素移动自身50\",{\"1\":{\"26\":1}}],[\"子元素\",{\"1\":{\"23\":1,\"505\":2}}],[\"利用路由元信息\",{\"1\":{\"764\":1}}],[\"利用工具查找web后台管理入口\",{\"1\":{\"301\":1}}],[\"利用受害者在被攻击网站已经获取的注册凭证\",{\"1\":{\"300\":1}}],[\"利用若干简单的执行单元让计算结果不断渐进\",{\"1\":{\"293\":1}}],[\"利用babel工具进行转换\",{\"1\":{\"264\":1}}],[\"利用bfc的特性\",{\"1\":{\"21\":1}}],[\"利用这个浅拷贝的能力再进行增强\",{\"1\":{\"262\":1}}],[\"利用这个属性可以设定背景颜色或图片的覆盖范围\",{\"1\":{\"43\":1}}],[\"利用\",{\"1\":{\"181\":1,\"928\":1}}],[\"利用flex弹性布局\",{\"1\":{\"82\":1}}],[\"利用中间元素的margin值控制两边的间距\",{\"1\":{\"78\":1}}],[\"利用vertical和text\",{\"1\":{\"28\":1}}],[\"利用定位+transform\",{\"0\":{\"27\":1},\"1\":{\"24\":1}}],[\"利用定位+margin\",{\"0\":{\"25\":1,\"26\":1},\"1\":{\"24\":2}}],[\"居中元素宽高未知\",{\"1\":{\"23\":1}}],[\"居中元素\",{\"1\":{\"23\":1}}],[\"同源有三个部分\",{\"1\":{\"722\":1}}],[\"同步\",{\"1\":{\"946\":1}}],[\"同步加载组件时\",{\"1\":{\"784\":1}}],[\"同步更新\",{\"0\":{\"615\":1},\"1\":{\"613\":1}}],[\"同步序列号\",{\"1\":{\"243\":1}}],[\"同理\",{\"1\":{\"527\":1}}],[\"同一时间只能执行一次\",{\"1\":{\"801\":1}}],[\"同一种功能的实现可以分别对应类组件和函数组件的编写形式\",{\"1\":{\"457\":1}}],[\"同一个bfc的俩个相邻的盒子的margin会发生重叠\",{\"1\":{\"21\":1}}],[\"同构通俗讲就是一套react代码在服务器上运行一遍\",{\"1\":{\"449\":1}}],[\"同\",{\"1\":{\"332\":1}}],[\"同域名下的单点登录\",{\"1\":{\"287\":1}}],[\"同域名下所有通信都在单个连接上完成\",{\"1\":{\"150\":1}}],[\"同时将这个真实dom移动到oldstartvnode对应的真实dom的前面\",{\"1\":{\"732\":1}}],[\"同时将translatey重设为0\",{\"1\":{\"291\":1}}],[\"同时endindex移动到c\",{\"1\":{\"731\":1}}],[\"同时为了避免\",{\"1\":{\"525\":1}}],[\"同时为将来添加其他行为留有余地\",{\"1\":{\"349\":1}}],[\"同时展示降级\",{\"1\":{\"500\":1}}],[\"同时也新增了两个生命周期函数\",{\"1\":{\"445\":1}}],[\"同时也不能调用setstate\",{\"1\":{\"440\":1}}],[\"同时也应设置一个允许滑动的最大值\",{\"1\":{\"291\":1}}],[\"同时实现两个接口\",{\"1\":{\"368\":1}}],[\"同时\",{\"1\":{\"147\":2,\"251\":1}}],[\"同时自己也将\",{\"1\":{\"142\":1}}],[\"同时自己将\",{\"1\":{\"142\":1}}],[\"同时适配pc\",{\"1\":{\"54\":1}}],[\"同自身宽度\",{\"1\":{\"80\":1}}],[\"同样的更新10个dom节点\",{\"1\":{\"709\":1}}],[\"同样的不区分大小写\",{\"1\":{\"371\":1}}],[\"同样csstransition里面没有in属性\",{\"1\":{\"635\":1}}],[\"同样是禁止的行为\",{\"1\":{\"626\":1}}],[\"同样先给出一个例子\",{\"1\":{\"616\":1}}],[\"同样先给出一个在settimeout中更新的例子\",{\"1\":{\"615\":1}}],[\"同样给出一个计时器示例\",{\"1\":{\"520\":1}}],[\"同样再每一次render的时候都会生成新的方法\",{\"1\":{\"511\":1}}],[\"同样在react\",{\"1\":{\"474\":1}}],[\"同样更新10个dom节点\",{\"1\":{\"422\":1}}],[\"同样如果执行的运算结果超出了\",{\"1\":{\"373\":1}}],[\"同样名称的方法\",{\"1\":{\"340\":1}}],[\"同样举个例子\",{\"1\":{\"261\":1}}],[\"同样也是为了防止误连接\",{\"1\":{\"200\":1}}],[\"同样看看ie\",{\"1\":{\"17\":1}}],[\"同样\",{\"1\":{\"8\":1,\"542\":1}}],[\"塌陷\",{\"1\":{\"21\":1}}],[\"应将配置文件拆分成多个\",{\"1\":{\"925\":1}}],[\"应产生相同的输出文件\",{\"1\":{\"925\":1}}],[\"应编写自己的\",{\"1\":{\"925\":1}}],[\"应该是驼峰式命名的插件名称\",{\"1\":{\"956\":1}}],[\"应该是唯一的\",{\"1\":{\"543\":1}}],[\"应该叫类型表达式\",{\"1\":{\"641\":1}}],[\"应该用\",{\"1\":{\"377\":1}}],[\"应该从父元素继承\",{\"1\":{\"18\":1}}],[\"应用插件\",{\"1\":{\"932\":1}}],[\"应用生命周期\",{\"1\":{\"828\":1}}],[\"应用的生命周期\",{\"0\":{\"824\":1}}],[\"应用带来性能的优化\",{\"1\":{\"527\":1,\"558\":1}}],[\"应用\",{\"0\":{\"527\":1},\"1\":{\"592\":1}}],[\"应用系统拿到token之后\",{\"1\":{\"287\":1}}],[\"应用系统检查当前请求有没有token\",{\"1\":{\"287\":1}}],[\"应用系统无法访问\",{\"1\":{\"287\":1}}],[\"应用层都是在应用程序内部实现的\",{\"1\":{\"177\":1}}],[\"应用层报文和运输层首部信息一道构成了运输层报文段\",{\"1\":{\"165\":1}}],[\"应用层报文被传送到运输层\",{\"1\":{\"165\":1}}],[\"应用层位于\",{\"1\":{\"158\":1}}],[\"应用层\",{\"0\":{\"158\":1,\"171\":1},\"1\":{\"176\":1}}],[\"应用cdn后\",{\"1\":{\"133\":1}}],[\"应用for\",{\"1\":{\"121\":2}}],[\"应用场景\",{\"0\":{\"21\":1,\"202\":1,\"254\":1,\"467\":1,\"480\":1,\"584\":1,\"747\":1,\"852\":1}}],[\"为非终结符\",{\"1\":{\"991\":1}}],[\"为应用程序生成一个\",{\"1\":{\"953\":1}}],[\"为结束\",{\"1\":{\"948\":1}}],[\"为整个\",{\"1\":{\"760\":1}}],[\"为什么需要\",{\"0\":{\"709\":1}}],[\"为每个实例化对象添加一个age属性\",{\"1\":{\"662\":1}}],[\"为每个增加了优先级\",{\"1\":{\"428\":1}}],[\"为每个盒子单独重绘背景\",{\"1\":{\"46\":1}}],[\"为字符时\",{\"1\":{\"386\":1}}],[\"为上一个+1\",{\"1\":{\"383\":1}}],[\"为上层实体提供源端到对端主机的通信功能\",{\"1\":{\"172\":1}}],[\"为全局对象\",{\"1\":{\"251\":1}}],[\"为数据通讯提供安全支持\",{\"1\":{\"231\":1}}],[\"为数据的传输提供可靠的环境\",{\"1\":{\"175\":1}}],[\"为词法声明创建一次环境记录器\",{\"1\":{\"122\":1}}],[\"为伪元素绝对定位\",{\"1\":{\"89\":1}}],[\"为父级元素添加bfc\",{\"1\":{\"75\":1}}],[\"为了优化webpack打包结果\",{\"1\":{\"941\":1}}],[\"为了避免重复渲染\",{\"1\":{\"527\":1,\"558\":1}}],[\"为了避免参数表达式的标识符与函数体变量声明的标识符发生\",{\"1\":{\"123\":1}}],[\"为了让服务器能够识别jsx\",{\"1\":{\"449\":1}}],[\"为了让两个盒子高度自动\",{\"1\":{\"76\":1}}],[\"为了减少频繁认证\",{\"1\":{\"286\":1}}],[\"为了确认客户端的\",{\"1\":{\"243\":1}}],[\"为了保证这些隐私数据能加密传输\",{\"1\":{\"231\":1}}],[\"为了性能和安全考虑\",{\"1\":{\"218\":1}}],[\"为了实现该效果\",{\"1\":{\"90\":1}}],[\"为了更准确监听设备可视窗口变化\",{\"1\":{\"59\":1}}],[\"为了处理移动端\",{\"1\":{\"55\":1}}],[\"为大屏幕手机设置\",{\"1\":{\"56\":1}}],[\"为元素添加阴影\",{\"1\":{\"41\":1}}],[\"为\",{\"1\":{\"20\":1,\"344\":1,\"371\":1,\"386\":1,\"946\":1}}],[\"触发生命周期事件\",{\"1\":{\"932\":1}}],[\"触发onunload\",{\"1\":{\"828\":1}}],[\"触发onhdie\",{\"1\":{\"828\":1}}],[\"触发onhide\",{\"1\":{\"828\":1}}],[\"触发onload\",{\"1\":{\"828\":1}}],[\"触发onlaunch\",{\"1\":{\"828\":1}}],[\"触发onshow\",{\"1\":{\"828\":3}}],[\"触发beforecreate钩子\",{\"1\":{\"796\":2}}],[\"触发bfc的条件包含不限于\",{\"1\":{\"20\":1}}],[\"触发\",{\"1\":{\"782\":1}}],[\"触发副作用\",{\"1\":{\"779\":1}}],[\"触发事件\",{\"1\":{\"672\":1}}],[\"触发全局\",{\"1\":{\"607\":1}}],[\"触发时机\",{\"0\":{\"588\":1}}],[\"触发时间\",{\"1\":{\"285\":1}}],[\"触发pullingdown事件的位置\",{\"1\":{\"292\":1}}],[\"触发条件\",{\"0\":{\"20\":1}}],[\"并强制实施上述规则\",{\"1\":{\"1013\":1}}],[\"并指示要排除的扩展来指定不允许某些扩展\",{\"1\":{\"995\":1}}],[\"并指明客户端的\",{\"1\":{\"243\":1}}],[\"并称为产生式的静态语义\",{\"1\":{\"978\":1}}],[\"并称之为\",{\"1\":{\"935\":1}}],[\"并使用其结果\",{\"1\":{\"973\":1}}],[\"并使他指向旧有的\",{\"1\":{\"118\":1}}],[\"并返回一个完成记录\",{\"1\":{\"968\":1}}],[\"并自动将生成的所有\",{\"1\":{\"953\":1}}],[\"并生成相应的依赖图\",{\"1\":{\"941\":1}}],[\"并最终生成这些bundle文件\",{\"1\":{\"939\":1}}],[\"并形成一个通过模块互相连接的图\",{\"1\":{\"937\":1}}],[\"并以模块化的方式提供了所有web\",{\"1\":{\"890\":1}}],[\"并以空行结束\",{\"1\":{\"207\":1}}],[\"并给出相应的建议\",{\"1\":{\"888\":1}}],[\"并给不同的任务赋予不同的优先级\",{\"1\":{\"429\":1}}],[\"并更新资源的有效期\",{\"1\":{\"867\":1}}],[\"并更新到页面中\",{\"1\":{\"796\":1}}],[\"并同时用客户端本地的包进行启动\",{\"1\":{\"837\":1}}],[\"并支持更细粒度的依赖跟踪\",{\"1\":{\"811\":1}}],[\"并尽可能复用和移动现有\",{\"1\":{\"770\":1}}],[\"并确保这个新的property同样是响应式的\",{\"1\":{\"714\":1}}],[\"并切换为这个分支\",{\"1\":{\"690\":1}}],[\"并写提交信息\",{\"1\":{\"689\":1}}],[\"并包括指定文件的新变化\",{\"1\":{\"689\":1}}],[\"并提供简单直观的界面\",{\"1\":{\"683\":1}}],[\"并为每次改动编上序号\",{\"1\":{\"675\":1}}],[\"并为浏览器和服务器之间的通信进行加密\",{\"1\":{\"231\":1}}],[\"并传入模块的id作为参数\",{\"1\":{\"941\":1}}],[\"并传递给其嵌套的组件\",{\"1\":{\"608\":1}}],[\"并传送给网站\",{\"1\":{\"231\":1}}],[\"并没有主次之分\",{\"1\":{\"684\":1}}],[\"并没有其他作用\",{\"1\":{\"556\":1}}],[\"并没有一个绝对的答案\",{\"1\":{\"489\":1}}],[\"并获取defaultprops对默认props进行赋值\",{\"1\":{\"539\":1}}],[\"并获取文本的高度\",{\"1\":{\"90\":1}}],[\"并渲染\",{\"1\":{\"500\":1}}],[\"并渲染到页面上\",{\"1\":{\"421\":1}}],[\"并打印这些错误\",{\"1\":{\"500\":1}}],[\"并查找其当前值\",{\"1\":{\"466\":1}}],[\"并通过express的static中间件为js文件配置路由\",{\"1\":{\"449\":1}}],[\"并通过选择合适的路由将数据传递到目标主机\",{\"1\":{\"173\":1}}],[\"并加上两个变量\",{\"1\":{\"406\":1}}],[\"并加上省略号\",{\"1\":{\"90\":1}}],[\"并允许任意跳过默认值\",{\"1\":{\"324\":1}}],[\"并发出一个提示级别错误信息\",{\"1\":{\"306\":1}}],[\"并借助css3的translatey属性使元素跟随手势向下滑动对应的差值\",{\"1\":{\"291\":1}}],[\"并在其中使用\",{\"1\":{\"954\":1}}],[\"并在需要时动态加载\",{\"1\":{\"941\":1}}],[\"并在相应的时机执行插件的逻辑\",{\"1\":{\"932\":1}}],[\"并在数据变化时触发依赖更新\",{\"1\":{\"811\":1}}],[\"并在运行时动态加载\",{\"1\":{\"559\":1}}],[\"并在跳转前生成一个token\",{\"1\":{\"287\":1}}],[\"并在对象obj内添加一个转换后的属性\",{\"1\":{\"254\":1}}],[\"并行\",{\"1\":{\"282\":1}}],[\"并从中继承方法和属性\",{\"1\":{\"268\":1}}],[\"并重写某些方法\",{\"1\":{\"256\":1}}],[\"并非指内存在物理上的消失\",{\"1\":{\"247\":1}}],[\"并收到客户的应答后\",{\"1\":{\"230\":1}}],[\"并接受\",{\"1\":{\"208\":1}}],[\"并得到\",{\"1\":{\"205\":1}}],[\"并关闭连接\",{\"1\":{\"200\":1}}],[\"并进行双向数据传输\",{\"1\":{\"195\":1}}],[\"并完成与相邻层的接口通信\",{\"1\":{\"156\":1}}],[\"并完成环境记录器的绑定\",{\"1\":{\"120\":1}}],[\"并将它们合并成一个或多个bundle文件\",{\"1\":{\"939\":1}}],[\"并将它们保存在文件系统中\",{\"1\":{\"329\":1}}],[\"并将相关依赖引入到你的\",{\"1\":{\"937\":1}}],[\"并将其输出到项目的dist目录下\",{\"1\":{\"940\":1}}],[\"并将其输出信息返回\",{\"1\":{\"360\":1}}],[\"并将其转换为webpack可以处理的形式\",{\"1\":{\"932\":1}}],[\"并将对应\",{\"1\":{\"770\":2}}],[\"并将当前分支作为\",{\"1\":{\"760\":1}}],[\"并将事件绑定到该函数本身\",{\"1\":{\"555\":1}}],[\"并将结果赋值给函数的参数\",{\"1\":{\"320\":1}}],[\"并将token写入cookie\",{\"1\":{\"287\":1}}],[\"并将该公开密钥放入公钥证书后绑定在一起\",{\"1\":{\"240\":1}}],[\"并将\",{\"1\":{\"142\":1}}],[\"并把变量声明的标识符绑定在这个环境当中\",{\"1\":{\"123\":1}}],[\"并把执行上下文的词法环境指向该记录器\",{\"1\":{\"123\":1}}],[\"并绑定到全局环境记录器的\",{\"1\":{\"107\":1}}],[\"并扩展全局对象的属性和方法\",{\"1\":{\"99\":1}}],[\"并根据对应的条件\",{\"1\":{\"56\":1}}],[\"并不需要等到用户点击到子包页面后再下载子包\",{\"1\":{\"839\":1}}],[\"并不需要知道自身元素的宽高\",{\"1\":{\"27\":1}}],[\"并不能在执行完setstate之后立马拿到最新的state的结果\",{\"1\":{\"614\":1}}],[\"并不能影响到这一点\",{\"1\":{\"333\":1}}],[\"并不会产生删除创建操作\",{\"1\":{\"542\":1}}],[\"并不会改变\",{\"1\":{\"527\":1}}],[\"并不会导致渲染时候问题\",{\"1\":{\"500\":1}}],[\"并不会立即关闭连接\",{\"1\":{\"244\":1}}],[\"并不是拥有key值代表性能越高\",{\"1\":{\"542\":1}}],[\"并不是一个组件\",{\"1\":{\"478\":1}}],[\"并不是所有浏览器都会在post中发送两次包\",{\"1\":{\"220\":1}}],[\"并不是所有的属性都能使用过渡的\",{\"1\":{\"11\":1}}],[\"并不建议使用\",{\"1\":{\"475\":1}}],[\"并不存在生命周期\",{\"1\":{\"459\":1}}],[\"并不像字面意思那样表示不安全\",{\"1\":{\"445\":1}}],[\"并不知道后续还有9次更新操作\",{\"1\":{\"422\":1}}],[\"并不属于http规范\",{\"1\":{\"217\":1}}],[\"并且结果中的完成记录的\",{\"1\":{\"972\":1}}],[\"并且在\",{\"1\":{\"956\":1}}],[\"并且在生产环境开启压缩和优化\",{\"1\":{\"926\":1}}],[\"并且可以在出错时\",{\"1\":{\"949\":1}}],[\"并且可以采用分包加载的操作\",{\"1\":{\"839\":1}}],[\"并且能够执行任何操作\",{\"1\":{\"946\":1}}],[\"并且渲染到页面中\",{\"1\":{\"797\":1}}],[\"并且最大程度在同适当的地方对同类型的element\",{\"1\":{\"768\":1}}],[\"并且加入父节点\",{\"1\":{\"732\":1}}],[\"并且组件在系统中是被复用的\",{\"1\":{\"717\":1}}],[\"并且至少包含签名\",{\"1\":{\"708\":1}}],[\"并且各自把各自的提交推送到服务器仓库里\",{\"1\":{\"684\":1}}],[\"并且添加\",{\"1\":{\"633\":1}}],[\"并且重新调用组件render方法\",{\"1\":{\"620\":1}}],[\"并且会将相应的路径传递给子组件\",{\"1\":{\"594\":1}}],[\"并且对传入的孩子节点进行处理\",{\"1\":{\"539\":1}}],[\"并且还拥有代码复用机制\",{\"1\":{\"522\":1}}],[\"并且还添加了其他的请求方法\",{\"1\":{\"147\":1}}],[\"并且如果是链式调用中的一部分\",{\"1\":{\"344\":1}}],[\"并且如果函数不是一个箭头函数\",{\"1\":{\"114\":1}}],[\"并且尝试执行它\",{\"1\":{\"325\":1}}],[\"并且要求所有的数据都是不可变的\",{\"1\":{\"294\":1}}],[\"并且父域的cookie会被子域所共享\",{\"1\":{\"287\":1}}],[\"并且根据你输入的内容进行对应操作\",{\"1\":{\"187\":1}}],[\"并且它们的类型也相同\",{\"1\":{\"356\":1}}],[\"并且它们采用二进制编码\",{\"1\":{\"150\":1}}],[\"并且它是将应用程序发来的数据在收到的那一刻\",{\"1\":{\"181\":1}}],[\"并且\",{\"1\":{\"123\":1,\"230\":1,\"351\":1,\"404\":1}}],[\"并且没有本地的this值\",{\"1\":{\"114\":1}}],[\"并且省略号显示的位置较好\",{\"1\":{\"87\":1}}],[\"并且四个定位属性的值都设置了0\",{\"1\":{\"25\":1}}],[\"并且有一套属于自己的渲染规则\",{\"1\":{\"19\":1}}],[\"与转义序列\",{\"1\":{\"1009\":1}}],[\"与产生式绑定\",{\"1\":{\"977\":1}}],[\"与fid的不同\",{\"1\":{\"882\":1}}],[\"与fcp的区别\",{\"1\":{\"879\":1,\"886\":1}}],[\"与界面渲染无关的数据最好不要设置在data中\",{\"1\":{\"840\":1}}],[\"与数据更新关联\",{\"1\":{\"811\":1}}],[\"与三元表达式一致\",{\"1\":{\"647\":1}}],[\"与html文档的混合\",{\"0\":{\"331\":1}}],[\"与比较运算符的例子\",{\"1\":{\"313\":1}}],[\"与localstorage基本一致\",{\"1\":{\"280\":1}}],[\"与\",{\"1\":{\"230\":1,\"313\":1,\"550\":1,\"607\":1,\"936\":1,\"948\":1,\"949\":1}}],[\"与软件关系不大\",{\"1\":{\"164\":1}}],[\"与参数列表\",{\"1\":{\"128\":1}}],[\"与百分比布局很相似\",{\"1\":{\"58\":1}}],[\"与方向无关\",{\"1\":{\"19\":1}}],[\"与怪异盒子模型表现一致\",{\"1\":{\"18\":1}}],[\"与标准盒子模型表现一致\",{\"1\":{\"18\":1}}],[\"但需要主线程处于空闲状态才能运行\",{\"1\":{\"881\":1}}],[\"但未挂载到页面中\",{\"1\":{\"776\":1}}],[\"但类型不同\",{\"1\":{\"770\":1}}],[\"但数据相同\",{\"1\":{\"769\":7}}],[\"但可以被透传给子组件\",{\"1\":{\"696\":1}}],[\"但还没保存到数据库中\",{\"1\":{\"685\":1}}],[\"但通常在通过d\",{\"1\":{\"666\":1}}],[\"但通过\",{\"1\":{\"79\":1}}],[\"但下面的场景使用refs非常有用\",{\"1\":{\"584\":1}}],[\"但这些数据通常不会直接暴露给用户或开发者\",{\"1\":{\"942\":1}}],[\"但这种方式并不推荐\",{\"1\":{\"584\":1}}],[\"但这个签名只有用私钥对应的公钥才能解开\",{\"1\":{\"239\":1}}],[\"但它可以作为父级标签的作用\",{\"1\":{\"556\":1}}],[\"但它天生的灵活性\",{\"1\":{\"256\":1}}],[\"但不是dom树的一部分\",{\"1\":{\"918\":1}}],[\"但不会自动绑定到根元素\",{\"1\":{\"696\":1}}],[\"但不同的是\",{\"1\":{\"550\":1}}],[\"但不保证传递交付给对方\",{\"1\":{\"183\":1}}],[\"但也有一定的区别\",{\"1\":{\"504\":1}}],[\"但也有一定的缺陷\",{\"1\":{\"487\":1}}],[\"但更加方便快捷\",{\"1\":{\"467\":1}}],[\"但更清晰\",{\"1\":{\"357\":1}}],[\"但服务端返回的代码中并没有这个div\",{\"1\":{\"449\":1}}],[\"但服务器端必须按照接收到客户端请求的先后顺序依次回送响应结果\",{\"1\":{\"147\":1}}],[\"但生命周期极长\",{\"1\":{\"403\":1}}],[\"但当程序执行离开此作用域时\",{\"1\":{\"403\":1}}],[\"但该函数仍可能会终止\",{\"1\":{\"393\":1}}],[\"但保持数组本身不变\",{\"1\":{\"384\":1}}],[\"但在hash模式下没有问题\",{\"1\":{\"693\":1}}],[\"但在使用高阶组件的同时\",{\"1\":{\"479\":1}}],[\"但在\",{\"1\":{\"381\":1}}],[\"但\",{\"1\":{\"346\":1,\"406\":1,\"622\":1}}],[\"但页面关闭\",{\"1\":{\"280\":1}}],[\"但公钥加密后只能用私钥解\",{\"1\":{\"236\":1}}],[\"但两者实质并没有区别\",{\"1\":{\"217\":1}}],[\"但指定请求者应当授权使用代理\",{\"1\":{\"210\":1}}],[\"但请求者应继续使用原有位置来进行以后的请求\",{\"1\":{\"209\":2}}],[\"但没有返回任何内容\",{\"1\":{\"208\":2}}],[\"但返回的信息可能来自另一来源\",{\"1\":{\"208\":1}}],[\"但尚未处理\",{\"1\":{\"208\":1}}],[\"但实际并不会把事件代理函数直接绑定到真实的节点上\",{\"1\":{\"504\":1}}],[\"但实际上每一种方法都有一丝轻微的不同\",{\"1\":{\"65\":1}}],[\"但实际上盒子的宽度有240px\",{\"1\":{\"16\":1}}],[\"但实现起来较困难\",{\"1\":{\"177\":1}}],[\"但展示在中间\",{\"1\":{\"82\":1}}],[\"但被他遮挡的元素是不能触发其事件的\",{\"1\":{\"69\":1}}],[\"但是在\",{\"1\":{\"947\":1}}],[\"但是在类组件中\",{\"1\":{\"461\":1}}],[\"但是这种方式已被废弃\",{\"1\":{\"946\":1}}],[\"但是也不建议使用super\",{\"1\":{\"627\":1}}],[\"但是也可以通过\",{\"1\":{\"330\":1}}],[\"但是state的状态是已经发生了改变\",{\"1\":{\"612\":1}}],[\"但是页面不会刷新\",{\"1\":{\"592\":1}}],[\"但是新的对象会尽可能的利用之前的数据结构而不会对内存造成浪费\",{\"1\":{\"525\":1}}],[\"但是当将处理函数输出代码换成console\",{\"1\":{\"508\":1}}],[\"但是不禁用\",{\"1\":{\"949\":1}}],[\"但是不方便动态修改样式\",{\"1\":{\"489\":1}}],[\"但是不能传递ref\",{\"1\":{\"479\":1}}],[\"但是作用域是全局的\",{\"1\":{\"489\":1}}],[\"但是大量的演示编写容易导致代码混乱\",{\"1\":{\"489\":1}}],[\"但是如果\",{\"1\":{\"589\":1}}],[\"但是如果还有其他组件也有类似功能的时候\",{\"1\":{\"480\":1}}],[\"但是如果父类定义方法或者常量时使用了\",{\"1\":{\"340\":1}}],[\"但是\",{\"1\":{\"461\":1}}],[\"但是函数组件使用useeffect也能够完成替代生命周期的作用\",{\"1\":{\"459\":1}}],[\"但是像一些事件处理的方法\",{\"1\":{\"449\":1}}],[\"但是上文中列出的转义序列还可以使用\",{\"1\":{\"381\":1}}],[\"但是初始化的值必须是\",{\"1\":{\"345\":1}}],[\"但是非常不推荐这种用法\",{\"1\":{\"306\":1}}],[\"但是地址不同\",{\"1\":{\"277\":1}}],[\"但是从上面代码我们也可以看到\",{\"1\":{\"260\":1}}],[\"但是只能继承父类的实例属性和方法\",{\"1\":{\"259\":1}}],[\"但是还存在引用能console出整个div\",{\"1\":{\"251\":1}}],[\"但是没有及时从上游服务器收到请求\",{\"1\":{\"211\":1}}],[\"但是同一个tcp连接里面\",{\"1\":{\"153\":1}}],[\"但是自己并不去发出请求\",{\"1\":{\"140\":1}}],[\"但是可以使用\",{\"1\":{\"81\":1}}],[\"但是会触发重绘\",{\"1\":{\"68\":1}}],[\"但是其他盒子属性则不完全依赖父元素\",{\"1\":{\"57\":1}}],[\"但是是以border的左上角对齐还是以padding的左上角或者content的左上角对齐\",{\"1\":{\"44\":1}}],[\"但是实际上子级的虚拟占位已经撑满了整个父级\",{\"1\":{\"25\":1}}],[\"但由于存在padding\",{\"1\":{\"16\":1}}],[\"不具有标识的值\",{\"1\":{\"981\":1}}],[\"不一样\",{\"1\":{\"948\":1}}],[\"不一定触发\",{\"1\":{\"589\":1}}],[\"不一定\",{\"1\":{\"72\":1}}],[\"不进行强缓存\",{\"1\":{\"866\":1}}],[\"不强制缓存\",{\"1\":{\"866\":1}}],[\"不需要node\",{\"1\":{\"908\":1}}],[\"不需要冒泡\",{\"1\":{\"850\":1}}],[\"不需要深度遍历\",{\"1\":{\"819\":1}}],[\"不匹配则新建\",{\"1\":{\"770\":1}}],[\"不发生dom操作\",{\"1\":{\"769\":7}}],[\"不缓存\",{\"1\":{\"764\":1}}],[\"不管\",{\"1\":{\"588\":1}}],[\"不写key反而性能和效率更高\",{\"1\":{\"542\":1}}],[\"不加key\",{\"1\":{\"497\":2}}],[\"不加密\",{\"1\":{\"233\":1}}],[\"不满足maxindex<\",{\"1\":{\"496\":2}}],[\"不操作\",{\"1\":{\"496\":1}}],[\"不方便动态来修改某些样式\",{\"1\":{\"487\":1}}],[\"不要再\",{\"1\":{\"479\":1}}],[\"不要以任何方式改变原始组件\",{\"1\":{\"479\":1}}],[\"不要在\",{\"1\":{\"437\":1}}],[\"不涉及对state状态的操作\",{\"1\":{\"472\":1}}],[\"不受控制\",{\"1\":{\"467\":1}}],[\"不打包node\",{\"1\":{\"449\":2}}],[\"不建议在该周期方法中进行深层比较\",{\"1\":{\"440\":1}}],[\"不论是props变化还是state变化\",{\"1\":{\"436\":1}}],[\"不论是垂直方向还是水平方向\",{\"1\":{\"57\":1}}],[\"不论是垂直方向或者是水平方向\",{\"1\":{\"57\":1}}],[\"不应拿\",{\"1\":{\"377\":1}}],[\"不是\",{\"1\":{\"371\":1,\"408\":1}}],[\"不是所有语句都可计时\",{\"1\":{\"315\":1}}],[\"不区分大小写\",{\"1\":{\"370\":1}}],[\"不全等于\",{\"1\":{\"361\":1}}],[\"不全等\",{\"1\":{\"356\":1,\"361\":1}}],[\"不等于\",{\"1\":{\"356\":3,\"361\":2,\"597\":1}}],[\"不等于初始化\",{\"1\":{\"107\":1}}],[\"不等\",{\"1\":{\"356\":2,\"361\":2}}],[\"不仅限于输出\",{\"1\":{\"329\":1}}],[\"不仅仅在该对象上搜寻\",{\"1\":{\"267\":1}}],[\"不允许动态指定\",{\"1\":{\"324\":1}}],[\"不过\",{\"1\":{\"886\":1}}],[\"不过期\",{\"1\":{\"830\":1}}],[\"不过还是有迂回的方法来比较浮点数值的\",{\"1\":{\"376\":1}}],[\"不过很多常量都是由不同的扩展库定义的\",{\"1\":{\"307\":1}}],[\"不过此时服务器并不能确认客户端的接收能力是否正常\",{\"1\":{\"243\":1}}],[\"不超过4kb\",{\"1\":{\"280\":1}}],[\"不使用的内容都会被摇掉\",{\"1\":{\"818\":1}}],[\"不使用key会依次比较\",{\"1\":{\"769\":1}}],[\"不使用key比使用key的性能\",{\"1\":{\"497\":1}}],[\"不使用immutable前修改一个数据需要做一个深拷贝\",{\"1\":{\"527\":1}}],[\"不使用\",{\"1\":{\"273\":1}}],[\"不互相影响\",{\"1\":{\"260\":1}}],[\"不带上一个函数的参数\",{\"1\":{\"253\":1}}],[\"不验证通信方的身份\",{\"1\":{\"233\":1}}],[\"不提供任何方式的数据加密\",{\"1\":{\"230\":1}}],[\"不提供复杂的控制机制\",{\"1\":{\"181\":1}}],[\"不接受\",{\"1\":{\"210\":1}}],[\"不像类组件中调用setstate\",{\"1\":{\"458\":1}}],[\"不像\",{\"1\":{\"198\":1}}],[\"不停地向服务器发送\",{\"1\":{\"195\":1}}],[\"不丢失\",{\"1\":{\"183\":1}}],[\"不可更改\",{\"1\":{\"687\":1}}],[\"不可改变的\",{\"1\":{\"525\":1}}],[\"不可靠\",{\"1\":{\"183\":1}}],[\"不可变的绑定\",{\"1\":{\"120\":1}}],[\"不拆分应用层报文\",{\"1\":{\"183\":1}}],[\"不拆分\",{\"1\":{\"181\":1}}],[\"不合并\",{\"1\":{\"181\":1}}],[\"不再通过每次请求和响应发送\",{\"1\":{\"151\":1}}],[\"不为空\",{\"1\":{\"122\":1}}],[\"不同浏览器的缓存机制不同\",{\"1\":{\"871\":1}}],[\"不同类型的节点\",{\"1\":{\"769\":1}}],[\"不同时使用使用在同一个标签上\",{\"1\":{\"754\":1}}],[\"不同状态的文件在git中处于不同的工作区域\",{\"1\":{\"685\":1}}],[\"不同的webpack版本和配置可能会生成略有不同的manifest数据\",{\"1\":{\"942\":1}}],[\"不同的角色就是reducer\",{\"1\":{\"570\":1}}],[\"不同的执行上下文可能有不同的realm\",{\"1\":{\"95\":1}}],[\"不同域名下的单点登录\",{\"1\":{\"287\":1}}],[\"不同于http每次请求需要携带身份验证\",{\"1\":{\"201\":1}}],[\"不同于http每次请求需要携带完整的头部\",{\"1\":{\"201\":1}}],[\"不同点是\",{\"1\":{\"313\":1}}],[\"不同点\",{\"0\":{\"757\":1},\"1\":{\"177\":1}}],[\"不同元素在\",{\"1\":{\"8\":1}}],[\"不适合用于布局\",{\"1\":{\"81\":1}}],[\"不能跟8\",{\"1\":{\"1011\":1}}],[\"不能跟八进制数\",{\"1\":{\"1011\":2}}],[\"不能包含以下之一\",{\"1\":{\"1009\":1}}],[\"不能使用yeild\",{\"1\":{\"986\":1}}],[\"不能使用连接符\",{\"1\":{\"487\":1}}],[\"不能直接包裹你想要切换的组件\",{\"1\":{\"634\":1}}],[\"不能在函数组件上使用ref属性\",{\"1\":{\"583\":1}}],[\"不能保管组件的状态\",{\"1\":{\"458\":1}}],[\"不能把它放在函数或类的定义之前\",{\"1\":{\"359\":1}}],[\"不能传入此类变量\",{\"1\":{\"326\":1}}],[\"不能继承原型属性或者方法\",{\"1\":{\"259\":1}}],[\"不能发送就等着\",{\"1\":{\"182\":1}}],[\"不能换行\",{\"1\":{\"87\":1}}],[\"不能简单的换行展示\",{\"1\":{\"78\":1}}],[\"不能\",{\"1\":{\"72\":3}}],[\"不支持无符号的\",{\"1\":{\"372\":1}}],[\"不支持用户定义类型别名\",{\"1\":{\"369\":1}}],[\"不支持静态属性\",{\"1\":{\"347\":1}}],[\"不支持多重继承\",{\"1\":{\"340\":1}}],[\"不支持\",{\"1\":{\"72\":1,\"324\":1,\"933\":1}}],[\"不触发\",{\"1\":{\"72\":2}}],[\"不存在\",{\"1\":{\"72\":1,\"359\":1}}],[\"不影响页面布局\",{\"1\":{\"71\":1}}],[\"不占据页面空间\",{\"1\":{\"70\":1}}],[\"不占据空间\",{\"1\":{\"67\":1}}],[\"不会触发组件的生命周期\",{\"1\":{\"757\":1}}],[\"不会触发重绘\",{\"1\":{\"69\":1}}],[\"不会触发重排\",{\"1\":{\"68\":1}}],[\"不会跨层级比较\",{\"1\":{\"731\":1}}],[\"不会影响当前组件的后代组件\",{\"1\":{\"487\":1}}],[\"不会随意污染其他组件内的原生\",{\"1\":{\"483\":1}}],[\"不会尝试将值转换为特定类型\",{\"1\":{\"409\":1}}],[\"不会改变传递给脚本中的变量名\",{\"1\":{\"408\":1}}],[\"不会发生转义和插值\",{\"1\":{\"382\":1}}],[\"不会立即执行\",{\"1\":{\"271\":1}}],[\"不会提升\",{\"1\":{\"251\":1}}],[\"不会处理函数和类中的\",{\"1\":{\"107\":1}}],[\"不会\",{\"1\":{\"72\":2}}],[\"不会引发重排\",{\"1\":{\"69\":1}}],[\"不定宽\",{\"1\":{\"33\":2}}],[\"不定高\",{\"1\":{\"33\":2}}],[\"不包含bigint\",{\"1\":{\"640\":1}}],[\"不包含padding\",{\"1\":{\"18\":1}}],[\"不包含\",{\"1\":{\"16\":1,\"886\":1}}],[\"只等于它本身\",{\"1\":{\"981\":1}}],[\"只对可见区域进行渲染\",{\"1\":{\"919\":1}}],[\"只在每两秒钟响应一次联想\",{\"1\":{\"849\":1}}],[\"只在update\",{\"1\":{\"737\":2}}],[\"只调用一次\",{\"1\":{\"737\":2}}],[\"只影响实例本身和使用插槽的子组件\",{\"1\":{\"714\":1}}],[\"只提供了\",{\"1\":{\"530\":1}}],[\"只提供抽象定义\",{\"1\":{\"127\":1}}],[\"只修改这个节点和受它影响的父节点\",{\"1\":{\"525\":1}}],[\"只负责现显示和交互\",{\"1\":{\"563\":1}}],[\"只负责渲染的一些工作\",{\"1\":{\"517\":1}}],[\"只负责根据传入的props来展示视图\",{\"1\":{\"472\":1}}],[\"只作用于当前组件\",{\"1\":{\"487\":1}}],[\"只不过要用适当的\",{\"1\":{\"406\":1}}],[\"只读修饰符\",{\"1\":{\"651\":1}}],[\"只读属性并不会妨碍内部可变性\",{\"1\":{\"347\":1}}],[\"只读\",{\"0\":{\"347\":1}}],[\"只会执行一次\",{\"1\":{\"847\":1}}],[\"只会被创建一次\",{\"1\":{\"818\":1}}],[\"只会对相同层级的节点进行比较\",{\"1\":{\"494\":1}}],[\"只会监听数据的变化\",{\"1\":{\"418\":1}}],[\"只会向每个声明的属性添加\",{\"1\":{\"342\":1}}],[\"只会处理declaration\",{\"1\":{\"107\":1}}],[\"只能理解javascript和json文件\",{\"1\":{\"945\":1}}],[\"只能在类内部使用\",{\"1\":{\"651\":1}}],[\"只能通过外部组件传入新的props来重新渲染子组件\",{\"1\":{\"621\":1}}],[\"只能用于函数组件\",{\"1\":{\"550\":1}}],[\"只能支持\",{\"1\":{\"378\":1}}],[\"只能存入字符串\",{\"1\":{\"280\":1}}],[\"只能点对点全双工通信\",{\"1\":{\"183\":1}}],[\"只支持冒泡\",{\"1\":{\"273\":1}}],[\"只要有一台电脑充当服务器的角色\",{\"1\":{\"684\":1}}],[\"只要点击了\",{\"1\":{\"588\":1}}],[\"只要程序提出要求\",{\"1\":{\"247\":1}}],[\"只要保证了密钥的安全\",{\"1\":{\"235\":1}}],[\"只要在网络节点上捉包\",{\"1\":{\"219\":1}}],[\"只包含状态行和某些可选的响应头信息\",{\"1\":{\"207\":1}}],[\"只保留报文边界\",{\"1\":{\"183\":1}}],[\"只有受影响的模块需要重新加载\",{\"1\":{\"942\":1}}],[\"只有主线程执行完才会去检查事件队列中的任务是否需要执行\",{\"1\":{\"916\":1}}],[\"只有旧节点有子节点\",{\"1\":{\"732\":1}}],[\"只有新节点有子节点\",{\"1\":{\"732\":1}}],[\"只有一个原始版仓库\",{\"1\":{\"684\":1}}],[\"只有精准匹配到完全一致的路径\",{\"1\":{\"595\":1}}],[\"只有首次会触发foo\",{\"1\":{\"588\":1}}],[\"只有删除和创建操作\",{\"1\":{\"494\":1}}],[\"只有删除\",{\"1\":{\"494\":1}}],[\"只有两种方法可以访问\",{\"1\":{\"406\":1}}],[\"只有实现了\",{\"1\":{\"386\":1}}],[\"只有在加载了这些扩展库时才会出现\",{\"1\":{\"307\":1}}],[\"只有在确认通信对端存在时才会发送数据\",{\"1\":{\"182\":1}}],[\"只有当服务器的所有报文发送完毕之后\",{\"1\":{\"244\":1}}],[\"只有使用https才能加密安全\",{\"1\":{\"219\":1}}],[\"只有执行到对应的位置\",{\"1\":{\"107\":1}}],[\"只需窗口调整完后\",{\"1\":{\"846\":1}}],[\"只需用户最后一次输入完\",{\"1\":{\"846\":1}}],[\"只需要将后台的小程序切换到前台\",{\"1\":{\"837\":1}}],[\"只需要将旧集合中节点的位置进行移动\",{\"1\":{\"496\":1}}],[\"只需要在对应元素或组件中ref属性\",{\"1\":{\"580\":1}}],[\"只需要在子组件标签内传递参数\",{\"1\":{\"413\":1}}],[\"只需要配置webpack配置文件中\",{\"1\":{\"487\":1}}],[\"只需要设置如下\",{\"1\":{\"250\":1}}],[\"只需要定义开始和结束两帧即可\",{\"1\":{\"13\":1}}],[\"只需传送请求方法和路径\",{\"1\":{\"230\":1}}],[\"只需一个连接即可实现并行\",{\"1\":{\"153\":1}}],[\"只是用来改善少数营销页面\",{\"1\":{\"908\":1}}],[\"只是多个函数的声明\",{\"1\":{\"659\":1}}],[\"只是在这个统一的事件监听器上插入或删除一些对象\",{\"1\":{\"504\":1}}],[\"只是在前者加上了unsafe\",{\"1\":{\"445\":1}}],[\"只是在其上面加上首部后就交给了下面的网络层\",{\"1\":{\"181\":1}}],[\"只是一些概念性的描述\",{\"1\":{\"177\":1}}],[\"只是当时在一个不可见的状态\",{\"1\":{\"68\":1}}],[\"只是内容高度\",{\"1\":{\"16\":1}}],[\"+return\",{\"1\":{\"986\":1}}],[\"+await\",{\"1\":{\"986\":1}}],[\"++newstartidx\",{\"1\":{\"770\":1}}],[\"+3600\",{\"1\":{\"407\":4}}],[\"+=\",{\"1\":{\"315\":1,\"323\":1}}],[\"+1\",{\"1\":{\"244\":2}}],[\"+0𝔽\",{\"1\":{\"130\":1}}],[\"+margin\",{\"1\":{\"33\":1}}],[\"+\",{\"1\":{\"16\":6,\"17\":2,\"54\":2,\"59\":1,\"75\":1,\"89\":1,\"231\":1,\"254\":3,\"290\":1,\"291\":1,\"304\":1,\"324\":3,\"361\":1,\"372\":1,\"402\":2,\"407\":1,\"415\":1,\"458\":1,\"461\":2,\"474\":1,\"519\":2,\"520\":2,\"527\":2,\"588\":2,\"612\":1,\"616\":5,\"620\":1,\"659\":3,\"662\":3,\"669\":2,\"752\":1,\"760\":1,\"916\":4,\"917\":4,\"918\":4,\"928\":13,\"985\":2}}],[\"=0\",{\"1\":{\"655\":2,\"792\":1}}],[\"=func\",{\"1\":{\"278\":1}}],[\"=deepclone\",{\"1\":{\"277\":1}}],[\"==​​\",{\"1\":{\"811\":1}}],[\"==\",{\"1\":{\"272\":1,\"277\":1,\"312\":3,\"331\":1,\"356\":2,\"361\":2,\"538\":1,\"549\":7,\"597\":1,\"600\":1,\"612\":1,\"670\":1,\"845\":1,\"895\":1}}],[\"========>\",{\"1\":{\"497\":4}}],[\"===\",{\"1\":{\"32\":1,\"253\":2,\"254\":3,\"261\":1,\"356\":1,\"361\":1,\"526\":3,\"538\":5,\"549\":5,\"550\":1,\"575\":1,\"612\":2,\"659\":4,\"753\":2,\"759\":1,\"770\":5}}],[\"=oldenv\",{\"1\":{\"119\":1}}],[\"=>a+b\",{\"1\":{\"658\":1}}],[\"=>a+\",{\"1\":{\"657\":1}}],[\"=>console\",{\"1\":{\"449\":1,\"620\":1}}],[\"=>rest\",{\"1\":{\"658\":1}}],[\"=>res\",{\"1\":{\"449\":1}}],[\"=>return\",{\"1\":{\"313\":1}}],[\"=>fn\",{\"1\":{\"297\":2}}],[\"=>val=>fns\",{\"1\":{\"297\":2}}],[\"=>\",{\"1\":{\"111\":1,\"254\":1,\"270\":1,\"278\":1,\"285\":1,\"313\":11,\"324\":2,\"383\":6,\"384\":3,\"385\":5,\"386\":2,\"415\":1,\"416\":1,\"428\":1,\"449\":8,\"458\":2,\"459\":5,\"461\":2,\"466\":2,\"474\":2,\"479\":1,\"488\":2,\"504\":1,\"505\":6,\"511\":1,\"513\":1,\"519\":2,\"520\":6,\"527\":2,\"533\":1,\"538\":3,\"542\":1,\"555\":2,\"559\":2,\"560\":1,\"566\":1,\"567\":2,\"573\":3,\"575\":4,\"582\":1,\"588\":3,\"595\":1,\"596\":2,\"597\":1,\"599\":2,\"600\":1,\"601\":1,\"608\":2,\"609\":1,\"612\":1,\"614\":1,\"615\":2,\"616\":4,\"620\":2,\"633\":1,\"635\":2,\"670\":1,\"760\":3,\"769\":1,\"845\":1,\"848\":1,\"858\":10,\"859\":2,\"862\":2,\"878\":1,\"884\":1,\"895\":1,\"916\":1,\"956\":1}}],[\"=value\",{\"1\":{\"35\":1}}],[\"=\",{\"1\":{\"16\":2,\"17\":2,\"36\":2,\"59\":3,\"90\":2,\"103\":7,\"111\":1,\"123\":6,\"231\":1,\"247\":1,\"250\":2,\"251\":10,\"254\":13,\"258\":6,\"259\":4,\"260\":8,\"261\":4,\"262\":4,\"263\":8,\"264\":5,\"270\":6,\"272\":3,\"273\":2,\"278\":1,\"285\":3,\"287\":3,\"291\":14,\"292\":4,\"297\":2,\"303\":1,\"306\":2,\"313\":4,\"314\":1,\"315\":1,\"320\":2,\"321\":2,\"322\":1,\"323\":1,\"324\":2,\"325\":5,\"326\":10,\"330\":2,\"332\":1,\"336\":1,\"338\":2,\"339\":3,\"340\":1,\"343\":1,\"344\":5,\"346\":3,\"347\":3,\"349\":6,\"350\":6,\"351\":2,\"356\":1,\"357\":3,\"358\":3,\"359\":2,\"360\":1,\"361\":1,\"362\":3,\"368\":6,\"370\":1,\"371\":1,\"372\":6,\"375\":4,\"376\":3,\"381\":1,\"383\":6,\"384\":7,\"385\":12,\"386\":6,\"387\":1,\"388\":1,\"399\":3,\"401\":1,\"402\":6,\"403\":4,\"404\":2,\"407\":2,\"413\":1,\"414\":1,\"415\":2,\"416\":3,\"421\":3,\"428\":1,\"429\":3,\"441\":1,\"445\":1,\"449\":13,\"458\":2,\"459\":2,\"460\":3,\"461\":2,\"465\":1,\"466\":2,\"474\":2,\"478\":1,\"479\":2,\"480\":7,\"485\":1,\"488\":2,\"500\":3,\"504\":5,\"505\":4,\"512\":1,\"513\":1,\"519\":2,\"520\":6,\"526\":10,\"527\":4,\"532\":2,\"533\":2,\"538\":22,\"542\":3,\"549\":5,\"555\":1,\"559\":2,\"564\":1,\"566\":2,\"567\":3,\"572\":1,\"573\":2,\"574\":2,\"575\":10,\"580\":2,\"581\":2,\"582\":3,\"583\":2,\"588\":9,\"596\":1,\"597\":1,\"599\":2,\"600\":2,\"601\":2,\"608\":3,\"609\":4,\"612\":3,\"615\":1,\"616\":2,\"620\":1,\"621\":1,\"626\":4,\"627\":2,\"633\":3,\"634\":2,\"635\":1,\"645\":4,\"646\":10,\"655\":2,\"662\":5,\"669\":2,\"753\":1,\"759\":2,\"760\":4,\"769\":1,\"770\":5,\"789\":1,\"792\":7,\"793\":11,\"845\":2,\"848\":4,\"851\":7,\"858\":5,\"862\":3,\"884\":1,\"895\":2,\"907\":3,\"909\":4,\"916\":9,\"917\":9,\"918\":10,\"926\":2,\"948\":1,\"953\":3,\"954\":4,\"955\":3,\"956\":2,\"997\":2}}],[\"从右到左\",{\"1\":{\"948\":1}}],[\"从入口文件开始\",{\"1\":{\"932\":1}}],[\"从用户发起网页加载到网页呈现主要的页首内容之间的时间\",{\"1\":{\"886\":1}}],[\"从前台进入后台时触发\",{\"1\":{\"824\":1}}],[\"从哈希表寻找key一致的vnode节点再分情况操作\",{\"1\":{\"733\":1}}],[\"从旧的vnode为key值\",{\"1\":{\"732\":1}}],[\"从提交历史恢复某个删除掉的某个分支\",{\"1\":{\"690\":1}}],[\"从名字上来看\",{\"1\":{\"587\":1}}],[\"从工程方面考虑\",{\"1\":{\"559\":1}}],[\"从性能方面考虑\",{\"1\":{\"557\":1}}],[\"从编码角度来看\",{\"1\":{\"428\":1}}],[\"从架构角度来看\",{\"1\":{\"428\":1}}],[\"从开始到渲染完成整个过程是一气呵成的\",{\"1\":{\"427\":1}}],[\"从数组中删除元素\",{\"1\":{\"384\":1}}],[\"从\",{\"1\":{\"340\":1,\"346\":1,\"375\":1,\"395\":1,\"931\":1,\"948\":1}}],[\"从此位置继续读取文件数据块\",{\"1\":{\"283\":1}}],[\"从作用域链上寻找第一个有绑定this值的环境记录器\",{\"1\":{\"270\":1}}],[\"从传输的角度来说\",{\"1\":{\"219\":1}}],[\"从w3schools得到的标准答案的区别如下\",{\"1\":{\"216\":1}}],[\"从输入延迟开始\",{\"1\":{\"882\":1}}],[\"从输入\",{\"1\":{\"186\":1}}],[\"从而减少缓存失效的可能性\",{\"1\":{\"941\":1}}],[\"从而减少不必要的diff\",{\"1\":{\"542\":1}}],[\"从而提高缓存效率\",{\"1\":{\"941\":1}}],[\"从而得到相应的动画效果\",{\"1\":{\"633\":1}}],[\"从而达到更新组件内部数据的作用\",{\"1\":{\"612\":1,\"620\":1}}],[\"从而进行\",{\"1\":{\"607\":1}}],[\"从而加工出想要的组件\",{\"1\":{\"479\":1}}],[\"从而导致页面的视图更新\",{\"1\":{\"612\":1}}],[\"从而导致错误\",{\"1\":{\"508\":1}}],[\"从而导致input框的内容页发现改变\",{\"1\":{\"465\":1}}],[\"从而导致内存泄漏\",{\"1\":{\"250\":1}}],[\"从而形成动态内容的服务器端缓存\",{\"1\":{\"329\":1}}],[\"从而造成了内存的浪费\",{\"1\":{\"247\":1}}],[\"从而可以控制通信流量的浪费\",{\"1\":{\"182\":1}}],[\"从而实现登录功能\",{\"1\":{\"829\":1}}],[\"从而实现代码的复用\",{\"1\":{\"479\":1}}],[\"从而实现通信\",{\"1\":{\"417\":1}}],[\"从而实现两种类型标识符的隔离\",{\"1\":{\"123\":1}}],[\"从而实现响应式的效果\",{\"1\":{\"57\":1}}],[\"从上面可以看见\",{\"1\":{\"520\":1}}],[\"从上面可以看到setstate第一个参数可以是一个对象\",{\"1\":{\"612\":1}}],[\"从上面可以看到\",{\"1\":{\"508\":1,\"547\":1,\"614\":1}}],[\"从上面可以看到react事件和原生事件也非常的相似\",{\"1\":{\"504\":1}}],[\"从上述两种代码分析\",{\"1\":{\"519\":1}}],[\"从上游服务器收到无效响应\",{\"1\":{\"211\":1}}],[\"从上到下一次为根域名\",{\"1\":{\"139\":1}}],[\"从上图可以看到\",{\"1\":{\"16\":1,\"17\":1}}],[\"从结果来看lexicallydeclarednames只会收集let\",{\"1\":{\"107\":1}}],[\"从页面上仅仅是隐藏该元素\",{\"1\":{\"68\":1}}],[\"从content开始计算background\",{\"1\":{\"44\":1}}],[\"从padding开始计算background\",{\"1\":{\"44\":1}}],[\"从border开始计算background\",{\"1\":{\"44\":1}}],[\"从左往右依次进行比较\",{\"1\":{\"36\":1}}],[\"从左到右\",{\"1\":{\"19\":1,\"21\":1}}],[\"从后往前\",{\"1\":{\"35\":1}}],[\"从慢到快再到慢\",{\"1\":{\"11\":1}}],[\"怪异盒子模型的模型图\",{\"1\":{\"17\":1}}],[\"怪异盒子模型\",{\"0\":{\"17\":1},\"1\":{\"15\":1}}],[\"would\",{\"1\":{\"928\":1}}],[\"woff2\",{\"1\":{\"906\":2}}],[\"woff\",{\"1\":{\"895\":2}}],[\"woff$\",{\"1\":{\"895\":1}}],[\"worker\",{\"1\":{\"883\":1}}],[\"worktag\",{\"1\":{\"428\":1}}],[\"work\",{\"1\":{\"330\":1}}],[\"world<\",{\"1\":{\"421\":1,\"459\":2}}],[\"world\",{\"1\":{\"250\":1,\"270\":1,\"306\":4,\"326\":6,\"330\":1,\"404\":2,\"421\":1,\"449\":1,\"480\":1,\"612\":1,\"614\":2,\"672\":1}}],[\"word属性\",{\"1\":{\"90\":1}}],[\"word\",{\"1\":{\"37\":1,\"47\":3}}],[\"wx\",{\"1\":{\"829\":2,\"832\":5}}],[\"writable=false\",{\"1\":{\"662\":1}}],[\"write\",{\"1\":{\"560\":4}}],[\"wrong\",{\"1\":{\"500\":1}}],[\"wrappedcomponent\",{\"1\":{\"478\":1,\"479\":6,\"480\":4}}],[\"wrapper\",{\"1\":{\"80\":3,\"292\":1,\"633\":1,\"696\":2}}],[\"wrap\",{\"1\":{\"47\":2,\"78\":2,\"82\":2,\"83\":2,\"90\":1}}],[\"which\",{\"1\":{\"612\":1,\"928\":2}}],[\"whilestatement\",{\"1\":{\"992\":1}}],[\"while语句的产生式\",{\"1\":{\"992\":1,\"993\":1}}],[\"while\",{\"1\":{\"312\":1,\"331\":1,\"770\":1,\"992\":1}}],[\"white\",{\"1\":{\"79\":1,\"80\":1,\"81\":1,\"87\":3}}],[\"who\",{\"1\":{\"270\":3}}],[\"watch等选项\",{\"1\":{\"789\":1}}],[\"watch\",{\"0\":{\"671\":1},\"1\":{\"671\":4,\"796\":1,\"811\":1}}],[\"warthog\",{\"1\":{\"406\":1}}],[\"was\",{\"1\":{\"359\":1}}],[\"want\",{\"1\":{\"330\":1,\"928\":6}}],[\"wait\",{\"1\":{\"845\":2}}],[\"wait状态\",{\"1\":{\"244\":2}}],[\"wait1\",{\"1\":{\"244\":1}}],[\"way\",{\"1\":{\"243\":1,\"379\":1}}],[\"www\",{\"1\":{\"199\":3,\"217\":1,\"224\":2,\"406\":1}}],[\"wss\",{\"1\":{\"199\":1}}],[\"ws\",{\"1\":{\"199\":2}}],[\"will\",{\"1\":{\"330\":1,\"331\":3,\"333\":1,\"379\":2,\"928\":2}}],[\"withtiming\",{\"1\":{\"480\":2}}],[\"withpersistentdata\",{\"1\":{\"480\":2}}],[\"withlogging\",{\"1\":{\"479\":2}}],[\"within\",{\"1\":{\"330\":1}}],[\"with\",{\"1\":{\"247\":1,\"270\":1,\"320\":1,\"428\":1,\"752\":1,\"753\":1,\"928\":1}}],[\"wikipedia\",{\"1\":{\"224\":2}}],[\"window\",{\"1\":{\"59\":2,\"101\":2,\"285\":2,\"287\":1,\"429\":1,\"500\":1,\"607\":1,\"608\":5,\"917\":1,\"918\":1}}],[\"width=\",{\"1\":{\"652\":1}}],[\"width=device\",{\"1\":{\"55\":2}}],[\"width属性为0\",{\"0\":{\"70\":1}}],[\"width属性的百分比依托于父标签的宽高\",{\"1\":{\"57\":1}}],[\"width模型属性为0\",{\"1\":{\"66\":1}}],[\"width\",{\"1\":{\"8\":4,\"11\":6,\"12\":4,\"15\":1,\"16\":2,\"17\":2,\"18\":3,\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2,\"37\":1,\"47\":1,\"49\":1,\"55\":2,\"56\":3,\"59\":5,\"70\":1,\"75\":1,\"76\":1,\"78\":2,\"79\":2,\"80\":2,\"81\":4,\"82\":3,\"83\":2,\"87\":1,\"90\":2,\"285\":1,\"485\":1,\"488\":1}}],[\"wed\",{\"1\":{\"865\":1}}],[\"went\",{\"1\":{\"500\":1}}],[\"welcome\",{\"1\":{\"454\":1,\"455\":1,\"457\":2,\"621\":1}}],[\"we\",{\"1\":{\"332\":1}}],[\"weakmap\",{\"1\":{\"277\":1}}],[\"webassembly\",{\"1\":{\"937\":1}}],[\"webp提供有损压缩和无损压缩两种方案\",{\"1\":{\"896\":1}}],[\"webp比png\",{\"1\":{\"896\":1}}],[\"webpack在构建过程中会自动生成manifest数据\",{\"1\":{\"942\":1}}],[\"webpack在打包过程中会分析模块之间的依赖关系\",{\"1\":{\"941\":1}}],[\"webpack在打包过程中会根据项目的配置和模块之间的依赖关系生成runtime代码\",{\"1\":{\"941\":1}}],[\"webpack可以更有效地利用浏览器的缓存机制\",{\"1\":{\"942\":1}}],[\"webpack支持代码分割\",{\"1\":{\"941\":1}}],[\"webpack的manifest是构建过程中的一个内部机制\",{\"1\":{\"942\":1}}],[\"webpack的manifest是一个在webpack构建过程中生成的数据集合\",{\"1\":{\"942\":1}}],[\"webpack的运行时\",{\"1\":{\"942\":1}}],[\"webpack的runtime\",{\"1\":{\"941\":1}}],[\"webpack的打包过程主要就是将项目中所有的资源\",{\"1\":{\"939\":1}}],[\"webpack的打包过程是一个复杂但高效的过程\",{\"1\":{\"932\":1}}],[\"webpack原生支持\",{\"1\":{\"937\":1}}],[\"webpack使用不同的加载器\",{\"1\":{\"932\":1}}],[\"webpack会从这些入口点开始\",{\"1\":{\"939\":1}}],[\"webpack会将生成的bundle文件输出到指定的输出目录中\",{\"1\":{\"932\":1}}],[\"webpack会将所有处理后的模块合并成一个或多个bundle文件\",{\"1\":{\"932\":1}}],[\"webpack会将配置文件中的参数与通过命令行传入的参数进行合并\",{\"1\":{\"932\":1}}],[\"webpack会根据配置中的规则来将模块分组打包\",{\"1\":{\"932\":1}}],[\"webpack会根据配置中的插件\",{\"1\":{\"932\":1}}],[\"webpack会根据配置中的入口文件\",{\"1\":{\"932\":1}}],[\"webpack会根据模块的类型和配置中的加载器\",{\"1\":{\"932\":1}}],[\"webpack会递归解析项目中的所有依赖模块\",{\"1\":{\"932\":1}}],[\"webpack会创建一个compiler对象\",{\"1\":{\"932\":1}}],[\"webpack首先会读取项目中的webpack\",{\"1\":{\"932\":1}}],[\"webpack是一个前端项目工程化的具体解决方案\",{\"1\":{\"931\":1}}],[\"webpack是一个现代javascript应用程序的静态模块打包器\",{\"1\":{\"931\":1}}],[\"webpack方案\",{\"0\":{\"909\":1}}],[\"webpack等构建工具提供了代码分割的支持\",{\"1\":{\"859\":1}}],[\"webpackchunkname\",{\"1\":{\"559\":1}}],[\"webpack存在代码拆分能力\",{\"1\":{\"559\":1}}],[\"webpack\",{\"0\":{\"928\":1,\"931\":1},\"1\":{\"449\":1,\"895\":2,\"907\":2,\"925\":6,\"926\":3,\"927\":1,\"928\":18,\"931\":2,\"933\":2,\"934\":1,\"936\":1,\"937\":3,\"941\":7,\"942\":2,\"945\":1,\"946\":2,\"947\":3,\"948\":3,\"952\":1,\"953\":5,\"954\":7,\"955\":6,\"956\":3},\"2\":{\"930\":1,\"944\":1,\"951\":1,\"958\":1}}],[\"web上的说明\",{\"1\":{\"880\":1,\"882\":1,\"883\":1}}],[\"webgl\",{\"1\":{\"813\":1}}],[\"web的常见攻击方式有哪些\",{\"0\":{\"298\":1}}],[\"websocket在适当的扩展支持下\",{\"1\":{\"201\":1}}],[\"websocket服务器与客户端通过握手连接\",{\"1\":{\"195\":1}}],[\"websocket\",{\"0\":{\"195\":1},\"1\":{\"195\":1,\"198\":1,\"200\":14}}],[\"web服务端的node\",{\"1\":{\"98\":1}}],[\"web客户端的浏览器\",{\"1\":{\"98\":1}}],[\"webkit\",{\"1\":{\"90\":7}}],[\"web\",{\"0\":{\"890\":1},\"1\":{\"54\":1,\"223\":1,\"400\":1,\"884\":2,\"890\":2}}],[\"weight\",{\"1\":{\"37\":1}}],[\"w3c\",{\"1\":{\"15\":1,\"504\":1}}],[\"却发现元素的大小变成了240px\",{\"1\":{\"15\":1}}],[\"下\",{\"1\":{\"1012\":1}}],[\"下标后缀\",{\"1\":{\"993\":1}}],[\"下次访问相同网站的时候\",{\"1\":{\"870\":1}}],[\"下次请求时\",{\"1\":{\"829\":1}}],[\"下次上传的时候根据当前临时文件大小\",{\"1\":{\"283\":1}}],[\"下拉选\",{\"1\":{\"805\":1}}],[\"下拉回弹后停留的位置\",{\"1\":{\"292\":1}}],[\"下拉刷新\",{\"0\":{\"291\":1},\"1\":{\"291\":1,\"292\":1}}],[\"下拉刷新和上拉加载\",{\"0\":{\"289\":1}}],[\"下载的工具函数\",{\"1\":{\"925\":1}}],[\"下载打包工具匹配的gzip插件\",{\"1\":{\"894\":1}}],[\"下载小程序代码包\",{\"1\":{\"838\":1}}],[\"下载一个项目和他的整个代码历史\",{\"1\":{\"688\":1}}],[\"下载\",{\"1\":{\"283\":1}}],[\"下文详述\",{\"1\":{\"224\":1}}],[\"下面以hashrouter组件分析进行展开\",{\"1\":{\"607\":1}}],[\"下面以hash模式为例子\",{\"1\":{\"607\":1}}],[\"下面再来看看在前面插入数据时\",{\"1\":{\"542\":1}}],[\"下面再看看看三维图\",{\"1\":{\"15\":1}}],[\"下面这些情况无法捕获到异常\",{\"1\":{\"500\":1}}],[\"下面主要看看styled\",{\"1\":{\"488\":1}}],[\"下面就可以通过高价组件来进行改写\",{\"1\":{\"480\":1}}],[\"下面是与上面等价的语句\",{\"1\":{\"357\":1}}],[\"下面是一个包括\",{\"1\":{\"312\":1}}],[\"下面是一个http请求的请求头\",{\"1\":{\"223\":1}}],[\"下面可以简写为\",{\"1\":{\"264\":1}}],[\"下面给出一个按钮入场和出场的示例\",{\"1\":{\"634\":1}}],[\"下面给出一些状态码的适用场景\",{\"1\":{\"212\":1}}],[\"下面给出javascripy常见的继承方式\",{\"1\":{\"257\":1}}],[\"下面看看标准盒子模型的模型图\",{\"1\":{\"16\":1}}],[\"下来就可以直接用它了\",{\"1\":{\"13\":1}}],[\"内置的服务端渲染方法\",{\"1\":{\"450\":1}}],[\"内置类型\",{\"1\":{\"367\":1}}],[\"内可用\",{\"1\":{\"401\":1}}],[\"内存占用量过高\",{\"1\":{\"423\":1}}],[\"内存占用越来越高\",{\"1\":{\"247\":1}}],[\"内存空间是共享的\",{\"1\":{\"258\":1}}],[\"内存泄露是经常出现的事情\",{\"1\":{\"247\":1}}],[\"内存泄漏\",{\"0\":{\"247\":1},\"1\":{\"247\":1}}],[\"内部调用parsefloat\",{\"1\":{\"699\":1}}],[\"内部\",{\"1\":{\"627\":1}}],[\"内部会将dispatch进行一个判断\",{\"1\":{\"575\":1}}],[\"内部不处理逻辑\",{\"1\":{\"563\":1}}],[\"内部提供了一套完整的\",{\"1\":{\"526\":1}}],[\"内部也可以维护自身的状态以及做一些逻辑方面的处理\",{\"1\":{\"517\":1}}],[\"内部所定义的一种数据结构\",{\"1\":{\"428\":1}}],[\"内部可变正常\",{\"1\":{\"347\":1}}],[\"内部方法创建的\",{\"1\":{\"114\":1}}],[\"内部的盒子会在垂直方向上一个接一个的放置\",{\"1\":{\"19\":1}}],[\"内层的左中右通过\",{\"1\":{\"81\":1}}],[\"内容渲染完成以后再加入dom\",{\"1\":{\"918\":1}}],[\"内容指的是文本\",{\"1\":{\"877\":1}}],[\"内容选择\",{\"1\":{\"584\":1}}],[\"内容\",{\"1\":{\"381\":1,\"886\":1}}],[\"内容可能被窃听\",{\"1\":{\"233\":1}}],[\"内容分发\",{\"1\":{\"132\":1}}],[\"内容如下\",{\"1\":{\"59\":1}}],[\"内容层\",{\"1\":{\"5\":1}}],[\"内\",{\"1\":{\"41\":1}}],[\"内外边距\",{\"1\":{\"37\":1}}],[\"内联方式\",{\"0\":{\"949\":1},\"1\":{\"947\":1}}],[\"内联样式\",{\"1\":{\"485\":1}}],[\"内联样式风格的方式来根据最新状态设置和改变css\",{\"1\":{\"483\":1}}],[\"内联\",{\"1\":{\"36\":1}}],[\"内联元素居中布局\",{\"0\":{\"32\":1},\"1\":{\"31\":1}}],[\"内边距是透明的\",{\"1\":{\"15\":1}}],[\"样式之间会层叠\",{\"1\":{\"489\":1}}],[\"样式之间会互相影响\",{\"1\":{\"486\":1}}],[\"样式之间不会有冲突\",{\"1\":{\"485\":1}}],[\"样式注释\",{\"1\":{\"333\":1}}],[\"样式\",{\"0\":{\"40\":1},\"1\":{\"15\":1}}],[\"由此可见对定义时存在的属性都进行这样的操作\",{\"1\":{\"713\":1}}],[\"由上到下依次调用\",{\"1\":{\"663\":1}}],[\"由\",{\"1\":{\"381\":1}}],[\"由客户端和服务器共同渐进地更新\",{\"1\":{\"151\":1}}],[\"由于http\",{\"1\":{\"865\":1}}],[\"由于http协议简单\",{\"1\":{\"230\":1}}],[\"由于小程序后台授权域名无法授权微信的域名\",{\"1\":{\"829\":1}}],[\"由于每个组件的职责单一\",{\"1\":{\"717\":1}}],[\"由于是同步的操作\",{\"1\":{\"616\":1}}],[\"由于后面的数据会覆盖前面的更改\",{\"1\":{\"616\":1}}],[\"由于业务变动\",{\"1\":{\"517\":1}}],[\"由于dom节点的移动操作开销是比较昂贵的\",{\"1\":{\"497\":1}}],[\"由于搜索引擎爬虫抓取工具可以直接查看完全渲染的页面\",{\"1\":{\"448\":1}}],[\"由于多了一层虚拟dom的计算\",{\"1\":{\"423\":1}}],[\"由于react\",{\"1\":{\"475\":2}}],[\"由于react是单向数据流\",{\"1\":{\"418\":1}}],[\"由于react的数据流动为单向的\",{\"1\":{\"413\":1}}],[\"由于内部表达方式的原因\",{\"1\":{\"376\":1}}],[\"由于\",{\"1\":{\"331\":1,\"377\":1,\"925\":1,\"945\":1}}],[\"由于只存在一个调用记录\",{\"1\":{\"253\":1}}],[\"由于设计错误\",{\"1\":{\"247\":1}}],[\"由于疏忽或错误造成程序未能释放已经不再使用的内存\",{\"1\":{\"247\":1}}],[\"由于需要设计加密以及多次握手\",{\"1\":{\"232\":1}}],[\"由于超载或停机维护\",{\"1\":{\"211\":1}}],[\"由于现在http默认开始长连接keep\",{\"1\":{\"191\":1}}],[\"由于没有返回ip地址\",{\"1\":{\"134\":1}}],[\"由于移动端大多数是使用webkit\",{\"1\":{\"90\":1}}],[\"由于其仍然是存在于页面上的\",{\"1\":{\"69\":1}}],[\"由于子元素设置了不同的\",{\"1\":{\"8\":1}}],[\"由粗细\",{\"1\":{\"15\":1}}],[\"一条产生式可以绑定多条语法导向操作\",{\"1\":{\"977\":1}}],[\"一组链式的\",{\"1\":{\"946\":1}}],[\"一秒之内可能执行几十次\",{\"1\":{\"844\":1}}],[\"一共发生了0次更新\",{\"1\":{\"769\":1}}],[\"一共发生了3次更新\",{\"1\":{\"769\":1}}],[\"一键copy的功能\",{\"1\":{\"738\":1}}],[\"一系列的http头组成\",{\"1\":{\"723\":1}}],[\"一切回到合并前的状态\",{\"1\":{\"690\":1}}],[\"一切皆为组件\",{\"1\":{\"533\":1}}],[\"一次操作时\",{\"1\":{\"709\":1}}],[\"一次性取值\",{\"1\":{\"467\":1}}],[\"一次发送一个报文\",{\"1\":{\"181\":1,\"183\":1}}],[\"一旦发生变化\",{\"1\":{\"796\":1}}],[\"一旦页面加载完成之后\",{\"1\":{\"606\":1}}],[\"一旦父组件发生渲染\",{\"1\":{\"589\":1}}],[\"一旦执行了setstate就会执行render方法\",{\"1\":{\"589\":1}}],[\"一旦一个组件实例被卸载\",{\"1\":{\"444\":1}}],[\"一旦验证通过\",{\"1\":{\"240\":1}}],[\"一套代码多端运行\",{\"1\":{\"423\":1}}],[\"一些函数如\",{\"1\":{\"391\":1}}],[\"一些魔术常量会根据使用位置而变化\",{\"1\":{\"308\":1}}],[\"一段\",{\"1\":{\"332\":1}}],[\"一样时\",{\"1\":{\"732\":1}}],[\"一样格外小心\",{\"1\":{\"381\":1}}],[\"一样的结构都可以以相同方式自动加载\",{\"1\":{\"351\":1}}],[\"一样\",{\"1\":{\"332\":1}}],[\"一样发送一个\",{\"1\":{\"244\":1}}],[\"一对多\",{\"1\":{\"183\":2}}],[\"一对一\",{\"1\":{\"183\":1}}],[\"一种通过同层的树节点进行比较的高效算法\",{\"1\":{\"731\":1}}],[\"一种简单的版本控制形式如下\",{\"1\":{\"675\":1}}],[\"一种不改变原类和使用继承的情况下\",{\"1\":{\"661\":1}}],[\"一种面向连接的\",{\"1\":{\"168\":1}}],[\"一种声明式环境记录\",{\"1\":{\"114\":1,\"115\":1}}],[\"一长串能够唯一地标记网络上的计算机的数字\",{\"1\":{\"138\":1}}],[\"一级缓存没有才回源站\",{\"1\":{\"135\":1}}],[\"一级缓存配置高一些\",{\"1\":{\"135\":1}}],[\"一个包含它\",{\"1\":{\"993\":1}}],[\"一个包含修饰符的对象\",{\"1\":{\"737\":1}}],[\"一个省略可选元素\",{\"1\":{\"993\":1}}],[\"一个完成记录\",{\"1\":{\"968\":1}}],[\"一个webpack项目会有一个或多个入口点\",{\"1\":{\"939\":1}}],[\"一个web项目只有一个html页面\",{\"1\":{\"606\":1}}],[\"一个节流函数具有以下要点\",{\"1\":{\"847\":1}}],[\"一个防抖函数具有以下要点\",{\"1\":{\"844\":1}}],[\"一个小程序存在多个界面\",{\"1\":{\"835\":1}}],[\"一个页面只会调用一次\",{\"1\":{\"828\":1}}],[\"一个用于创建用户界面的开源js框架\",{\"1\":{\"810\":1}}],[\"一个普通的js对象\",{\"1\":{\"788\":1}}],[\"一个库\",{\"1\":{\"717\":1}}],[\"一个git项目的初始有两个途径\",{\"1\":{\"688\":1}}],[\"一个标识符可在多个命名空间中定义\",{\"1\":{\"665\":1}}],[\"一个组件的显示形态可以由数据状态和外部参数所决定\",{\"1\":{\"612\":1,\"620\":1}}],[\"一个组件该有的特点如下\",{\"1\":{\"533\":1}}],[\"一个应用功能包含多个角色的代码\",{\"1\":{\"570\":1}}],[\"一个应用会存在路由的情况\",{\"1\":{\"449\":1}}],[\"一个数据的多个输入\",{\"1\":{\"467\":1}}],[\"一个函数都可以视为一个组件\",{\"1\":{\"470\":1}}],[\"一个函数\",{\"1\":{\"459\":1}}],[\"一个列表\",{\"1\":{\"428\":1}}],[\"一个链表\",{\"1\":{\"428\":1}}],[\"一个dom对应两个fiber\",{\"1\":{\"428\":1}}],[\"一个可变变量获取了一个普通变量的值作为这个可变变量的变量名\",{\"1\":{\"404\":1}}],[\"一个变量的变量名可以动态的设置和使用\",{\"1\":{\"404\":1}}],[\"一个字符串可以用\",{\"1\":{\"378\":1}}],[\"一个字符串\",{\"1\":{\"378\":1}}],[\"一个类\",{\"1\":{\"470\":1}}],[\"一个类只能继承一个基类\",{\"1\":{\"340\":1}}],[\"一个类可以在声明中用\",{\"1\":{\"340\":1}}],[\"一个类可以包含有属于自己的\",{\"1\":{\"336\":1}}],[\"一个叫私钥\",{\"1\":{\"236\":1}}],[\"一个叫公钥\",{\"1\":{\"236\":1}}],[\"一个值\",{\"1\":{\"227\":1}}],[\"一个url的结构解析如下\",{\"1\":{\"187\":1}}],[\"一个html文件的访问包含了多次的请求和响应\",{\"1\":{\"146\":1}}],[\"一个\",{\"1\":{\"132\":1,\"428\":1,\"970\":1}}],[\"一个ecmascript全局环境\",{\"1\":{\"96\":1}}],[\"一个realm由一组内置对象\",{\"1\":{\"96\":1}}],[\"一个agent记录器和一个执行线程\",{\"1\":{\"93\":1}}],[\"一个执行线程\",{\"1\":{\"92\":1}}],[\"一个盒子由四个部分组成\",{\"1\":{\"15\":1}}],[\"一层\",{\"1\":{\"80\":1}}],[\"一点间距\",{\"1\":{\"75\":1}}],[\"一般用于列表中元素的动画\",{\"1\":{\"632\":1}}],[\"一般用来做断点续传\",{\"1\":{\"212\":1}}],[\"一般在git仓库目录中\",{\"1\":{\"685\":1}}],[\"一般在\",{\"1\":{\"620\":1,\"622\":1}}],[\"一般遵循一些约定\",{\"1\":{\"479\":1}}],[\"一般如果函数组件调用state\",{\"1\":{\"458\":1}}],[\"一般情况下只要不是\",{\"1\":{\"973\":1}}],[\"一般情况下建议开启\",{\"1\":{\"895\":2}}],[\"一般情况下也会引发重绘\",{\"1\":{\"69\":1}}],[\"一般情况是在初始化的时候接受外部数据\",{\"1\":{\"466\":1}}],[\"一般情况\",{\"1\":{\"440\":1,\"480\":1}}],[\"一般文本存在英文的时候\",{\"1\":{\"89\":1}}],[\"一般配合transition过度使用\",{\"1\":{\"12\":1}}],[\"浏览器兼容性\",{\"0\":{\"933\":1}}],[\"浏览器必须等待任务完成后才能响应\",{\"1\":{\"885\":1}}],[\"浏览器什么都不会做\",{\"1\":{\"871\":1}}],[\"浏览器窗口大小改变后\",{\"1\":{\"846\":1}}],[\"浏览器不发出请求\",{\"1\":{\"607\":1}}],[\"浏览器重用了服务端输出的\",{\"1\":{\"450\":1}}],[\"浏览器开始进行渲染和节点对比\",{\"1\":{\"450\":1}}],[\"浏览器实现事件绑定的方式为让浏览器去拉取js文件执行\",{\"1\":{\"449\":1}}],[\"浏览器端渲染完成事件绑定\",{\"1\":{\"449\":1}}],[\"浏览器端自行处理\",{\"1\":{\"283\":1}}],[\"浏览器空闲的时候执行\",{\"1\":{\"428\":1}}],[\"浏览器没这么智能\",{\"1\":{\"422\":1}}],[\"浏览器和服务器在使用\",{\"1\":{\"231\":1}}],[\"浏览器行为跟踪\",{\"1\":{\"227\":1}}],[\"浏览器再发送data\",{\"1\":{\"220\":1}}],[\"浏览器先发送header\",{\"1\":{\"220\":1}}],[\"浏览器会将他们保存在本地的文件中\",{\"1\":{\"870\":1}}],[\"浏览器会将各层的信息发送给\",{\"1\":{\"192\":1}}],[\"浏览器会依次执行10次更新操作\",{\"1\":{\"709\":1}}],[\"浏览器会从构建dom树开始从头到尾执行一遍流程\",{\"1\":{\"422\":1}}],[\"浏览器会在request\",{\"1\":{\"226\":1}}],[\"浏览器会把http\",{\"1\":{\"220\":1}}],[\"浏览器会根据计时函数插值计算出来\",{\"1\":{\"13\":1}}],[\"浏览器发送\",{\"1\":{\"190\":1}}],[\"浏览器的浏览器身份标识字符串\",{\"1\":{\"224\":1}}],[\"浏览器的每次请求都需要与服务器建立一个tcp连接\",{\"1\":{\"153\":1}}],[\"浏览器的渲染引擎会根据标准之一的\",{\"1\":{\"15\":1}}],[\"浏览器与服务器只保持短暂的连接\",{\"1\":{\"146\":1,\"153\":1}}],[\"浏览器就得到了域名对应的\",{\"1\":{\"142\":1}}],[\"浏览器在获取网站域名的实际\",{\"1\":{\"141\":1}}],[\"浏览器缓存\",{\"1\":{\"141\":1}}],[\"浏览器宿主的全局对象window\",{\"1\":{\"101\":1}}],[\"浏览器\",{\"1\":{\"100\":1}}],[\"的定义\",{\"1\":{\"992\":2}}],[\"的定义从被定义非终结名称\",{\"1\":{\"992\":1}}],[\"的定义时\",{\"1\":{\"130\":1}}],[\"的单个文件\",{\"1\":{\"948\":1}}],[\"的方式\",{\"1\":{\"947\":1}}],[\"的方法\",{\"1\":{\"859\":1}}],[\"的方法或者函数组件\",{\"1\":{\"530\":1}}],[\"的其中一个强大的特性就是能通过\",{\"1\":{\"946\":1}}],[\"的预处理函数\",{\"1\":{\"946\":1}}],[\"的详细信息\",{\"1\":{\"942\":1}}],[\"的版本\",{\"1\":{\"934\":1}}],[\"的浏览器\",{\"1\":{\"933\":1}}],[\"的模块进行预加载\",{\"1\":{\"907\":1}}],[\"的延迟时间中的最大值\",{\"1\":{\"882\":1}}],[\"的场景下\",{\"1\":{\"942\":1}}],[\"的场景\",{\"1\":{\"811\":1}}],[\"的双向同步\",{\"1\":{\"811\":1}}],[\"的元素\",{\"1\":{\"775\":1}}],[\"的元素分配给变量\",{\"1\":{\"385\":1}}],[\"的重要组成部分\",{\"1\":{\"680\":1}}],[\"的重写\",{\"1\":{\"428\":1}}],[\"的批量更新策略会对其进行覆盖\",{\"1\":{\"616\":1}}],[\"的变化\",{\"1\":{\"607\":1}}],[\"的变量\",{\"1\":{\"408\":1}}],[\"的变量都将解析为值\",{\"1\":{\"370\":1}}],[\"的样式\",{\"1\":{\"596\":1}}],[\"的必要步骤\",{\"1\":{\"587\":1}}],[\"的渲染效率足以我们的业务日常\",{\"1\":{\"546\":1}}],[\"的第一个变量被编译为对象\",{\"1\":{\"537\":1}}],[\"的第一个变量被编译为字符串\",{\"1\":{\"537\":1}}],[\"的调用\",{\"1\":{\"520\":1}}],[\"的情况下使用\",{\"1\":{\"517\":1}}],[\"的新增特性\",{\"1\":{\"517\":1}}],[\"的上下文可能不会指向\",{\"1\":{\"508\":1}}],[\"的一部分\",{\"1\":{\"488\":1}}],[\"的一种不太灵活的替代方法\",{\"1\":{\"351\":1}}],[\"的形式来编写\",{\"1\":{\"487\":1}}],[\"的描述\",{\"1\":{\"421\":1}}],[\"的内容是\",{\"1\":{\"404\":2}}],[\"的写入不会修改最后一个数组元素\",{\"1\":{\"387\":1}}],[\"的数组和对象才能被展开\",{\"1\":{\"386\":1}}],[\"的逻辑\",{\"1\":{\"385\":1}}],[\"的转义序列将不会被替换\",{\"1\":{\"379\":1}}],[\"的字符集\",{\"1\":{\"378\":1}}],[\"的范围\",{\"1\":{\"373\":1}}],[\"的类型别名\",{\"1\":{\"395\":1}}],[\"的类型\",{\"1\":{\"383\":1}}],[\"的类型系统支持各种原子类型\",{\"1\":{\"366\":1}}],[\"的类尤其有用\",{\"1\":{\"343\":1}}],[\"的实例\",{\"1\":{\"362\":1}}],[\"的实现这些功能主要依赖于以下手段\",{\"1\":{\"234\":1}}],[\"的结果\",{\"1\":{\"357\":1}}],[\"的位设为\",{\"1\":{\"355\":4}}],[\"的完全限定名称\",{\"1\":{\"343\":1}}],[\"的构造函数\",{\"1\":{\"339\":1}}],[\"的话\",{\"1\":{\"339\":1}}],[\"的注释\",{\"1\":{\"333\":1}}],[\"的配置文件是\",{\"1\":{\"925\":1}}],[\"的配置\",{\"1\":{\"330\":1}}],[\"的功能包括输出丰富的文件类型\",{\"1\":{\"329\":1}}],[\"的\",{\"1\":{\"312\":1,\"369\":1,\"427\":1,\"461\":1,\"519\":1,\"538\":1,\"581\":1,\"601\":1,\"770\":1,\"878\":1,\"908\":1,\"928\":1,\"933\":1,\"946\":3,\"954\":1,\"956\":1}}],[\"的名字\",{\"1\":{\"308\":1}}],[\"的引用\",{\"1\":{\"250\":1}}],[\"的引用次数\",{\"1\":{\"250\":1}}],[\"的状态被正确应用\",{\"1\":{\"759\":1}}],[\"的状态\",{\"1\":{\"243\":1,\"244\":1}}],[\"的小型文本数据\",{\"1\":{\"227\":1}}],[\"的请求\",{\"1\":{\"224\":1}}],[\"的请求和响应消息中的消息头部分\",{\"1\":{\"223\":1}}],[\"的长度限制\",{\"1\":{\"218\":1}}],[\"的同时\",{\"1\":{\"197\":1}}],[\"的效果与函数\",{\"1\":{\"360\":1}}],[\"的效果\",{\"1\":{\"195\":1}}],[\"的这些机制\",{\"1\":{\"182\":1}}],[\"的四层结构则如下表所示\",{\"1\":{\"176\":1}}],[\"的文本格式\",{\"1\":{\"150\":1}}],[\"的另一个关键组成部分\",{\"1\":{\"135\":1}}],[\"的角色\",{\"1\":{\"133\":1}}],[\"的关键技术主要有内容存储和分发技术\",{\"1\":{\"132\":1}}],[\"的组合\",{\"1\":{\"128\":1,\"983\":1}}],[\"的外部作用域\",{\"1\":{\"115\":1}}],[\"的newtarget参数的值\",{\"1\":{\"114\":1}}],[\"的标识符\",{\"1\":{\"107\":1}}],[\"的区别\",{\"0\":{\"625\":1},\"1\":{\"58\":1}}],[\"的父元素的高度\",{\"1\":{\"57\":1}}],[\"的值为\",{\"1\":{\"616\":1}}],[\"的值是\",{\"1\":{\"520\":1}}],[\"的值是在\",{\"1\":{\"315\":1}}],[\"的值也被修改\",{\"1\":{\"399\":1}}],[\"的值来自于父组件或者祖先组件的\",{\"1\":{\"589\":1}}],[\"的值来直接更改数组的值\",{\"1\":{\"387\":1}}],[\"的值来决定的\",{\"1\":{\"36\":1}}],[\"的值取决于它在脚本中使用的行\",{\"1\":{\"308\":1}}],[\"的值\",{\"1\":{\"200\":1,\"243\":1}}],[\"的值等于\",{\"1\":{\"36\":1}}],[\"的宽高已知\",{\"1\":{\"23\":1}}],[\"的时候\",{\"1\":{\"15\":1,\"508\":1,\"597\":1,\"627\":1}}],[\"的距离也就不一样\",{\"1\":{\"8\":1}}],[\"lcp\",{\"1\":{\"879\":2,\"890\":1}}],[\"l\",{\"1\":{\"752\":1,\"753\":1,\"792\":1}}],[\"l是vue的列表渲染函数\",{\"1\":{\"752\":1}}],[\"lng\",{\"1\":{\"532\":4}}],[\"ll\",{\"1\":{\"379\":1}}],[\"lucy\",{\"1\":{\"261\":3}}],[\"lookahead\",{\"1\":{\"997\":5}}],[\"loop\",{\"1\":{\"916\":3,\"917\":3,\"918\":3}}],[\"loopcontinues为false\",{\"1\":{\"122\":1}}],[\"loading=\",{\"1\":{\"861\":1,\"911\":1}}],[\"loading\",{\"1\":{\"858\":2,\"911\":1,\"939\":1}}],[\"loader时额外的打包规则\",{\"1\":{\"449\":2}}],[\"loader进行打包\",{\"1\":{\"449\":2}}],[\"loader\",{\"0\":{\"945\":1},\"1\":{\"449\":4,\"909\":2,\"928\":4,\"932\":4,\"937\":3,\"946\":14,\"947\":4,\"948\":11,\"949\":17,\"953\":2,\"954\":1}}],[\"loadedmodules\",{\"1\":{\"96\":1}}],[\"lodash\",{\"1\":{\"527\":1}}],[\"lodash的\",{\"1\":{\"277\":1}}],[\"location\",{\"1\":{\"601\":1,\"604\":1,\"605\":1,\"608\":10,\"609\":1,\"895\":4,\"906\":1}}],[\"location=\",{\"1\":{\"449\":1}}],[\"local\",{\"1\":{\"517\":1}}],[\"localstorage\",{\"1\":{\"280\":1,\"287\":2,\"480\":2}}],[\"localhost\",{\"1\":{\"217\":2,\"895\":4}}],[\"long\",{\"1\":{\"320\":1}}],[\"logparameter\",{\"1\":{\"662\":2}}],[\"login\",{\"1\":{\"606\":4,\"829\":2,\"909\":1}}],[\"logger\",{\"0\":{\"574\":1},\"1\":{\"572\":2,\"574\":4}}],[\"logerrortomyservice\",{\"1\":{\"500\":1}}],[\"log\",{\"1\":{\"111\":1,\"123\":2,\"250\":1,\"251\":3,\"258\":2,\"259\":2,\"260\":3,\"261\":5,\"262\":2,\"263\":3,\"264\":1,\"270\":4,\"421\":1,\"441\":2,\"449\":4,\"459\":2,\"466\":1,\"479\":2,\"480\":1,\"504\":1,\"505\":6,\"508\":2,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"526\":4,\"527\":1,\"538\":1,\"575\":2,\"588\":4,\"603\":1,\"604\":1,\"605\":1,\"608\":1,\"609\":1,\"614\":2,\"615\":2,\"616\":3,\"620\":1,\"626\":2,\"627\":4,\"662\":6,\"663\":4,\"672\":2,\"878\":1,\"884\":3,\"956\":1}}],[\"l为亮度\",{\"1\":{\"48\":1}}],[\"like\",{\"1\":{\"928\":2}}],[\"ligthouse可以对网页的各项性能进行评分\",{\"1\":{\"888\":1}}],[\"lighthouse\",{\"1\":{\"886\":1,\"888\":1}}],[\"lightpink\",{\"1\":{\"78\":1}}],[\"lightblue\",{\"1\":{\"78\":1,\"82\":1,\"83\":1}}],[\"lightgray\",{\"1\":{\"75\":1}}],[\"li\",{\"1\":{\"851\":4,\"916\":4,\"917\":4,\"918\":4}}],[\"liu\",{\"1\":{\"646\":1}}],[\"li>\",{\"1\":{\"542\":1,\"594\":3,\"595\":3,\"851\":6}}],[\"literally\",{\"1\":{\"382\":2}}],[\"listeners\",{\"1\":{\"696\":2}}],[\"listening\",{\"1\":{\"449\":4}}],[\"listen\",{\"1\":{\"449\":4,\"895\":2}}],[\"list\",{\"1\":{\"37\":3,\"385\":1,\"526\":2,\"527\":4,\"573\":2,\"752\":2,\"753\":2,\"754\":1,\"769\":3,\"851\":5,\"978\":1}}],[\"lin\",{\"1\":{\"645\":1,\"646\":3}}],[\"lindaidai\",{\"1\":{\"465\":1,\"466\":1}}],[\"linux\",{\"1\":{\"224\":1}}],[\"link\",{\"0\":{\"596\":1},\"1\":{\"35\":1,\"593\":1}}],[\"lineterminator\",{\"1\":{\"998\":3}}],[\"lines\",{\"1\":{\"382\":2}}],[\"lineheight\",{\"1\":{\"90\":2}}],[\"linear\",{\"1\":{\"11\":1,\"13\":1,\"49\":1,\"52\":3,\"90\":4}}],[\"line\",{\"1\":{\"7\":1,\"32\":1,\"35\":1,\"37\":1,\"79\":1,\"80\":1,\"81\":1,\"87\":1,\"89\":2,\"90\":4,\"308\":2,\"326\":1}}],[\"largest\",{\"1\":{\"890\":1}}],[\"lazy修饰符\",{\"1\":{\"699\":1}}],[\"lazy\",{\"1\":{\"559\":1,\"699\":1,\"861\":1,\"939\":1}}],[\"lazy组件实现代码拆分功能\",{\"1\":{\"559\":1}}],[\"lat\",{\"1\":{\"532\":4}}],[\"lang\",{\"1\":{\"483\":1}}],[\"language\",{\"1\":{\"223\":1,\"224\":2}}],[\"lanes\",{\"1\":{\"428\":1}}],[\"label>\",{\"1\":{\"413\":1}}],[\"lasteffect\",{\"1\":{\"428\":1}}],[\"last\",{\"1\":{\"35\":3,\"226\":2,\"244\":1,\"330\":1,\"332\":1,\"359\":2,\"449\":2,\"868\":1}}],[\"layout\",{\"1\":{\"15\":1,\"37\":1,\"81\":2,\"192\":1,\"880\":1,\"890\":1}}],[\"less\",{\"1\":{\"936\":1}}],[\"level\",{\"1\":{\"895\":2}}],[\"leave\",{\"1\":{\"527\":1}}],[\"leak\",{\"1\":{\"247\":1}}],[\"length<pagesize\",{\"1\":{\"292\":1}}],[\"length\",{\"1\":{\"224\":2,\"254\":1,\"270\":6,\"538\":2,\"549\":3,\"645\":1,\"760\":1,\"792\":1,\"895\":2}}],[\"lexicaldeclarationexpressionopt\",{\"1\":{\"122\":1}}],[\"lexical\",{\"1\":{\"114\":1}}],[\"lexicalenvironment\",{\"1\":{\"95\":1}}],[\"lexdeclarations\",{\"1\":{\"107\":2}}],[\"let\",{\"1\":{\"103\":6,\"113\":1,\"120\":1,\"122\":1,\"123\":4,\"254\":7,\"259\":1,\"261\":3,\"262\":3,\"263\":1,\"277\":2,\"278\":1,\"292\":2,\"416\":1,\"480\":2,\"526\":4,\"527\":1,\"538\":7,\"549\":1,\"575\":2,\"608\":1,\"609\":3,\"626\":1,\"645\":2,\"646\":4,\"662\":1,\"792\":2,\"845\":1,\"848\":2,\"916\":8,\"917\":8,\"918\":9,\"955\":1,\"972\":2,\"978\":2}}],[\"letter\",{\"1\":{\"35\":1,\"37\":1}}],[\"left和bottom\",{\"1\":{\"57\":1}}],[\"left\",{\"1\":{\"25\":1,\"26\":2,\"27\":1,\"33\":1,\"71\":1,\"75\":5,\"76\":2,\"78\":4,\"79\":4,\"80\":9,\"81\":3,\"82\":3,\"83\":3,\"90\":4,\"285\":2,\"355\":1,\"644\":1,\"699\":1}}],[\"而yeild和return可以作为标识符使用\",{\"1\":{\"986\":1}}],[\"而插件则可以用于执行范围更广的任务\",{\"1\":{\"953\":1}}],[\"而其他未变化的模块则可以继续使用缓存中的版本\",{\"1\":{\"942\":1}}],[\"而其余的帧\",{\"1\":{\"13\":1}}],[\"而settimeout只能设置一个固定时间间隔\",{\"1\":{\"916\":1}}],[\"而super\",{\"1\":{\"626\":1}}],[\"而传入props的则都能正常访问\",{\"1\":{\"627\":1}}],[\"而第二个参数是一个回调函数\",{\"1\":{\"612\":1}}],[\"而数据状态就是state\",{\"1\":{\"612\":1,\"620\":1}}],[\"而应用功能对应的就是用户界面的交互模块\",{\"1\":{\"570\":1}}],[\"而应用程序之间是几乎无法实现代码的抽象共享的\",{\"1\":{\"177\":1}}],[\"而constructor中bind事件与定义阶段使用箭头函数绑定这两种形式只会生成一个方法实例\",{\"1\":{\"557\":1}}],[\"而对组件进行拆分后\",{\"1\":{\"551\":1}}],[\"而对接收方\",{\"1\":{\"181\":1}}],[\"而写key则涉及到了节点的增和删\",{\"1\":{\"542\":1}}],[\"而元素key属性的作用是用于判断元素是新创建的还是被移动的元素\",{\"1\":{\"542\":1}}],[\"而用react实现上述功能则如下\",{\"1\":{\"532\":1}}],[\"而无需像一样通过深度比较的方式比较\",{\"1\":{\"527\":1,\"558\":1}}],[\"而如果使用useeffect后\",{\"1\":{\"520\":1}}],[\"而方式三\",{\"1\":{\"514\":1}}],[\"而并不会渲染那些发生崩溃的子组件树\",{\"1\":{\"500\":1}}],[\"而diff算法就是更高效地通过对比新旧virtual\",{\"1\":{\"492\":1}}],[\"而在settimeout或者原生dom事件中\",{\"1\":{\"616\":1}}],[\"而在react中使用到了suspense\",{\"1\":{\"559\":1}}],[\"而在react中\",{\"1\":{\"483\":1}}],[\"而在websocket出现之前\",{\"1\":{\"195\":1}}],[\"而像函数式创建和类组件创建的区别主要在于需要创建的组件是否需要为有状态组件\",{\"1\":{\"475\":1}}],[\"而函数组件\",{\"1\":{\"461\":1}}],[\"而只可能是被重新创建\",{\"1\":{\"444\":1}}],[\"而通过vnode\",{\"1\":{\"422\":1,\"709\":1}}],[\"而真实dom会频繁重排与重绘\",{\"1\":{\"422\":1}}],[\"而\",{\"1\":{\"409\":1,\"622\":1,\"886\":1}}],[\"而大多数其他编程语言是从右到左的\",{\"1\":{\"357\":1}}],[\"而脚本中此时并无输出的意图\",{\"1\":{\"330\":1}}],[\"而任何起始和结束标记之外的部分都会被\",{\"1\":{\"330\":1}}],[\"而常规常量则在运行时解析\",{\"1\":{\"308\":1}}],[\"而number采用的是ieee754规范中64位双精度浮点数编码\",{\"1\":{\"303\":1}}],[\"而实例则包含一个原型对象的指针\",{\"1\":{\"258\":1}}],[\"而把a称为\",{\"1\":{\"256\":1}}],[\"而强制缓存不需要发送请求到服务端\",{\"1\":{\"226\":1}}],[\"而不会影响延迟关键事件\",{\"1\":{\"429\":1}}],[\"而不仅仅是函数\",{\"1\":{\"359\":1}}],[\"而不仅仅是参数值的长度\",{\"1\":{\"218\":1}}],[\"而不需要重新加载和执行模块代码\",{\"1\":{\"941\":1}}],[\"而不需要get和set方法\",{\"1\":{\"349\":1}}],[\"而不需要再次编写相同的代码\",{\"1\":{\"256\":1}}],[\"而不考虑它们的顺序\",{\"1\":{\"324\":1}}],[\"而不是\",{\"1\":{\"879\":1}}],[\"而不是经过的时间来指定缓存的生命周期\",{\"1\":{\"865\":1}}],[\"而不是某个属性\",{\"1\":{\"819\":1}}],[\"而不是类的实例\",{\"1\":{\"652\":1}}],[\"而不是被包裹的组件\",{\"1\":{\"479\":1}}],[\"而不是去修改已有的值\",{\"1\":{\"418\":1}}],[\"而不是你可能以为的\",{\"1\":{\"384\":1}}],[\"而不是将其打印出来\",{\"1\":{\"329\":1}}],[\"而不是作为方法调用\",{\"1\":{\"270\":1}}],[\"而不是构造函数内部\",{\"1\":{\"259\":1}}],[\"而不是自动计算\",{\"1\":{\"81\":1}}],[\"而且路由不一定作为菜单显示\",{\"1\":{\"702\":2}}],[\"而且我们的组件重渲染的时候\",{\"1\":{\"520\":1}}],[\"而且独一无二的\",{\"1\":{\"238\":1}}],[\"而且在get请求中发送有效负载可能会导致一些现有的实现拒绝该请求\",{\"1\":{\"217\":1}}],[\"而且不用按照顺序一一对应\",{\"1\":{\"149\":1}}],[\"而post没有限制\",{\"1\":{\"216\":1}}],[\"而post没有\",{\"1\":{\"216\":1}}],[\"而post中的参数不会被保留\",{\"1\":{\"216\":1}}],[\"而post支持多种编码方式\",{\"1\":{\"216\":1}}],[\"而post不会\",{\"1\":{\"216\":1}}],[\"而post不可以\",{\"1\":{\"216\":1}}],[\"而post会再次提交请求\",{\"1\":{\"216\":1}}],[\"而https采用非对称加密解决秘钥交换的问题\",{\"1\":{\"237\":1}}],[\"而https的出现正是解决这些问题\",{\"1\":{\"233\":1}}],[\"而http\",{\"1\":{\"198\":1}}],[\"而http2\",{\"1\":{\"148\":1}}],[\"而这也正是\",{\"1\":{\"427\":1}}],[\"而这些在\",{\"1\":{\"182\":1}}],[\"而这种方式实现视觉差动的原理如下\",{\"1\":{\"8\":1}}],[\"而消息又由一个或多个帧组成\",{\"1\":{\"150\":1}}],[\"而非按选项拆分\",{\"1\":{\"813\":1}}],[\"而非设计一个复杂的执行过程\",{\"1\":{\"293\":1}}],[\"而非示例对象本身\",{\"1\":{\"267\":1}}],[\"而非有序并阻塞的\",{\"1\":{\"153\":1}}],[\"而非\",{\"1\":{\"150\":1}}],[\"而是将这10次更新内容保存在本地的一个js对象中\",{\"1\":{\"709\":1}}],[\"而是将这10次更新的diff内容保存到本地的一个js对象中\",{\"1\":{\"422\":1}}],[\"而是把代码仓库完整地镜像下来\",{\"1\":{\"684\":1}}],[\"而是把所有的事件绑定到结构的最外层\",{\"1\":{\"504\":1}}],[\"而是指向其他对象\",{\"1\":{\"508\":1}}],[\"而是指一个由ftp\",{\"1\":{\"168\":1}}],[\"而是由第三方库提供\",{\"1\":{\"488\":1}}],[\"而是表示这些生命周期的代码可能在未来的\",{\"1\":{\"445\":1}}],[\"而是返回\",{\"1\":{\"344\":1}}],[\"而是应用程序分配某段内存后\",{\"1\":{\"247\":1}}],[\"而是先发送一个ack包先告诉客户端收到关闭连接的请求\",{\"1\":{\"244\":1}}],[\"而是完整的\",{\"1\":{\"230\":1}}],[\"而是一个cname\",{\"1\":{\"133\":1}}],[\"而是访问离他\",{\"1\":{\"132\":1}}],[\"而与父元素的height无关\",{\"1\":{\"57\":1}}],[\"默认插槽\",{\"1\":{\"806\":1}}],[\"默认为master分支\",{\"1\":{\"689\":1}}],[\"默认从0开始累加\",{\"1\":{\"654\":1}}],[\"默认传递参数就是dispatch\",{\"1\":{\"567\":1}}],[\"默认参数\",{\"0\":{\"322\":1}}],[\"默认垂直方向\",{\"1\":{\"292\":1}}],[\"默认端口也不一样\",{\"1\":{\"232\":1}}],[\"默认支持长连接\",{\"1\":{\"147\":1}}],[\"默认定位\",{\"1\":{\"57\":1}}],[\"默认0\",{\"1\":{\"49\":1,\"654\":1}}],[\"默认ease\",{\"1\":{\"49\":1}}],[\"默认情况返回true\",{\"1\":{\"440\":1}}],[\"默认情况是padding\",{\"1\":{\"44\":1}}],[\"默认情况下绑定事件行为会被视为动态绑定\",{\"1\":{\"818\":1}}],[\"默认情况下的dispatch\",{\"1\":{\"573\":1}}],[\"默认情况下返回true表示重新渲染\",{\"1\":{\"548\":1}}],[\"默认情况下浏览器字体大小为16px\",{\"1\":{\"59\":1}}],[\"默认情况下\",{\"1\":{\"15\":1,\"321\":1,\"520\":1}}],[\"默认属性\",{\"1\":{\"43\":1}}],[\"默认是\",{\"1\":{\"13\":7}}],[\"默认值为undefined\",{\"1\":{\"96\":1}}],[\"默认值为\",{\"1\":{\"50\":1}}],[\"默认值\",{\"1\":{\"7\":1,\"18\":1,\"46\":1}}],[\"mvvm\",{\"1\":{\"811\":1}}],[\"mvc\",{\"0\":{\"569\":1}}],[\"m\",{\"1\":{\"689\":1,\"690\":1}}],[\"mb\",{\"1\":{\"387\":1}}],[\"multiple\",{\"1\":{\"382\":2,\"406\":1}}],[\"mymixin\",{\"1\":{\"789\":2}}],[\"myref\",{\"1\":{\"580\":3,\"581\":3,\"582\":3,\"583\":3}}],[\"mypage\",{\"1\":{\"560\":4}}],[\"myawesome\",{\"1\":{\"559\":1}}],[\"mycomponentwithpersistentdata\",{\"1\":{\"480\":1}}],[\"mycomponent2\",{\"1\":{\"480\":2}}],[\"mycomponent\",{\"1\":{\"480\":1,\"500\":1,\"565\":1,\"580\":1,\"581\":1,\"582\":1}}],[\"mycookie\",{\"1\":{\"407\":3}}],[\"myclass2\",{\"1\":{\"351\":1}}],[\"myclass1\",{\"1\":{\"351\":1}}],[\"myclass\",{\"1\":{\"350\":4,\"362\":9,\"416\":1}}],[\"my\",{\"1\":{\"381\":2,\"399\":1,\"789\":1,\"954\":3}}],[\"myname\",{\"1\":{\"381\":2}}],[\"myinterface\",{\"1\":{\"362\":3}}],[\"myfunction\",{\"1\":{\"324\":1}}],[\"mybind\",{\"1\":{\"272\":1}}],[\"measure\",{\"1\":{\"884\":1}}],[\"mercurialhg是一种轻量级分布式版本控制系统\",{\"1\":{\"683\":1}}],[\"mergedataorfn\",{\"1\":{\"793\":1}}],[\"mergefield\",{\"1\":{\"792\":6}}],[\"mergeoptions\",{\"1\":{\"792\":4}}],[\"merge\",{\"1\":{\"527\":1,\"690\":2}}],[\"merge效率更高\",{\"1\":{\"527\":1}}],[\"meet\",{\"1\":{\"627\":1}}],[\"me<\",{\"1\":{\"500\":1}}],[\"me\",{\"1\":{\"406\":2,\"519\":2,\"520\":2}}],[\"message\",{\"1\":{\"287\":1,\"326\":2,\"359\":2,\"612\":4,\"614\":4,\"615\":4,\"662\":2,\"689\":2}}],[\"memo用来缓存组件的渲染\",{\"1\":{\"550\":1}}],[\"memo\",{\"0\":{\"550\":1},\"1\":{\"547\":1,\"550\":4}}],[\"memoizedstate\",{\"1\":{\"428\":1}}],[\"memoizedprops\",{\"1\":{\"428\":1}}],[\"memoize\",{\"1\":{\"278\":1}}],[\"memory\",{\"1\":{\"247\":1}}],[\"methods的初始化\",{\"1\":{\"796\":1}}],[\"methods\",{\"0\":{\"669\":1},\"1\":{\"774\":1,\"789\":2,\"793\":3}}],[\"methods可以直接声明为类的成员方法\",{\"1\":{\"667\":1}}],[\"method=\",{\"1\":{\"406\":2}}],[\"method\",{\"1\":{\"270\":4,\"308\":1,\"325\":1,\"662\":2,\"663\":1,\"669\":1,\"796\":1}}],[\"media\",{\"1\":{\"56\":2,\"59\":3}}],[\"media查询\",{\"1\":{\"56\":1}}],[\"mountcomponent渲染组件\",{\"1\":{\"796\":1}}],[\"mounted\",{\"0\":{\"777\":1},\"1\":{\"672\":1,\"759\":1,\"769\":1}}],[\"mousehover等\",{\"1\":{\"844\":1}}],[\"mousemove\",{\"1\":{\"844\":1}}],[\"mouse\",{\"1\":{\"527\":2}}],[\"mousein\",{\"1\":{\"527\":3}}],[\"motion\",{\"1\":{\"631\":1}}],[\"movies\",{\"1\":{\"542\":3}}],[\"moved\",{\"1\":{\"826\":1}}],[\"move\",{\"1\":{\"496\":1,\"653\":1}}],[\"more\",{\"1\":{\"292\":2}}],[\"mon\",{\"1\":{\"223\":1}}],[\"modifiers\",{\"1\":{\"737\":1}}],[\"modified值放入if\",{\"1\":{\"868\":1}}],[\"modified的值\",{\"1\":{\"226\":1}}],[\"modified\",{\"1\":{\"223\":1,\"224\":2,\"226\":4,\"349\":1,\"685\":1,\"867\":2,\"868\":2,\"869\":1}}],[\"modification\",{\"1\":{\"662\":2}}],[\"moduleitem\",{\"1\":{\"986\":1}}],[\"modulebodyopt\",{\"1\":{\"986\":1}}],[\"modulegraph\",{\"1\":{\"937\":2}}],[\"modules中的js文件\",{\"1\":{\"449\":2}}],[\"modules\",{\"0\":{\"935\":1},\"1\":{\"449\":2,\"487\":1,\"909\":1,\"938\":1,\"948\":1,\"949\":4}}],[\"module\",{\"0\":{\"487\":1},\"1\":{\"449\":4,\"484\":1,\"487\":1,\"489\":1,\"858\":3,\"895\":1,\"907\":1,\"909\":2,\"926\":1,\"931\":1,\"946\":1,\"948\":3,\"949\":1,\"953\":2,\"954\":2,\"956\":1,\"986\":1}}],[\"mode=\",{\"1\":{\"634\":1}}],[\"model指令\",{\"1\":{\"811\":1}}],[\"model\",{\"1\":{\"15\":1,\"811\":1}}],[\"mode\",{\"1\":{\"13\":1,\"51\":1,\"428\":1,\"449\":2,\"926\":1,\"1012\":1}}],[\"mozilla\",{\"1\":{\"223\":3,\"224\":1}}],[\"moz\",{\"1\":{\"90\":1}}],[\"mixix\",{\"1\":{\"792\":1}}],[\"mixin进行全局混入\",{\"1\":{\"790\":1}}],[\"mixins\",{\"1\":{\"789\":1,\"792\":3}}],[\"mixin混入\",{\"0\":{\"787\":1}}],[\"mixin\",{\"1\":{\"639\":1,\"787\":1,\"790\":1,\"792\":3}}],[\"mixed\",{\"0\":{\"392\":1},\"1\":{\"369\":1,\"392\":1,\"428\":1,\"549\":4}}],[\"mini\",{\"1\":{\"928\":1}}],[\"minins\",{\"1\":{\"792\":1}}],[\"minratio\",{\"1\":{\"895\":1}}],[\"minheight\",{\"1\":{\"485\":1}}],[\"min\",{\"1\":{\"56\":1,\"372\":1,\"895\":2,\"916\":1,\"917\":1,\"918\":1}}],[\"middlewareapi\",{\"1\":{\"575\":3}}],[\"middlewares\",{\"1\":{\"575\":2}}],[\"middleware\",{\"1\":{\"571\":1,\"575\":2}}],[\"middle\",{\"1\":{\"28\":1,\"32\":1,\"78\":2,\"82\":3,\"83\":3,\"699\":1}}],[\"manifest的生成与使用\",{\"1\":{\"942\":1}}],[\"manifest的主要作用\",{\"1\":{\"942\":1}}],[\"manifest帮助webpack的运行时\",{\"1\":{\"942\":1}}],[\"manifest包含了模块之间的映射关系\",{\"1\":{\"942\":1}}],[\"manifest\",{\"0\":{\"942\":1}}],[\"manager\",{\"1\":{\"928\":1}}],[\"many\",{\"1\":{\"320\":1}}],[\"major\",{\"1\":{\"646\":1}}],[\"mapdispatchtoprops\",{\"0\":{\"567\":1},\"1\":{\"565\":2,\"567\":1}}],[\"mapstatetoprops\",{\"0\":{\"566\":1},\"1\":{\"565\":2,\"566\":1}}],[\"map>\",{\"1\":{\"532\":1}}],[\"map2\",{\"1\":{\"526\":4}}],[\"map1\",{\"1\":{\"526\":4}}],[\"map\",{\"1\":{\"526\":5,\"527\":1,\"532\":6,\"538\":1,\"542\":1,\"575\":1,\"635\":1}}],[\"map等可显式绑定this值的api\",{\"1\":{\"270\":1}}],[\"math\",{\"1\":{\"496\":3,\"916\":2,\"917\":2,\"918\":2}}],[\"match是否一致\",{\"1\":{\"869\":1}}],[\"match标头发送到服务器\",{\"1\":{\"869\":1}}],[\"matches\",{\"1\":{\"505\":1}}],[\"match表达式和\",{\"1\":{\"313\":1}}],[\"match的header会将上次返回的etag发送给服务器\",{\"1\":{\"226\":1}}],[\"match等缓存头来控制缓存策略\",{\"1\":{\"147\":1}}],[\"match\",{\"0\":{\"313\":1},\"1\":{\"147\":1,\"223\":1,\"224\":4,\"226\":1,\"313\":6,\"597\":2,\"600\":1,\"603\":1,\"609\":1,\"867\":1,\"868\":1}}],[\"marker\",{\"1\":{\"532\":5}}],[\"markup\",{\"1\":{\"496\":1}}],[\"margin和左右两边留出10px的间隔\",{\"1\":{\"79\":1}}],[\"margin\",{\"0\":{\"78\":1,\"79\":1,\"80\":1},\"1\":{\"8\":3,\"15\":2,\"16\":2,\"17\":2,\"25\":1,\"26\":2,\"33\":3,\"70\":1,\"75\":2,\"77\":3,\"78\":2,\"79\":1,\"80\":6,\"82\":1,\"485\":1}}],[\"making\",{\"1\":{\"322\":1}}],[\"makeyogurt\",{\"1\":{\"322\":2}}],[\"malloc方法用来申请内存\",{\"1\":{\"247\":1}}],[\"malloc\",{\"1\":{\"247\":1}}],[\"macintosh\",{\"1\":{\"223\":1}}],[\"mac\",{\"1\":{\"165\":2,\"223\":1}}],[\"mac地址\",{\"1\":{\"163\":1}}],[\"main>\",{\"1\":{\"594\":1,\"595\":1}}],[\"main\",{\"1\":{\"79\":3,\"80\":6,\"81\":3,\"906\":2,\"926\":1,\"946\":1}}],[\"maxindex<\",{\"1\":{\"496\":1}}],[\"maxindex=0\",{\"1\":{\"496\":1}}],[\"maxindex\",{\"1\":{\"496\":4}}],[\"maximum\",{\"1\":{\"55\":2}}],[\"max\",{\"1\":{\"56\":2,\"59\":3,\"223\":1,\"372\":1,\"496\":3,\"763\":1,\"866\":2}}],[\"ms`\",{\"1\":{\"480\":1}}],[\"ms\",{\"1\":{\"13\":1,\"895\":2}}],[\"8k\",{\"1\":{\"895\":2}}],[\"83\",{\"1\":{\"372\":1}}],[\"8859\",{\"1\":{\"316\":1}}],[\"80\",{\"1\":{\"224\":1,\"895\":2}}],[\"8080\",{\"1\":{\"199\":1}}],[\"8位的字节\",{\"1\":{\"224\":1}}],[\"8\",{\"0\":{\"314\":1,\"389\":2},\"1\":{\"12\":1,\"13\":1,\"223\":1,\"224\":1,\"306\":2,\"313\":1,\"320\":1,\"324\":3,\"336\":1,\"340\":1,\"342\":1,\"343\":1,\"344\":2,\"345\":1,\"347\":1,\"348\":1,\"349\":1,\"350\":2,\"351\":2,\"357\":3,\"372\":1,\"383\":1,\"386\":1,\"394\":1,\"395\":1,\"403\":3,\"517\":1,\"696\":1,\"895\":1,\"928\":2,\"994\":1,\"1011\":1}}],[\"倾斜或平移给定元素\",{\"1\":{\"50\":1}}],[\"倾斜\",{\"1\":{\"12\":2,\"50\":1}}],[\"包装成组件的props\",{\"1\":{\"565\":1}}],[\"包装显示名字以便于调试\",{\"1\":{\"479\":1}}],[\"包住\",{\"1\":{\"508\":1}}],[\"包括模块的id\",{\"1\":{\"942\":1}}],[\"包括读取入口文件\",{\"1\":{\"932\":1}}],[\"包括第三方组件\",{\"1\":{\"790\":1}}],[\"包括展示组件和容器组件\",{\"1\":{\"570\":1}}],[\"包括事件注册\",{\"1\":{\"503\":1}}],[\"包括几个函数可以判断变量的类型\",{\"1\":{\"409\":1}}],[\"包括静态类方法\",{\"1\":{\"391\":1}}],[\"包括其自身\",{\"1\":{\"377\":1}}],[\"包括类\",{\"1\":{\"351\":1}}],[\"包括文件\",{\"1\":{\"280\":1}}],[\"包括使用事件监听addeventlistener监听的时候\",{\"1\":{\"251\":1}}],[\"包括我们之前所说的闭包\",{\"1\":{\"251\":1}}],[\"包括\",{\"1\":{\"191\":1,\"312\":1,\"890\":1,\"953\":1}}],[\"包括应用层\",{\"1\":{\"169\":2}}],[\"包括了建立检查点和恢复方案的方法\",{\"1\":{\"160\":1}}],[\"包括的一系列参数\",{\"1\":{\"983\":1}}],[\"包括的\",{\"1\":{\"129\":1}}],[\"包括一个执行上下文栈\",{\"1\":{\"93\":1}}],[\"包括平移\",{\"1\":{\"8\":1}}],[\"包含可选符号的替代项实际上指定了两个代换式\",{\"1\":{\"993\":1}}],[\"包含文本节点或其他内嵌级文本元素子元素的块级元素\",{\"1\":{\"879\":1}}],[\"包含小程序的图标\",{\"1\":{\"838\":1}}],[\"包含组件options的data\",{\"1\":{\"789\":1}}],[\"包含组件中任意选项功能\",{\"1\":{\"788\":1}}],[\"包含余下属性的对象\",{\"1\":{\"737\":1}}],[\"包含以下的数据成员\",{\"1\":{\"649\":1}}],[\"包含功能模块中所有的react组件\",{\"1\":{\"570\":1}}],[\"包含有可用\",{\"1\":{\"406\":1}}],[\"包含末尾换行符的结束标记的例子\",{\"1\":{\"332\":1}}],[\"包含所有在相关领域代码中的全局代码声明的绑定\",{\"1\":{\"117\":1}}],[\"包含内置绑定\",{\"1\":{\"117\":1}}],[\"包含一个realm\",{\"1\":{\"92\":1}}],[\"包含\",{\"1\":{\"18\":1}}],[\"包含了项目中所有依赖的模块\",{\"1\":{\"938\":1}}],[\"包含了元素的信息\",{\"1\":{\"428\":1}}],[\"包含了\",{\"1\":{\"17\":1}}],[\"包含四个常用的功能\",{\"1\":{\"12\":1}}],[\"333\",{\"1\":{\"542\":1}}],[\"31\",{\"1\":{\"224\":2}}],[\"348\",{\"1\":{\"224\":1}}],[\"36\",{\"1\":{\"223\":1}}],[\"360deg\",{\"1\":{\"13\":2}}],[\"3xx\",{\"0\":{\"209\":1}}],[\"3x图\",{\"1\":{\"56\":1}}],[\"3\",{\"1\":{\"103\":1,\"123\":2,\"130\":1,\"206\":1,\"250\":3,\"253\":6,\"254\":8,\"258\":2,\"260\":1,\"263\":2,\"304\":1,\"323\":1,\"324\":1,\"330\":1,\"350\":1,\"367\":1,\"374\":2,\"383\":1,\"384\":1,\"385\":2,\"386\":7,\"403\":3,\"496\":1,\"497\":7,\"526\":3,\"645\":1,\"928\":3,\"936\":1,\"939\":1,\"941\":2,\"942\":1,\"994\":1}}],[\"320px\",{\"1\":{\"59\":1}}],[\"375px\",{\"1\":{\"56\":1,\"59\":1}}],[\"30px\",{\"1\":{\"485\":1}}],[\"30\",{\"1\":{\"368\":1,\"605\":1}}],[\"304\",{\"1\":{\"212\":1}}],[\"307\",{\"1\":{\"209\":1}}],[\"305\",{\"1\":{\"209\":1}}],[\"303\",{\"1\":{\"209\":1}}],[\"302\",{\"1\":{\"209\":1,\"212\":1}}],[\"301\",{\"1\":{\"209\":1,\"212\":1}}],[\"3001\",{\"1\":{\"449\":6}}],[\"3000\",{\"1\":{\"449\":2,\"461\":2}}],[\"300\",{\"1\":{\"209\":1,\"635\":1}}],[\"300px\",{\"1\":{\"25\":1,\"83\":3,\"485\":1}}],[\"30deg\",{\"1\":{\"50\":1}}],[\"35deg\",{\"1\":{\"12\":1}}],[\"3a8ee6\",{\"1\":{\"11\":1}}],[\"3d视角示意图如下所示\",{\"1\":{\"8\":1}}],[\"3d\",{\"1\":{\"8\":6}}],[\"如manifest\",{\"1\":{\"942\":1}}],[\"如webpackmanifestplugin\",{\"1\":{\"942\":1}}],[\"如window\",{\"1\":{\"101\":2}}],[\"如javascript\",{\"1\":{\"932\":1}}],[\"如字体\",{\"1\":{\"906\":1}}],[\"如运行中线程和基础库的初始化\",{\"1\":{\"838\":1}}],[\"如定时器或播放音乐\",{\"1\":{\"825\":1}}],[\"如网络通讯状态\",{\"1\":{\"822\":1}}],[\"如游戏\",{\"1\":{\"813\":1}}],[\"如ssr\",{\"1\":{\"813\":1}}],[\"如defineprops自动推导类型\",{\"1\":{\"813\":1}}],[\"如div\",{\"1\":{\"538\":1}}],[\"如display\",{\"1\":{\"11\":1}}],[\"如异步请求\",{\"1\":{\"811\":1}}],[\"如拼接姓名\",{\"1\":{\"811\":1}}],[\"如import\",{\"1\":{\"941\":1}}],[\"如input\",{\"1\":{\"811\":2}}],[\"如if\",{\"1\":{\"147\":1}}],[\"如重新渲染组件或更新计算属性\",{\"1\":{\"811\":1}}],[\"如重新加载最新数据\",{\"1\":{\"782\":1}}],[\"如生命周期钩子\",{\"1\":{\"792\":1}}],[\"如滚动位置\",{\"1\":{\"783\":1}}],[\"如停止定时器\",{\"1\":{\"783\":1}}],[\"如切换到其他页面\",{\"1\":{\"783\":1}}],[\"如刷新数据\",{\"1\":{\"782\":1}}],[\"如从其他页面返回\",{\"1\":{\"782\":1}}],[\"如git\",{\"1\":{\"685\":1}}],[\"如goback\",{\"1\":{\"596\":1}}],[\"如系统设置\",{\"1\":{\"677\":1}}],[\"如react\",{\"1\":{\"631\":1}}],[\"如实现一个标记的地图\",{\"1\":{\"532\":1}}],[\"如collection\",{\"1\":{\"526\":1}}],[\"如有错误则会抛出\",{\"1\":{\"500\":1}}],[\"如事件处理过程中发生问题并不会捕获到\",{\"1\":{\"500\":1}}],[\"如权限控制\",{\"1\":{\"480\":1}}],[\"如unsafe\",{\"1\":{\"445\":1}}],[\"如获取数据\",{\"1\":{\"442\":1}}],[\"如动画和输入响应\",{\"1\":{\"429\":1}}],[\"如植入恶意代码\",{\"1\":{\"298\":1}}],[\"如html\",{\"1\":{\"230\":1}}],[\"如跟踪分析用户行为等\",{\"1\":{\"227\":1}}],[\"如用户自定义设置\",{\"1\":{\"227\":1}}],[\"如用户登录状态\",{\"1\":{\"227\":1}}],[\"如netscape\",{\"1\":{\"218\":1}}],[\"如在外网环境下\",{\"1\":{\"212\":1}}],[\"如在响应一个页面请求中\",{\"1\":{\"152\":1}}],[\"如添加了一个特性\",{\"1\":{\"148\":1}}],[\"如何获取合适的高度\",{\"1\":{\"920\":1}}],[\"如何防御\",{\"0\":{\"298\":1}}],[\"如何去获得这个内容\",{\"1\":{\"140\":1}}],[\"如何阅读ecma标准\",{\"0\":{\"127\":1}}],[\"如以下中的underfined\",{\"1\":{\"130\":1}}],[\"如array\",{\"1\":{\"99\":1}}],[\"如下情况\",{\"1\":{\"627\":1}}],[\"如下例子\",{\"1\":{\"526\":1,\"597\":1,\"598\":1,\"612\":1,\"633\":1}}],[\"如下场景\",{\"1\":{\"496\":1}}],[\"如下图所示\",{\"1\":{\"157\":1,\"169\":1,\"525\":1}}],[\"如下图\",{\"1\":{\"132\":1,\"494\":1,\"571\":1}}],[\"如下所示\",{\"1\":{\"128\":1,\"538\":2,\"556\":1,\"606\":1}}],[\"如下\",{\"1\":{\"59\":1,\"147\":1,\"253\":1,\"308\":1,\"449\":3,\"454\":1,\"458\":1,\"466\":1,\"479\":2,\"480\":2,\"485\":1,\"500\":3,\"513\":1,\"519\":1,\"520\":2,\"533\":1,\"537\":1,\"542\":1,\"555\":2,\"566\":1,\"575\":1,\"581\":1,\"587\":1,\"596\":1,\"598\":1,\"608\":1,\"612\":1,\"616\":1,\"621\":1,\"626\":1,\"627\":1,\"634\":1,\"635\":1,\"685\":1}}],[\"如\",{\"1\":{\"56\":1,\"59\":1,\"163\":1,\"171\":1,\"230\":1,\"409\":1,\"449\":1,\"521\":1,\"531\":1,\"572\":1,\"696\":1,\"770\":1,\"945\":1,\"969\":1}}],[\"如使内联元素span跨越多行\",{\"1\":{\"46\":1}}],[\"如果产生式的右侧出现\",{\"1\":{\"996\":1}}],[\"如果目标符有该参数\",{\"1\":{\"985\":1}}],[\"如果完成记录\",{\"1\":{\"970\":1}}],[\"如果找到则直接返回模块的导出对象\",{\"1\":{\"941\":1}}],[\"如果找到key值相同\",{\"1\":{\"770\":1}}],[\"如果你想要支持旧版本浏览器\",{\"1\":{\"933\":1}}],[\"如果你的类属性被分配给一个\",{\"1\":{\"338\":1}}],[\"如果尚未在项目或全局安装\",{\"1\":{\"928\":1}}],[\"如果出于某些原因\",{\"1\":{\"927\":1}}],[\"如果调研服务器端渲染\",{\"1\":{\"908\":1}}],[\"如果适用\",{\"1\":{\"883\":1}}],[\"如果dns查询很多\",{\"1\":{\"871\":1}}],[\"如果定时器为空\",{\"1\":{\"848\":1}}],[\"如果函数内部操作了dom\",{\"1\":{\"844\":1}}],[\"如果函数调用的时候有赋值\",{\"1\":{\"123\":2}}],[\"如果事件连续触发\",{\"1\":{\"844\":1}}],[\"如果渲染层工作较快完成\",{\"1\":{\"836\":1}}],[\"如果渲染dom则返回的是具体的dom节点\",{\"1\":{\"578\":1}}],[\"如果过期\",{\"1\":{\"830\":1}}],[\"如果父组件中存在\",{\"1\":{\"793\":1}}],[\"如果子元素之间\",{\"1\":{\"850\":2}}],[\"如果子组件中有\",{\"1\":{\"792\":1}}],[\"如果子类没有定义构造函数则会如同一个普通的类方法一样从父类继承\",{\"1\":{\"339\":1}}],[\"如果子类中定义了构造函数则不会隐式调用其父类的构造函数\",{\"1\":{\"339\":1}}],[\"如果相同选项为生命周期钩子\",{\"1\":{\"791\":1}}],[\"如果相等\",{\"1\":{\"36\":1}}],[\"如果还有剩余的\",{\"1\":{\"770\":1}}],[\"如果有就直接用\",{\"1\":{\"864\":1}}],[\"如果有\",{\"1\":{\"837\":1}}],[\"如果有过渡效果\",{\"1\":{\"759\":1}}],[\"如果有继续下一个任务\",{\"1\":{\"429\":1}}],[\"如果条件出现在循环内部\",{\"1\":{\"754\":1}}],[\"如果两者都有子节点\",{\"1\":{\"733\":1}}],[\"如果oldvnode没有子节点而vnode有\",{\"1\":{\"733\":1}}],[\"如果oldvnode有子节点而vnode没有\",{\"1\":{\"733\":1}}],[\"如果都有文本节点且不相等\",{\"1\":{\"733\":1}}],[\"如果采用对象的data\",{\"1\":{\"727\":1}}],[\"如果路由很多\",{\"1\":{\"702\":1}}],[\"如果无法解析\",{\"1\":{\"699\":1}}],[\"如果只调用了super\",{\"1\":{\"628\":1}}],[\"如果只需为一个\",{\"1\":{\"407\":1}}],[\"如果先调用this\",{\"1\":{\"626\":1}}],[\"如果直接修改state的状态\",{\"1\":{\"612\":1}}],[\"如果ref设置的组件为一个类组件的时候\",{\"1\":{\"583\":1}}],[\"如果将这个store存放在顶层元素中\",{\"1\":{\"564\":1}}],[\"如果这个额外标签除了充当父标签之外\",{\"1\":{\"556\":1}}],[\"如果说只是文本内容改变了\",{\"1\":{\"542\":1}}],[\"如果列表数据渲染中\",{\"1\":{\"542\":1}}],[\"如果提供了可选的回调函数callback\",{\"1\":{\"538\":1}}],[\"如果换到原生的js\",{\"1\":{\"526\":1}}],[\"如果对象树中一个节点发生变化\",{\"1\":{\"525\":1}}],[\"如果某些特定值在两次重渲染之间没有发生变化\",{\"1\":{\"520\":1}}],[\"如果使用key\",{\"1\":{\"768\":1,\"769\":1}}],[\"如果使用<transition>组件\",{\"1\":{\"759\":1}}],[\"如果使用一个类组件\",{\"1\":{\"510\":1}}],[\"如果使用手动操作真实dom来完成页面\",{\"1\":{\"423\":1}}],[\"如果当前节点在新集合中的位置比老集合中的位置靠前的话\",{\"1\":{\"496\":1}}],[\"如果不满足以上四种情况\",{\"1\":{\"732\":1}}],[\"如果不传进去\",{\"1\":{\"627\":1}}],[\"如果不使用switch组件进行包裹\",{\"1\":{\"598\":1}}],[\"如果不希望组件重新渲染\",{\"1\":{\"548\":1}}],[\"如果不是一个类的组件\",{\"1\":{\"495\":1}}],[\"如果不处理\",{\"1\":{\"212\":1}}],[\"如果向一个高阶组件添加refe引用\",{\"1\":{\"479\":1}}],[\"如果选择非受控组件的话\",{\"1\":{\"467\":1}}],[\"如果组件较大\",{\"1\":{\"427\":1}}],[\"如果组件之间关系类型比较复杂的情况\",{\"1\":{\"417\":1}}],[\"如果想要改变它看\",{\"1\":{\"621\":1}}],[\"如果想要立刻获取更新后的值\",{\"1\":{\"614\":1}}],[\"如果想要实现一个日志功能\",{\"1\":{\"574\":1}}],[\"如果想要获得原生dom事件\",{\"1\":{\"504\":1}}],[\"如果想要获取provider传递的数据\",{\"1\":{\"416\":1}}],[\"如果想要解除被控制\",{\"1\":{\"465\":1}}],[\"如果想要管理state状态\",{\"1\":{\"458\":1}}],[\"如果想要访问父组件传递过来的参数\",{\"1\":{\"454\":1}}],[\"如果想要函数的参数值始终通过引用传递\",{\"1\":{\"321\":1}}],[\"如果是如果是异步占位符节点\",{\"1\":{\"770\":1}}],[\"如果是\",{\"1\":{\"732\":1,\"770\":1}}],[\"如果是为组件只能是一个函数\",{\"1\":{\"726\":1}}],[\"如果是下一个state依赖前一个state的话\",{\"1\":{\"616\":1}}],[\"如果是渲染组件则返回的是组件实例\",{\"1\":{\"578\":1}}],[\"如果是类组件\",{\"1\":{\"538\":1}}],[\"如果是函数组件\",{\"1\":{\"538\":1}}],[\"如果是文本节点\",{\"1\":{\"538\":1}}],[\"如果是原生标签节点\",{\"1\":{\"538\":1}}],[\"如果是相等则跳过effects执行\",{\"1\":{\"520\":1}}],[\"如果是同一个类的组件\",{\"1\":{\"495\":1}}],[\"如果是一个子元素\",{\"1\":{\"850\":1}}],[\"如果是一个函数\",{\"1\":{\"573\":1}}],[\"如果是一个函数组件\",{\"1\":{\"460\":1}}],[\"如果是一个类组件\",{\"1\":{\"460\":1}}],[\"如果是兄弟组件之间的传递\",{\"1\":{\"415\":1}}],[\"如果是响应式设计\",{\"1\":{\"78\":1}}],[\"如果要将多个值赋给单个\",{\"1\":{\"407\":1}}],[\"如果要检查是否定义了某常量\",{\"1\":{\"306\":1}}],[\"如果外部变量名以有效的数组语法开头\",{\"1\":{\"406\":1}}],[\"如果外部样式需要覆盖内联样式\",{\"1\":{\"36\":1}}],[\"如果全局变量不存在\",{\"1\":{\"402\":1}}],[\"如果在指示位置的输入流中出现\",{\"1\":{\"998\":1}}],[\"如果在句法的生成式的部分右侧出现短语\",{\"1\":{\"998\":1}}],[\"如果在子类中不使用super\",{\"1\":{\"626\":1}}],[\"如果在useeffect回调函数中return\",{\"1\":{\"459\":1}}],[\"如果在函数内部\",{\"1\":{\"401\":1}}],[\"如果在父子节点绑定事件的时候\",{\"1\":{\"273\":1}}],[\"如果可用\",{\"1\":{\"400\":1}}],[\"如果变量未提供\",{\"1\":{\"385\":1}}],[\"如果给定的一个数超出了\",{\"1\":{\"373\":1}}],[\"如果其中一种类型是交集类型\",{\"1\":{\"368\":1}}],[\"如果能从某处获得值\",{\"1\":{\"359\":1}}],[\"如果能够保证了密钥的安全\",{\"1\":{\"237\":1}}],[\"如果索引\",{\"1\":{\"359\":1}}],[\"如果类型不是函数\",{\"1\":{\"728\":1}}],[\"如果类型转换后\",{\"1\":{\"356\":3}}],[\"如果类常量定义为\",{\"1\":{\"350\":1}}],[\"如果尝试在\",{\"1\":{\"348\":1}}],[\"如果该类属于一个命名空间\",{\"1\":{\"337\":1}}],[\"如果该实体未被修改过\",{\"1\":{\"224\":1}}],[\"如果后面还有新行\",{\"1\":{\"332\":1}}],[\"如果文件内容仅仅包含\",{\"1\":{\"330\":1}}],[\"如果文本为一段很长的英文或者数字\",{\"1\":{\"90\":1}}],[\"如果希望允许函数修改它的参数值\",{\"1\":{\"321\":1}}],[\"如果主体表达式不能被任意分支条件处理\",{\"1\":{\"313\":1}}],[\"如果用户在长时间运行的任务过程中与网页互动\",{\"1\":{\"885\":1}}],[\"如果用户开启了数据节省模式\",{\"1\":{\"858\":1}}],[\"如果用户一直在输入中\",{\"1\":{\"849\":1}}],[\"如果用到生命周期\",{\"1\":{\"459\":1}}],[\"如果用\",{\"1\":{\"359\":1}}],[\"如果用在被包括文件中\",{\"1\":{\"308\":1}}],[\"如果用在被包含文件中\",{\"1\":{\"308\":1}}],[\"如果用普通的递归\",{\"1\":{\"253\":1}}],[\"如果常量名是动态的\",{\"1\":{\"306\":1}}],[\"如果没有查到记录\",{\"1\":{\"829\":1}}],[\"如果没有提供render函数\",{\"1\":{\"796\":1}}],[\"如果没有参数要传递给类的构造函数\",{\"1\":{\"337\":1}}],[\"如果没有\",{\"1\":{\"287\":1,\"429\":1}}],[\"如果中途上传中断过\",{\"1\":{\"283\":1}}],[\"如果存在return则存在\",{\"1\":{\"986\":1}}],[\"如果存在子节点\",{\"1\":{\"732\":1}}],[\"如果存在则返回对应的结果数据\",{\"1\":{\"278\":1}}],[\"如果存在内联样式\",{\"1\":{\"36\":1}}],[\"如果一个文件不带有\",{\"1\":{\"664\":1}}],[\"如果一个过大\",{\"1\":{\"551\":1}}],[\"如果一个变量包含一个类名的\",{\"1\":{\"337\":1}}],[\"如果一个变量名后有圆括号\",{\"1\":{\"325\":1}}],[\"如果一个类别b\",{\"1\":{\"256\":1}}],[\"如果一个值不再需要了\",{\"1\":{\"250\":1}}],[\"如果一个值的引用次数是0\",{\"1\":{\"250\":1}}],[\"如果属性是对象或者数组\",{\"1\":{\"254\":1}}],[\"如果我们使用内联函数\",{\"1\":{\"555\":1}}],[\"如果我们使用尾递归\",{\"1\":{\"253\":1}}],[\"如果我们对这个集合进行增删的操作改成\",{\"1\":{\"497\":1}}],[\"如果我们的组件在请求运行时更新\",{\"1\":{\"461\":1}}],[\"如果我们想要让元素旋转一圈\",{\"1\":{\"13\":1}}],[\"如果n等于5\",{\"1\":{\"253\":1}}],[\"如果id为node的元素从dom中移除\",{\"1\":{\"251\":1}}],[\"如果需要实现js实现页面的跳转\",{\"1\":{\"596\":1}}],[\"如果需要深层次比较\",{\"1\":{\"550\":1}}],[\"如果需要传递refs的话\",{\"1\":{\"479\":1}}],[\"如果需要这块内存被垃圾回收机制释放\",{\"1\":{\"250\":1}}],[\"如果需要建立长连接\",{\"1\":{\"146\":1}}],[\"如果服务端也想断开连接了\",{\"1\":{\"244\":1}}],[\"如果服务器返回此响应\",{\"1\":{\"209\":1}}],[\"如果处理\",{\"1\":{\"212\":1}}],[\"如果轮询的频率比较高\",{\"1\":{\"195\":1}}],[\"如果发现差错\",{\"1\":{\"163\":1}}],[\"如果前面的处理特别慢\",{\"1\":{\"153\":1}}],[\"如果接收者\",{\"1\":{\"140\":1}}],[\"如果\",{\"1\":{\"140\":1,\"330\":1,\"356\":6,\"361\":5,\"427\":1,\"520\":1,\"886\":1}}],[\"如果test\",{\"1\":{\"122\":1}}],[\"如果层层嵌套\",{\"1\":{\"118\":1}}],[\"如果此环境记录是由\",{\"1\":{\"114\":1}}],[\"如果值是lexical\",{\"1\":{\"114\":1}}],[\"如果词法声明和变量声明的连接有重复项\",{\"1\":{\"107\":1}}],[\"如果正在求值脚本\",{\"1\":{\"95\":1}}],[\"如果正在求值函数对象的代码\",{\"1\":{\"95\":1}}],[\"如果元素内有子元素或内容\",{\"1\":{\"70\":1}}],[\"如果利用\",{\"1\":{\"69\":1}}],[\"如果设置border\",{\"1\":{\"57\":1}}],[\"如果4位全部相等\",{\"1\":{\"36\":1}}],[\"如平移\",{\"1\":{\"10\":1}}],[\"至于为什么引入hook\",{\"1\":{\"517\":1}}],[\"至于使用react用哪种方案引入css\",{\"1\":{\"489\":1}}],[\"至少满足下列一个条件的函数\",{\"1\":{\"478\":1}}],[\"至此\",{\"1\":{\"142\":1}}],[\"至\",{\"1\":{\"11\":1}}],[\"可出现在终结符或非终结符之后\",{\"1\":{\"993\":1}}],[\"可视区域要渲染的数据\",{\"1\":{\"920\":1}}],[\"可视区域的结束数据索引\",{\"1\":{\"920\":1}}],[\"可视区域的起始数据索引\",{\"1\":{\"920\":1}}],[\"可视化\",{\"1\":{\"813\":1}}],[\"可u考虑设置在page对象的其他字段下\",{\"1\":{\"840\":1}}],[\"可u使用getstoragesync\",{\"1\":{\"840\":1}}],[\"可获取子组件的信息\",{\"1\":{\"806\":1}}],[\"可访问旧数据和旧dom\",{\"1\":{\"778\":1}}],[\"可访问子组件\",{\"1\":{\"777\":1}}],[\"可操作真实dom\",{\"1\":{\"777\":1}}],[\"可用于数据请求\",{\"1\":{\"775\":1}}],[\"可用于插件初始化\",{\"1\":{\"774\":1}}],[\"可选\",{\"1\":{\"737\":1}}],[\"可选参数\",{\"0\":{\"657\":1}}],[\"可做到离线工作\",{\"1\":{\"681\":1}}],[\"可做一些清除副作用的操作\",{\"1\":{\"520\":1}}],[\"可本地提交\",{\"1\":{\"681\":1}}],[\"可接受参数的装饰器\",{\"1\":{\"662\":1}}],[\"可接受的类型之间使用\",{\"1\":{\"368\":1}}],[\"可定义私有属性\",{\"1\":{\"651\":1}}],[\"可复用的组件\",{\"1\":{\"621\":1}}],[\"可维护\",{\"1\":{\"533\":1}}],[\"可重用\",{\"1\":{\"533\":1}}],[\"可组合\",{\"1\":{\"533\":1}}],[\"可通过this\",{\"1\":{\"454\":1}}],[\"可通过优化\",{\"1\":{\"253\":1}}],[\"可能会提示你安装\",{\"1\":{\"928\":1}}],[\"可能因父组件更新而触发\",{\"1\":{\"779\":1}}],[\"可能发生在其子vnode更新之前\",{\"1\":{\"737\":1}}],[\"可能不是全部\",{\"1\":{\"409\":1}}],[\"可能的值是\",{\"1\":{\"11\":1}}],[\"可迭代c\",{\"0\":{\"395\":1}}],[\"可见性\",{\"1\":{\"345\":2}}],[\"可变变量名\",{\"0\":{\"404\":1}}],[\"可变函数可以用来实现包括回调函数\",{\"1\":{\"325\":1}}],[\"可变函数\",{\"0\":{\"325\":1}}],[\"可变数量的参数值列表\",{\"0\":{\"323\":1}}],[\"可点击链接的预加载\",{\"1\":{\"284\":1}}],[\"可省略状态信息\",{\"1\":{\"201\":1}}],[\"可在单个tcp连接上进行全双工通信\",{\"1\":{\"195\":1}}],[\"可靠\",{\"1\":{\"183\":1}}],[\"可靠性\",{\"1\":{\"183\":1}}],[\"可靠的\",{\"1\":{\"168\":1}}],[\"可触发\",{\"1\":{\"72\":1}}],[\"可以覆盖\",{\"1\":{\"949\":1}}],[\"可以是\",{\"1\":{\"946\":1}}],[\"可以是整数或浮点数\",{\"1\":{\"368\":1}}],[\"可以降低runtime代码的复杂度\",{\"1\":{\"941\":1}}],[\"可以采取一些措施来减少runtime代码的大小和复杂度\",{\"1\":{\"941\":1}}],[\"可以触发一个插件来输出打包文件的大小\",{\"1\":{\"932\":1}}],[\"可以很好满足你的需求\",{\"1\":{\"931\":1}}],[\"可以不用再引入一个配置文件来打包项目\",{\"1\":{\"931\":1}}],[\"可以限定用户在输入时\",{\"1\":{\"849\":1}}],[\"可以轻松的获取微信提供的用户身份标识\",{\"1\":{\"829\":1}}],[\"可以访问虚拟dom\",{\"1\":{\"776\":1}}],[\"可以访问组件state与prop属性\",{\"1\":{\"437\":1}}],[\"可以从里面拿到\",{\"1\":{\"765\":1}}],[\"可以操作dom\",{\"1\":{\"737\":1}}],[\"可以遵循以下的规则\",{\"1\":{\"689\":1}}],[\"可以离线工作\",{\"1\":{\"681\":1}}],[\"可以让你回到任何一个时间点\",{\"1\":{\"675\":1}}],[\"可以让你在js中通过使用xml的方式去直接声明界面的dom结构\",{\"1\":{\"421\":1}}],[\"可以装饰\",{\"1\":{\"662\":1}}],[\"可以声明\",{\"1\":{\"660\":1}}],[\"可以将内联图像转换为\",{\"1\":{\"945\":1}}],[\"可以将他定义为枚举类型\",{\"1\":{\"654\":1}}],[\"可以将其赋成数组\",{\"1\":{\"407\":1}}],[\"可以作用于原始值\",{\"1\":{\"644\":1}}],[\"可以帮助我们方便的实现组件的入场和离场动画\",{\"1\":{\"632\":1}}],[\"可以修改\",{\"1\":{\"622\":1}}],[\"可以接受任意类型的值\",{\"1\":{\"639\":1}}],[\"可以接受一个参数作为输入值\",{\"1\":{\"621\":1}}],[\"可以接受用户自定义的回调函数作为参数\",{\"1\":{\"391\":1}}],[\"可以实现无刷新的条件下切换显示不同的页面\",{\"1\":{\"592\":1}}],[\"可以发现\",{\"1\":{\"588\":1}}],[\"可以发现新版的生命周期减少了以下三种方法\",{\"1\":{\"445\":1}}],[\"可以自己保存\",{\"1\":{\"579\":1}}],[\"可以自动生成这些文件\",{\"1\":{\"329\":1}}],[\"可以拿到getstate和dispatch这两个方法\",{\"1\":{\"575\":1}}],[\"可以传递两个参数\",{\"1\":{\"565\":1}}],[\"可以为\",{\"1\":{\"946\":1}}],[\"可以为应用创建多个包\",{\"1\":{\"559\":1}}],[\"可以为input标签设置onchange事件\",{\"1\":{\"465\":1}}],[\"可以感受到react存在的优势\",{\"1\":{\"534\":1}}],[\"可以给\",{\"1\":{\"527\":1}}],[\"可以避免在render操作中重复绑定\",{\"1\":{\"512\":1}}],[\"可以避免意外的全局变量\",{\"1\":{\"251\":1}}],[\"可以得出以下结论\",{\"1\":{\"505\":1}}],[\"可以根据项目具体情况进行选择\",{\"1\":{\"568\":1}}],[\"可以根据各自情况选择合适的方案\",{\"1\":{\"489\":1}}],[\"可以根据前后的props和state的变化做相应的操作\",{\"1\":{\"442\":1}}],[\"可以类似于预处理器一样样式嵌套\",{\"1\":{\"489\":1}}],[\"可以满足大部分场景的应用\",{\"1\":{\"489\":1}}],[\"可以满足一些场景的功能实现\",{\"1\":{\"225\":1}}],[\"可以动态获取当前state中的状态\",{\"1\":{\"485\":1}}],[\"可以编写动态的css\",{\"1\":{\"483\":1}}],[\"可以编写局部css\",{\"1\":{\"483\":1}}],[\"可以比较props\",{\"1\":{\"436\":1}}],[\"可以共享数据\",{\"1\":{\"416\":1}}],[\"可以保留一个计数器并一起传递\",{\"1\":{\"407\":1}}],[\"可以断行\",{\"1\":{\"379\":1}}],[\"可以用computed提前过滤那些不需要显示的项\",{\"1\":{\"754\":1}}],[\"可以用来监听渲染是否完成\",{\"1\":{\"620\":1}}],[\"可以用\",{\"1\":{\"407\":1}}],[\"可以用一幅图像代替标准的提交按钮\",{\"1\":{\"406\":1}}],[\"可以用以下任一语法定义\",{\"1\":{\"375\":1}}],[\"可以用负运算符\",{\"1\":{\"372\":1}}],[\"可以组合在一起创建更加复杂的类型\",{\"1\":{\"366\":1}}],[\"可以把它放在变量\",{\"1\":{\"359\":1}}],[\"可以获取当前组件的一些状态\",{\"1\":{\"483\":1}}],[\"可以获取包含类\",{\"1\":{\"343\":1}}],[\"可以获得所有已定义的常量列表\",{\"1\":{\"306\":1}}],[\"可以通过git\",{\"1\":{\"685\":1}}],[\"可以通过前端路由可以实现单页\",{\"1\":{\"592\":1}}],[\"可以通过e\",{\"1\":{\"504\":1}}],[\"可以通过consumer组件或者或者使用contexttype属性接收\",{\"1\":{\"416\":1}}],[\"可以通过引用传递\",{\"1\":{\"387\":1}}],[\"可以通过\",{\"1\":{\"340\":1,\"946\":2}}],[\"可以通过给不同分辨率的设备编写不同的样式来实现响应式的布局\",{\"1\":{\"56\":1}}],[\"可以被展开到当前位置\",{\"1\":{\"386\":1}}],[\"可以被嵌入到各种不同的文档中去\",{\"1\":{\"330\":1}}],[\"可以被多个请求复用\",{\"1\":{\"153\":1}}],[\"可以在\",{\"1\":{\"949\":1}}],[\"可以在devtool查看\",{\"1\":{\"888\":1}}],[\"可以在img标签中直接使用来实现懒加载\",{\"1\":{\"861\":1}}],[\"可以在前置页面将一些有用的字段带到当前页\",{\"1\":{\"840\":1}}],[\"可以在解包参数后面使用命名参数\",{\"1\":{\"324\":1}}],[\"可以在函数定义中该参数的前面加上符号\",{\"1\":{\"321\":1}}],[\"可以和多个可选项进行比较\",{\"1\":{\"313\":1}}],[\"可以使\",{\"1\":{\"937\":1}}],[\"可以使用await语句\",{\"1\":{\"986\":1}}],[\"可以使用async和await完成相同作用的事情\",{\"1\":{\"801\":1}}],[\"可以使用类型别名在属性里引用自己\",{\"1\":{\"644\":1}}],[\"可以使用express\",{\"1\":{\"560\":1}}],[\"可以使用户更快的看到渲染完成的页面\",{\"1\":{\"560\":1}}],[\"可以使用ref\",{\"1\":{\"466\":1}}],[\"可以使用usestate\",{\"1\":{\"458\":1}}],[\"可以使用十进制\",{\"1\":{\"372\":1}}],[\"可以使用变量动态获取类常量\",{\"1\":{\"350\":1}}],[\"可以使用\",{\"1\":{\"306\":1,\"342\":1,\"347\":1,\"351\":1}}],[\"可以使得浏览器中的组件的宽和高随着浏览器的变化而变化\",{\"1\":{\"57\":1}}],[\"可以转化为\",{\"1\":{\"304\":1}}],[\"可以对结果进行指定精度的四舍五入\",{\"1\":{\"304\":1}}],[\"可以对元素进行变换\",{\"1\":{\"8\":1}}],[\"可以重新定义某些属性\",{\"1\":{\"256\":1}}],[\"可以理解成一种特殊的压缩算法\",{\"1\":{\"238\":1}}],[\"可以显著地提高压缩率\",{\"1\":{\"201\":1}}],[\"可以沿用之前内容的上下文\",{\"1\":{\"201\":1}}],[\"可以进行丢包时的重发控制\",{\"1\":{\"182\":1}}],[\"可以想象成流水形式的\",{\"1\":{\"182\":1}}],[\"可以有效地减少真正的回源\",{\"1\":{\"135\":1}}],[\"可以直接返回给用户\",{\"1\":{\"135\":1}}],[\"可以表达为一个参数表达式\",{\"1\":{\"128\":1}}],[\"可以看看下面一个例子\",{\"1\":{\"505\":1}}],[\"可以看出throw语句不可以换行\",{\"1\":{\"998\":1}}],[\"可以看出两者区别\",{\"1\":{\"519\":1}}],[\"可以看出\",{\"1\":{\"129\":1,\"977\":1,\"986\":2}}],[\"可以看出分歧为forinofloopevaluation\",{\"1\":{\"121\":1}}],[\"可以看到通过super关键字实现调用父类\",{\"1\":{\"626\":1}}],[\"可以看到通信过程中\",{\"1\":{\"418\":1}}],[\"可以看到更新是同步\",{\"1\":{\"615\":1}}],[\"可以看到hooks能够更容易解决状态相关的重用的问题\",{\"1\":{\"522\":1}}],[\"可以看到\",{\"1\":{\"87\":1,\"90\":1,\"253\":1,\"259\":1,\"263\":1,\"421\":1,\"489\":1,\"575\":1}}],[\"可以看到每个属性都使用百分比\",{\"1\":{\"57\":1}}],[\"可以看到盒子发生了旋转\",{\"1\":{\"12\":1}}],[\"可以设置以下props属性\",{\"1\":{\"763\":1}}],[\"可以设置word\",{\"1\":{\"89\":1}}],[\"可以设置为一个整数\",{\"1\":{\"51\":1}}],[\"可以结合\",{\"1\":{\"82\":1}}],[\"可以简单实现中间自适应\",{\"1\":{\"82\":1}}],[\"可以响应点击事件\",{\"1\":{\"69\":1}}],[\"可以利用前面提到的媒体查询\",{\"1\":{\"59\":1}}],[\"可以针对不同的媒体类型定义不同的样式\",{\"1\":{\"56\":1}}],[\"可以分成三个阶段\",{\"1\":{\"433\":1}}],[\"可以分成\",{\"1\":{\"37\":1}}],[\"可以分为四个方面\",{\"1\":{\"702\":1}}],[\"可以分为\",{\"0\":{\"31\":1}}],[\"可以非常简单实现垂直水平居中\",{\"1\":{\"29\":1}}],[\"可以说是margin负值的替代方案\",{\"1\":{\"27\":1}}],[\"可以定义我们眼睛看到的\",{\"1\":{\"8\":1}}],[\"在代码块内使用严格模式\",{\"0\":{\"1013\":1}}],[\"在ecma中使用黑色粗体表示\",{\"1\":{\"991\":1}}],[\"在es6之后\",{\"1\":{\"648\":1}}],[\"在es6中\",{\"1\":{\"626\":1}}],[\"在比较相等性时\",{\"1\":{\"981\":1}}],[\"在标准上查看\",{\"1\":{\"981\":1}}],[\"在标准中\",{\"1\":{\"980\":1}}],[\"在标准中文法定义了语句的结构\",{\"1\":{\"977\":1}}],[\"在标准中声明的返回完成记录的抽象操作和所有内置函数中\",{\"1\":{\"973\":1}}],[\"在标准中可以找到六种声明实例化操作\",{\"1\":{\"118\":1}}],[\"在以下情况不适用\",{\"1\":{\"973\":1}}],[\"在以前\",{\"1\":{\"517\":1}}],[\"在以前文章提过与\",{\"1\":{\"58\":1}}],[\"在抽象操作和语法导向操作调用时\",{\"1\":{\"971\":1}}],[\"在被调用时\",{\"1\":{\"968\":1}}],[\"在被安装时使用了\",{\"1\":{\"330\":1}}],[\"在运行时调用的算法\",{\"1\":{\"967\":1}}],[\"在上面的示例中\",{\"1\":{\"953\":1}}],[\"在上面的例子中\",{\"1\":{\"626\":1}}],[\"在查阅或分析manifest时\",{\"1\":{\"942\":1}}],[\"在浏览器端\",{\"1\":{\"942\":1}}],[\"在浏览器中衡量导航请求的\",{\"1\":{\"884\":1}}],[\"在按需加载\",{\"1\":{\"942\":1}}],[\"在打包过程中\",{\"1\":{\"937\":1}}],[\"在打包完成后\",{\"1\":{\"932\":1}}],[\"在模块化编程中\",{\"1\":{\"935\":1}}],[\"在webpack的配置文件中\",{\"1\":{\"940\":1}}],[\"在webpack打包的过程中\",{\"1\":{\"932\":1}}],[\"在webpack中配置资源预加载\",{\"1\":{\"907\":1}}],[\"在webpack中通过require\",{\"1\":{\"859\":1}}],[\"在加载模块之后\",{\"1\":{\"932\":1}}],[\"在加载html文件的时候\",{\"1\":{\"147\":1}}],[\"在构建时简单的生成针对特定路由的静态html文件\",{\"1\":{\"908\":1}}],[\"在构造函数执行完毕之前已被赋值\",{\"1\":{\"627\":1}}],[\"在dns查询过程中\",{\"1\":{\"871\":1}}],[\"在diff比较的过程中\",{\"1\":{\"731\":1}}],[\"在框架中\",{\"1\":{\"858\":1}}],[\"在工程化环境中还有以下方式\",{\"1\":{\"858\":1}}],[\"在连续触发时\",{\"1\":{\"844\":2,\"847\":2}}],[\"在n秒内函数只能执行一次\",{\"1\":{\"844\":1}}],[\"在任何逻辑层和视图层之间的数据传递都是线程间的通信\",{\"1\":{\"836\":1}}],[\"在任何时候\",{\"1\":{\"95\":1}}],[\"在逻辑层发生数据变更的时候\",{\"1\":{\"836\":1}}],[\"在逻辑位置写模板代码\",{\"1\":{\"817\":1}}],[\"在小程序中调用微信的api完成支付功能\",{\"1\":{\"834\":1}}],[\"在小程序中\",{\"1\":{\"829\":1,\"835\":1}}],[\"在小数点后五位精度内都是相等的\",{\"1\":{\"376\":1}}],[\"在表单元素\",{\"1\":{\"811\":1}}],[\"在修改数据之后立即使用这个方法\",{\"1\":{\"800\":1}}],[\"在下次dom更新循环结束之后执行延迟回调\",{\"1\":{\"800\":1}}],[\"在下面的示例中\",{\"1\":{\"409\":1,\"948\":1}}],[\"在递归合并的时候组件的选项会覆盖mixin的选项\",{\"1\":{\"791\":1}}],[\"在递归调用的过程当中系统为每一层的返回点\",{\"1\":{\"253\":1}}],[\"在内存中重新渲染虚拟dom树\",{\"1\":{\"778\":1}}],[\"在keep\",{\"1\":{\"764\":1}}],[\"在元素卸载前确保\",{\"1\":{\"759\":1}}],[\"在元素外创建额外的空白\",{\"1\":{\"15\":1}}],[\"在选项filters中定义\",{\"1\":{\"746\":1}}],[\"在进行patchvnode\",{\"1\":{\"732\":1}}],[\"在实例中可以定义为对象或函数\",{\"1\":{\"726\":1}}],[\"在实际开发过程中\",{\"1\":{\"551\":1}}],[\"在实际应用中\",{\"1\":{\"230\":1,\"480\":1}}],[\"在某个地方写错了迫使vue实例重新渲染\",{\"1\":{\"714\":1}}],[\"在某些情况下\",{\"1\":{\"584\":1}}],[\"在全局路由守卫中调用addroutes添加路由\",{\"1\":{\"702\":1}}],[\"在路由上标记相应的权限信息\",{\"1\":{\"702\":1}}],[\"在vue3中v\",{\"1\":{\"754\":1}}],[\"在vue3中被统一为attrs\",{\"1\":{\"696\":1}}],[\"在vue2中v\",{\"1\":{\"754\":1}}],[\"在vue中提供了一套数据驱动视图更为方便的操作\",{\"1\":{\"736\":1}}],[\"在vue中使用\",{\"0\":{\"667\":1}}],[\"在ts中\",{\"1\":{\"664\":1}}],[\"在tsconfig\",{\"1\":{\"662\":1}}],[\"在前端开发中\",{\"1\":{\"632\":1}}],[\"在调用super过程\",{\"1\":{\"628\":1}}],[\"在调用super\",{\"1\":{\"627\":1}}],[\"在子组件中\",{\"1\":{\"621\":1}}],[\"在子类别继承父类别的同时\",{\"1\":{\"256\":1}}],[\"在settimeout或者原生dom事件中\",{\"1\":{\"615\":1}}],[\"在shouldcomponentupdate\",{\"1\":{\"558\":1}}],[\"在第二个参数的回调中更新后会执行\",{\"1\":{\"614\":1}}],[\"在第三方网站中\",{\"1\":{\"300\":1}}],[\"在url后面加上\",{\"1\":{\"606\":1}}],[\"在不使用key的情况\",{\"1\":{\"769\":1}}],[\"在不刷新页面的前提下动态改变浏览器地址栏中的url地址\",{\"1\":{\"606\":1}}],[\"在不监听的情况下使用removeeventlistener取消对事件监听\",{\"1\":{\"251\":1}}],[\"在单页应用中\",{\"1\":{\"606\":1}}],[\"在单引号字符串中的\",{\"1\":{\"379\":1}}],[\"在跳转的路径中添加了一些query参数\",{\"1\":{\"604\":1}}],[\"在渲染线程被初始化已经完成\",{\"1\":{\"826\":1}}],[\"在渲染过程中\",{\"1\":{\"582\":1}}],[\"在渲染组件时\",{\"1\":{\"427\":1}}],[\"在发出\",{\"1\":{\"571\":1}}],[\"在发送数据时\",{\"1\":{\"162\":1,\"173\":1}}],[\"在分发action进行拦截处理\",{\"1\":{\"571\":1}}],[\"在最后一个比较的时候\",{\"1\":{\"542\":1}}],[\"在最简单的情况下\",{\"1\":{\"165\":1}}],[\"在数据后面插入一条数据\",{\"1\":{\"542\":1}}],[\"在数据链路层数据包添加发送端\",{\"1\":{\"165\":1}}],[\"在转化过程中\",{\"1\":{\"537\":1}}],[\"在做react性能优化的时候\",{\"1\":{\"527\":1,\"558\":1}}],[\"在做完初始渲染的时候\",{\"1\":{\"449\":1}}],[\"在js中\",{\"1\":{\"916\":1}}],[\"在js中衡量ttfb\",{\"0\":{\"884\":1}}],[\"在js中衡量fcp\",{\"0\":{\"878\":1}}],[\"在js中不相同\",{\"1\":{\"526\":1}}],[\"在js对象中\",{\"1\":{\"708\":1}}],[\"在javascript中\",{\"1\":{\"303\":1}}],[\"在计算机中\",{\"1\":{\"525\":1}}],[\"在我们安装完git之后\",{\"1\":{\"687\":1}}],[\"在我们日常使用中\",{\"1\":{\"522\":1}}],[\"在我们用户眼中\",{\"1\":{\"69\":1}}],[\"在其中给某个组件\",{\"1\":{\"510\":1}}],[\"在新集合访问过的节点中\",{\"1\":{\"496\":1}}],[\"在这个环境下执行的都是有关小程序业务逻辑的代码\",{\"1\":{\"835\":1}}],[\"在这种情况下\",{\"1\":{\"542\":1,\"589\":1}}],[\"在这一方面\",{\"1\":{\"483\":1}}],[\"在这里仅执行一次\",{\"1\":{\"357\":1}}],[\"在这里写代码\",{\"1\":{\"316\":1}}],[\"在考虑组件的选择原则上\",{\"1\":{\"475\":1}}],[\"在类型实例化时\",{\"1\":{\"660\":1}}],[\"在类型理论中\",{\"1\":{\"392\":1}}],[\"在类组件中\",{\"1\":{\"587\":1}}],[\"在类创建的方式中通过this\",{\"1\":{\"474\":1}}],[\"在函数内部实现state的更新\",{\"1\":{\"465\":1}}],[\"在函数组件中直接使用变量\",{\"1\":{\"519\":1}}],[\"在函数组件中通过\",{\"1\":{\"519\":2}}],[\"在函数组件中通过usestate实现函数内部维护state\",{\"1\":{\"519\":1}}],[\"在函数组件中\",{\"1\":{\"459\":1,\"587\":1}}],[\"在函数之外定义的任何变量都仅限于全局作用域\",{\"1\":{\"401\":1}}],[\"在html文件中\",{\"1\":{\"940\":1}}],[\"在html中slot元素\",{\"1\":{\"804\":1}}],[\"在http\",{\"1\":{\"865\":1}}],[\"在https通信过程中\",{\"1\":{\"237\":1}}],[\"在http1\",{\"1\":{\"147\":1}}],[\"在history模式下的问题\",{\"1\":{\"693\":1}}],[\"在hooks出来之前\",{\"1\":{\"458\":1}}],[\"在render函数中将虚拟dom渲染成真实dom\",{\"1\":{\"776\":1}}],[\"在render过程中\",{\"1\":{\"587\":1}}],[\"在render中this\",{\"1\":{\"627\":1}}],[\"在render中\",{\"1\":{\"587\":1}}],[\"在render方法中使用bind和render方法中使用箭头函数这两种形式在每次组件render的时候都会生成新的方法实例\",{\"1\":{\"557\":1}}],[\"在redux中存在一个store用于存储state\",{\"1\":{\"564\":1}}],[\"在redux中也可以将数据进行fromjs处理\",{\"1\":{\"527\":1}}],[\"在react源码中\",{\"1\":{\"539\":1}}],[\"在react应用中\",{\"1\":{\"508\":1}}],[\"在react\",{\"1\":{\"472\":1,\"500\":1,\"533\":1}}],[\"在react目前来讲\",{\"1\":{\"471\":1}}],[\"在react中实现过渡动画效果会有很多种选择\",{\"1\":{\"631\":1}}],[\"在react中这套事件机制被称之为合成事件\",{\"1\":{\"503\":1}}],[\"在react中\",{\"1\":{\"421\":1,\"428\":1,\"449\":1,\"470\":1,\"472\":1,\"478\":1,\"538\":1,\"549\":1,\"587\":1,\"627\":1,\"628\":1,\"632\":1}}],[\"在return中返回react对象\",{\"1\":{\"454\":1}}],[\"在组件实例被从页面节点树移除时执行\",{\"1\":{\"826\":1}}],[\"在组件实例被移动到节点树另一个位置时执行\",{\"1\":{\"826\":1}}],[\"在组件渲染或计算属性执行时\",{\"1\":{\"811\":1}}],[\"在组件内部可以进行修改\",{\"1\":{\"622\":1}}],[\"在组件内部是不可修改的\",{\"1\":{\"622\":1}}],[\"在组件内直接使用css该方式编写方便\",{\"1\":{\"489\":1}}],[\"在组件内直接使用\",{\"0\":{\"485\":1},\"1\":{\"484\":1}}],[\"在组件生命周期或react合成事件中\",{\"1\":{\"615\":1}}],[\"在组件通信过程中可以使用usecontext\",{\"1\":{\"521\":1}}],[\"在组件中必须实现render方法\",{\"1\":{\"454\":1}}],[\"在组件更新后可以根据这些信息恢复一些ui视觉上的状态\",{\"1\":{\"441\":1}}],[\"在app\",{\"1\":{\"449\":1}}],[\"在每次render方法前调用\",{\"1\":{\"436\":1}}],[\"在每个小程序页面的生命周期中\",{\"1\":{\"836\":1}}],[\"在每个\",{\"1\":{\"315\":1,\"947\":1}}],[\"在该方法中\",{\"1\":{\"435\":1,\"442\":1}}],[\"在该作用域中读取\",{\"1\":{\"325\":1}}],[\"在该作用域中需要\",{\"1\":{\"325\":1}}],[\"在方法内部通过super关键字获取来自父组件的props\",{\"1\":{\"435\":1}}],[\"在完成一部分任务之后\",{\"1\":{\"429\":1}}],[\"在大规模应用下维护起来也很困难\",{\"1\":{\"423\":1}}],[\"在页面渲染出的每一个结点都是一个真实dom结构\",{\"1\":{\"421\":1}}],[\"在脚本中是单个数组\",{\"1\":{\"407\":1}}],[\"在命名函数或匿名函数内创建的任何变量都仅限于函数主体的作用域\",{\"1\":{\"401\":1}}],[\"在非静态属性上有两个钩子\",{\"1\":{\"349\":1}}],[\"在此函数中传入值\",{\"1\":{\"414\":1}}],[\"在此场景下需要用括号包裹起来调用\",{\"1\":{\"338\":1}}],[\"在此之后再被加上标记的变量就是待删除的了\",{\"1\":{\"249\":1}}],[\"在使用\",{\"1\":{\"955\":1}}],[\"在使用这些表达式之前\",{\"1\":{\"933\":1}}],[\"在使用key的情况\",{\"1\":{\"769\":1}}],[\"在使用setstate更新数据的时候\",{\"1\":{\"613\":1}}],[\"在使用redux过程中也可以结合immutable\",{\"1\":{\"527\":1}}],[\"在使用hooks情况下\",{\"1\":{\"458\":1}}],[\"在使用过程中会被babel进行编译转化成js代码\",{\"1\":{\"421\":1}}],[\"在使用输出缓冲时也很便利\",{\"1\":{\"332\":1}}],[\"在使用vw单位的情况下\",{\"1\":{\"58\":1}}],[\"在php标记以外的内容都会被php解析器忽略\",{\"1\":{\"331\":1}}],[\"在一些列出所有替代方案不切实际的情况下\",{\"1\":{\"999\":1}}],[\"在一些性能要求极高的应用中虚拟\",{\"1\":{\"423\":1}}],[\"在一定时间间隔内\",{\"1\":{\"847\":1}}],[\"在一段时间内再次打开\",{\"1\":{\"837\":1}}],[\"在一段时间内无需再次向passport发起认证\",{\"1\":{\"286\":1}}],[\"在一个\",{\"1\":{\"332\":1}}],[\"在一个连接里\",{\"1\":{\"149\":1}}],[\"在多个应用系统中\",{\"1\":{\"286\":1}}],[\"在严格模式和非严格模式下\",{\"1\":{\"269\":1}}],[\"在亲全面几种继承方式的优缺点基础上进行改造\",{\"1\":{\"263\":1}}],[\"在尾部调用的是函数自身\",{\"1\":{\"253\":1}}],[\"在constructor中预先bind当前组件\",{\"1\":{\"512\":1}}],[\"在c节点下创建b以及下属节点\",{\"1\":{\"494\":1}}],[\"在c语言中\",{\"1\":{\"247\":1}}],[\"在css3中新增的选择器有如下\",{\"1\":{\"35\":1}}],[\"在css中\",{\"1\":{\"15\":1,\"37\":1}}],[\"在对称加密中讲到\",{\"1\":{\"237\":1}}],[\"在采用ssl后\",{\"1\":{\"233\":1}}],[\"在网络上是明文传输的\",{\"1\":{\"219\":1}}],[\"在网络层使用的协议是无连接的网际协议\",{\"1\":{\"162\":1}}],[\"在传递类似的数据时\",{\"1\":{\"201\":1}}],[\"在服务器响应之后\",{\"1\":{\"191\":1}}],[\"在确定目标服务器服务器的ip地址后\",{\"1\":{\"189\":1}}],[\"在目的站重新装配\",{\"1\":{\"183\":1}}],[\"在物理层数据帧被封装成比特流\",{\"1\":{\"165\":1}}],[\"在物理层和网络层之间\",{\"1\":{\"163\":1}}],[\"在两个相邻节点之间的链路上传送帧\",{\"1\":{\"174\":1}}],[\"在两个相邻节点之间传送数据时\",{\"1\":{\"163\":1}}],[\"在两个相邻节点间的链路上传送帧\",{\"1\":{\"163\":1}}],[\"在应用层交互的数据单元称之为报文\",{\"1\":{\"158\":1}}],[\"在同一个tcp连接里面\",{\"1\":{\"153\":1}}],[\"在域名服务器解析的时候\",{\"1\":{\"141\":1}}],[\"在没有应用cdn时\",{\"1\":{\"133\":1}}],[\"在相关领域代码的全局代码中\",{\"1\":{\"117\":1}}],[\"在程序运行前\",{\"1\":{\"99\":1}}],[\"在\",{\"1\":{\"11\":1,\"182\":1,\"306\":2,\"320\":1,\"351\":2,\"357\":1,\"368\":1,\"381\":1,\"386\":2,\"403\":1,\"461\":1,\"487\":1,\"530\":1,\"589\":1,\"947\":2,\"1012\":1}}],[\"npx\",{\"1\":{\"928\":3}}],[\"npm\",{\"1\":{\"895\":2,\"925\":1,\"928\":1,\"946\":1}}],[\"ns\",{\"1\":{\"343\":2}}],[\"nginx\",{\"1\":{\"212\":1,\"723\":1,\"895\":2}}],[\"nfs\",{\"1\":{\"176\":1}}],[\"need\",{\"1\":{\"928\":1}}],[\"nestedroutingcomponent\",{\"1\":{\"556\":1}}],[\"nexttick\",{\"0\":{\"800\":1},\"1\":{\"801\":1}}],[\"next方法中可以拿到组件实例\",{\"1\":{\"765\":1}}],[\"nextstate\",{\"1\":{\"549\":1}}],[\"nextval\",{\"1\":{\"538\":4}}],[\"nextprops\",{\"1\":{\"479\":1,\"549\":1,\"550\":2}}],[\"next\",{\"1\":{\"449\":1,\"479\":1,\"575\":4,\"828\":3}}],[\"nexteffect\",{\"1\":{\"428\":1}}],[\"never\",{\"0\":{\"394\":1},\"1\":{\"394\":1,\"640\":1}}],[\"never类型\",{\"1\":{\"367\":1}}],[\"neither\",{\"1\":{\"312\":1}}],[\"newly\",{\"1\":{\"969\":1}}],[\"newlines\",{\"1\":{\"379\":1}}],[\"newline\",{\"1\":{\"332\":4,\"379\":2}}],[\"newendvnode\",{\"1\":{\"770\":2}}],[\"newendidx\",{\"1\":{\"770\":3}}],[\"newstartvnode\",{\"1\":{\"770\":10}}],[\"newstartidx++\",{\"1\":{\"770\":2}}],[\"newstartidx\",{\"1\":{\"770\":4}}],[\"newch\",{\"1\":{\"770\":6}}],[\"newcount\",{\"1\":{\"588\":4}}],[\"newproperty1\",{\"1\":{\"714\":1}}],[\"newmovies\",{\"1\":{\"542\":4}}],[\"new实例化\",{\"0\":{\"337\":1}}],[\"new构造器\",{\"1\":{\"270\":1}}],[\"new\",{\"1\":{\"254\":1,\"258\":4,\"259\":1,\"260\":3,\"263\":1,\"264\":1,\"270\":1,\"272\":2,\"277\":2,\"292\":1,\"325\":1,\"337\":1,\"338\":1,\"339\":3,\"340\":1,\"343\":1,\"346\":1,\"347\":3,\"349\":1,\"350\":1,\"351\":2,\"362\":3,\"368\":3,\"388\":2,\"460\":1,\"532\":2,\"538\":1,\"626\":1,\"627\":1,\"662\":2,\"769\":1,\"773\":1,\"797\":1,\"851\":3,\"862\":1,\"878\":1,\"884\":1,\"895\":1,\"907\":2,\"909\":2,\"953\":2,\"954\":2,\"955\":1}}],[\"newtarget\",{\"1\":{\"114\":2}}],[\"network\",{\"1\":{\"132\":1,\"224\":1}}],[\"naive\",{\"1\":{\"812\":1}}],[\"navigation\",{\"1\":{\"884\":4}}],[\"navigationback\",{\"1\":{\"828\":1}}],[\"navigator\",{\"1\":{\"858\":1}}],[\"navigateback\",{\"1\":{\"832\":2}}],[\"navigateto\",{\"1\":{\"832\":1}}],[\"nav>\",{\"1\":{\"594\":1,\"595\":1}}],[\"navlink>\",{\"1\":{\"596\":3,\"603\":1,\"604\":1,\"605\":1}}],[\"navlink是在link基础之上增加了一些样式属性\",{\"1\":{\"596\":1}}],[\"navlink\",{\"0\":{\"596\":1},\"1\":{\"593\":1}}],[\"native\",{\"1\":{\"592\":2,\"699\":1}}],[\"nativeevent\",{\"1\":{\"504\":1,\"505\":1}}],[\"nativeevent属性获取\",{\"1\":{\"504\":1}}],[\"nan\",{\"0\":{\"377\":1},\"1\":{\"130\":1,\"377\":4}}],[\"namespace\",{\"1\":{\"308\":1,\"343\":2,\"665\":1}}],[\"names\",{\"1\":{\"138\":1}}],[\"name=why\",{\"1\":{\"604\":1}}],[\"name=value\",{\"1\":{\"280\":1}}],[\"name=qiming\",{\"1\":{\"217\":2}}],[\"name=\",{\"1\":{\"55\":1,\"406\":8,\"465\":1,\"530\":1,\"538\":2,\"621\":1,\"662\":1}}],[\"name\",{\"1\":{\"13\":1,\"51\":1,\"133\":1,\"227\":1,\"258\":1,\"259\":2,\"260\":2,\"261\":6,\"262\":2,\"263\":3,\"264\":6,\"320\":1,\"324\":1,\"351\":2,\"381\":2,\"399\":1,\"406\":3,\"454\":1,\"455\":1,\"457\":2,\"472\":1,\"473\":1,\"480\":1,\"530\":1,\"538\":2,\"588\":6,\"597\":4,\"600\":4,\"605\":1,\"620\":1,\"621\":1,\"626\":10,\"627\":1,\"645\":3,\"646\":8,\"662\":7,\"664\":1,\"687\":2,\"688\":1,\"737\":1,\"895\":2}}],[\"num\",{\"1\":{\"645\":1}}],[\"numbers\",{\"1\":{\"542\":3}}],[\"number\",{\"1\":{\"428\":1,\"645\":3,\"646\":2,\"657\":2,\"658\":2,\"659\":7,\"662\":3,\"669\":4,\"670\":3,\"699\":1}}],[\"number等\",{\"1\":{\"99\":1}}],[\"null合并\",{\"0\":{\"358\":1}}],[\"nullsafe\",{\"1\":{\"344\":1}}],[\"null\",{\"0\":{\"370\":1},\"1\":{\"130\":1,\"250\":1,\"251\":2,\"278\":1,\"326\":1,\"344\":6,\"346\":1,\"358\":1,\"367\":1,\"368\":2,\"370\":4,\"402\":1,\"409\":1,\"428\":11,\"429\":3,\"473\":1,\"500\":1,\"537\":2,\"538\":1,\"549\":2,\"587\":2,\"597\":1,\"600\":1,\"609\":1,\"612\":1,\"793\":2,\"845\":1,\"848\":2}}],[\"nth\",{\"1\":{\"35\":2}}],[\"nomatch\",{\"1\":{\"598\":1,\"603\":1}}],[\"nonzerodigit\",{\"1\":{\"994\":3}}],[\"non\",{\"1\":{\"359\":1}}],[\"none后\",{\"1\":{\"67\":1}}],[\"none\",{\"0\":{\"67\":1},\"1\":{\"12\":1,\"13\":1,\"66\":1,\"67\":1,\"72\":1,\"147\":1,\"223\":1,\"224\":2,\"226\":2,\"757\":1,\"759\":1,\"867\":1,\"868\":1,\"869\":2}}],[\"none<\",{\"1\":{\"11\":1}}],[\"nowdoc结构\",{\"0\":{\"382\":1}}],[\"nowdoc\",{\"1\":{\"378\":1,\"382\":2}}],[\"now\",{\"1\":{\"332\":2,\"381\":2,\"480\":2}}],[\"nowrap才能够生效的\",{\"1\":{\"87\":1}}],[\"nowrap\",{\"1\":{\"87\":2}}],[\"nor\",{\"1\":{\"312\":1}}],[\"normalcompletion或throwcompletion的结果时\",{\"1\":{\"973\":1}}],[\"normal|break\",{\"1\":{\"47\":1}}],[\"normal\",{\"1\":{\"13\":2,\"47\":1,\"123\":1,\"949\":1,\"972\":1}}],[\"nov\",{\"1\":{\"224\":1}}],[\"node环境\",{\"1\":{\"908\":1}}],[\"nodeops\",{\"1\":{\"770\":1}}],[\"nodevalue\",{\"1\":{\"538\":1}}],[\"nodeexternals\",{\"1\":{\"449\":2}}],[\"node的path模块\",{\"1\":{\"449\":2}}],[\"node\",{\"1\":{\"100\":1,\"101\":1,\"251\":5,\"449\":4,\"450\":1,\"496\":1,\"538\":21,\"581\":1,\"582\":1,\"583\":1,\"760\":2,\"818\":1,\"895\":1,\"909\":1,\"934\":1,\"936\":1,\"946\":1,\"955\":2}}],[\"no\",{\"1\":{\"43\":1,\"224\":1,\"332\":1,\"866\":2,\"928\":1,\"998\":2}}],[\"notreservedword\",{\"1\":{\"995\":1}}],[\"notify通知所有的订阅者watcher\",{\"1\":{\"732\":1}}],[\"notice\",{\"1\":{\"326\":1}}],[\"notmyclass\",{\"1\":{\"362\":2}}],[\"note\",{\"1\":{\"130\":1}}],[\"not\",{\"1\":{\"35\":1,\"355\":1,\"368\":1,\"379\":4,\"645\":1,\"868\":1,\"869\":1,\"995\":1,\"1015\":1}}],[\"n\",{\"1\":{\"11\":4,\"35\":2,\"217\":2,\"253\":9,\"254\":3,\"315\":3,\"322\":1,\"326\":1,\"339\":2,\"340\":1,\"350\":4,\"379\":2,\"380\":1,\"383\":1,\"662\":2,\"672\":3,\"752\":1,\"753\":1,\"928\":1,\"1010\":1}}],[\"5kb\",{\"1\":{\"890\":1}}],[\"56\",{\"1\":{\"384\":1}}],[\"567\",{\"1\":{\"372\":1,\"375\":1}}],[\"5714285714286\",{\"1\":{\"374\":1}}],[\"5s\",{\"1\":{\"291\":1}}],[\"5xx\",{\"0\":{\"211\":1}}],[\"55\",{\"1\":{\"90\":4,\"291\":1}}],[\"555\",{\"1\":{\"82\":1,\"83\":1}}],[\"5turn\",{\"1\":{\"50\":1}}],[\"5deg\",{\"1\":{\"12\":1}}],[\"5daf34\",{\"1\":{\"11\":2,\"12\":1}}],[\"5\",{\"0\":{\"314\":1},\"1\":{\"12\":1,\"50\":1,\"103\":1,\"111\":1,\"123\":1,\"206\":1,\"223\":2,\"224\":1,\"253\":11,\"270\":2,\"312\":5,\"313\":4,\"320\":1,\"326\":4,\"344\":2,\"368\":1,\"374\":1,\"383\":2,\"384\":4,\"497\":7,\"520\":4,\"526\":2,\"575\":1,\"928\":4,\"934\":1,\"936\":1,\"994\":1}}],[\"5ms\",{\"1\":{\"12\":1}}],[\"5px\",{\"1\":{\"11\":1,\"12\":1}}],[\"58\",{\"1\":{\"11\":2}}],[\"505\",{\"1\":{\"211\":1}}],[\"504\",{\"1\":{\"211\":1,\"212\":1}}],[\"503\",{\"1\":{\"211\":1,\"212\":1}}],[\"502\",{\"1\":{\"211\":1}}],[\"501\",{\"1\":{\"211\":1}}],[\"50\",{\"1\":{\"13\":1,\"26\":2,\"27\":7,\"33\":1,\"45\":1,\"50\":3,\"223\":2,\"292\":1,\"885\":2}}],[\"500\",{\"1\":{\"211\":1,\"633\":1,\"634\":1}}],[\"500ms\",{\"1\":{\"11\":2,\"12\":1,\"633\":2,\"634\":2,\"635\":2}}],[\"500px\",{\"1\":{\"8\":3,\"25\":1}}],[\"50px\",{\"1\":{\"8\":1,\"26\":2,\"488\":1}}],[\"4~7和八进制数的组合\",{\"1\":{\"1011\":1}}],[\"4k\",{\"1\":{\"895\":2}}],[\"4kb\",{\"1\":{\"227\":1}}],[\"444\",{\"1\":{\"542\":1}}],[\"44014c\",{\"1\":{\"485\":1}}],[\"445\",{\"1\":{\"199\":1}}],[\"4之后的生命周期\",{\"1\":{\"433\":1}}],[\"456\",{\"1\":{\"368\":2}}],[\"4中引入的\",{\"1\":{\"349\":1}}],[\"46\",{\"1\":{\"324\":2}}],[\"43\",{\"1\":{\"224\":1}}],[\"4xx\",{\"0\":{\"210\":1}}],[\"4918等规范扩展\",{\"1\":{\"205\":1}}],[\"4\",{\"0\":{\"314\":1},\"1\":{\"103\":1,\"123\":1,\"206\":1,\"250\":3,\"253\":7,\"258\":2,\"260\":1,\"270\":2,\"323\":1,\"324\":1,\"336\":1,\"345\":1,\"346\":1,\"357\":1,\"367\":1,\"372\":1,\"374\":1,\"375\":1,\"378\":1,\"384\":1,\"497\":5,\"532\":2,\"811\":1,\"928\":4,\"936\":1,\"941\":1,\"994\":1}}],[\"414px\",{\"1\":{\"59\":1}}],[\"40\",{\"1\":{\"313\":1,\"324\":2}}],[\"408\",{\"1\":{\"210\":1}}],[\"407\",{\"1\":{\"210\":1}}],[\"406\",{\"1\":{\"210\":1}}],[\"405\",{\"1\":{\"210\":1}}],[\"404\",{\"1\":{\"210\":1,\"212\":1,\"1015\":1}}],[\"403\",{\"1\":{\"210\":1,\"212\":1}}],[\"401\",{\"1\":{\"210\":2}}],[\"4000\",{\"1\":{\"287\":1}}],[\"400\",{\"1\":{\"210\":1,\"212\":1}}],[\"400px\",{\"1\":{\"75\":1,\"87\":1,\"90\":2}}],[\"40px\",{\"1\":{\"25\":1,\"87\":2,\"89\":2,\"90\":1}}],[\"409eff\",{\"1\":{\"8\":1}}],[\"42\",{\"1\":{\"11\":2,\"247\":1,\"338\":1,\"384\":1}}],[\"edge开发者工具\",{\"1\":{\"888\":1}}],[\"edge上的使用\",{\"1\":{\"888\":1}}],[\"edge逐个渲染\",{\"1\":{\"539\":1}}],[\"err\",{\"1\":{\"859\":1,\"955\":1}}],[\"errorinfo\",{\"1\":{\"500\":2}}],[\"errorboundary>\",{\"1\":{\"500\":1}}],[\"errorboundary\",{\"1\":{\"500\":1}}],[\"error\",{\"1\":{\"272\":1,\"324\":1,\"359\":4,\"500\":9,\"770\":1,\"826\":1,\"978\":1}}],[\"e与d\",{\"1\":{\"769\":1}}],[\"effecttag\",{\"1\":{\"428\":1}}],[\"effect\",{\"1\":{\"428\":5,\"520\":1}}],[\"eod\",{\"1\":{\"382\":2}}],[\"eot$|\",{\"1\":{\"895\":1}}],[\"eot\",{\"1\":{\"381\":1}}],[\"eol\",{\"1\":{\"338\":1,\"350\":1}}],[\"emittodo\",{\"1\":{\"672\":2}}],[\"emit\",{\"0\":{\"672\":1},\"1\":{\"672\":3}}],[\"emp\",{\"1\":{\"662\":2}}],[\"employee\",{\"1\":{\"662\":2}}],[\"empty\",{\"1\":{\"35\":1,\"37\":1,\"130\":1,\"357\":2,\"977\":1,\"996\":2}}],[\"emotion\",{\"1\":{\"488\":1}}],[\"email=\",{\"1\":{\"413\":1}}],[\"emailinput\",{\"1\":{\"413\":1}}],[\"email\",{\"1\":{\"406\":4,\"413\":2,\"687\":2}}],[\"embedded\",{\"1\":{\"379\":1}}],[\"epsilon\",{\"1\":{\"376\":1}}],[\"equivalent\",{\"1\":{\"330\":1}}],[\"equals\",{\"1\":{\"312\":2}}],[\"equal\",{\"1\":{\"312\":1}}],[\"echo\",{\"1\":{\"306\":2,\"312\":5,\"315\":1,\"321\":1,\"322\":1,\"323\":1,\"325\":3,\"330\":7,\"331\":2,\"332\":4,\"333\":5,\"336\":1,\"338\":1,\"340\":1,\"343\":1,\"350\":5,\"357\":2,\"360\":1,\"368\":7,\"376\":1,\"379\":7,\"381\":1,\"382\":1,\"385\":8,\"388\":1,\"399\":2,\"402\":2,\"403\":2,\"404\":2,\"406\":5}}],[\"ecma\",{\"2\":{\"1001\":1}}],[\"ecma对普通脚本的定义\",{\"1\":{\"986\":1}}],[\"ecma语言值\",{\"1\":{\"981\":1}}],[\"ecma语言值以粗体显示\",{\"1\":{\"980\":1}}],[\"ecma规范类型值\",{\"1\":{\"981\":1}}],[\"ecma通过算法或描述性要求来表达的额外规则\",{\"1\":{\"978\":1}}],[\"ecma在抽象操作\",{\"1\":{\"130\":1}}],[\"ecma中的语言值以粗体表示\",{\"1\":{\"130\":1}}],[\"ecma中的携带文法参数产生式如下所示\",{\"1\":{\"129\":1}}],[\"ecma中的产生式\",{\"1\":{\"128\":1}}],[\"ecma是一个js标准\",{\"1\":{\"127\":1}}],[\"ecmascript\",{\"1\":{\"115\":1,\"937\":1,\"1008\":1}}],[\"ecmascript执行上下文的词法环境组件指向一个环境记录器\",{\"1\":{\"111\":1}}],[\"ecmascript有两种常见的宿主\",{\"1\":{\"98\":1}}],[\"ecmascript并不是一门能够独立运行的编程语言\",{\"1\":{\"98\":1}}],[\"ecmascript代码的执行上下文还有额外的三个组件\",{\"1\":{\"95\":1}}],[\"ecma标准\",{\"0\":{\"109\":1},\"2\":{\"97\":1,\"102\":1,\"108\":1,\"110\":1,\"125\":1,\"131\":1,\"964\":1,\"966\":1,\"974\":1,\"982\":1,\"987\":1,\"989\":1,\"1000\":1,\"1003\":1,\"1005\":1,\"1007\":1,\"1014\":1}}],[\"every\",{\"1\":{\"928\":1}}],[\"eventbus\",{\"1\":{\"696\":1}}],[\"eventname\",{\"1\":{\"538\":2}}],[\"event\",{\"0\":{\"850\":1},\"1\":{\"287\":2,\"500\":1,\"555\":1,\"699\":2,\"811\":1}}],[\"eventtype\",{\"1\":{\"273\":3}}],[\"evaluate\",{\"1\":{\"948\":1}}],[\"evaluated\",{\"1\":{\"663\":4}}],[\"evaluationscript\",{\"1\":{\"977\":1}}],[\"evaluation\",{\"1\":{\"95\":1}}],[\"eval函数声明实例化\",{\"1\":{\"118\":1}}],[\"evaldeclarationinstantiation\",{\"1\":{\"118\":1}}],[\"e\",{\"1\":{\"254\":2,\"291\":6,\"380\":1,\"382\":2,\"414\":4,\"466\":4,\"504\":2,\"505\":4,\"511\":2,\"555\":3,\"612\":1,\"635\":1,\"752\":1,\"753\":1,\"769\":2,\"851\":2,\"932\":1}}],[\"es规范类型\",{\"0\":{\"1004\":1}}],[\"es语言类型\",{\"0\":{\"1002\":1}}],[\"es语言值\",{\"1\":{\"114\":1}}],[\"es2015\",{\"1\":{\"936\":1}}],[\"es5\",{\"1\":{\"662\":1,\"933\":1}}],[\"es自带能力\",{\"0\":{\"652\":1}}],[\"es特性\",{\"1\":{\"651\":1}}],[\"escape\",{\"1\":{\"380\":1}}],[\"es6类\",{\"0\":{\"626\":1}}],[\"es6进行转换\",{\"1\":{\"449\":1}}],[\"es6\",{\"0\":{\"264\":1},\"1\":{\"928\":1}}],[\"established\",{\"1\":{\"243\":2}}],[\"etag的值放入if\",{\"1\":{\"869\":1}}],[\"etag会得到更新\",{\"1\":{\"869\":1}}],[\"etag标头的值是服务器生成的任意值\",{\"1\":{\"869\":1}}],[\"etag可以保证每一个资源是唯一的\",{\"1\":{\"226\":1}}],[\"etag就像一个指纹\",{\"1\":{\"226\":1}}],[\"etag\",{\"1\":{\"226\":1}}],[\"exception\",{\"1\":{\"969\":1}}],[\"exclude\",{\"1\":{\"449\":2,\"763\":1,\"909\":1}}],[\"exact\",{\"1\":{\"449\":1,\"595\":1,\"596\":1,\"598\":1}}],[\"exampleapp\",{\"1\":{\"449\":3}}],[\"example<\",{\"1\":{\"333\":1}}],[\"example\",{\"1\":{\"123\":2,\"200\":2,\"224\":1,\"326\":1,\"333\":1,\"349\":2,\"382\":2,\"406\":1,\"449\":1,\"519\":2,\"520\":2,\"530\":1,\"861\":1}}],[\"existing\",{\"1\":{\"496\":1}}],[\"existent\",{\"1\":{\"359\":1}}],[\"exit和xxx\",{\"1\":{\"633\":1}}],[\"exit\",{\"1\":{\"394\":1,\"632\":2,\"633\":3,\"634\":2,\"635\":2}}],[\"execute\",{\"1\":{\"948\":1}}],[\"exec\",{\"1\":{\"360\":2}}],[\"extensions\",{\"1\":{\"909\":1}}],[\"extending\",{\"1\":{\"340\":1}}],[\"extendclass\",{\"1\":{\"340\":2}}],[\"extend\",{\"1\":{\"277\":1,\"727\":1,\"793\":2}}],[\"extends\",{\"1\":{\"264\":1,\"339\":2,\"340\":2,\"362\":1,\"414\":2,\"415\":1,\"416\":1,\"454\":1,\"457\":1,\"460\":1,\"461\":1,\"465\":1,\"466\":1,\"474\":1,\"479\":2,\"480\":5,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"500\":2,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"519\":1,\"520\":1,\"530\":1,\"533\":1,\"538\":1,\"555\":2,\"556\":1,\"566\":1,\"567\":1,\"580\":1,\"581\":1,\"582\":1,\"587\":1,\"588\":2,\"608\":1,\"609\":1,\"612\":1,\"620\":1,\"621\":1,\"626\":2,\"627\":3,\"633\":1,\"634\":1,\"635\":1,\"645\":1,\"647\":1,\"650\":1,\"653\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1}}],[\"externals\",{\"1\":{\"449\":2}}],[\"ext\",{\"1\":{\"408\":2,\"895\":1}}],[\"extract\",{\"1\":{\"928\":2}}],[\"extra\",{\"1\":{\"321\":4}}],[\"expires\",{\"1\":{\"865\":2}}],[\"expires标头使用明确的时间\",{\"1\":{\"865\":1}}],[\"expirationtime\",{\"1\":{\"428\":3}}],[\"experimentaldecorators\",{\"1\":{\"662\":1}}],[\"expect\",{\"1\":{\"224\":2}}],[\"export关键字可以导出类型\",{\"1\":{\"664\":1}}],[\"exports\",{\"1\":{\"449\":2,\"895\":1,\"907\":1,\"909\":1,\"926\":1,\"948\":1,\"953\":1,\"954\":1,\"956\":1}}],[\"export\",{\"1\":{\"449\":2,\"466\":1,\"479\":1,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":3,\"505\":1,\"527\":1,\"538\":2,\"550\":2,\"555\":2,\"556\":1,\"559\":1,\"566\":1,\"567\":1,\"570\":1,\"575\":1,\"594\":1,\"595\":1,\"606\":1,\"608\":1,\"609\":1,\"612\":1,\"633\":1,\"634\":1,\"635\":1,\"664\":2,\"665\":2,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"696\":1,\"753\":1,\"759\":1,\"760\":1,\"792\":2,\"858\":1,\"895\":1}}],[\"explode\",{\"1\":{\"407\":1}}],[\"expand\",{\"1\":{\"379\":2}}],[\"express\",{\"1\":{\"449\":14,\"723\":1}}],[\"expression的形式是object\",{\"1\":{\"661\":1}}],[\"expression2\",{\"1\":{\"313\":1}}],[\"expression1\",{\"1\":{\"313\":1}}],[\"expression\",{\"1\":{\"123\":1,\"313\":5,\"331\":1,\"737\":1,\"992\":1,\"998\":1}}],[\"expressionopt\",{\"1\":{\"122\":1}}],[\"expr3\",{\"1\":{\"357\":2}}],[\"expr1\",{\"1\":{\"357\":4}}],[\"ensure和import\",{\"1\":{\"859\":1}}],[\"ensure\",{\"1\":{\"858\":4,\"859\":1,\"933\":1}}],[\"ensure技术\",{\"1\":{\"858\":1}}],[\"engine=engine\",{\"1\":{\"649\":1}}],[\"engine\",{\"1\":{\"649\":2}}],[\"enqueuesetstate\",{\"1\":{\"612\":1}}],[\"enhancer\",{\"1\":{\"575\":2}}],[\"enhance\",{\"1\":{\"479\":1}}],[\"enhancedcomponent\",{\"1\":{\"478\":1,\"479\":3}}],[\"enum\",{\"1\":{\"389\":1,\"640\":1,\"654\":2}}],[\"enter\",{\"1\":{\"441\":2,\"527\":1,\"632\":1,\"633\":6,\"634\":2,\"635\":2,\"759\":1}}],[\"ent\",{\"1\":{\"324\":3}}],[\"entrylist\",{\"1\":{\"878\":2,\"884\":2}}],[\"entry\",{\"1\":{\"285\":6,\"449\":2,\"862\":5,\"878\":3,\"909\":1,\"926\":1,\"932\":3,\"939\":1,\"954\":2}}],[\"entry=>\",{\"1\":{\"285\":1}}],[\"entries\",{\"1\":{\"285\":2,\"862\":2}}],[\"encode\",{\"1\":{\"324\":1}}],[\"encoding=\",{\"1\":{\"316\":1}}],[\"encoding\",{\"0\":{\"316\":1},\"1\":{\"223\":1,\"224\":2,\"314\":1,\"316\":1,\"895\":2}}],[\"endindex移动到b\",{\"1\":{\"731\":1}}],[\"endif\",{\"1\":{\"312\":3,\"331\":1}}],[\"end\",{\"1\":{\"480\":3,\"560\":1,\"609\":1}}],[\"endswitch\",{\"1\":{\"312\":1}}],[\"endforeach\",{\"1\":{\"312\":1}}],[\"endfor\",{\"1\":{\"312\":1}}],[\"endwhile\",{\"1\":{\"312\":1}}],[\"en\",{\"1\":{\"223\":2,\"224\":3}}],[\"env\",{\"1\":{\"123\":1,\"449\":2,\"895\":2,\"925\":1,\"928\":1}}],[\"environment\",{\"0\":{\"934\":1},\"1\":{\"98\":1,\"111\":1,\"123\":1}}],[\"enabled\",{\"1\":{\"35\":1,\"330\":1}}],[\"eee\",{\"1\":{\"78\":1}}],[\"elm\",{\"1\":{\"770\":4}}],[\"el\",{\"1\":{\"285\":1,\"668\":2,\"737\":1,\"753\":22,\"759\":11,\"769\":1,\"775\":1}}],[\"else>c<\",{\"1\":{\"760\":1}}],[\"elseif\",{\"1\":{\"312\":3,\"368\":1}}],[\"else\",{\"1\":{\"90\":1,\"254\":1,\"292\":1,\"312\":3,\"331\":1,\"344\":2,\"357\":2,\"358\":2,\"368\":2,\"407\":1,\"538\":5,\"549\":1,\"575\":1,\"659\":1,\"753\":6,\"759\":1,\"760\":6,\"770\":8,\"858\":1,\"970\":1}}],[\"element层级\",{\"0\":{\"496\":1}}],[\"elementtype\",{\"1\":{\"428\":1}}],[\"element\",{\"1\":{\"59\":1,\"285\":2,\"291\":9,\"413\":1,\"429\":3,\"493\":1,\"538\":1,\"582\":2,\"621\":1,\"717\":1,\"753\":1,\"812\":1}}],[\"ellipsis生效的基础\",{\"1\":{\"87\":1}}],[\"ellipsis\",{\"1\":{\"47\":1,\"87\":2,\"90\":2}}],[\"early\",{\"1\":{\"978\":1}}],[\"each\",{\"1\":{\"46\":1,\"90\":1}}],[\"ease\",{\"1\":{\"11\":6,\"12\":1,\"13\":5,\"291\":1}}],[\"e6a23c\",{\"1\":{\"8\":1}}],[\"等动画内容\",{\"1\":{\"879\":1}}],[\"等用户停止输入的时候\",{\"1\":{\"849\":1}}],[\"等浏览器忙完之后有剩余时间\",{\"1\":{\"429\":1}}],[\"等主线程不忙的时候在继续执行\",{\"1\":{\"429\":1}}],[\"等价于\",{\"1\":{\"324\":1}}],[\"等同于以下步骤\",{\"1\":{\"971\":1,\"972\":1}}],[\"等同于以下三个分支\",{\"1\":{\"313\":1}}],[\"等同于如果\",{\"1\":{\"357\":1}}],[\"等同于属性的名称\",{\"1\":{\"308\":1}}],[\"等同于border\",{\"1\":{\"43\":1}}],[\"等全部完成后\",{\"1\":{\"283\":1}}],[\"等待服务端的确认\",{\"1\":{\"244\":1}}],[\"等到可以发送的时候就发送\",{\"1\":{\"182\":1}}],[\"等\",{\"1\":{\"171\":1,\"359\":1,\"811\":1,\"812\":1,\"908\":1,\"932\":1}}],[\"等于十进制\",{\"1\":{\"372\":3}}],[\"等于\",{\"1\":{\"11\":4,\"356\":5}}],[\"等等之前\",{\"1\":{\"359\":1}}],[\"等等\",{\"1\":{\"8\":1,\"101\":1}}],[\"匀速\",{\"1\":{\"11\":1}}],[\"描述了如何处理非原生\",{\"1\":{\"937\":1}}],[\"描述了网页对互动的整体响应能力\",{\"1\":{\"882\":1}}],[\"描述\",{\"1\":{\"11\":1,\"13\":1}}],[\"值时\",{\"1\":{\"1008\":1}}],[\"值或特征相同意味着相等\",{\"1\":{\"981\":1}}],[\"值是对应的回调函数\",{\"1\":{\"696\":1}}],[\"值改变\",{\"1\":{\"607\":1}}],[\"值可以舍弃小数部分\",{\"1\":{\"374\":1}}],[\"值的字长可以用常量\",{\"1\":{\"372\":1}}],[\"值对应变量的内容\",{\"1\":{\"402\":1}}],[\"值对并且顺序和类型都相同则为\",{\"1\":{\"361\":1}}],[\"值对则为\",{\"1\":{\"361\":1}}],[\"值参数\",{\"1\":{\"320\":1}}],[\"值为服务器的isn+1\",{\"1\":{\"243\":1}}],[\"值为该函数对象\",{\"1\":{\"95\":1}}],[\"值\",{\"1\":{\"11\":1,\"16\":1,\"17\":1,\"96\":1,\"114\":1,\"116\":1,\"117\":1,\"356\":1,\"371\":1,\"825\":1,\"1008\":1}}],[\"值分别有如下\",{\"1\":{\"7\":1}}],[\"d与c\",{\"1\":{\"769\":1}}],[\"das\",{\"1\":{\"662\":1}}],[\"dashboard\",{\"1\":{\"533\":2}}],[\"date\",{\"1\":{\"224\":2,\"277\":2,\"480\":2}}],[\"dataset\",{\"1\":{\"862\":1}}],[\"data初始化时\",{\"1\":{\"728\":1}}],[\"data属性为何是一个函数\",{\"0\":{\"726\":1}}],[\"data=\",{\"1\":{\"480\":1}}],[\"datalist=datalist\",{\"1\":{\"292\":1}}],[\"datalist=\",{\"1\":{\"292\":1}}],[\"datalist\",{\"1\":{\"292\":2}}],[\"datagram\",{\"1\":{\"181\":1}}],[\"data\",{\"0\":{\"669\":1},\"1\":{\"163\":1,\"287\":2,\"480\":9,\"525\":1,\"526\":1,\"527\":13,\"573\":5,\"667\":1,\"669\":1,\"769\":1,\"770\":2,\"793\":1,\"796\":1,\"858\":1,\"945\":1}}],[\"dnf\",{\"1\":{\"368\":1}}],[\"dns解析\",{\"1\":{\"907\":1}}],[\"dns查询过程大约消耗20毫秒\",{\"1\":{\"871\":1}}],[\"dns查询\",{\"0\":{\"188\":1}}],[\"dns相当于一个翻译官\",{\"1\":{\"138\":1}}],[\"dns\",{\"0\":{\"138\":1},\"1\":{\"133\":1,\"138\":1,\"140\":1,\"142\":4,\"158\":1,\"171\":1,\"176\":1,\"186\":1,\"883\":1}}],[\"duck\",{\"1\":{\"368\":4}}],[\"dump\",{\"1\":{\"313\":1,\"324\":3,\"326\":5,\"346\":2,\"362\":6,\"374\":3}}],[\"duration\",{\"1\":{\"11\":2,\"12\":1,\"13\":1,\"49\":1,\"51\":1}}],[\"dghlihnhbxbszsbub25jzq==\",{\"1\":{\"200\":1}}],[\"doprint\",{\"1\":{\"650\":3}}],[\"done的class\",{\"1\":{\"633\":2}}],[\"doe\",{\"1\":{\"600\":1}}],[\"docs\",{\"1\":{\"689\":1}}],[\"doctype\",{\"1\":{\"560\":1}}],[\"documentfragment是dom节点\",{\"1\":{\"918\":1}}],[\"documents\",{\"1\":{\"330\":1}}],[\"documentelement\",{\"1\":{\"59\":2,\"285\":4}}],[\"document\",{\"1\":{\"59\":2,\"251\":4,\"273\":1,\"280\":1,\"285\":3,\"287\":2,\"291\":2,\"421\":1,\"449\":1,\"505\":8,\"520\":4,\"530\":1,\"532\":1,\"537\":1,\"538\":3,\"560\":1,\"615\":1,\"851\":3,\"862\":1,\"916\":2,\"917\":2,\"918\":3}}],[\"doing\",{\"1\":{\"388\":1}}],[\"double\",{\"1\":{\"324\":1,\"375\":1}}],[\"dog\",{\"1\":{\"306\":1}}],[\"down\",{\"1\":{\"292\":1,\"654\":1,\"655\":2}}],[\"do\",{\"1\":{\"247\":1,\"379\":3,\"388\":1,\"389\":2,\"479\":1,\"928\":7}}],[\"dom操作\",{\"1\":{\"777\":1}}],[\"dom元素依然存在\",{\"1\":{\"757\":1}}],[\"dom是很慢的\",{\"1\":{\"709\":1}}],[\"dom的常用api\",{\"1\":{\"593\":1}}],[\"dom的概念\",{\"1\":{\"492\":1}}],[\"dom节点跨层级的操作不做优化\",{\"1\":{\"494\":1}}],[\"dom来找出真正的dom变化之处\",{\"1\":{\"492\":1}}],[\"dom提供了服务端渲染的\",{\"1\":{\"449\":1}}],[\"dom型\",{\"1\":{\"299\":2}}],[\"dom2级\",{\"1\":{\"273\":1}}],[\"dom0级\",{\"1\":{\"273\":1}}],[\"dom删除了\",{\"1\":{\"251\":1}}],[\"domain\",{\"1\":{\"138\":1}}],[\"dom\",{\"1\":{\"100\":1,\"192\":2,\"292\":1,\"421\":3,\"423\":2,\"428\":1,\"429\":1,\"449\":7,\"466\":1,\"504\":1,\"505\":7,\"537\":1,\"538\":1,\"546\":3,\"560\":2,\"578\":1,\"579\":1,\"584\":1,\"587\":2,\"592\":1,\"594\":1,\"595\":1,\"599\":1,\"601\":1,\"606\":3,\"607\":1,\"770\":4,\"782\":1,\"783\":1}}],[\"dom结果均会存在\",{\"1\":{\"68\":1}}],[\"dependency\",{\"1\":{\"931\":1,\"941\":1}}],[\"dependencies\",{\"1\":{\"859\":1}}],[\"dev\",{\"1\":{\"928\":2}}],[\"devdependencies\",{\"1\":{\"928\":2}}],[\"dev创建自定义\",{\"1\":{\"926\":1}}],[\"development\",{\"1\":{\"449\":2,\"926\":1}}],[\"developer\",{\"1\":{\"223\":2}}],[\"debounce\",{\"1\":{\"845\":1}}],[\"detached\",{\"1\":{\"826\":1}}],[\"detail2\",{\"1\":{\"604\":3,\"605\":1}}],[\"detail\",{\"1\":{\"603\":6}}],[\"deactivated\",{\"0\":{\"783\":1},\"1\":{\"763\":1,\"773\":1}}],[\"deep\",{\"1\":{\"671\":1}}],[\"deepcopy\",{\"1\":{\"525\":1}}],[\"deepclone\",{\"1\":{\"277\":1}}],[\"destroyed\",{\"0\":{\"781\":1}}],[\"descriptor\",{\"1\":{\"662\":4,\"663\":2}}],[\"descriptor方法的属性描述符\",{\"1\":{\"662\":2}}],[\"desc\",{\"1\":{\"486\":2,\"487\":1,\"662\":1}}],[\"design\",{\"1\":{\"54\":1,\"74\":1}}],[\"dereference\",{\"1\":{\"344\":1}}],[\"defaultstrat\",{\"1\":{\"792\":1}}],[\"defaultstate\",{\"1\":{\"527\":1}}],[\"defaultprops\",{\"1\":{\"538\":1}}],[\"defaultvalue=\",{\"1\":{\"466\":1}}],[\"default\",{\"1\":{\"313\":1,\"320\":2,\"336\":1,\"349\":1,\"357\":2,\"358\":2,\"449\":2,\"479\":1,\"480\":1,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"505\":1,\"527\":2,\"538\":2,\"550\":2,\"555\":2,\"556\":1,\"566\":1,\"567\":1,\"575\":1,\"594\":1,\"595\":1,\"606\":1,\"608\":1,\"609\":1,\"612\":1,\"633\":1,\"634\":1,\"635\":1,\"668\":1,\"669\":1,\"670\":3,\"671\":1,\"672\":1,\"696\":1,\"858\":2,\"895\":1,\"984\":1}}],[\"defineconfig\",{\"1\":{\"895\":2}}],[\"definereactive新增属性的响应式\",{\"1\":{\"714\":1}}],[\"defineproperty无法劫持到对象的删除和添加属性的操作\",{\"1\":{\"819\":1}}],[\"defineproperty和proxy实现的区别\",{\"1\":{\"819\":1}}],[\"defineproperty实现的数据响应式\",{\"1\":{\"713\":1}}],[\"defineproperty的语法糖\",{\"1\":{\"661\":1}}],[\"defineproperty数据响应式或者vue3调用proxy监听数据的变化\",{\"1\":{\"612\":1}}],[\"defined\",{\"1\":{\"306\":2}}],[\"define\",{\"1\":{\"306\":5,\"936\":1}}],[\"deflate\",{\"1\":{\"223\":1,\"224\":1}}],[\"delegation\",{\"0\":{\"850\":1}}],[\"deleteoriginalassets\",{\"1\":{\"895\":1}}],[\"deleted\",{\"1\":{\"379\":3}}],[\"delete\",{\"1\":{\"147\":1,\"254\":1,\"538\":2}}],[\"delivery\",{\"1\":{\"132\":1}}],[\"delay\",{\"1\":{\"11\":2,\"12\":2,\"13\":1,\"49\":1,\"51\":1,\"848\":2,\"890\":1}}],[\"decorator\",{\"1\":{\"667\":1,\"668\":1,\"670\":1,\"671\":1,\"672\":1}}],[\"decoration\",{\"1\":{\"37\":1,\"47\":1,\"486\":1}}],[\"declarations2\",{\"1\":{\"978\":2}}],[\"declarations1\",{\"1\":{\"978\":2}}],[\"declarativerecord\",{\"1\":{\"107\":1,\"117\":1}}],[\"declare\",{\"0\":{\"314\":1},\"1\":{\"314\":4,\"315\":3,\"316\":1,\"368\":2}}],[\"decimal\",{\"1\":{\"304\":1}}],[\"demo2\",{\"1\":{\"650\":1}}],[\"demo1\",{\"1\":{\"650\":2,\"652\":1}}],[\"demo<\",{\"1\":{\"449\":4}}],[\"demo\",{\"1\":{\"89\":3,\"556\":1,\"653\":2}}],[\"d\",{\"1\":{\"36\":2,\"254\":2,\"324\":2,\"383\":2,\"386\":2,\"690\":1,\"769\":3,\"928\":1}}],[\"dialog\",{\"1\":{\"584\":1}}],[\"diamonds\",{\"1\":{\"389\":1}}],[\"diff时仅扫描动态节点\",{\"1\":{\"811\":1}}],[\"diff创建了a的真实节点\",{\"1\":{\"731\":1}}],[\"diff后建立c的真实节点\",{\"1\":{\"731\":1}}],[\"diff后将他作为第一个真实节点\",{\"1\":{\"731\":1}}],[\"diff算法优化\",{\"1\":{\"818\":1}}],[\"diff算法中的核心函数\",{\"1\":{\"770\":1}}],[\"diff算法\",{\"0\":{\"731\":1},\"1\":{\"542\":1}}],[\"diff算法进行高效的更新\",{\"1\":{\"538\":1}}],[\"diff过程还没完\",{\"1\":{\"496\":1}}],[\"diff过程如下\",{\"1\":{\"496\":1}}],[\"diff\",{\"0\":{\"492\":1},\"1\":{\"546\":1,\"587\":1,\"689\":2,\"770\":2}}],[\"diff树变成了链表\",{\"1\":{\"428\":1}}],[\"die\",{\"1\":{\"359\":1}}],[\"directed\",{\"1\":{\"967\":1}}],[\"directive方法进行注册\",{\"1\":{\"737\":1}}],[\"directives\",{\"1\":{\"668\":1,\"793\":2,\"811\":1}}],[\"directive\",{\"1\":{\"314\":1,\"315\":1}}],[\"direction\",{\"1\":{\"13\":1,\"37\":1,\"51\":1,\"52\":1,\"654\":1,\"655\":6}}],[\"dirname\",{\"1\":{\"308\":1,\"449\":2,\"909\":3,\"926\":1,\"954\":1}}],[\"dir\",{\"1\":{\"308\":1,\"760\":2}}],[\"dist\",{\"1\":{\"769\":1,\"895\":2,\"909\":3,\"926\":2,\"954\":1}}],[\"dispatching\",{\"1\":{\"575\":1}}],[\"dispatchandlog\",{\"1\":{\"575\":2}}],[\"dispatchandthunk\",{\"1\":{\"575\":2}}],[\"dispatch函数用于之后再次派发action\",{\"1\":{\"573\":1}}],[\"dispatch方法进行了改造\",{\"1\":{\"571\":1}}],[\"dispatch\",{\"1\":{\"565\":1,\"567\":2,\"573\":4,\"575\":13}}],[\"displayvar\",{\"1\":{\"336\":1,\"340\":2}}],[\"displayed\",{\"1\":{\"331\":2}}],[\"display的值为inline\",{\"1\":{\"20\":1}}],[\"display\",{\"0\":{\"67\":1,\"81\":1},\"1\":{\"11\":1,\"12\":1,\"28\":3,\"29\":2,\"30\":1,\"32\":1,\"33\":1,\"37\":1,\"66\":1,\"67\":1,\"72\":1,\"76\":1,\"77\":1,\"81\":5,\"82\":1,\"83\":1,\"90\":2,\"759\":2}}],[\"disable\",{\"1\":{\"330\":1,\"895\":1}}],[\"disabled\",{\"1\":{\"35\":1}}],[\"disaply\",{\"1\":{\"32\":1}}],[\"div`\",{\"1\":{\"488\":2}}],[\"div1\",{\"1\":{\"485\":2}}],[\"div><\",{\"1\":{\"560\":1}}],[\"div>节点\",{\"1\":{\"421\":1}}],[\"div>\",{\"1\":{\"7\":7,\"8\":4,\"11\":1,\"12\":1,\"15\":1,\"18\":1,\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2,\"35\":5,\"75\":3,\"76\":3,\"78\":4,\"79\":4,\"80\":4,\"81\":4,\"82\":4,\"83\":4,\"89\":1,\"414\":3,\"415\":1,\"416\":1,\"449\":3,\"458\":1,\"472\":1,\"474\":1,\"480\":2,\"485\":2,\"486\":1,\"487\":1,\"488\":1,\"497\":45,\"505\":2,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"519\":2,\"520\":2,\"530\":1,\"533\":1,\"537\":1,\"538\":3,\"555\":2,\"566\":1,\"583\":1,\"587\":2,\"588\":6,\"612\":1,\"627\":1,\"633\":2,\"635\":2,\"752\":1,\"753\":1,\"756\":2,\"760\":3,\"769\":1}}],[\"div\",{\"1\":{\"7\":1,\"35\":3,\"473\":1,\"505\":1,\"537\":1,\"587\":2,\"752\":1,\"753\":1}}],[\"是以下的缩写\",{\"1\":{\"994\":1}}],[\"是以下的缩写variabledeclaration\",{\"1\":{\"993\":1}}],[\"是以下请求阶段的总和\",{\"1\":{\"883\":1}}],[\"是web组件内的一个占位符\",{\"1\":{\"804\":1}}],[\"是否禁用压缩\",{\"1\":{\"895\":1}}],[\"是否在http\",{\"1\":{\"895\":2}}],[\"是否删除原有静态资源文件\",{\"1\":{\"895\":1}}],[\"是否执行\",{\"1\":{\"847\":1}}],[\"是否存在template标签\",{\"1\":{\"775\":1}}],[\"是否只是删除节点\",{\"1\":{\"770\":1}}],[\"是否定义data\",{\"1\":{\"770\":1}}],[\"是否为注释节点\",{\"1\":{\"770\":1}}],[\"是否可以复用\",{\"1\":{\"770\":1}}],[\"是否是文本节点\",{\"1\":{\"732\":1}}],[\"是源配置管理\",{\"1\":{\"680\":1}}],[\"是维护工程蓝图的标准作法\",{\"1\":{\"675\":1}}],[\"是会创建新属性的非同态映射类型\",{\"1\":{\"646\":1}}],[\"是可以不写的\",{\"1\":{\"627\":1}}],[\"是多变的\",{\"1\":{\"622\":1}}],[\"是在组件内被组件自己管理的\",{\"1\":{\"622\":1}}],[\"是在计算机科学中\",{\"1\":{\"247\":1}}],[\"是外部传递给组件的\",{\"1\":{\"622\":1}}],[\"是介于应用系统和系统软件之间的一类软件\",{\"1\":{\"571\":1}}],[\"是类名\",{\"1\":{\"538\":1}}],[\"是函数名\",{\"1\":{\"538\":1}}],[\"是字符串\",{\"1\":{\"538\":1}}],[\"是不建议使用深层次结构的数据\",{\"1\":{\"549\":1}}],[\"是不会影响后续节点操作的\",{\"1\":{\"496\":1}}],[\"是不安全的\",{\"1\":{\"232\":1}}],[\"是由\",{\"1\":{\"479\":1}}],[\"是由一串用点分隔的名字组成的\",{\"1\":{\"138\":1}}],[\"是react中定义组件最简单的方式\",{\"1\":{\"455\":1}}],[\"是无法在服务端完成\",{\"1\":{\"449\":1}}],[\"是对\",{\"1\":{\"428\":2}}],[\"是对称的\",{\"1\":{\"235\":1}}],[\"是因为浏览器无法中断正在执行的任务\",{\"1\":{\"885\":1}}],[\"是因为其不会在渲染期间触发\",{\"1\":{\"500\":1}}],[\"是因为\",{\"1\":{\"402\":1}}],[\"是用于衡量网页的整个生命周期内发生的每一次意外布局偏移\",{\"1\":{\"880\":1}}],[\"是用特殊的\",{\"1\":{\"402\":1}}],[\"是用户的可以缩放的操作\",{\"1\":{\"55\":1}}],[\"是内置伪类型\",{\"1\":{\"395\":1}}],[\"是内置编译时\",{\"1\":{\"395\":1}}],[\"是仅用于返回的类型\",{\"1\":{\"394\":1}}],[\"是仅用于返回类型\",{\"1\":{\"393\":1}}],[\"是顶级类型\",{\"1\":{\"392\":1}}],[\"是计算中所能接受的最小的差别值\",{\"1\":{\"376\":1}}],[\"是该属性名\",{\"1\":{\"345\":1}}],[\"是从左向右求值的\",{\"1\":{\"320\":1}}],[\"是调用\",{\"1\":{\"308\":1}}],[\"是替代性的\",{\"1\":{\"306\":1}}],[\"是通过将恶意的\",{\"1\":{\"301\":1}}],[\"是定义在\",{\"1\":{\"259\":1}}],[\"是面向对象软件技术当中的一个概念\",{\"1\":{\"256\":1}}],[\"是面向连接的协议\",{\"1\":{\"183\":1}}],[\"是实现网络通信的一种规范\",{\"1\":{\"230\":1}}],[\"是没有内容部分\",{\"1\":{\"212\":1}}],[\"是瞬时同步的\",{\"1\":{\"197\":1}}],[\"是一个轻量级的javascript库\",{\"1\":{\"890\":1}}],[\"是一个完全独立的库\",{\"1\":{\"526\":1}}],[\"是一个静态的方法\",{\"1\":{\"436\":1}}],[\"是一个结构化文本的抽象\",{\"1\":{\"421\":1}}],[\"是一个超全局变量\",{\"1\":{\"402\":1}}],[\"是一个关联数组\",{\"1\":{\"402\":1}}],[\"是一个到当前对象的引用\",{\"1\":{\"336\":1}}],[\"是一个在\",{\"1\":{\"315\":1}}],[\"是一个值\",{\"1\":{\"250\":1}}],[\"是一个简单的面向数据报的通信协议\",{\"1\":{\"181\":1}}],[\"是一种合作式调度\",{\"1\":{\"429\":1}}],[\"是一种文本协议\",{\"1\":{\"409\":1}}],[\"是一种在远端浏览器端存储数据并能追踪或识别再次访问的用户的机制\",{\"1\":{\"407\":1}}],[\"是一种特殊变量\",{\"1\":{\"390\":1}}],[\"是一种网络传输协议\",{\"1\":{\"195\":1}}],[\"是一种网络页面设计布局\",{\"1\":{\"54\":1}}],[\"是一种可靠\",{\"1\":{\"182\":1}}],[\"是四层或五层结构\",{\"1\":{\"177\":1}}],[\"是指webpack在打包过程中生成的一段代码\",{\"1\":{\"941\":1}}],[\"是指衡量从用户首次与网页互动\",{\"1\":{\"881\":1}}],[\"是指可见的最大图片\",{\"1\":{\"879\":1}}],[\"是指用户首次导航到网页到网页任何一部分内容呈现在屏幕上的时间\",{\"1\":{\"877\":1}}],[\"是指一种模式\",{\"1\":{\"488\":1}}],[\"是指在超文本传输协议\",{\"1\":{\"223\":1}}],[\"是指能够在多个不同网络间实现信息传输的协议簇\",{\"1\":{\"168\":1}}],[\"是指多层背景以不同的速度移动\",{\"1\":{\"5\":1}}],[\"是国际标准化组织\",{\"1\":{\"156\":1}}],[\"是进行域名和与之相对应的\",{\"1\":{\"138\":1}}],[\"是互联网一项服务\",{\"1\":{\"138\":1}}],[\"是\",{\"1\":{\"114\":1,\"322\":1,\"330\":1,\"407\":1,\"428\":1,\"517\":1,\"696\":1}}],[\"是overflow\",{\"1\":{\"87\":1}}],[\"是缩放的初始化\",{\"1\":{\"55\":1}}],[\"是缩放比例的最大值\",{\"1\":{\"55\":1}}],[\"是自适应手机屏幕的尺寸宽度\",{\"1\":{\"55\":1}}],[\"是浏览器默认的盒子模型\",{\"1\":{\"16\":1}}],[\"是为层叠样式表建议的允许可扩展标记语言\",{\"1\":{\"10\":1}}],[\"这可能不符合你的意图\",{\"1\":{\"948\":1}}],[\"这可以使php混合其他内容\",{\"1\":{\"331\":1}}],[\"这可以避免在\",{\"1\":{\"330\":1}}],[\"这段代码在浏览器中被用来加载和管理模块\",{\"1\":{\"941\":1}}],[\"这四个配置项使用相同的合并策略函数\",{\"1\":{\"793\":1}}],[\"这么一来\",{\"1\":{\"684\":1}}],[\"这一短语\",{\"1\":{\"996\":1}}],[\"这一特性使得cvs成为位于不同地点的人同时处理数据文件\",{\"1\":{\"680\":1}}],[\"这一步是决定如何更新\",{\"1\":{\"587\":1}}],[\"这两个组件的使用都十分的简单\",{\"1\":{\"606\":1}}],[\"这两步之间\",{\"1\":{\"571\":1}}],[\"这两对请求头响应头来管理的\",{\"1\":{\"226\":1}}],[\"这三个生命周期函数的组合\",{\"1\":{\"520\":1}}],[\"这明显是冗杂的\",{\"1\":{\"480\":1}}],[\"这使开发者能够在主事件循环上执行后台和低优先级工作\",{\"1\":{\"429\":1}}],[\"这使得大多数样板get\",{\"1\":{\"349\":1}}],[\"这使得参数的含义自成体系\",{\"1\":{\"324\":1}}],[\"这都是为找到被中断的任务\",{\"1\":{\"428\":1}}],[\"这时需要通过使用\",{\"1\":{\"953\":1}}],[\"这时的\",{\"1\":{\"527\":1}}],[\"这时\",{\"1\":{\"408\":1}}],[\"这时候则可以使用fragement\",{\"1\":{\"556\":1}}],[\"这时候可以给memo第二个参数传递比较函数\",{\"1\":{\"550\":1}}],[\"这时候就可以从避免无谓的渲染\",{\"1\":{\"547\":1}}],[\"这时候就需要一个第三方\",{\"1\":{\"239\":1}}],[\"这时候只需要传入第二个参数\",{\"1\":{\"520\":1}}],[\"这时候当我们在输入框输入内容的时候\",{\"1\":{\"465\":1}}],[\"这时候控制台会存在报错信息\",{\"1\":{\"449\":1}}],[\"这时候又创建单独的链接\",{\"1\":{\"146\":1}}],[\"这时候再给它一个margin\",{\"1\":{\"25\":1}}],[\"这时候\",{\"1\":{\"18\":1,\"253\":1,\"627\":1}}],[\"这将会建立两个单独的\",{\"1\":{\"407\":1}}],[\"这将如预期中的运行\",{\"1\":{\"331\":1}}],[\"这在数字索引数组中更容易选择正确的元素\",{\"1\":{\"385\":1}}],[\"这适用于所有表达式\",{\"1\":{\"359\":1}}],[\"这对使用了\",{\"1\":{\"343\":1}}],[\"这意味着它要么调用\",{\"1\":{\"394\":1}}],[\"这意味着其它所有类型都是它的子类型\",{\"1\":{\"392\":1}}],[\"这意味着\",{\"1\":{\"378\":1,\"881\":1,\"986\":1}}],[\"这意味着同一个类的属性和方法可以使用同样的名字\",{\"1\":{\"338\":1}}],[\"这意味着在\",{\"1\":{\"333\":1}}],[\"这告诉\",{\"1\":{\"330\":1}}],[\"这被称为\",{\"1\":{\"247\":1}}],[\"这很麻烦\",{\"1\":{\"247\":1}}],[\"这类反馈应该通知给开发者的逻辑层\",{\"1\":{\"836\":1}}],[\"这类常量可以通过\",{\"1\":{\"306\":1}}],[\"这类状态码代表了服务器在处理请求的过程中有错误或者异常状态发生\",{\"1\":{\"211\":1}}],[\"这类响应是临时响应\",{\"1\":{\"207\":1}}],[\"这也是\",{\"1\":{\"303\":1}}],[\"这也是所有继承方式里面相对最优的继承方式\",{\"1\":{\"263\":1}}],[\"这也是多路复用同时发送数据的实现条件\",{\"1\":{\"150\":1}}],[\"这也就造成\",{\"1\":{\"177\":1}}],[\"这样可以在不更改业务代码的情况下更新runtime代码\",{\"1\":{\"941\":1}}],[\"这样可以确保交换的密钥是安全的前提下\",{\"1\":{\"237\":1}}],[\"这样就不会引起丢帧现象\",{\"1\":{\"917\":1}}],[\"这样就可以相对的节约宽带\",{\"1\":{\"893\":1}}],[\"这样就避免了\",{\"1\":{\"149\":1}}],[\"这样我们就能简单通过中间件函数实现日志记录的信息\",{\"1\":{\"574\":1}}],[\"这样子渲染的其实就是state\",{\"1\":{\"566\":1}}],[\"这样每次调用\",{\"1\":{\"555\":1}}],[\"这样每次都要保存这个方法\",{\"1\":{\"253\":1}}],[\"这样做简化了事件处理和回收机制\",{\"1\":{\"504\":1}}],[\"这样的话input内的内容也就不会变了\",{\"1\":{\"465\":1}}],[\"这样的方法中\",{\"1\":{\"224\":1}}],[\"这样也就完成了路由的服务端渲染\",{\"1\":{\"449\":1}}],[\"这样也显著地减少了整个下载过程所需要的时间\",{\"1\":{\"147\":1}}],[\"这样不期望的空白符就不会出现在文件末尾\",{\"1\":{\"332\":1}}],[\"这样是无效的\",{\"1\":{\"314\":1}}],[\"这样是有效的\",{\"1\":{\"314\":1}}],[\"这样所有的子域应用都可以访问到这个cookie\",{\"1\":{\"287\":1}}],[\"这样客户端就能得出结论\",{\"1\":{\"243\":1}}],[\"这样服务端就能得出结论\",{\"1\":{\"243\":2}}],[\"这样\",{\"1\":{\"147\":1}}],[\"这说明一个参数列表\",{\"1\":{\"128\":1}}],[\"这就增加性能的开销\",{\"1\":{\"542\":1}}],[\"这就会导致一些用户交互\",{\"1\":{\"427\":1}}],[\"这就意味着不能在函数内\",{\"1\":{\"306\":1}}],[\"这就需要使用专门的链路层协议\",{\"1\":{\"163\":1}}],[\"这就是执行上下文的代码查找变量的起点\",{\"1\":{\"111\":1}}],[\"这就达到了滚动视差的效果\",{\"1\":{\"8\":1}}],[\"这些比较的算法操作决定了ecmascript\",{\"1\":{\"981\":1}}],[\"这些规则与语法的产生式相关联\",{\"1\":{\"978\":1}}],[\"这些信息在运行时被用来解析和加载模块\",{\"1\":{\"942\":1}}],[\"这些代码通常会被添加到打包后的bundle文件的顶部或底部\",{\"1\":{\"941\":1}}],[\"这些bundle文件可以配置为按需加载\",{\"1\":{\"939\":1}}],[\"这些模块会形成一个图\",{\"1\":{\"937\":1}}],[\"这些事件可以被插件所监听\",{\"1\":{\"932\":1}}],[\"这些文件就可以在浏览器中通过<\",{\"1\":{\"932\":1}}],[\"这些转换操作可以包括代码压缩\",{\"1\":{\"932\":1}}],[\"这些依赖模块可以是javascript文件\",{\"1\":{\"932\":1}}],[\"这些配置信息包括入口文件\",{\"1\":{\"932\":1}}],[\"这些指标可能会有所不同\",{\"1\":{\"886\":1}}],[\"这些静态node\",{\"1\":{\"818\":1}}],[\"这些属性未被当前组件声明为\",{\"1\":{\"696\":1}}],[\"这些路由传递参数主要分成了三种形式\",{\"1\":{\"602\":1}}],[\"这些虚拟dom树最终会渲染成真实dom\",{\"1\":{\"587\":1}}],[\"这些类别最终都会被转化成react\",{\"1\":{\"538\":1}}],[\"这些组件之间可以组合\",{\"1\":{\"530\":1}}],[\"这些数组在每个作用域内自动可用\",{\"1\":{\"400\":1}}],[\"这些数组变量包含了来自\",{\"1\":{\"400\":1}}],[\"这些特殊的常量不区分大小写\",{\"1\":{\"308\":1}}],[\"这些方法和属性要定义在object的构造器函数之上的prototype属性上\",{\"1\":{\"267\":1}}],[\"这些状态代码用来重定向\",{\"1\":{\"209\":1}}],[\"这些名称直接对应于其绑定对象的属性名称\",{\"1\":{\"116\":1}}],[\"这些标识符可能是变量\",{\"1\":{\"113\":1}}],[\"这些内置对象会帮助实现最基础的语言功能\",{\"1\":{\"99\":1}}],[\"这些内置对象至少包括一个全局对象以及所有标准定义的固有对象\",{\"1\":{\"99\":1}}],[\"这些不同决定了在一些特定场合下使用哪一种方法\",{\"1\":{\"65\":1}}],[\"这是版本控制系统的基本能力\",{\"1\":{\"675\":1}}],[\"这是react自动附带的\",{\"1\":{\"627\":1}}],[\"这是effect可选的清除机制\",{\"1\":{\"520\":1}}],[\"这是类组件不具备的方法\",{\"1\":{\"520\":1}}],[\"这是一个由40个十六进制字符\",{\"1\":{\"685\":1}}],[\"这是一条多行注释\",{\"1\":{\"333\":1}}],[\"这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本\",{\"1\":{\"90\":2}}],[\"这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本这是一些文本<\",{\"1\":{\"87\":1}}],[\"这是单行\",{\"1\":{\"333\":2}}],[\"这是临时响应\",{\"1\":{\"207\":1}}],[\"这是cdn实现的关键\",{\"1\":{\"133\":1}}],[\"这是with语句和全局对象所使用的记录器\",{\"1\":{\"112\":1}}],[\"这是因为react并不像vue2中调用object\",{\"1\":{\"612\":1}}],[\"这是因为value被this\",{\"1\":{\"465\":1}}],[\"这是因为这些生命周期钩子都来自于继承的react\",{\"1\":{\"459\":1}}],[\"这是因为两个实例使用的是同一个原型对象\",{\"1\":{\"258\":1}}],[\"这是因为\",{\"1\":{\"15\":1}}],[\"这个对象负责控制整个打包过程\",{\"1\":{\"932\":1}}],[\"这个时间不一定和屏幕的刷新时间相同\",{\"1\":{\"916\":1}}],[\"这个时候\",{\"1\":{\"8\":1}}],[\"这个新的chunk会被webpack通过jsonp来异步加载\",{\"1\":{\"859\":1}}],[\"这个过程就是热启动\",{\"1\":{\"837\":1}}],[\"这个过程就可以用上中间件\",{\"1\":{\"571\":1}}],[\"这个函数是webpack模块加载机制的核心\",{\"1\":{\"941\":1}}],[\"这个函数的主要目的是将父组件和子组件的配置进行合并\",{\"1\":{\"792\":1}}],[\"这个函数的作用是从this\",{\"1\":{\"748\":1}}],[\"这个函数在\",{\"1\":{\"770\":1}}],[\"这个函数会传入一个\",{\"1\":{\"579\":1}}],[\"这个参数就是props\",{\"1\":{\"621\":1}}],[\"这个元素就是虚拟dom树的节点\",{\"1\":{\"587\":1}}],[\"这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数\",{\"1\":{\"504\":1}}],[\"这个组件会被自动添加上一个不重复的class\",{\"1\":{\"488\":1}}],[\"这个模块中的所有css\",{\"1\":{\"487\":1}}],[\"这个功能有两个目的\",{\"1\":{\"349\":1}}],[\"这个注释会引发问题\",{\"1\":{\"333\":1}}],[\"这个尾部的逗号是不允许的\",{\"1\":{\"320\":1}}],[\"这个操作会把认证中心的cookie自动带过去\",{\"1\":{\"287\":1}}],[\"这个属性指向该函数\",{\"1\":{\"267\":1}}],[\"这个属性导致了列等高的效果\",{\"1\":{\"76\":1}}],[\"这个方法要执行5次\",{\"1\":{\"253\":1}}],[\"这个临时响应是用来通知客户端它的部分请求已经被服务器接收\",{\"1\":{\"207\":1}}],[\"这种做法需要将本地的登陆状态发送到服务端\",{\"1\":{\"830\":1}}],[\"这种映射是单向的\",{\"1\":{\"607\":1}}],[\"这种情况可以使用js的try\",{\"1\":{\"500\":1}}],[\"这种组件可以捕获发生在其子组件树任何位置的\",{\"1\":{\"500\":1}}],[\"这种服务器端和客户端共用一套代码的方式就称之为同构\",{\"1\":{\"449\":1}}],[\"这种继承方式的缺点也很明显\",{\"1\":{\"261\":1}}],[\"这种无连接的网络上也能够实现高可靠性的通信\",{\"1\":{\"182\":1}}],[\"这种方法\",{\"1\":{\"489\":1}}],[\"这种方法就能够简单实现首页的react服务端渲染\",{\"1\":{\"449\":1}}],[\"这种方法其实和最上面被否定掉的margin负值用法一样\",{\"1\":{\"27\":1}}],[\"这种方式压缩后的文件少\",{\"1\":{\"895\":1}}],[\"这种方式是默认的\",{\"1\":{\"895\":1}}],[\"这种方式是webpack特有的方案\",{\"1\":{\"487\":1}}],[\"这种方式在组件每次render渲染的时候\",{\"1\":{\"510\":1}}],[\"这种方式能够解决局部作用域问题\",{\"1\":{\"487\":1}}],[\"这种方式存在不好的地方在于样式是全局生效\",{\"1\":{\"486\":1}}],[\"这种方式优点\",{\"1\":{\"485\":1}}],[\"这种方式来访问非静态属性\",{\"1\":{\"345\":1}}],[\"这种方式看起来就没什么问题\",{\"1\":{\"260\":1}}],[\"这种方式非常合适加载静态资源\",{\"1\":{\"152\":1}}],[\"这种形式明显造成了性能上的缺陷\",{\"1\":{\"146\":1}}],[\"这种实现具有以下优点\",{\"1\":{\"89\":1}}],[\"这种实现方式存在缺陷\",{\"1\":{\"78\":1}}],[\"这种布局适用于内容上具有明显主次关系的网页\",{\"1\":{\"74\":1}}],[\"这里主要讲述的是react\",{\"1\":{\"593\":1}}],[\"这里主要借助object\",{\"1\":{\"261\":1}}],[\"这里这时候被动字节不用动\",{\"1\":{\"496\":1}}],[\"这里需要注意的是\",{\"1\":{\"479\":1}}],[\"这里需要使用webpakc对项目进行打包转换\",{\"1\":{\"449\":1}}],[\"这里给出一个简单的例子\",{\"1\":{\"459\":1}}],[\"这里对react\",{\"1\":{\"449\":1}}],[\"这里是求值语义\",{\"1\":{\"977\":1}}],[\"这里是给html\",{\"1\":{\"895\":1}}],[\"这里是一个函数\",{\"1\":{\"416\":1}}],[\"这里是\",{\"1\":{\"385\":1,\"538\":1}}],[\"这里改用\",{\"1\":{\"263\":1}}],[\"这里限制的是整个url长度\",{\"1\":{\"218\":1}}],[\"这里只是约定\",{\"1\":{\"217\":1}}],[\"这里称宽度较小的列父元素为次要布局容器\",{\"1\":{\"74\":1}}],[\"这里就不再展开述说\",{\"1\":{\"58\":1}}],[\"这里可以简单看看flex布局的关键属性作用\",{\"1\":{\"29\":1}}],[\"这里子元素设置了宽高\",{\"1\":{\"25\":1}}],[\"也称为目标符号\",{\"1\":{\"992\":1}}],[\"也称为产生式\",{\"1\":{\"992\":1}}],[\"也称为非终结符号\",{\"1\":{\"128\":1}}],[\"也没有必要\",{\"1\":{\"850\":2}}],[\"也通过\",{\"1\":{\"792\":1}}],[\"也是一个创建单页应用的web应用框架\",{\"1\":{\"810\":1}}],[\"也是diff的一种优化策略\",{\"1\":{\"768\":1}}],[\"也是不一样的\",{\"1\":{\"8\":1}}],[\"也从服务器仓库中拉取别人的提交\",{\"1\":{\"684\":1}}],[\"也能够减少子组件不必要的渲染\",{\"1\":{\"551\":1}}],[\"也能使接收端检测出所收到的帧有无差错\",{\"1\":{\"163\":1}}],[\"也存在\",{\"1\":{\"542\":1}}],[\"也会将c删除再重新创建h\",{\"1\":{\"495\":1}}],[\"也会调用\",{\"1\":{\"436\":1}}],[\"也会返回\",{\"1\":{\"373\":1}}],[\"也理解表单变量上下文中的数组\",{\"1\":{\"406\":1}}],[\"也适用于\",{\"1\":{\"406\":1}}],[\"也叫浮点数\",{\"1\":{\"375\":1}}],[\"也叫闭包函数\",{\"1\":{\"326\":1}}],[\"也仍然会被调用\",{\"1\":{\"359\":1}}],[\"也可用来确定一个变量是不是继承自某一父类的子类的实例\",{\"1\":{\"362\":1}}],[\"也可用于对象\",{\"1\":{\"343\":1}}],[\"也可以是\",{\"1\":{\"946\":1}}],[\"也可以是一个指令函数\",{\"1\":{\"737\":1}}],[\"也可以实现按需加载\",{\"1\":{\"858\":1}}],[\"也可以参与别人的开源项目\",{\"1\":{\"684\":1}}],[\"也可以用于类型声明\",{\"1\":{\"395\":1}}],[\"也可以用函数\",{\"1\":{\"306\":1}}],[\"也可以解包关联数组\",{\"1\":{\"385\":1}}],[\"也可以只指定一个函数的部分可选参数\",{\"1\":{\"324\":1}}],[\"也可以称\",{\"1\":{\"256\":1}}],[\"也可以设置为infinite\",{\"1\":{\"51\":1}}],[\"也可以分开写各个属性\",{\"1\":{\"49\":1}}],[\"也可以使用百分比刻画生命周期\",{\"1\":{\"13\":1}}],[\"也有其它应用的情况\",{\"1\":{\"326\":1}}],[\"也处于\",{\"1\":{\"243\":1}}],[\"也要有一个握手过程\",{\"1\":{\"200\":1}}],[\"也就不会刷新页面\",{\"1\":{\"607\":1}}],[\"也就不需要储存上一个函数了\",{\"1\":{\"253\":1}}],[\"也就不存在多路复用\",{\"1\":{\"198\":1}}],[\"也就是应用过转换后的资源\",{\"1\":{\"946\":1}}],[\"也就是把完成同一应用功能的代码放在一个目录下\",{\"1\":{\"570\":1}}],[\"也就是使用旧数据创建新数据时\",{\"1\":{\"525\":1}}],[\"也就是input标签是一个可读的状态\",{\"1\":{\"465\":1}}],[\"也就是通过使用es6类的编写形式去编写组件\",{\"1\":{\"454\":1}}],[\"也就是虚拟dom\",{\"1\":{\"421\":1}}],[\"也就是事件流\",{\"1\":{\"273\":1}}],[\"也就是常说的散列函数\",{\"1\":{\"238\":1}}],[\"也就是混合加密\",{\"1\":{\"237\":1}}],[\"也就是信息加密的等级\",{\"1\":{\"231\":1}}],[\"也就是作用域链的起点\",{\"1\":{\"111\":1}}],[\"也就是像元素没有分成多个盒子\",{\"1\":{\"46\":1}}],[\"也就是\",{\"1\":{\"16\":1,\"17\":1,\"330\":1,\"428\":1}}],[\"也就是说无论应用层交给udp多长的报文\",{\"1\":{\"181\":1}}],[\"也就是说agent是程序的执行环境\",{\"1\":{\"92\":1}}],[\"也就是说它会导致浏览器的重排和重绘\",{\"1\":{\"67\":1}}],[\"也就是说\",{\"1\":{\"7\":1,\"239\":1,\"248\":1,\"948\":1}}],[\"也无法进行流量控制等避免网络拥塞行为\",{\"1\":{\"181\":1}}],[\"也不能用于条件结构例如\",{\"1\":{\"359\":1}}],[\"也不需要服务器推送\",{\"1\":{\"198\":1}}],[\"也不负责重发\",{\"1\":{\"181\":1}}],[\"也不会有过渡效果\",{\"1\":{\"67\":1}}],[\"滚动视窗的高度距离window顶部的距离\",{\"1\":{\"290\":1}}],[\"滚动视差效果\",{\"0\":{\"5\":1}}],[\"滚动滚动条\",{\"1\":{\"8\":1}}],[\"我们之所以说主线程处于\",{\"1\":{\"885\":1}}],[\"我们希望看到on先从左侧退出\",{\"1\":{\"634\":1}}],[\"我们一般都需要传入props作为参数\",{\"1\":{\"627\":1}}],[\"我们应该在组件内部创建一个函数\",{\"1\":{\"555\":1}}],[\"我们将每个单独的部分称为组件\",{\"1\":{\"533\":1}}],[\"我们将bfc应用在以下场景\",{\"1\":{\"21\":1}}],[\"我们会发现页面并不会有任何反应\",{\"1\":{\"612\":1}}],[\"我们会发现extends实际采用的也是寄生组合继承方式\",{\"1\":{\"264\":1}}],[\"我们会编写jsx\",{\"1\":{\"587\":1}}],[\"我们会通过使用refs来更新组件\",{\"1\":{\"584\":1}}],[\"我们会在shouldcomponentupdate\",{\"1\":{\"527\":1}}],[\"我们会如下编写\",{\"1\":{\"480\":1}}],[\"我们还缺少防止黑客伪造公钥的手段\",{\"1\":{\"239\":1}}],[\"我们还可以利用主流ui框架\",{\"1\":{\"59\":1}}],[\"我们只要在原文后附上它的摘要\",{\"1\":{\"238\":1}}],[\"我们都知道get请求是放在url中\",{\"1\":{\"217\":1}}],[\"我们使用域名访问某一个站点时的路径为\",{\"1\":{\"133\":1}}],[\"我们可以获得input内的值为\",{\"1\":{\"466\":1}}],[\"我们可以在post请求中url中写入参数\",{\"1\":{\"217\":1}}],[\"我们可以在css之前插入script标签\",{\"1\":{\"59\":1}}],[\"我们可以分为两种情况\",{\"1\":{\"88\":1}}],[\"我们可以分成两种形式\",{\"1\":{\"85\":1}}],[\"我们可以设置不同类型的媒体条件\",{\"1\":{\"56\":1}}],[\"我们可以把网页解刨成\",{\"1\":{\"5\":1}}],[\"我们知道内联样式的优先级最高\",{\"1\":{\"36\":1}}],[\"我们从一个html结构开始\",{\"1\":{\"35\":1}}],[\"我们的眼睛\",{\"1\":{\"8\":2}}],[\"和文法参数\",{\"1\":{\"983\":1}}],[\"和插件\",{\"1\":{\"932\":1}}],[\"和子元素对象\",{\"1\":{\"708\":1}}],[\"和构建对象的函数\",{\"1\":{\"655\":1}}],[\"和构造函数结束之间仍是undefined\",{\"1\":{\"628\":1}}],[\"和super\",{\"0\":{\"625\":1}}],[\"和执行\",{\"1\":{\"571\":1}}],[\"和高效\",{\"1\":{\"546\":1}}],[\"和后一次渲染的\",{\"1\":{\"520\":1}}],[\"和生命周期函数中读取新版本\",{\"1\":{\"461\":1}}],[\"和用户输入的数据\",{\"1\":{\"400\":1}}],[\"和用户数据报协议\",{\"1\":{\"172\":1}}],[\"和枚举\",{\"1\":{\"351\":1}}],[\"和接口\",{\"1\":{\"351\":1}}],[\"和使用\",{\"1\":{\"306\":1}}],[\"和客户端的第一次挥手一样\",{\"1\":{\"244\":1}}],[\"和消息本身一样\",{\"1\":{\"239\":1}}],[\"和原文是完全等价的\",{\"1\":{\"238\":1}}],[\"和其它几个用于控制\",{\"1\":{\"227\":1}}],[\"和ip两个协议\",{\"1\":{\"168\":1}}],[\"和许多路由协议\",{\"1\":{\"162\":1}}],[\"和1结合使用\",{\"1\":{\"90\":2}}],[\"和负\",{\"0\":{\"80\":1},\"1\":{\"77\":1}}],[\"和一些页面交互的动画效果\",{\"1\":{\"51\":1}}],[\"和\",{\"0\":{\"406\":1},\"1\":{\"8\":1,\"16\":1,\"17\":1,\"36\":3,\"169\":1,\"226\":1,\"232\":1,\"251\":1,\"312\":3,\"330\":1,\"333\":1,\"337\":1,\"348\":1,\"349\":1,\"355\":3,\"359\":1,\"361\":2,\"369\":2,\"376\":1,\"379\":1,\"385\":1,\"406\":2,\"407\":1,\"409\":2,\"436\":1,\"479\":1,\"496\":1,\"520\":1,\"548\":1,\"549\":1,\"559\":1,\"565\":1,\"584\":1,\"622\":1,\"811\":1,\"886\":1,\"890\":1,\"933\":1,\"936\":1,\"946\":1,\"949\":2,\"1008\":1}}],[\"override\",{\"1\":{\"341\":1}}],[\"overflow只有在设置了overflow\",{\"1\":{\"87\":1}}],[\"overflow属性值有如下\",{\"1\":{\"87\":1}}],[\"overflow设为hidden\",{\"1\":{\"87\":1}}],[\"overflow设置或检索当当前行超过指定容器的边界时如何显示\",{\"1\":{\"47\":1}}],[\"overflow值不为\",{\"1\":{\"20\":1}}],[\"overflow\",{\"1\":{\"8\":3,\"47\":1,\"70\":1,\"75\":1,\"78\":1,\"87\":5,\"89\":3,\"90\":5}}],[\"othersubclass\",{\"1\":{\"339\":2}}],[\"otherwise\",{\"1\":{\"331\":1}}],[\"omitted\",{\"1\":{\"332\":1}}],[\"oldkeytoidx\",{\"1\":{\"770\":3}}],[\"oldendvnode\",{\"1\":{\"770\":3}}],[\"oldendidx\",{\"1\":{\"770\":5}}],[\"oldstartvnode\",{\"1\":{\"770\":6}}],[\"oldstartidx++\",{\"1\":{\"770\":2}}],[\"oldstartidx\",{\"1\":{\"770\":3}}],[\"oldch\",{\"1\":{\"770\":5}}],[\"oldvnode\",{\"1\":{\"737\":1}}],[\"oldvnode和vnode\",{\"1\":{\"732\":1}}],[\"oldvalue\",{\"1\":{\"737\":1,\"759\":1}}],[\"oldval\",{\"1\":{\"671\":3}}],[\"oldindex=2\",{\"1\":{\"496\":1}}],[\"oldindex=3\",{\"1\":{\"496\":1}}],[\"oldindex=0\",{\"1\":{\"496\":1}}],[\"oldindex=1\",{\"1\":{\"496\":1}}],[\"oldindex\",{\"1\":{\"496\":8}}],[\"old\",{\"1\":{\"313\":1}}],[\"observe\",{\"1\":{\"862\":1,\"878\":1,\"884\":1}}],[\"observer\",{\"1\":{\"285\":4,\"862\":4}}],[\"oberver=new\",{\"1\":{\"285\":1}}],[\"obejct\",{\"1\":{\"276\":1}}],[\"objetc\",{\"1\":{\"792\":1,\"793\":1}}],[\"objectdirective<vsowelement>\",{\"1\":{\"759\":1}}],[\"object|resource|array|string|float|int|bool|null\",{\"1\":{\"369\":1}}],[\"object类型\",{\"1\":{\"367\":1}}],[\"objectrecord\",{\"1\":{\"107\":2,\"117\":2}}],[\"object\",{\"0\":{\"388\":1},\"1\":{\"99\":1,\"254\":3,\"261\":2,\"262\":1,\"263\":3,\"270\":7,\"277\":1,\"347\":1,\"348\":1,\"368\":3,\"409\":1,\"526\":2,\"538\":2,\"549\":5,\"612\":3,\"616\":1,\"662\":2,\"714\":1,\"792\":3,\"793\":7,\"832\":6,\"969\":1}}],[\"objects\",{\"1\":{\"99\":1}}],[\"objb\",{\"1\":{\"549\":7}}],[\"obja\",{\"1\":{\"549\":6}}],[\"obj==null\",{\"1\":{\"277\":1}}],[\"obj不会被释放\",{\"1\":{\"251\":1}}],[\"obj\",{\"1\":{\"90\":1,\"251\":3,\"254\":10,\"270\":1,\"277\":15,\"526\":1,\"645\":1,\"646\":1}}],[\"oct\",{\"1\":{\"224\":1,\"865\":1}}],[\"os\",{\"1\":{\"223\":1}}],[\"osi主要划分了七层\",{\"1\":{\"157\":1}}],[\"osi\",{\"1\":{\"156\":2,\"158\":1,\"159\":1,\"164\":1,\"169\":1,\"171\":1,\"172\":1,\"177\":6}}],[\"osi模型\",{\"0\":{\"156\":1}}],[\"okay\",{\"1\":{\"379\":1}}],[\"ok\",{\"1\":{\"220\":1}}],[\"opt\",{\"1\":{\"993\":1}}],[\"option\",{\"1\":{\"953\":1}}],[\"option>\",{\"1\":{\"406\":3}}],[\"options是用户传递的配置项\",{\"1\":{\"796\":1}}],[\"options=\",{\"1\":{\"285\":1}}],[\"options\",{\"0\":{\"775\":1},\"1\":{\"147\":1,\"285\":1,\"449\":2,\"773\":1,\"792\":8,\"813\":1,\"909\":1,\"946\":1,\"948\":1}}],[\"operationname\",{\"1\":{\"971\":2,\"972\":2}}],[\"operations\",{\"1\":{\"967\":2}}],[\"opening\",{\"1\":{\"359\":1}}],[\"open\",{\"1\":{\"156\":1,\"330\":2,\"584\":1}}],[\"opacity属性表示元素的透明度\",{\"1\":{\"69\":1}}],[\"opacity\",{\"0\":{\"69\":1},\"1\":{\"66\":1,\"69\":2,\"72\":1,\"633\":4,\"634\":4,\"635\":4}}],[\"o\",{\"1\":{\"90\":1,\"253\":1}}],[\"orphan\",{\"1\":{\"690\":1}}],[\"orange\",{\"1\":{\"533\":1}}],[\"order\",{\"1\":{\"478\":1}}],[\"order属性调整显示顺序\",{\"1\":{\"82\":1}}],[\"ordinarymethod\",{\"1\":{\"270\":1}}],[\"org\",{\"1\":{\"223\":2,\"224\":2}}],[\"or\",{\"1\":{\"130\":1,\"330\":1,\"355\":1,\"359\":1,\"612\":1,\"753\":1}}],[\"orient\",{\"1\":{\"90\":2}}],[\"orientationchange\",{\"1\":{\"59\":1}}],[\"original\",{\"1\":{\"262\":2}}],[\"origin正是用来设置这个的\",{\"1\":{\"44\":1}}],[\"origin\",{\"0\":{\"44\":1},\"1\":{\"42\":1,\"44\":3,\"50\":1,\"200\":1,\"224\":2}}],[\"onunload\",{\"1\":{\"825\":1}}],[\"onunhandlerejection\",{\"1\":{\"824\":1}}],[\"onhdie=>\",{\"1\":{\"828\":1}}],[\"onhdie\",{\"1\":{\"825\":1,\"828\":1}}],[\"onhide\",{\"1\":{\"824\":1}}],[\"onready\",{\"1\":{\"825\":1,\"828\":2}}],[\"onttfb\",{\"1\":{\"884\":2}}],[\"onthemechange\",{\"1\":{\"824\":1}}],[\"ontoggle\",{\"1\":{\"633\":2}}],[\"onpagenotfound\",{\"1\":{\"824\":1}}],[\"onpersonchanged2\",{\"1\":{\"671\":1}}],[\"onpersonchanged1\",{\"1\":{\"671\":1}}],[\"onshow=>\",{\"1\":{\"828\":3}}],[\"onshow\",{\"1\":{\"824\":1,\"825\":1,\"828\":2}}],[\"onsubmit=\",{\"1\":{\"466\":1}}],[\"onload=>\",{\"1\":{\"828\":2}}],[\"onload\",{\"1\":{\"825\":1}}],[\"onlaunch重新开始执行\",{\"1\":{\"828\":1}}],[\"onlaunch=>\",{\"1\":{\"828\":2}}],[\"onlaunch\",{\"1\":{\"824\":1}}],[\"only\",{\"1\":{\"35\":2,\"330\":1,\"928\":2}}],[\"on=\",{\"1\":{\"696\":1}}],[\"onnamechanged=\",{\"1\":{\"621\":1}}],[\"onchildchanged\",{\"1\":{\"671\":1}}],[\"onceprocessed\",{\"1\":{\"753\":1}}],[\"once指令\",{\"1\":{\"753\":1}}],[\"once\",{\"1\":{\"351\":1,\"379\":1,\"699\":1,\"753\":1,\"916\":3,\"917\":3,\"918\":3}}],[\"onclick=\",{\"1\":{\"414\":2,\"415\":1,\"458\":1,\"461\":2,\"500\":1,\"504\":6,\"505\":2,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"519\":2,\"520\":2,\"555\":2,\"588\":4,\"596\":1,\"599\":1,\"612\":1,\"620\":1,\"633\":1,\"634\":1,\"635\":1}}],[\"onclick\",{\"1\":{\"273\":1,\"567\":3,\"616\":1,\"851\":2}}],[\"on\",{\"1\":{\"292\":3,\"326\":1,\"449\":4,\"538\":1,\"634\":2,\"696\":1,\"811\":1,\"895\":4}}],[\"onblur等等\",{\"1\":{\"101\":1}}],[\"ondrag\",{\"1\":{\"101\":1}}],[\"onerror\",{\"1\":{\"824\":1}}],[\"one=\",{\"1\":{\"646\":1}}],[\"one之后的所有\",{\"1\":{\"35\":1}}],[\"one+\",{\"1\":{\"35\":1}}],[\"one的所有\",{\"1\":{\"35\":1}}],[\"one>one\",{\"1\":{\"35\":1}}],[\"one\",{\"1\":{\"8\":2,\"35\":5,\"130\":1,\"333\":1,\"994\":3}}],[\"of123456789\",{\"1\":{\"994\":1}}],[\"of1\",{\"1\":{\"994\":1}}],[\"off\",{\"1\":{\"634\":2}}],[\"off再从右侧进入\",{\"1\":{\"634\":1}}],[\"offsettop\",{\"1\":{\"285\":1}}],[\"offsettop=el\",{\"1\":{\"285\":1}}],[\"offsettop顶部距离\",{\"1\":{\"285\":1}}],[\"of\",{\"1\":{\"35\":4,\"121\":4,\"130\":1,\"322\":1,\"382\":2,\"488\":1,\"612\":2,\"645\":2,\"878\":1,\"895\":1,\"928\":3,\"978\":3,\"994\":1}}],[\"output\",{\"1\":{\"449\":2,\"909\":1,\"926\":1,\"932\":1,\"954\":1}}],[\"outerenv\",{\"1\":{\"111\":1,\"119\":1}}],[\"outline\",{\"1\":{\"37\":4}}],[\"out\",{\"1\":{\"11\":2,\"13\":2,\"634\":3}}],[\"x和两个十六进制数的组合\",{\"1\":{\"1011\":1}}],[\"xii\",{\"1\":{\"932\":1}}],[\"xi\",{\"1\":{\"932\":1}}],[\"xx\",{\"1\":{\"487\":1,\"573\":3}}],[\"xxxx\",{\"1\":{\"570\":1}}],[\"xxx\",{\"1\":{\"251\":1,\"487\":1,\"566\":1,\"573\":1,\"603\":1,\"633\":1,\"906\":4}}],[\"x41\",{\"1\":{\"381\":1}}],[\"xor\",{\"1\":{\"355\":1}}],[\"xhtml\",{\"1\":{\"330\":1,\"331\":1}}],[\"xhtml+xml\",{\"1\":{\"223\":1}}],[\"xss攻击可以分为\",{\"1\":{\"299\":1}}],[\"xss\",{\"0\":{\"299\":1}}],[\"x86\",{\"1\":{\"224\":1}}],[\"x11\",{\"1\":{\"224\":1}}],[\"xml形式就是\",{\"1\":{\"530\":1}}],[\"xml\",{\"1\":{\"10\":1,\"223\":1,\"329\":1,\"330\":1,\"331\":1,\"895\":2}}],[\"xpx\",{\"1\":{\"8\":1}}],[\"x\",{\"1\":{\"8\":1,\"33\":1,\"50\":1,\"150\":1,\"217\":1,\"223\":1,\"224\":1,\"285\":1,\"368\":1,\"380\":1,\"384\":1,\"406\":2,\"549\":6,\"647\":1,\"895\":6,\"932\":1,\"997\":4,\"1010\":1}}],[\"yes\",{\"1\":{\"928\":4}}],[\"yellow\",{\"1\":{\"488\":1}}],[\"yet\",{\"1\":{\"333\":1}}],[\"yield会被当作普通标识符使用\",{\"1\":{\"986\":1}}],[\"yield\",{\"1\":{\"395\":1,\"984\":1,\"986\":1,\"996\":1}}],[\"yourcompoent\",{\"1\":{\"668\":1}}],[\"yourcomponent\",{\"1\":{\"627\":1,\"670\":1,\"671\":1}}],[\"your\",{\"1\":{\"550\":1,\"928\":2}}],[\"you\",{\"1\":{\"330\":2,\"379\":4,\"627\":1,\"928\":10}}],[\"young\",{\"1\":{\"313\":1}}],[\"yogurt\",{\"1\":{\"322\":1}}],[\"y>50\",{\"1\":{\"292\":1}}],[\"y\",{\"1\":{\"8\":1,\"33\":1,\"50\":1,\"285\":1,\"368\":1,\"406\":2,\"549\":6,\"647\":1,\"928\":1}}],[\"1~7和八进制数的组合\",{\"1\":{\"1011\":1}}],[\"17\",{\"1\":{\"928\":1}}],[\"1已被广泛使用\",{\"1\":{\"865\":1}}],[\"1次插入操作\",{\"1\":{\"769\":2}}],[\"1+2\",{\"1\":{\"403\":1}}],[\"1=>\",{\"1\":{\"383\":1}}],[\"111\",{\"1\":{\"386\":2,\"542\":1}}],[\"11\",{\"1\":{\"326\":2,\"928\":1,\"1008\":1}}],[\"110px\",{\"1\":{\"79\":1,\"80\":1}}],[\"16版本之后\",{\"1\":{\"500\":1}}],[\"163\",{\"1\":{\"413\":1}}],[\"16\",{\"1\":{\"303\":3,\"428\":1,\"500\":1,\"517\":1,\"895\":2,\"1008\":1}}],[\"16px\",{\"1\":{\"59\":2}}],[\"1表示被完全包含\",{\"1\":{\"285\":1}}],[\"19\",{\"1\":{\"224\":1,\"313\":2,\"928\":2}}],[\"1994\",{\"1\":{\"224\":2}}],[\"1920px\",{\"1\":{\"56\":1}}],[\"1协议也没有明确禁止get请求包含请求体\",{\"1\":{\"217\":1}}],[\"1xx\",{\"0\":{\"207\":1}}],[\"13\",{\"1\":{\"200\":1,\"313\":1,\"934\":1}}],[\"1在http1\",{\"1\":{\"147\":1}}],[\"1还允许客户端不用等待上一次请求结果返回\",{\"1\":{\"147\":1}}],[\"1中\",{\"1\":{\"147\":1}}],[\"140px\",{\"1\":{\"78\":1}}],[\"121\",{\"1\":{\"403\":1}}],[\"128\",{\"1\":{\"398\":1}}],[\"123都可以匹配到该route\",{\"1\":{\"603\":1}}],[\"123124132\",{\"1\":{\"413\":1}}],[\"123\",{\"1\":{\"368\":2,\"409\":1,\"526\":1,\"669\":1}}],[\"1234\",{\"1\":{\"346\":1,\"372\":1}}],[\"120\",{\"1\":{\"253\":5}}],[\"120px\",{\"1\":{\"50\":1,\"78\":1,\"82\":1}}],[\"12\",{\"1\":{\"224\":2,\"304\":1,\"384\":1,\"928\":1}}],[\"12px\",{\"1\":{\"59\":1}}],[\"1vw都等于视图宽度的百分之一\",{\"1\":{\"58\":1}}],[\"18\",{\"1\":{\"223\":1,\"313\":1,\"646\":3,\"895\":2}}],[\"18px\",{\"1\":{\"56\":1,\"59\":1}}],[\"180deg\",{\"1\":{\"13\":1}}],[\"1s\",{\"1\":{\"49\":1,\"291\":1}}],[\"1的元素\",{\"1\":{\"35\":1}}],[\"15\",{\"1\":{\"224\":1,\"427\":1}}],[\"15px\",{\"1\":{\"12\":1}}],[\"150px\",{\"1\":{\"8\":2,\"488\":4}}],[\"1\",{\"0\":{\"145\":2,\"147\":1,\"389\":1},\"1\":{\"11\":9,\"12\":1,\"13\":1,\"35\":3,\"36\":1,\"76\":1,\"82\":1,\"103\":1,\"111\":1,\"123\":1,\"130\":1,\"146\":1,\"147\":1,\"150\":1,\"153\":1,\"200\":6,\"206\":1,\"217\":10,\"223\":3,\"250\":3,\"253\":11,\"254\":12,\"258\":2,\"260\":1,\"263\":2,\"270\":2,\"272\":1,\"285\":1,\"292\":1,\"303\":2,\"304\":2,\"314\":1,\"315\":1,\"316\":1,\"323\":1,\"324\":4,\"326\":1,\"330\":1,\"332\":1,\"340\":1,\"345\":1,\"347\":2,\"350\":1,\"355\":7,\"367\":1,\"372\":2,\"374\":1,\"375\":3,\"376\":2,\"383\":3,\"384\":2,\"385\":5,\"386\":8,\"393\":1,\"394\":1,\"395\":1,\"401\":1,\"402\":2,\"407\":3,\"415\":1,\"458\":1,\"474\":1,\"497\":9,\"519\":2,\"520\":2,\"526\":10,\"527\":4,\"549\":2,\"588\":2,\"605\":1,\"606\":1,\"608\":2,\"616\":11,\"620\":1,\"633\":2,\"634\":2,\"635\":2,\"645\":1,\"669\":2,\"670\":1,\"685\":1,\"714\":1,\"732\":3,\"760\":1,\"865\":2,\"895\":8,\"928\":6,\"932\":2,\"936\":1,\"939\":1,\"941\":2,\"942\":2,\"977\":1,\"1008\":2}}],[\"1px\",{\"1\":{\"8\":2,\"25\":1,\"30\":1,\"87\":1,\"90\":1,\"488\":1}}],[\"10240\",{\"1\":{\"895\":2}}],[\"101\",{\"1\":{\"200\":2,\"207\":1}}],[\"10\",{\"1\":{\"59\":2,\"135\":1,\"223\":1,\"292\":1,\"375\":1,\"575\":1,\"588\":2,\"645\":2,\"662\":1,\"928\":1}}],[\"10px\",{\"1\":{\"11\":1,\"30\":2,\"89\":1}}],[\"100000\",{\"1\":{\"916\":1,\"917\":1,\"918\":1}}],[\"1000000000000000\",{\"1\":{\"303\":1}}],[\"100000000000000005551\",{\"1\":{\"303\":1}}],[\"10000000000000000555\",{\"1\":{\"303\":1}}],[\"1000\",{\"1\":{\"111\":1,\"251\":1,\"414\":1,\"474\":1}}],[\"100px\",{\"1\":{\"8\":1,\"11\":2,\"12\":2,\"15\":1,\"18\":1,\"25\":1,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"45\":2,\"76\":1,\"79\":2,\"80\":3,\"81\":1,\"82\":1,\"83\":1,\"652\":1}}],[\"100vw\",{\"1\":{\"8\":1}}],[\"100vh\",{\"1\":{\"7\":3}}],[\"100\",{\"1\":{\"8\":2,\"13\":1,\"45\":1,\"80\":3,\"81\":3,\"82\":1,\"83\":1,\"207\":1,\"212\":1,\"224\":1,\"414\":1,\"416\":1,\"633\":2,\"634\":2,\"635\":2}}],[\"1005417\",{\"1\":{\"7\":2}}],[\"1097491\",{\"1\":{\"7\":2}}],[\"bye\",{\"1\":{\"459\":1}}],[\"by\",{\"1\":{\"331\":4}}],[\"bytes=500\",{\"1\":{\"224\":1}}],[\"bird\",{\"1\":{\"306\":1}}],[\"bind表达式\",{\"1\":{\"745\":1}}],[\"bindingidentifierbindingidentifier\",{\"1\":{\"993\":1}}],[\"bindingidentifier\",{\"1\":{\"983\":1,\"993\":1}}],[\"binding\",{\"1\":{\"737\":1}}],[\"bindingobject\",{\"1\":{\"116\":1}}],[\"bind修饰符\",{\"1\":{\"699\":1}}],[\"bind=\",{\"1\":{\"696\":2}}],[\"bind\",{\"0\":{\"271\":1},\"1\":{\"270\":1,\"271\":2,\"414\":3,\"461\":2,\"500\":1,\"510\":2,\"512\":1,\"634\":1,\"696\":1,\"737\":1,\"811\":1}}],[\"bindevent\",{\"1\":{\"251\":1}}],[\"bscroll\",{\"1\":{\"292\":4}}],[\"btnclick\",{\"1\":{\"634\":2}}],[\"btnel\",{\"1\":{\"615\":2}}],[\"btn\",{\"1\":{\"273\":3,\"615\":1,\"634\":5,\"851\":4}}],[\"b的父类别\",{\"1\":{\"256\":1}}],[\"b的值等于\",{\"1\":{\"36\":1}}],[\"branches\",{\"1\":{\"760\":1}}],[\"branch\",{\"1\":{\"690\":7,\"760\":3}}],[\"browserrouter有history模式\",{\"1\":{\"594\":1}}],[\"browserrouter>\",{\"1\":{\"449\":1}}],[\"browserrouter\",{\"0\":{\"594\":1},\"1\":{\"449\":1,\"593\":1,\"594\":1,\"595\":1,\"606\":3}}],[\"browsers\",{\"1\":{\"449\":2}}],[\"browser\",{\"0\":{\"933\":1},\"1\":{\"331\":2}}],[\"br\",{\"1\":{\"223\":1}}],[\"break\",{\"0\":{\"46\":1},\"1\":{\"37\":2,\"42\":1,\"46\":4,\"47\":1,\"89\":2,\"90\":1}}],[\"b→a\",{\"1\":{\"197\":1}}],[\"buymeal\",{\"1\":{\"909\":1}}],[\"build\",{\"1\":{\"449\":1,\"927\":1}}],[\"built\",{\"1\":{\"99\":1}}],[\"bundles\",{\"1\":{\"942\":1}}],[\"bundles中\",{\"1\":{\"937\":1}}],[\"bundle是项目在浏览器中运行所需的所有代码和资源的集合\",{\"1\":{\"938\":1}}],[\"bundle是指webpack打包后最终生成的文件\",{\"1\":{\"938\":1}}],[\"bundler\",{\"1\":{\"931\":1}}],[\"bundle\",{\"0\":{\"938\":1},\"1\":{\"449\":1,\"909\":1,\"926\":1,\"928\":1,\"931\":1,\"953\":1,\"954\":2}}],[\"button\",{\"1\":{\"504\":4,\"550\":3,\"555\":2,\"620\":1,\"627\":2}}],[\"button>\",{\"1\":{\"414\":2,\"458\":1,\"461\":2,\"500\":1,\"504\":6,\"508\":1,\"519\":2,\"520\":2,\"567\":1,\"588\":4,\"596\":1,\"599\":1,\"612\":1,\"620\":1,\"633\":1,\"634\":1,\"635\":1,\"851\":1}}],[\"but\",{\"1\":{\"330\":1,\"332\":2,\"995\":1}}],[\"buffers\",{\"1\":{\"895\":2}}],[\"buffered\",{\"1\":{\"878\":1,\"884\":1}}],[\"buffer\",{\"1\":{\"101\":1,\"247\":4}}],[\"blue\",{\"1\":{\"851\":1}}],[\"blur\",{\"1\":{\"527\":1}}],[\"blobs\",{\"1\":{\"280\":1}}],[\"blockenv\",{\"1\":{\"119\":1}}],[\"blockdeclarationinstantiation\",{\"1\":{\"118\":1}}],[\"block\",{\"1\":{\"11\":2,\"12\":1,\"19\":1,\"20\":1,\"28\":2,\"103\":3}}],[\"black\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\"b\",{\"1\":{\"36\":1,\"123\":2,\"130\":1,\"140\":4,\"230\":1,\"254\":2,\"324\":2,\"383\":2,\"386\":2,\"401\":2,\"402\":2,\"406\":1,\"526\":11,\"657\":3,\"658\":1,\"675\":1,\"690\":1,\"696\":1,\"760\":2,\"769\":3,\"770\":8,\"941\":1,\"1010\":1}}],[\"been\",{\"1\":{\"928\":1}}],[\"beer\",{\"1\":{\"406\":2}}],[\"bedoremounted\",{\"0\":{\"776\":1}}],[\"be\",{\"1\":{\"331\":3,\"379\":1,\"928\":1,\"972\":2,\"978\":2}}],[\"better\",{\"1\":{\"292\":3}}],[\"between\",{\"1\":{\"82\":1}}],[\"beforedestroy\",{\"0\":{\"780\":1}}],[\"beforeupdate\",{\"0\":{\"778\":1}}],[\"beforeunmount\",{\"1\":{\"759\":1}}],[\"beforecreate\",{\"0\":{\"774\":1}}],[\"beforeenter\",{\"1\":{\"759\":1}}],[\"beforemount\",{\"1\":{\"759\":1}}],[\"before\",{\"1\":{\"35\":1,\"37\":1}}],[\"bezier\",{\"1\":{\"11\":7}}],[\"bfc目的是形成一个相对于外界完全独立的空间\",{\"1\":{\"19\":1}}],[\"bfc就是页面上的一个隔离的独立容器\",{\"1\":{\"19\":1}}],[\"bfc的区域不会与float的元素区域重叠\",{\"1\":{\"19\":1}}],[\"bfc\",{\"0\":{\"19\":1},\"1\":{\"19\":1}}],[\"banner\",{\"1\":{\"573\":1}}],[\"babel编译后\",{\"1\":{\"587\":1}}],[\"babel帮助我们完成了这个转换的过程\",{\"1\":{\"539\":1}}],[\"babel在编译时会判断\",{\"1\":{\"537\":1}}],[\"babel\",{\"1\":{\"449\":2,\"909\":2,\"928\":3,\"954\":1}}],[\"baby\",{\"1\":{\"313\":1}}],[\"baz\",{\"1\":{\"350\":2,\"385\":9,\"406\":1}}],[\"bar的数据了\",{\"1\":{\"566\":1}}],[\"bar2\",{\"1\":{\"381\":1}}],[\"bar\",{\"1\":{\"251\":1,\"308\":2,\"325\":4,\"350\":4,\"383\":2,\"385\":5,\"406\":2,\"407\":1,\"526\":5,\"566\":1,\"909\":1,\"949\":1}}],[\"basic\",{\"1\":{\"15\":1,\"224\":1}}],[\"baseclass\",{\"1\":{\"339\":9}}],[\"base64\",{\"1\":{\"200\":1}}],[\"base2\",{\"1\":{\"12\":3}}],[\"base\",{\"1\":{\"11\":3,\"12\":2,\"895\":1}}],[\"backend\",{\"1\":{\"606\":4}}],[\"backslashes\",{\"1\":{\"382\":2}}],[\"back\",{\"1\":{\"379\":1}}],[\"backwards\",{\"1\":{\"13\":1}}],[\"backgroundcolor\",{\"1\":{\"485\":2,\"533\":1}}],[\"background\",{\"0\":{\"7\":1,\"43\":1,\"44\":1,\"45\":1,\"46\":1},\"1\":{\"6\":1,\"7\":17,\"8\":4,\"11\":3,\"12\":2,\"25\":1,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":1,\"42\":2,\"43\":4,\"44\":3,\"45\":5,\"46\":4,\"52\":1,\"75\":2,\"78\":4,\"79\":3,\"80\":2,\"81\":2,\"82\":3,\"83\":3,\"90\":4,\"488\":2}}],[\"bob\",{\"1\":{\"368\":1,\"399\":2}}],[\"bool类型\",{\"1\":{\"367\":1}}],[\"bool\",{\"1\":{\"349\":1,\"371\":1}}],[\"boolean布尔类型\",{\"0\":{\"371\":1}}],[\"boolean\",{\"1\":{\"116\":1,\"130\":1,\"549\":2}}],[\"bowl\",{\"1\":{\"322\":1}}],[\"bom\",{\"1\":{\"100\":1}}],[\"boundingclientrect\",{\"1\":{\"285\":1}}],[\"bounding\",{\"1\":{\"46\":1}}],[\"boreder\",{\"1\":{\"15\":1}}],[\"border\",{\"1\":{\"11\":6,\"12\":4,\"15\":1,\"16\":3,\"17\":1,\"18\":5,\"25\":1,\"30\":1,\"37\":2,\"41\":2,\"43\":1,\"44\":2,\"57\":1,\"70\":2,\"87\":1,\"90\":1,\"485\":1,\"488\":1,\"538\":3}}],[\"boxsizing\",{\"1\":{\"485\":1}}],[\"box|inherit\",{\"1\":{\"18\":1}}],[\"box|border\",{\"1\":{\"18\":1}}],[\"box\",{\"0\":{\"18\":1},\"1\":{\"15\":4,\"18\":10,\"35\":3,\"41\":2,\"43\":4,\"44\":4,\"46\":2,\"75\":2,\"76\":2,\"90\":4,\"485\":1}}],[\"both\",{\"1\":{\"13\":1,\"368\":2}}],[\"bottom\",{\"1\":{\"8\":3,\"25\":1,\"89\":1,\"90\":1,\"285\":3}}],[\"body中\",{\"1\":{\"216\":1}}],[\"body><\",{\"1\":{\"560\":1}}],[\"body>\",{\"1\":{\"89\":1,\"449\":4,\"769\":1,\"851\":1}}],[\"body\",{\"1\":{\"8\":1,\"56\":1,\"251\":1,\"285\":1,\"287\":1,\"505\":1,\"907\":1}}],[\"即只在需要时才加载相应的代码块\",{\"1\":{\"939\":1}}],[\"即只保留压缩后的\",{\"1\":{\"895\":1}}],[\"即点击链接\",{\"1\":{\"881\":1}}],[\"即新版本的小程序需要等下一次冷启动才会应用上\",{\"1\":{\"837\":1}}],[\"即为冷启动\",{\"1\":{\"837\":1}}],[\"即f\",{\"1\":{\"731\":2}}],[\"即指一旦创建\",{\"1\":{\"525\":1}}],[\"即指元素从一种样式逐渐过渡为另一种样式的过程\",{\"1\":{\"10\":1}}],[\"即浏览器原生事件的跨浏览器包装器\",{\"1\":{\"504\":1}}],[\"即时现场验证\",{\"1\":{\"467\":1}}],[\"即可\",{\"1\":{\"487\":1,\"548\":1}}],[\"即可以中断与恢复\",{\"1\":{\"429\":1}}],[\"即可填充空白\",{\"1\":{\"82\":1}}],[\"即记录fiber更新过程\",{\"1\":{\"428\":1}}],[\"即调和过程\",{\"1\":{\"428\":1}}],[\"即没有加引号的字符串\",{\"1\":{\"408\":1}}],[\"即对象\",{\"1\":{\"362\":1}}],[\"即对应用层交下来的报文\",{\"1\":{\"181\":1}}],[\"即攻击者\",{\"1\":{\"299\":1}}],[\"即纯函数=无状态+数据不可变\",{\"1\":{\"294\":1}}],[\"即每一个构造函数都有一个原型对象\",{\"1\":{\"258\":1}}],[\"即每一层扮演固定的角色\",{\"1\":{\"156\":1}}],[\"即覆盖父类别的原有属性和方法\",{\"1\":{\"256\":1}}],[\"即一个函数中所有递归形式的调用都出现在函数的末尾\",{\"1\":{\"253\":1}}],[\"即在尾部直接调用自身的递归函数\",{\"1\":{\"253\":1}}],[\"即在函数尾位置调用自身\",{\"1\":{\"253\":1}}],[\"即在一个tcp连接上可以传送多个http请求和响应\",{\"1\":{\"147\":1}}],[\"即\",{\"1\":{\"231\":1,\"264\":1,\"406\":1,\"407\":1,\"607\":1,\"760\":1,\"770\":1}}],[\"即断开连接\",{\"1\":{\"230\":1}}],[\"即将数据由a传到b或将b传输到a\",{\"1\":{\"230\":1}}],[\"即超文本运输协议\",{\"1\":{\"230\":1}}],[\"即16个二进制位\",{\"1\":{\"181\":1}}],[\"即tcp连接默认不关闭\",{\"1\":{\"153\":1}}],[\"即内容分发网络\",{\"1\":{\"132\":1}}],[\"即内边距\",{\"1\":{\"15\":1}}],[\"即文本在一行内显示\",{\"1\":{\"87\":1}}],[\"即以padding的左上角为原点\",{\"1\":{\"44\":1}}],[\"即html元素\",{\"1\":{\"20\":1}}],[\"即使是在库加载之前发生的性能事件也能准确捕获\",{\"1\":{\"890\":1}}],[\"即使是出现网络拥堵的情况\",{\"1\":{\"181\":1}}],[\"即使未注册事件监听器\",{\"1\":{\"881\":1}}],[\"即使没有事件监听器也会衡量\",{\"1\":{\"881\":1}}],[\"即使两者的结构非常类似\",{\"1\":{\"495\":1}}],[\"即使诊断信息被抑制\",{\"1\":{\"359\":1}}],[\"即使不使用钩子\",{\"1\":{\"349\":1}}],[\"即使该段落位于\",{\"1\":{\"331\":1}}],[\"即使浮动元素也是如此\",{\"1\":{\"19\":1,\"21\":1}}],[\"即使一个元素有滚动机制\",{\"1\":{\"7\":1}}],[\"即块级格式化上下文\",{\"1\":{\"19\":1}}],[\"即外边距\",{\"1\":{\"15\":1}}],[\"即边框\",{\"1\":{\"15\":1}}],[\"即实际内容\",{\"1\":{\"15\":1}}],[\"即动画何时开始\",{\"1\":{\"13\":1}}],[\"即动画的速度曲线\",{\"1\":{\"13\":1}}],[\"即空间感\",{\"1\":{\"8\":1}}],[\"runtime使用manifest的信息加载和解析模块\",{\"1\":{\"942\":1}}],[\"runtimechunk选项\",{\"1\":{\"941\":1}}],[\"runtime还负责模块的缓存管理\",{\"1\":{\"941\":1}}],[\"runtime会根据这个依赖图来解析模块的依赖\",{\"1\":{\"941\":1}}],[\"runtime提供了支持动态加载的机制\",{\"1\":{\"941\":1}}],[\"runtime提供了\",{\"1\":{\"941\":1}}],[\"runtime的主要作用\",{\"1\":{\"941\":1}}],[\"runtime\",{\"0\":{\"941\":1,\"967\":1},\"1\":{\"941\":1,\"942\":2,\"955\":1,\"977\":1}}],[\"run\",{\"1\":{\"928\":1,\"955\":1,\"956\":2}}],[\"running\",{\"1\":{\"13\":2}}],[\"rules\",{\"1\":{\"449\":2,\"909\":1,\"946\":1,\"948\":2,\"949\":1,\"953\":1,\"954\":1}}],[\"rcvd\",{\"1\":{\"243\":1}}],[\"rv\",{\"1\":{\"223\":1,\"224\":1}}],[\"r\",{\"1\":{\"217\":2,\"326\":1,\"380\":1,\"384\":4,\"387\":1,\"406\":1,\"690\":1,\"858\":8,\"1010\":1}}],[\"rfc\",{\"1\":{\"205\":6,\"217\":1}}],[\"raw\",{\"1\":{\"953\":1}}],[\"random\",{\"1\":{\"916\":1,\"917\":1,\"918\":1}}],[\"range\",{\"1\":{\"224\":4}}],[\"raspberry\",{\"1\":{\"322\":2}}],[\"rarp\",{\"1\":{\"176\":1}}],[\"radial\",{\"1\":{\"52\":1}}],[\"radius为百分比\",{\"1\":{\"57\":1}}],[\"radius不一样\",{\"1\":{\"57\":1}}],[\"radius\",{\"1\":{\"41\":1,\"90\":1}}],[\"rgb为颜色值\",{\"1\":{\"48\":1}}],[\"rgba分为两部分\",{\"1\":{\"48\":1}}],[\"rgba\",{\"1\":{\"7\":1}}],[\"routes\",{\"1\":{\"909\":2}}],[\"route用于路径的匹配\",{\"1\":{\"595\":1}}],[\"route>\",{\"1\":{\"449\":1}}],[\"router配置路由\",{\"1\":{\"858\":1}}],[\"router组件主要做的是通过browserrouter传过来的当前值\",{\"1\":{\"609\":1}}],[\"router也是基于这个特性实现路由的跳转\",{\"1\":{\"607\":1}}],[\"router对应的hash模式和history模式对应的组件为\",{\"1\":{\"606\":1}}],[\"router还提供一些hooks\",{\"1\":{\"598\":1}}],[\"router>\",{\"1\":{\"594\":1,\"595\":1,\"606\":1}}],[\"router中包含了对路径改变的监听\",{\"1\":{\"594\":1}}],[\"router主要分成了几个不同的包\",{\"1\":{\"592\":1}}],[\"router等前端路由的原理大致相同\",{\"1\":{\"592\":1}}],[\"routers\",{\"1\":{\"449\":2}}],[\"router\",{\"0\":{\"609\":1},\"1\":{\"449\":7,\"592\":6,\"593\":1,\"594\":2,\"595\":2,\"599\":1,\"601\":1,\"606\":7,\"717\":1,\"812\":1}}],[\"route\",{\"0\":{\"595\":1},\"1\":{\"449\":1,\"593\":1,\"595\":1,\"606\":1,\"609\":2}}],[\"round\",{\"1\":{\"374\":2}}],[\"rootbounds\",{\"1\":{\"285\":1}}],[\"root\",{\"1\":{\"35\":1,\"285\":1,\"421\":4,\"449\":2,\"537\":1,\"895\":2}}],[\"rotate\",{\"1\":{\"8\":1,\"12\":2,\"13\":8,\"50\":1}}],[\"recharge\",{\"1\":{\"909\":1}}],[\"recommend\",{\"1\":{\"573\":1}}],[\"reconcilechildren\",{\"1\":{\"538\":2}}],[\"reconciler\",{\"1\":{\"427\":1}}],[\"record<one\",{\"1\":{\"646\":1}}],[\"record\",{\"1\":{\"111\":1,\"526\":1,\"646\":1,\"968\":1,\"970\":1}}],[\"rel\",{\"1\":{\"907\":1}}],[\"rel=\",{\"1\":{\"906\":4}}],[\"relaunch\",{\"1\":{\"832\":1}}],[\"relative\",{\"1\":{\"25\":1,\"26\":1,\"27\":1,\"79\":1,\"89\":2,\"90\":1,\"291\":1}}],[\"ret\",{\"1\":{\"793\":4}}],[\"return语句\",{\"1\":{\"986\":1}}],[\"return等\",{\"1\":{\"983\":1}}],[\"returnifabrupt\",{\"1\":{\"970\":1,\"971\":1}}],[\"returnifabrupt这是一个简写的步骤\",{\"1\":{\"970\":1}}],[\"returncompletionrecord\",{\"1\":{\"968\":1}}],[\"returns\",{\"1\":{\"612\":1}}],[\"returnstatementexpressionstatement\",{\"1\":{\"129\":5,\"986\":1}}],[\"return\",{\"1\":{\"129\":3,\"130\":3,\"253\":5,\"254\":7,\"259\":1,\"260\":1,\"261\":1,\"262\":3,\"263\":2,\"270\":2,\"272\":2,\"277\":6,\"278\":2,\"285\":2,\"292\":1,\"313\":2,\"322\":1,\"323\":1,\"324\":1,\"326\":1,\"338\":1,\"349\":2,\"386\":1,\"413\":1,\"414\":2,\"415\":1,\"428\":1,\"429\":1,\"441\":1,\"449\":2,\"454\":1,\"455\":1,\"457\":2,\"458\":1,\"459\":3,\"460\":2,\"461\":2,\"465\":1,\"466\":1,\"472\":1,\"473\":1,\"474\":1,\"479\":5,\"480\":7,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"500\":5,\"505\":2,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"519\":2,\"520\":3,\"527\":11,\"530\":2,\"533\":2,\"538\":7,\"542\":1,\"549\":7,\"550\":1,\"555\":2,\"556\":1,\"566\":2,\"567\":2,\"573\":1,\"575\":2,\"580\":1,\"581\":1,\"582\":1,\"583\":1,\"587\":4,\"588\":6,\"594\":1,\"595\":1,\"599\":1,\"600\":1,\"601\":1,\"606\":1,\"608\":1,\"609\":3,\"612\":1,\"616\":2,\"620\":2,\"621\":1,\"627\":1,\"633\":1,\"634\":1,\"635\":2,\"659\":2,\"662\":4,\"663\":2,\"669\":1,\"670\":1,\"752\":2,\"753\":8,\"754\":2,\"760\":2,\"770\":1,\"792\":2,\"793\":3,\"845\":1,\"848\":1,\"858\":1,\"895\":2,\"916\":1,\"917\":1,\"918\":1,\"969\":1,\"970\":1,\"977\":1,\"978\":1,\"984\":1,\"986\":3}}],[\"republic\",{\"1\":{\"488\":1}}],[\"replace\",{\"1\":{\"254\":1}}],[\"replaced\",{\"1\":{\"130\":1}}],[\"req\",{\"1\":{\"449\":5,\"560\":1}}],[\"requestanimationframe\",{\"1\":{\"917\":1,\"918\":1}}],[\"requestanimationframe的步伐跟着系统的刷新步伐走\",{\"1\":{\"917\":1}}],[\"requestanimationframe最大的优势是由系统来决定回调函数的执行时机\",{\"1\":{\"917\":1}}],[\"requestidlecallback\",{\"1\":{\"429\":1}}],[\"request\",{\"1\":{\"406\":3,\"407\":1,\"829\":1}}],[\"requests\",{\"1\":{\"223\":1}}],[\"required\",{\"1\":{\"670\":1}}],[\"require\",{\"1\":{\"332\":1,\"351\":1,\"449\":4,\"609\":1,\"858\":8,\"859\":2,\"895\":1,\"907\":2,\"909\":2,\"925\":2,\"926\":1,\"933\":1,\"936\":2,\"941\":2,\"953\":3,\"954\":3,\"955\":2}}],[\"register\",{\"1\":{\"315\":2,\"351\":3}}],[\"regexp\",{\"1\":{\"254\":1,\"277\":2,\"609\":1}}],[\"reg\",{\"1\":{\"254\":3,\"609\":2}}],[\"ref实例\",{\"1\":{\"696\":1}}],[\"ref对象接收到的是组件的挂载实例\",{\"1\":{\"583\":1}}],[\"refs通过react\",{\"1\":{\"581\":1}}],[\"refs提供了一种方式\",{\"1\":{\"578\":1}}],[\"refs\",{\"0\":{\"578\":1},\"1\":{\"579\":1,\"580\":1}}],[\"ref等\",{\"1\":{\"538\":1}}],[\"ref=\",{\"1\":{\"466\":1,\"479\":1,\"505\":2,\"580\":1,\"581\":1,\"582\":1,\"583\":1}}],[\"refobject\",{\"1\":{\"428\":1}}],[\"ref\",{\"1\":{\"428\":1,\"479\":6,\"581\":2,\"696\":1,\"811\":1,\"812\":1}}],[\"refresh\",{\"1\":{\"292\":4}}],[\"refreshtext\",{\"1\":{\"291\":5}}],[\"refreshcontainer\",{\"1\":{\"291\":1}}],[\"refactor\",{\"1\":{\"689\":1}}],[\"refa\",{\"1\":{\"251\":8}}],[\"referer\",{\"1\":{\"223\":1}}],[\"reflow\",{\"1\":{\"192\":1}}],[\"renderer\",{\"1\":{\"813\":1,\"909\":3}}],[\"render用于生成vnode\",{\"1\":{\"796\":1}}],[\"render方法\",{\"1\":{\"796\":1}}],[\"render方法中使用箭头函数\",{\"0\":{\"511\":1},\"1\":{\"509\":1}}],[\"render方法中使用bind\",{\"0\":{\"510\":1},\"1\":{\"509\":1}}],[\"renderc\",{\"1\":{\"760\":1}}],[\"renderb\",{\"1\":{\"760\":1}}],[\"rendera\",{\"1\":{\"760\":1}}],[\"render和staticrenderfns函数被调用后生成虚拟vnode节点\",{\"1\":{\"758\":1}}],[\"render就可以得到渲染函数\",{\"1\":{\"752\":1}}],[\"render以及所有的vue生命周期钩子能够直接作为类的成员方法\",{\"1\":{\"667\":1}}],[\"render=\",{\"1\":{\"595\":1}}],[\"render函数通过表达式的值来决定是否生成dom\",{\"1\":{\"760\":1}}],[\"render函数里面可以编写jsx\",{\"1\":{\"589\":1}}],[\"render函数在react中有两种形式\",{\"1\":{\"587\":1}}],[\"render的执行时机主要分成了两部分\",{\"1\":{\"588\":1}}],[\"render的触发时机\",{\"1\":{\"547\":1}}],[\"render将生成好的虚拟dom渲染到指定容器上\",{\"1\":{\"539\":1}}],[\"render大致实现方法如下\",{\"1\":{\"538\":1}}],[\"render进行渲染成真实dom\",{\"1\":{\"538\":1}}],[\"rendertostring\",{\"1\":{\"449\":6,\"450\":1,\"560\":2}}],[\"rendertostring方法\",{\"1\":{\"449\":1}}],[\"render\",{\"0\":{\"437\":1,\"587\":1},\"1\":{\"192\":3,\"414\":2,\"415\":1,\"416\":1,\"421\":2,\"434\":1,\"437\":1,\"439\":1,\"454\":1,\"457\":1,\"460\":2,\"461\":2,\"465\":1,\"466\":1,\"474\":1,\"479\":3,\"480\":6,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"500\":2,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"519\":1,\"520\":1,\"530\":4,\"533\":1,\"537\":2,\"538\":7,\"543\":1,\"549\":1,\"555\":3,\"556\":1,\"560\":1,\"566\":1,\"567\":1,\"578\":2,\"580\":1,\"581\":2,\"582\":1,\"587\":2,\"588\":9,\"589\":2,\"595\":1,\"608\":1,\"609\":1,\"612\":1,\"620\":1,\"621\":1,\"627\":1,\"633\":1,\"634\":1,\"635\":1}}],[\"read\",{\"1\":{\"895\":1}}],[\"ready\",{\"1\":{\"826\":1}}],[\"readonly<iperson>\",{\"1\":{\"646\":1}}],[\"readonly\",{\"0\":{\"342\":1},\"1\":{\"342\":4,\"345\":2,\"347\":2,\"349\":1,\"651\":1}}],[\"real\",{\"1\":{\"375\":1,\"421\":1}}],[\"realm记录器包含全局对象\",{\"1\":{\"104\":1}}],[\"realm记录器\",{\"1\":{\"104\":1}}],[\"realm包含了代码需要执行的最小资源\",{\"1\":{\"96\":1}}],[\"realm\",{\"1\":{\"95\":1}}],[\"realm提供了代码执行需要的基础资源\",{\"1\":{\"92\":1}}],[\"reactive的类型推断\",{\"1\":{\"812\":1}}],[\"react具有单向数据流的特性\",{\"1\":{\"621\":1}}],[\"react的核心思想就是组件化思想\",{\"1\":{\"621\":1}}],[\"react判断key的流程具体如下图\",{\"1\":{\"543\":1}}],[\"react根据key属性匹配原有树上的子元素以及最新树上的子元素\",{\"1\":{\"542\":1}}],[\"react会将这些\",{\"1\":{\"537\":1}}],[\"react通过将组件编写的jsx映射到屏幕\",{\"1\":{\"537\":1}}],[\"react通过引入virtual\",{\"1\":{\"492\":1}}],[\"react特性有很多\",{\"1\":{\"531\":1}}],[\"react事件\",{\"1\":{\"505\":1}}],[\"react基于浏览器的事件机制自身实现了一套事件机制\",{\"1\":{\"503\":1}}],[\"react发现新树中\",{\"1\":{\"494\":1}}],[\"react中diff算法主要遵循三个层级的策略\",{\"1\":{\"493\":1}}],[\"react内部都会将porps赋值给组件实例porps属性中\",{\"1\":{\"628\":1}}],[\"react内部也会将其定义在组件实例中\",{\"1\":{\"627\":1}}],[\"react内部\",{\"1\":{\"460\":2}}],[\"react<\",{\"1\":{\"460\":4}}],[\"react16引用了错误边界新的概念\",{\"1\":{\"500\":1}}],[\"react16\",{\"1\":{\"433\":1}}],[\"react整个组件生命周期包括从创建\",{\"1\":{\"432\":1}}],[\"reactelement\",{\"1\":{\"428\":1}}],[\"reactelement里面的key\",{\"1\":{\"428\":1}}],[\"react借助虚拟dom\",{\"1\":{\"423\":1}}],[\"reactdom\",{\"1\":{\"421\":2,\"449\":2,\"530\":1,\"537\":1,\"538\":1,\"539\":1,\"560\":2}}],[\"react\",{\"0\":{\"426\":1,\"448\":1,\"473\":1,\"474\":1,\"517\":1,\"530\":1,\"550\":1,\"556\":1},\"1\":{\"415\":1,\"416\":2,\"421\":1,\"427\":2,\"428\":5,\"429\":5,\"445\":1,\"449\":21,\"450\":1,\"454\":1,\"457\":1,\"458\":1,\"459\":1,\"460\":1,\"461\":2,\"465\":1,\"466\":3,\"471\":2,\"473\":3,\"474\":1,\"479\":5,\"480\":5,\"485\":2,\"486\":2,\"487\":2,\"488\":3,\"500\":4,\"504\":3,\"505\":13,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"517\":2,\"519\":3,\"520\":4,\"527\":2,\"530\":3,\"533\":1,\"537\":3,\"538\":2,\"542\":1,\"546\":2,\"547\":1,\"550\":3,\"554\":1,\"555\":6,\"556\":1,\"558\":1,\"559\":2,\"560\":2,\"563\":1,\"565\":1,\"578\":2,\"579\":1,\"580\":2,\"581\":2,\"582\":2,\"587\":5,\"588\":2,\"589\":1,\"592\":9,\"594\":1,\"595\":1,\"598\":1,\"599\":1,\"601\":1,\"606\":6,\"607\":1,\"608\":2,\"609\":2,\"612\":2,\"620\":1,\"621\":1,\"627\":4,\"631\":1,\"632\":1,\"633\":1,\"634\":1,\"635\":3,\"909\":1},\"2\":{\"136\":1,\"137\":1,\"143\":1,\"144\":1,\"154\":1,\"155\":1,\"166\":1,\"167\":1,\"178\":1,\"179\":1,\"184\":1,\"185\":1,\"193\":1,\"194\":1,\"203\":1,\"204\":1,\"213\":1,\"214\":1,\"221\":1,\"222\":1,\"228\":1,\"229\":1,\"241\":1,\"242\":1,\"245\":1,\"246\":1,\"419\":1,\"420\":1,\"424\":1,\"425\":1,\"430\":1,\"431\":1,\"446\":1,\"447\":1,\"451\":1,\"452\":1,\"462\":1,\"463\":1,\"468\":1,\"469\":1,\"476\":1,\"477\":1,\"481\":1,\"482\":1,\"490\":1,\"491\":1,\"498\":1,\"499\":1,\"501\":1,\"502\":1,\"506\":1,\"507\":1,\"515\":1,\"516\":1,\"523\":1,\"524\":1,\"528\":1,\"529\":1,\"535\":1,\"536\":1,\"540\":1,\"541\":1,\"544\":1,\"545\":1,\"552\":1,\"553\":1,\"561\":1,\"562\":1,\"576\":1,\"577\":1,\"585\":1,\"586\":1,\"590\":1,\"591\":1,\"610\":1,\"611\":1,\"617\":1,\"618\":1,\"623\":1,\"624\":1,\"629\":1,\"630\":1,\"636\":1,\"637\":1}}],[\"removeonly\",{\"1\":{\"770\":1}}],[\"remove\",{\"1\":{\"287\":1,\"496\":1}}],[\"removeeventlistener\",{\"1\":{\"273\":1}}],[\"removechild\",{\"1\":{\"251\":1}}],[\"removeclass\",{\"1\":{\"90\":1}}],[\"rem是相对于根元素html的font\",{\"1\":{\"59\":1}}],[\"rem\",{\"0\":{\"59\":1},\"1\":{\"55\":1}}],[\"responsestart\",{\"1\":{\"884\":1}}],[\"responsive\",{\"1\":{\"54\":1}}],[\"reserve\",{\"1\":{\"587\":2}}],[\"reset\",{\"1\":{\"37\":1}}],[\"rest\",{\"1\":{\"479\":2,\"658\":1}}],[\"res\",{\"1\":{\"449\":7,\"560\":6,\"573\":2,\"793\":3,\"859\":1}}],[\"resolve\",{\"1\":{\"449\":2,\"909\":2,\"926\":1,\"954\":1}}],[\"resolved\",{\"1\":{\"428\":1}}],[\"resourcehintwebpackplugin\",{\"1\":{\"907\":2}}],[\"resource\",{\"0\":{\"390\":1},\"1\":{\"390\":1,\"907\":1}}],[\"resource类型\",{\"1\":{\"367\":1}}],[\"result=\",{\"1\":{\"292\":1}}],[\"result\",{\"1\":{\"254\":7,\"287\":1,\"292\":2,\"304\":1,\"460\":2}}],[\"resize\",{\"1\":{\"59\":1}}],[\"redirectto\",{\"1\":{\"828\":1,\"832\":1}}],[\"redirect\",{\"0\":{\"597\":1},\"1\":{\"593\":1}}],[\"redux整个工作流程\",{\"1\":{\"571\":1}}],[\"redux中\",{\"1\":{\"570\":1,\"571\":1}}],[\"redux\",{\"0\":{\"573\":1,\"574\":1},\"1\":{\"565\":1,\"572\":2,\"573\":2,\"574\":2,\"575\":1}}],[\"redux分成了两大核心\",{\"1\":{\"563\":1}}],[\"redux将组件分成\",{\"1\":{\"563\":1}}],[\"reducer立即算出state\",{\"1\":{\"571\":1}}],[\"reducer\",{\"1\":{\"570\":7,\"571\":1,\"572\":1,\"574\":1,\"575\":2}}],[\"reducers\",{\"1\":{\"569\":2}}],[\"reduce\",{\"1\":{\"297\":2,\"658\":1}}],[\"red\",{\"1\":{\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"52\":1,\"87\":1,\"90\":1,\"485\":1,\"486\":1,\"488\":1,\"538\":1,\"596\":3}}],[\"reverse\",{\"1\":{\"13\":2,\"297\":1,\"1008\":1}}],[\"right如果设置百分比\",{\"1\":{\"57\":1}}],[\"right\",{\"1\":{\"20\":1,\"25\":1,\"75\":2,\"76\":2,\"78\":4,\"79\":4,\"80\":4,\"81\":3,\"82\":3,\"83\":3,\"89\":1,\"90\":2,\"285\":3,\"355\":1,\"587\":2,\"699\":1}}],[\"旋转\",{\"1\":{\"8\":1,\"10\":1,\"12\":1,\"50\":1}}],[\"让用户在等待内容加载时获得视觉反馈\",{\"1\":{\"910\":1}}],[\"让组件变得像内置标签那样监听根元素的原生事件\",{\"1\":{\"699\":1}}],[\"让元素在两个状态之间平滑过渡\",{\"1\":{\"633\":1}}],[\"让通用逻辑在组件间更好地被复用\",{\"1\":{\"479\":1}}],[\"让js代码来控制\",{\"1\":{\"449\":1}}],[\"让浏览器有时间再进行页面的渲染\",{\"1\":{\"429\":1}}],[\"让前端在每次向后端发送请求时\",{\"1\":{\"287\":1}}],[\"让http运行安全的ssl\",{\"1\":{\"231\":1}}],[\"让主体内容优先加载\",{\"1\":{\"82\":1}}],[\"让页面不会那么生硬\",{\"1\":{\"51\":1}}],[\"让内部的子元素不会影响到外部的元素\",{\"1\":{\"19\":1}}],[\"让我们先来看一下两个概念transform和perspective\",{\"1\":{\"8\":1}}],[\"让背景相对于视口固定\",{\"1\":{\"7\":1}}],[\">点击新增li标签<\",{\"1\":{\"851\":1}}],[\">点击increase<\",{\"1\":{\"567\":1}}],[\">b<\",{\"1\":{\"760\":1}}],[\">bar\",{\"1\":{\"338\":2}}],[\">+friend<\",{\"1\":{\"635\":1}}],[\">面试官系列<\",{\"1\":{\"612\":1}}],[\">详情2<\",{\"1\":{\"604\":1}}],[\">详情<\",{\"1\":{\"603\":1}}],[\">我的<\",{\"1\":{\"596\":1}}],[\">我是app中的一段文字描述<\",{\"1\":{\"486\":1,\"487\":1}}],[\">我是app的标题<\",{\"1\":{\"486\":1,\"487\":1}}],[\">关于<\",{\"1\":{\"596\":1}}],[\">首页<\",{\"1\":{\"596\":1}}],[\">contact<\",{\"1\":{\"594\":1,\"595\":1}}],[\">click\",{\"1\":{\"500\":1}}],[\">click<\",{\"1\":{\"458\":1}}],[\">home<\",{\"1\":{\"594\":1,\"595\":1}}],[\">increment<\",{\"1\":{\"588\":2}}],[\">id\",{\"1\":{\"346\":2,\"368\":5}}],[\">真实dom节点\",{\"1\":{\"538\":1}}],[\">xxx<\",{\"1\":{\"538\":1}}],[\">按钮命名<\",{\"1\":{\"504\":4}}],[\">按钮<\",{\"1\":{\"504\":2}}],[\">a<\",{\"1\":{\"760\":1}}],[\">about<\",{\"1\":{\"594\":1,\"595\":1}}],[\">app\",{\"1\":{\"488\":1}}],[\">age\",{\"1\":{\"368\":1}}],[\">123<\",{\"1\":{\"485\":1}}],[\">1<\",{\"1\":{\"7\":1,\"497\":4}}],[\">follow<\",{\"1\":{\"461\":2}}],[\">foo\",{\"1\":{\"347\":1,\"349\":5}}],[\">show<\",{\"1\":{\"508\":1}}],[\">showconstant\",{\"1\":{\"350\":1}}],[\">stuttgarter\",{\"1\":{\"406\":1}}],[\">go\",{\"1\":{\"596\":1,\"599\":1}}],[\">goods2<\",{\"1\":{\"414\":1}}],[\">goods1<\",{\"1\":{\"414\":1}}],[\">guinness<\",{\"1\":{\"406\":1}}],[\">getuser\",{\"1\":{\"344\":2}}],[\">warthog<\",{\"1\":{\"406\":1}}],[\">do\",{\"1\":{\"388\":1}}],[\">displayvar\",{\"1\":{\"340\":1}}],[\">display\",{\"1\":{\"11\":1}}],[\">printid\",{\"1\":{\"368\":2}}],[\">property\",{\"1\":{\"345\":1}}],[\">>\",{\"1\":{\"355\":1}}],[\">modified\",{\"1\":{\"349\":2}}],[\">obj\",{\"1\":{\"347\":2}}],[\">one<\",{\"1\":{\"8\":1}}],[\">name\",{\"1\":{\"344\":2,\"346\":2,\"368\":1}}],[\">访问符\",{\"0\":{\"344\":1}}],[\">var\",{\"1\":{\"336\":1}}],[\">variable\",{\"1\":{\"325\":2}}],[\">的简写\",{\"1\":{\"330\":1}}],[\">$\",{\"1\":{\"449\":1}}],[\">$funcname\",{\"1\":{\"325\":1}}],[\">$name\",{\"1\":{\"325\":1}}],[\">=\",{\"0\":{\"389\":1},\"1\":{\"285\":2,\"290\":1,\"313\":1,\"356\":1}}],[\">3\",{\"1\":{\"90\":1}}],[\">3<\",{\"1\":{\"7\":1,\"497\":4}}],[\">这是一段很长的文本<\",{\"1\":{\"89\":1}}],[\">中间自适应<\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\">中间<\",{\"1\":{\"78\":1,\"82\":1,\"83\":1}}],[\">右边固定宽度<\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\">右边<\",{\"1\":{\"75\":1,\"76\":1}}],[\">右侧<\",{\"1\":{\"78\":1,\"82\":1,\"83\":1}}],[\">左边固定宽度<\",{\"1\":{\"79\":1,\"80\":1,\"81\":1}}],[\">左边<\",{\"1\":{\"75\":1,\"76\":1}}],[\">左侧<\",{\"1\":{\"78\":1,\"82\":1,\"83\":1}}],[\"><br\",{\"1\":{\"406\":4}}],[\"><\",{\"1\":{\"11\":1,\"12\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"35\":3,\"421\":1,\"449\":3,\"583\":1,\"769\":1,\"858\":1,\"916\":1,\"917\":1,\"918\":1}}],[\">toggle<\",{\"1\":{\"633\":1}}],[\">test<\",{\"1\":{\"510\":1,\"511\":1,\"512\":1,\"513\":1}}],[\">three<\",{\"1\":{\"8\":1}}],[\">two<\",{\"1\":{\"8\":1}}],[\">\",{\"1\":{\"8\":1,\"15\":1,\"18\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"35\":6,\"36\":3,\"55\":1,\"75\":1,\"76\":1,\"78\":2,\"79\":1,\"80\":1,\"81\":1,\"82\":2,\"83\":1,\"87\":1,\"90\":1,\"291\":2,\"312\":2,\"313\":1,\"315\":1,\"330\":8,\"331\":6,\"332\":4,\"333\":6,\"336\":1,\"344\":1,\"345\":2,\"356\":1,\"368\":2,\"370\":1,\"371\":1,\"372\":1,\"374\":1,\"375\":1,\"376\":1,\"379\":1,\"381\":1,\"384\":1,\"385\":2,\"386\":1,\"387\":1,\"389\":1,\"399\":1,\"401\":1,\"406\":14,\"407\":1,\"408\":1,\"413\":2,\"414\":1,\"415\":2,\"416\":1,\"449\":4,\"458\":1,\"460\":4,\"465\":1,\"466\":3,\"479\":3,\"480\":1,\"485\":1,\"486\":3,\"487\":3,\"488\":1,\"500\":1,\"505\":2,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"519\":4,\"520\":4,\"530\":1,\"532\":2,\"533\":4,\"537\":3,\"538\":10,\"555\":2,\"556\":1,\"559\":3,\"560\":3,\"564\":2,\"580\":1,\"581\":1,\"582\":1,\"583\":1,\"587\":1,\"588\":6,\"595\":1,\"596\":1,\"597\":2,\"598\":5,\"600\":2,\"601\":1,\"603\":2,\"604\":1,\"605\":1,\"606\":4,\"608\":1,\"620\":1,\"621\":1,\"633\":4,\"634\":3,\"635\":1,\"646\":1,\"696\":5,\"752\":2,\"753\":4,\"756\":2,\"769\":3,\"851\":1,\"861\":1,\"895\":4,\"906\":4,\"911\":2,\"936\":1}}],[\">7<\",{\"1\":{\"7\":1}}],[\">6<\",{\"1\":{\"7\":1,\"497\":1}}],[\">5<\",{\"1\":{\"7\":1,\"497\":4}}],[\">4<\",{\"1\":{\"7\":1,\"497\":3}}],[\">2<\",{\"1\":{\"7\":1,\"497\":4}}],[\"<img\",{\"1\":{\"861\":1}}],[\"<input>\",{\"1\":{\"770\":1}}],[\"<input\",{\"1\":{\"406\":7,\"413\":1,\"465\":1,\"466\":2,\"555\":2,\"696\":1}}],[\"<ul\",{\"1\":{\"851\":1,\"916\":1,\"917\":1,\"918\":1}}],[\"<ul>\",{\"1\":{\"542\":1,\"594\":1,\"595\":1}}],[\"<原分支名>\",{\"1\":{\"690\":1}}],[\"<新分支名><提交id>\",{\"1\":{\"690\":1}}],[\"<新分支名>\",{\"1\":{\"690\":4}}],[\"<分支名>\",{\"1\":{\"690\":5}}],[\"<本地分支名>\",{\"1\":{\"689\":1}}],[\"<远程库名>\",{\"1\":{\"690\":2}}],[\"<远程分支名>\",{\"1\":{\"689\":2}}],[\"<远程仓库名>\",{\"1\":{\"689\":2}}],[\"<具体文件路径+全名>\",{\"1\":{\"689\":1}}],[\"<wrapper\",{\"1\":{\"696\":1}}],[\"<wrappedcomponent\",{\"1\":{\"479\":2,\"480\":1}}],[\"<welcome\",{\"1\":{\"621\":1}}],[\"<navlink\",{\"1\":{\"596\":3,\"603\":1,\"604\":1,\"605\":1}}],[\"<nav>\",{\"1\":{\"594\":1,\"595\":1}}],[\"<johancomponent\",{\"1\":{\"559\":1}}],[\"<jumbotron\",{\"1\":{\"533\":1}}],[\"<redirect\",{\"1\":{\"597\":1,\"600\":1}}],[\"<react\",{\"1\":{\"559\":1}}],[\"<router>\",{\"1\":{\"594\":1,\"595\":1,\"606\":1}}],[\"<route\",{\"1\":{\"449\":1,\"595\":1,\"598\":5,\"600\":1,\"603\":2,\"604\":1,\"606\":4}}],[\"<link\",{\"1\":{\"906\":4}}],[\"<li>列表项<\",{\"1\":{\"851\":6}}],[\"<li>\",{\"1\":{\"542\":1,\"594\":3,\"595\":3}}],[\"<label>\",{\"1\":{\"413\":1}}],[\"<csstransition\",{\"1\":{\"633\":1,\"634\":1,\"635\":1}}],[\"<component\",{\"1\":{\"858\":1}}],[\"<component><\",{\"1\":{\"609\":1}}],[\"<consumer>\",{\"1\":{\"609\":1}}],[\"<classcomponent\",{\"1\":{\"538\":1}}],[\"<child\",{\"1\":{\"414\":1}}],[\"<faketext\",{\"1\":{\"596\":1,\"597\":1}}],[\"<fragment>\",{\"1\":{\"596\":1,\"597\":1,\"599\":1,\"600\":1,\"601\":1}}],[\"<foo\",{\"1\":{\"588\":2}}],[\"<form\",{\"1\":{\"406\":2,\"466\":1}}],[\"<functioncomponent\",{\"1\":{\"538\":1}}],[\"<template\",{\"1\":{\"753\":1}}],[\"<template>\",{\"1\":{\"696\":2,\"858\":1,\"911\":1}}],[\"<transitiongroup>\",{\"1\":{\"635\":1}}],[\"<todolist\",{\"1\":{\"533\":1}}],[\"<todoform\",{\"1\":{\"533\":1}}],[\"<title>ssr\",{\"1\":{\"449\":4}}],[\"<mypage\",{\"1\":{\"560\":2}}],[\"<mywidget\",{\"1\":{\"500\":1}}],[\"<main>\",{\"1\":{\"594\":1,\"595\":1}}],[\"<marker\",{\"1\":{\"532\":1}}],[\"<map\",{\"1\":{\"532\":1}}],[\"<meta\",{\"1\":{\"55\":1}}],[\"<el\",{\"1\":{\"911\":1}}],[\"<errorboundary>\",{\"1\":{\"500\":1}}],[\"<enhance\",{\"1\":{\"479\":1}}],[\"<emailinput\",{\"1\":{\"413\":1}}],[\"<app\",{\"1\":{\"449\":1,\"537\":1,\"564\":1}}],[\"<h3>classcomponent<\",{\"1\":{\"538\":1}}],[\"<header>\",{\"1\":{\"587\":1}}],[\"<head>\",{\"1\":{\"449\":4}}],[\"<hello\",{\"1\":{\"537\":1}}],[\"<hellomessage\",{\"1\":{\"530\":1}}],[\"<h2>\",{\"1\":{\"612\":1}}],[\"<h2>welcome\",{\"1\":{\"556\":1}}],[\"<h2\",{\"1\":{\"486\":1,\"487\":1}}],[\"<home\",{\"1\":{\"449\":2,\"486\":1,\"487\":1}}],[\"<html>\",{\"1\":{\"449\":4}}],[\"<h1>about\",{\"1\":{\"597\":1,\"600\":1}}],[\"<h1>contact<\",{\"1\":{\"596\":1,\"599\":1,\"601\":1}}],[\"<h1>caught\",{\"1\":{\"500\":1}}],[\"<h1>\",{\"1\":{\"587\":2,\"588\":4}}],[\"<h1>welcome\",{\"1\":{\"555\":2,\"595\":1}}],[\"<h1>todo\",{\"1\":{\"533\":1}}],[\"<h1>this\",{\"1\":{\"333\":1,\"556\":1}}],[\"<h1>something\",{\"1\":{\"500\":1}}],[\"<h1>bye\",{\"1\":{\"459\":1}}],[\"<h1>hello\",{\"1\":{\"421\":1,\"454\":1,\"455\":1,\"457\":2,\"459\":1,\"480\":1,\"621\":1}}],[\"<option\",{\"1\":{\"406\":3}}],[\"<button\",{\"1\":{\"414\":2,\"458\":1,\"461\":2,\"500\":1,\"504\":6,\"508\":1,\"519\":2,\"520\":2,\"567\":1,\"588\":4,\"596\":1,\"599\":1,\"612\":1,\"620\":1,\"633\":1,\"634\":1,\"635\":1,\"851\":1}}],[\"<browserrouter>\",{\"1\":{\"449\":1}}],[\"<br\",{\"1\":{\"406\":1}}],[\"<body>\",{\"1\":{\"89\":1,\"449\":4,\"769\":1,\"851\":1}}],[\"<>\",{\"1\":{\"356\":1,\"361\":1,\"556\":1,\"583\":1}}],[\"<<<eot\",{\"1\":{\"381\":1}}],[\"<<<\",{\"1\":{\"381\":1,\"382\":1}}],[\"<<\",{\"1\":{\"355\":1}}],[\"<=>\",{\"1\":{\"356\":1}}],[\"<=\",{\"1\":{\"254\":1,\"285\":3,\"313\":1,\"356\":1,\"770\":2,\"916\":1,\"917\":1,\"918\":1}}],[\"<switchtransition\",{\"1\":{\"634\":1}}],[\"<switch>\",{\"1\":{\"598\":1,\"603\":1,\"604\":1}}],[\"<spinner\",{\"1\":{\"559\":1}}],[\"<selfbutton\",{\"1\":{\"488\":1}}],[\"<selflink\",{\"1\":{\"488\":1}}],[\"<select\",{\"1\":{\"406\":1}}],[\"<selector>\",{\"1\":{\"35\":1}}],[\"<staticrouter\",{\"1\":{\"449\":1}}],[\"<style\",{\"1\":{\"82\":1}}],[\"<style>\",{\"1\":{\"7\":1,\"8\":1,\"11\":1,\"12\":1,\"15\":1,\"18\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"75\":1,\"76\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"83\":1,\"87\":1,\"89\":1,\"90\":1}}],[\"<script>\",{\"1\":{\"769\":1,\"851\":1,\"858\":1,\"911\":1}}],[\"<script\",{\"1\":{\"449\":2,\"769\":1}}],[\"<siblingb\",{\"1\":{\"415\":1}}],[\"<siblinga\",{\"1\":{\"415\":1}}],[\"<provider>\",{\"1\":{\"564\":1}}],[\"<provider\",{\"1\":{\"564\":1,\"608\":1}}],[\"<pricecontext\",{\"1\":{\"416\":2}}],[\"<pre>\",{\"1\":{\"406\":1}}],[\"<pre>$output<\",{\"1\":{\"360\":1}}],[\"<p>current\",{\"1\":{\"601\":1}}],[\"<p>count\",{\"1\":{\"458\":1}}],[\"<p>xx<\",{\"1\":{\"538\":1}}],[\"<p>you\",{\"1\":{\"519\":2,\"520\":2}}],[\"<p>hello\",{\"1\":{\"460\":4}}],[\"<p>the\",{\"1\":{\"333\":1}}],[\"<p>this\",{\"1\":{\"331\":2}}],[\"<p>\",{\"1\":{\"90\":1,\"538\":1}}],[\"<p\",{\"1\":{\"35\":2,\"87\":1,\"486\":1,\"487\":1,\"538\":1,\"752\":1,\"753\":1,\"769\":1}}],[\"<div>nice\",{\"1\":{\"627\":1}}],[\"<div>this\",{\"1\":{\"566\":1}}],[\"<div>6<\",{\"1\":{\"497\":1}}],[\"<div>5<\",{\"1\":{\"497\":5}}],[\"<div>4<\",{\"1\":{\"497\":4}}],[\"<div>3<\",{\"1\":{\"497\":5}}],[\"<div>2<\",{\"1\":{\"497\":5}}],[\"<div>1<\",{\"1\":{\"497\":5}}],[\"<div>hello\",{\"1\":{\"472\":1}}],[\"<div>home<\",{\"1\":{\"449\":1}}],[\"<div>price\",{\"1\":{\"414\":1,\"416\":1}}],[\"<div>\",{\"1\":{\"414\":2,\"415\":1,\"449\":1,\"458\":1,\"474\":1,\"480\":2,\"485\":1,\"488\":1,\"519\":2,\"520\":2,\"530\":1,\"537\":1,\"555\":2,\"587\":1,\"588\":4,\"612\":1,\"635\":2}}],[\"<div\",{\"1\":{\"7\":7,\"8\":4,\"11\":1,\"12\":1,\"15\":1,\"18\":1,\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2,\"35\":5,\"75\":3,\"76\":3,\"78\":4,\"79\":4,\"80\":4,\"81\":4,\"82\":4,\"83\":4,\"89\":1,\"449\":1,\"485\":2,\"486\":1,\"487\":1,\"497\":20,\"505\":2,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"533\":1,\"538\":3,\"560\":1,\"580\":1,\"581\":1,\"582\":1,\"583\":1,\"587\":1,\"588\":2,\"633\":3,\"752\":1,\"753\":1,\"756\":2,\"760\":3,\"769\":1}}],[\"<\",{\"1\":{\"7\":1,\"8\":2,\"11\":1,\"12\":1,\"15\":2,\"18\":2,\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2,\"35\":4,\"75\":2,\"76\":2,\"78\":3,\"79\":2,\"80\":2,\"81\":3,\"82\":2,\"83\":2,\"87\":1,\"89\":2,\"90\":2,\"111\":1,\"291\":1,\"312\":2,\"313\":2,\"330\":10,\"331\":7,\"332\":5,\"333\":4,\"336\":1,\"356\":1,\"368\":2,\"370\":1,\"371\":1,\"372\":1,\"374\":1,\"375\":1,\"376\":2,\"379\":1,\"381\":1,\"382\":1,\"384\":1,\"385\":2,\"386\":1,\"387\":1,\"389\":1,\"399\":1,\"401\":1,\"406\":6,\"407\":1,\"408\":1,\"413\":1,\"414\":3,\"415\":1,\"416\":3,\"449\":16,\"454\":1,\"455\":1,\"457\":2,\"458\":2,\"466\":1,\"472\":1,\"474\":1,\"480\":3,\"485\":1,\"486\":1,\"487\":1,\"488\":2,\"500\":3,\"505\":2,\"519\":4,\"520\":4,\"530\":1,\"532\":1,\"533\":2,\"537\":2,\"538\":8,\"542\":2,\"549\":1,\"555\":2,\"556\":1,\"559\":1,\"560\":2,\"583\":1,\"587\":5,\"588\":14,\"594\":10,\"595\":11,\"596\":1,\"597\":2,\"598\":1,\"599\":1,\"600\":2,\"601\":2,\"603\":1,\"604\":1,\"605\":1,\"606\":1,\"608\":1,\"609\":1,\"612\":2,\"620\":1,\"621\":1,\"627\":1,\"633\":3,\"634\":3,\"635\":4,\"696\":5,\"752\":2,\"753\":3,\"756\":2,\"769\":4,\"851\":3,\"858\":2,\"895\":4,\"911\":2,\"916\":1,\"917\":1,\"918\":1,\"936\":1}}],[\"28\",{\"1\":{\"865\":1}}],[\"2817\",{\"1\":{\"205\":1}}],[\"24b9da6552252987aa493b52f8696cd6d3b00373\",{\"1\":{\"685\":1}}],[\"2437299\",{\"1\":{\"7\":2}}],[\"2versions\",{\"1\":{\"449\":2}}],[\"2e3\",{\"1\":{\"375\":1}}],[\"23456780\",{\"1\":{\"376\":1}}],[\"23456789\",{\"1\":{\"376\":1}}],[\"234\",{\"1\":{\"372\":1,\"375\":2,\"526\":1}}],[\"26\",{\"1\":{\"372\":1}}],[\"2616规范定义的\",{\"1\":{\"205\":1}}],[\"21\",{\"1\":{\"224\":1,\"303\":1,\"865\":1}}],[\"210px\",{\"1\":{\"75\":1}}],[\"29\",{\"1\":{\"224\":1}}],[\"2k+35\",{\"1\":{\"218\":1}}],[\"2xx\",{\"0\":{\"208\":1}}],[\"2x图\",{\"1\":{\"56\":1}}],[\"2774与\",{\"1\":{\"205\":1}}],[\"222\",{\"1\":{\"542\":1}}],[\"2295\",{\"1\":{\"205\":1}}],[\"220px\",{\"1\":{\"78\":1}}],[\"2的连接存续期内始终存在\",{\"1\":{\"151\":1}}],[\"2在客户端和服务器端使用\",{\"1\":{\"151\":1}}],[\"2\",{\"0\":{\"145\":1},\"1\":{\"50\":1,\"90\":2,\"103\":1,\"123\":2,\"149\":1,\"150\":1,\"198\":3,\"206\":1,\"250\":3,\"253\":5,\"254\":9,\"258\":2,\"260\":1,\"263\":2,\"270\":2,\"304\":2,\"313\":1,\"315\":1,\"323\":1,\"324\":3,\"330\":1,\"342\":1,\"348\":1,\"351\":1,\"355\":2,\"367\":1,\"374\":1,\"383\":1,\"384\":2,\"385\":7,\"386\":7,\"395\":1,\"402\":2,\"407\":1,\"497\":9,\"526\":6,\"538\":2,\"606\":1,\"616\":1,\"645\":1,\"662\":1,\"753\":1,\"769\":1,\"858\":1,\"895\":2,\"906\":1,\"928\":4,\"936\":1,\"939\":1,\"941\":2,\"942\":2,\"994\":1}}],[\"2s\",{\"1\":{\"11\":2,\"12\":1,\"13\":1,\"49\":1}}],[\"256\",{\"1\":{\"378\":1}}],[\"255\",{\"1\":{\"372\":1,\"398\":1}}],[\"2518\",{\"1\":{\"205\":1}}],[\"25px\",{\"1\":{\"12\":1}}],[\"25\",{\"1\":{\"11\":2,\"368\":1,\"374\":3,\"646\":1}}],[\"2px\",{\"1\":{\"8\":1}}],[\"20\",{\"1\":{\"253\":2,\"264\":1,\"324\":1,\"626\":2,\"916\":1,\"917\":1,\"918\":1}}],[\"206\",{\"1\":{\"208\":1,\"212\":1}}],[\"205\",{\"1\":{\"208\":1}}],[\"204\",{\"1\":{\"208\":1}}],[\"203\",{\"1\":{\"208\":1}}],[\"202\",{\"1\":{\"208\":1}}],[\"2015\",{\"1\":{\"865\":1}}],[\"2016\",{\"1\":{\"223\":1}}],[\"20100101\",{\"1\":{\"223\":1,\"224\":1}}],[\"201\",{\"1\":{\"208\":1}}],[\"20deg\",{\"1\":{\"50\":1}}],[\"20px\",{\"1\":{\"15\":1,\"18\":1,\"78\":1,\"82\":1,\"89\":3,\"90\":1,\"486\":1}}],[\"2000\",{\"1\":{\"769\":1}}],[\"200\",{\"1\":{\"208\":1}}],[\"200px\",{\"1\":{\"8\":3,\"11\":2,\"15\":1,\"18\":1,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2,\"75\":2,\"78\":5,\"79\":2,\"80\":2,\"81\":2,\"82\":1,\"485\":1}}],[\"200vh\",{\"1\":{\"8\":1}}],[\"20vh\",{\"1\":{\"7\":1}}],[\"2d\",{\"1\":{\"8\":1}}],[\"available\",{\"1\":{\"884\":1}}],[\"avatar\",{\"1\":{\"537\":2}}],[\"ajax\",{\"1\":{\"844\":1}}],[\"a触发事件\",{\"1\":{\"696\":1}}],[\"a=1\",{\"1\":{\"664\":1}}],[\"axxx\",{\"1\":{\"654\":1}}],[\"axios\",{\"1\":{\"573\":1}}],[\"aaa\",{\"1\":{\"588\":1}}],[\"a>\",{\"1\":{\"538\":1,\"594\":3,\"595\":3}}],[\"a节点下没有了b\",{\"1\":{\"494\":1}}],[\"api会在视口中可见元素在两帧之间更改起始位置时报告layout\",{\"1\":{\"880\":1}}],[\"api创建一个\",{\"1\":{\"878\":1}}],[\"apikey=123\",{\"1\":{\"605\":1}}],[\"api\",{\"0\":{\"955\":1},\"1\":{\"428\":1,\"813\":2,\"884\":1,\"895\":2,\"955\":1}}],[\"appsecret\",{\"1\":{\"829\":1}}],[\"app2\",{\"1\":{\"633\":1}}],[\"app<\",{\"1\":{\"533\":1}}],[\"app=\",{\"1\":{\"449\":2}}],[\"appendchild\",{\"1\":{\"538\":1,\"851\":1,\"916\":1,\"917\":1,\"918\":2}}],[\"append\",{\"1\":{\"287\":1}}],[\"app1\",{\"1\":{\"287\":2}}],[\"applymiddleware\",{\"1\":{\"572\":1,\"574\":2,\"575\":1}}],[\"apply作用是改变函数执行时的上下文\",{\"1\":{\"271\":1}}],[\"apply的区别\",{\"0\":{\"271\":1}}],[\"apply\",{\"1\":{\"270\":1,\"271\":1,\"272\":1,\"278\":1,\"845\":1,\"848\":1,\"955\":1,\"956\":3}}],[\"application\",{\"1\":{\"217\":1,\"223\":2,\"224\":1,\"895\":10}}],[\"app\",{\"1\":{\"8\":2,\"449\":15,\"486\":4,\"487\":3,\"505\":2,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"560\":2,\"583\":1,\"588\":8,\"594\":1,\"595\":1,\"606\":2,\"612\":1,\"752\":2,\"753\":2,\"769\":3,\"828\":5}}],[\"a有着局部作用域\",{\"1\":{\"403\":1}}],[\"amd\",{\"1\":{\"936\":1,\"937\":1}}],[\"amend\",{\"1\":{\"689\":1}}],[\"am\",{\"1\":{\"381\":4}}],[\"abrupt\",{\"1\":{\"970\":1,\"973\":1}}],[\"abc123\",{\"1\":{\"603\":1}}],[\"abc\",{\"1\":{\"603\":1}}],[\"abort\",{\"1\":{\"690\":1}}],[\"about\",{\"1\":{\"594\":1,\"595\":1,\"596\":1,\"597\":1,\"598\":2,\"600\":1,\"908\":1}}],[\"above\",{\"1\":{\"333\":1}}],[\"abstract\",{\"1\":{\"653\":2,\"967\":1}}],[\"abs\",{\"1\":{\"376\":1,\"526\":3}}],[\"absolute设置left\",{\"1\":{\"33\":1}}],[\"absolute\",{\"0\":{\"71\":1,\"79\":1},\"1\":{\"25\":1,\"26\":1,\"27\":1,\"66\":1,\"71\":1,\"77\":1,\"79\":2,\"89\":2,\"90\":1}}],[\"admin\",{\"1\":{\"606\":4}}],[\"adult\",{\"1\":{\"313\":2}}],[\"addage\",{\"1\":{\"662\":2}}],[\"addaction\",{\"1\":{\"575\":2}}],[\"add=\",{\"1\":{\"657\":1,\"658\":1}}],[\"addfriend\",{\"1\":{\"635\":2}}],[\"address\",{\"1\":{\"605\":1,\"687\":1}}],[\"add\",{\"1\":{\"321\":2,\"659\":3,\"662\":2,\"669\":1,\"686\":1,\"689\":2,\"928\":1}}],[\"addclass\",{\"1\":{\"90\":1}}],[\"addeventlistener\",{\"1\":{\"59\":2,\"273\":1,\"287\":1,\"291\":3,\"500\":1,\"505\":4,\"538\":1,\"608\":2,\"615\":1}}],[\"as=\",{\"1\":{\"906\":4}}],[\"astelement\",{\"1\":{\"753\":1}}],[\"ast\",{\"1\":{\"753\":1,\"760\":1}}],[\"assert\",{\"1\":{\"968\":1,\"970\":1,\"972\":1}}],[\"assets\",{\"1\":{\"937\":1}}],[\"associated\",{\"1\":{\"428\":1}}],[\"assignable\",{\"1\":{\"645\":1}}],[\"assign\",{\"1\":{\"276\":1,\"616\":1,\"714\":2}}],[\"assignmentexpression\",{\"1\":{\"128\":2}}],[\"assignmentexpressionargumentlist\",{\"1\":{\"128\":1}}],[\"as\",{\"1\":{\"323\":1,\"379\":1,\"384\":1,\"385\":1,\"387\":1,\"527\":1,\"570\":2,\"594\":1,\"595\":1,\"606\":4,\"760\":1,\"884\":2}}],[\"asyncchunks\",{\"1\":{\"907\":1}}],[\"asynccomponent\",{\"1\":{\"858\":3}}],[\"asyncfactory\",{\"1\":{\"770\":3}}],[\"async\",{\"1\":{\"292\":2,\"699\":1,\"770\":1}}],[\"asuna\",{\"1\":{\"264\":3}}],[\"a是b的超类\",{\"1\":{\"256\":1}}],[\"a的子类\",{\"1\":{\"256\":1}}],[\"a<=>x<=>y<=>z<=>b\",{\"1\":{\"230\":1}}],[\"authorization\",{\"1\":{\"224\":2}}],[\"autoprefixer\",{\"1\":{\"928\":1}}],[\"autoglobals\",{\"1\":{\"400\":1}}],[\"autoload\",{\"1\":{\"351\":5}}],[\"auto它就可以上下左右都居中了\",{\"1\":{\"25\":1}}],[\"auto\",{\"0\":{\"25\":1},\"1\":{\"20\":1,\"24\":1,\"25\":1,\"33\":1,\"83\":1,\"485\":1}}],[\"age\",{\"1\":{\"264\":3,\"368\":2,\"605\":1,\"626\":7,\"645\":2,\"646\":7,\"662\":4,\"866\":1}}],[\"age=604800\",{\"1\":{\"866\":1}}],[\"age=18\",{\"1\":{\"604\":1,\"662\":1}}],[\"age=0\",{\"1\":{\"223\":1}}],[\"age=22\",{\"1\":{\"217\":2}}],[\"agent\",{\"1\":{\"209\":1,\"223\":1,\"224\":2}}],[\"agent标识符\",{\"1\":{\"96\":1}}],[\"agentsignifier\",{\"1\":{\"96\":1}}],[\"agent是程序的执行环境\",{\"1\":{\"93\":1}}],[\"agent集群中的agent可以共享内存\",{\"1\":{\"92\":1}}],[\"activated\",{\"0\":{\"782\":1},\"1\":{\"763\":1,\"773\":1}}],[\"active的class\",{\"1\":{\"633\":1}}],[\"active的class执行动画\",{\"1\":{\"633\":1}}],[\"active这一系列勾子\",{\"1\":{\"632\":1}}],[\"activeclassname\",{\"1\":{\"596\":1}}],[\"activestyle=\",{\"1\":{\"596\":3}}],[\"activestyle\",{\"1\":{\"596\":1}}],[\"active\",{\"1\":{\"35\":1,\"505\":1,\"527\":1,\"632\":1,\"633\":2,\"634\":2,\"635\":2}}],[\"action需要是一个javascript的对象\",{\"1\":{\"573\":1}}],[\"actiontypes\",{\"1\":{\"570\":3}}],[\"actions和视图\",{\"1\":{\"570\":1}}],[\"actions\",{\"1\":{\"569\":2,\"570\":7}}],[\"action=\",{\"1\":{\"406\":2}}],[\"action\",{\"1\":{\"357\":4,\"358\":3,\"527\":8,\"571\":1,\"573\":1,\"575\":7}}],[\"acc\",{\"1\":{\"297\":4}}],[\"accidental\",{\"1\":{\"251\":1}}],[\"accep\",{\"1\":{\"200\":1}}],[\"accept\",{\"1\":{\"200\":1,\"223\":3,\"224\":8,\"895\":2}}],[\"accept应答\",{\"1\":{\"200\":1}}],[\"ack\",{\"1\":{\"243\":3,\"244\":7}}],[\"a→b\",{\"1\":{\"197\":1}}],[\"arepropsequal\",{\"1\":{\"550\":2}}],[\"are\",{\"1\":{\"382\":2}}],[\"arnold\",{\"1\":{\"379\":1}}],[\"array|traversable\",{\"1\":{\"395\":1}}],[\"array数组\",{\"0\":{\"383\":1}}],[\"array类型\",{\"1\":{\"367\":1}}],[\"array\",{\"1\":{\"254\":2,\"270\":1,\"276\":2,\"306\":1,\"323\":1,\"324\":2,\"383\":3,\"384\":6,\"385\":10,\"386\":4,\"387\":1,\"409\":1,\"526\":1,\"538\":1,\"640\":1}}],[\"arr\",{\"1\":{\"250\":2,\"254\":6,\"526\":3,\"645\":1}}],[\"arp\",{\"1\":{\"176\":1}}],[\"arg2\",{\"1\":{\"659\":8}}],[\"arg1\",{\"1\":{\"659\":8}}],[\"args\",{\"1\":{\"272\":2,\"320\":1,\"848\":2}}],[\"argument\",{\"1\":{\"130\":3,\"320\":1,\"645\":1,\"970\":6}}],[\"argumentlist\",{\"1\":{\"128\":3}}],[\"arguments\",{\"1\":{\"123\":1,\"270\":1,\"272\":3,\"845\":1,\"848\":1}}],[\"arg\",{\"1\":{\"123\":2,\"251\":1,\"320\":2,\"737\":1,\"845\":2}}],[\"await作为关键字使用\",{\"1\":{\"986\":1}}],[\"await\",{\"1\":{\"121\":2,\"292\":2,\"984\":1,\"996\":1}}],[\"any\",{\"1\":{\"428\":6,\"640\":1,\"662\":1}}],[\"an\",{\"1\":{\"333\":2,\"500\":1,\"612\":2}}],[\"anoymous\",{\"1\":{\"752\":1,\"753\":1}}],[\"anonymous\",{\"1\":{\"326\":1,\"906\":1}}],[\"another\",{\"1\":{\"306\":1,\"333\":1}}],[\"animated=\",{\"1\":{\"911\":1}}],[\"animated\",{\"1\":{\"631\":1}}],[\"animation会默认触发gpu加速\",{\"1\":{\"69\":1}}],[\"animation也有很多的属性\",{\"1\":{\"51\":1}}],[\"animation是由\",{\"1\":{\"13\":1}}],[\"animation\",{\"0\":{\"13\":1,\"51\":1},\"1\":{\"10\":1,\"13\":9,\"51\":8,\"69\":1}}],[\"animations\",{\"1\":{\"10\":1}}],[\"animals\",{\"1\":{\"306\":1}}],[\"ant\",{\"1\":{\"74\":1}}],[\"antd提供的栅格布局实现响应式\",{\"1\":{\"59\":1}}],[\"and\",{\"1\":{\"56\":2,\"59\":3,\"321\":2,\"331\":2,\"355\":1,\"368\":2,\"382\":2,\"884\":1,\"978\":1}}],[\"a为透明度\",{\"1\":{\"48\":2}}],[\"attrs\",{\"1\":{\"708\":1,\"752\":1,\"753\":1}}],[\"attrs透传\",{\"1\":{\"696\":1}}],[\"attrs与$\",{\"1\":{\"696\":1}}],[\"attributes\",{\"1\":{\"587\":1}}],[\"attribute$=value\",{\"1\":{\"35\":1}}],[\"attribute^=value\",{\"1\":{\"35\":1}}],[\"attribute|=value\",{\"1\":{\"35\":1}}],[\"attribute~=value\",{\"1\":{\"35\":1}}],[\"attribute=value\",{\"1\":{\"35\":1}}],[\"attribute\",{\"1\":{\"35\":2}}],[\"attached\",{\"1\":{\"826\":1}}],[\"attachevent\",{\"1\":{\"273\":1}}],[\"attachment属性设置为fixed\",{\"1\":{\"7\":1}}],[\"attachment属性的值\",{\"1\":{\"7\":1}}],[\"attachment\",{\"0\":{\"7\":1},\"1\":{\"6\":1,\"7\":4}}],[\"after\",{\"1\":{\"35\":1,\"37\":1,\"89\":2,\"90\":4}}],[\"algorithm\",{\"1\":{\"895\":2}}],[\"alert的内容仍旧是之前的内容\",{\"1\":{\"461\":1}}],[\"alert\",{\"1\":{\"461\":2}}],[\"always\",{\"1\":{\"382\":2}}],[\"al`\",{\"1\":{\"360\":1}}],[\"also\",{\"1\":{\"331\":1,\"379\":1}}],[\"alice\",{\"1\":{\"368\":1}}],[\"alive缓存的组件\",{\"1\":{\"773\":1}}],[\"alive判断是否需要缓存\",{\"1\":{\"764\":1}}],[\"alive\",{\"0\":{\"763\":1},\"1\":{\"146\":1,\"147\":1,\"191\":1,\"223\":1,\"224\":1}}],[\"align可以让所有的行内块级元素水平垂直居中\",{\"1\":{\"28\":1}}],[\"align\",{\"1\":{\"7\":1,\"28\":2,\"29\":2,\"30\":1,\"32\":2,\"37\":2,\"76\":2,\"79\":1,\"80\":1,\"81\":1}}],[\"allowdynamicproperties\",{\"1\":{\"348\":1}}],[\"all使一个单词能够在换行时进行拆分\",{\"1\":{\"89\":1}}],[\"all\",{\"1\":{\"11\":1,\"47\":1,\"633\":2,\"634\":2,\"635\":2}}],[\"alt=\",{\"1\":{\"861\":1}}],[\"alternate\",{\"1\":{\"13\":2,\"428\":1,\"760\":2}}],[\"alt\",{\"1\":{\"8\":1,\"104\":1,\"106\":1,\"107\":1,\"111\":1,\"123\":2,\"183\":1,\"288\":1,\"496\":1,\"567\":1,\"684\":1,\"685\":1,\"837\":1}}],[\"a\",{\"1\":{\"7\":10,\"36\":3,\"37\":1,\"123\":3,\"130\":1,\"140\":4,\"230\":1,\"251\":1,\"254\":5,\"312\":4,\"320\":1,\"321\":2,\"322\":1,\"324\":1,\"332\":2,\"333\":2,\"336\":1,\"368\":1,\"379\":3,\"381\":5,\"383\":2,\"386\":2,\"398\":2,\"402\":1,\"406\":1,\"526\":14,\"538\":1,\"594\":3,\"595\":3,\"612\":1,\"620\":1,\"657\":1,\"658\":3,\"675\":1,\"690\":1,\"696\":1,\"760\":2,\"769\":3,\"770\":8,\"881\":1,\"928\":1,\"941\":4,\"942\":4,\"968\":1,\"969\":2,\"970\":2,\"972\":1}}],[\"txt\",{\"1\":{\"948\":2}}],[\"txt$\",{\"1\":{\"948\":3,\"953\":1}}],[\"ttf\",{\"1\":{\"895\":2}}],[\"ttf$|\",{\"1\":{\"895\":1}}],[\"ttfb\",{\"1\":{\"883\":1,\"884\":3}}],[\"tbt\",{\"1\":{\"885\":1}}],[\"t表示渲染插槽的函数\",{\"1\":{\"807\":1}}],[\"ts文件标记js库类型的时候使用命名空间\",{\"1\":{\"666\":1}}],[\"ts为函数添加了额外的功能\",{\"1\":{\"656\":1}}],[\"ts函数\",{\"0\":{\"656\":1}}],[\"ts添加了三种修饰符\",{\"1\":{\"651\":1}}],[\"ts中用接口来定义对象类型\",{\"1\":{\"639\":1}}],[\"tuple\",{\"1\":{\"640\":1}}],[\"tue\",{\"1\":{\"224\":1}}],[\"t|\",{\"1\":{\"368\":1}}],[\"t\",{\"1\":{\"357\":3,\"380\":1,\"644\":1,\"645\":1,\"647\":1,\"1010\":1}}],[\"title=\",{\"1\":{\"488\":1,\"532\":1}}],[\"title\",{\"1\":{\"486\":2,\"487\":1,\"520\":4,\"532\":1,\"752\":2,\"753\":2}}],[\"title><\",{\"1\":{\"560\":1}}],[\"title>\",{\"1\":{\"449\":4}}],[\"tick\",{\"1\":{\"314\":1,\"315\":12,\"474\":2}}],[\"ticks=n\",{\"1\":{\"315\":1}}],[\"ticks=tick\",{\"1\":{\"314\":1}}],[\"ticks=1\",{\"1\":{\"314\":1,\"315\":1}}],[\"ticks\",{\"0\":{\"315\":1},\"1\":{\"314\":1}}],[\"timeout=\",{\"1\":{\"633\":1,\"634\":1,\"635\":1}}],[\"times\",{\"1\":{\"527\":7,\"620\":1}}],[\"times`\",{\"1\":{\"520\":4}}],[\"times<\",{\"1\":{\"519\":2,\"520\":2}}],[\"timer=null\",{\"1\":{\"845\":1}}],[\"timerfunc\",{\"1\":{\"801\":1}}],[\"timer\",{\"1\":{\"474\":1,\"845\":3,\"848\":4}}],[\"time\",{\"1\":{\"244\":1,\"285\":1,\"407\":4}}],[\"timing\",{\"1\":{\"11\":2,\"12\":1,\"13\":1,\"49\":1,\"51\":1,\"878\":1,\"884\":1}}],[\"tls协议进行了加密处理\",{\"1\":{\"232\":1}}],[\"tls协议上\",{\"1\":{\"231\":1}}],[\"tls\",{\"1\":{\"231\":1,\"883\":1}}],[\"tcp终止一个连接\",{\"1\":{\"244\":1}}],[\"tcp握手\",{\"0\":{\"243\":1}}],[\"tcp链接则会经过四次挥手完成断开\",{\"1\":{\"191\":1}}],[\"tcp连接\",{\"0\":{\"189\":1}}],[\"tcp充分地实现了数据传输时各种控制功能\",{\"1\":{\"182\":1}}],[\"tcp报文首部有20个字节\",{\"1\":{\"182\":1}}],[\"tcp会根据当前网络的拥塞状态来确定每个报文段的大小\",{\"1\":{\"182\":1}}],[\"tcp\",{\"0\":{\"168\":1,\"180\":1,\"182\":1},\"1\":{\"168\":4,\"169\":3,\"171\":1,\"172\":2,\"176\":2,\"177\":6,\"182\":3,\"183\":5,\"186\":1,\"231\":1}}],[\"tap\",{\"1\":{\"956\":2}}],[\"tappromise\",{\"1\":{\"895\":1}}],[\"taylor\",{\"1\":{\"530\":1}}],[\"tag\",{\"1\":{\"330\":3,\"332\":1,\"428\":1,\"708\":1,\"753\":2,\"770\":2}}],[\"tags\",{\"1\":{\"330\":3}}],[\"takes\",{\"1\":{\"320\":1,\"612\":1}}],[\"target对象原型\",{\"1\":{\"662\":3}}],[\"target来避免\",{\"1\":{\"505\":1}}],[\"targets\",{\"1\":{\"449\":2}}],[\"target=document\",{\"1\":{\"285\":1}}],[\"target\",{\"1\":{\"123\":3,\"285\":3,\"449\":1,\"505\":2,\"555\":2,\"662\":6,\"663\":2,\"851\":1,\"862\":3}}],[\"table设置为表格\",{\"1\":{\"81\":1}}],[\"table>\",{\"1\":{\"81\":1}}],[\"table布局\",{\"0\":{\"28\":1},\"1\":{\"24\":1}}],[\"table\",{\"0\":{\"81\":1},\"1\":{\"20\":3,\"28\":2,\"32\":1,\"33\":1,\"37\":1,\"77\":1,\"81\":6,\"421\":1}}],[\"trim\",{\"1\":{\"699\":1}}],[\"trick\",{\"1\":{\"270\":2}}],[\"tree<t>\",{\"1\":{\"644\":1}}],[\"tree<t>=\",{\"1\":{\"644\":1}}],[\"tree层级\",{\"0\":{\"494\":1},\"1\":{\"493\":1}}],[\"treated\",{\"1\":{\"382\":2}}],[\"truth\",{\"1\":{\"371\":1}}],[\"true不阻止浏览器原生的click事件\",{\"1\":{\"292\":1}}],[\"true\",{\"1\":{\"103\":1,\"130\":1,\"261\":1,\"292\":4,\"313\":1,\"331\":2,\"349\":1,\"356\":9,\"357\":6,\"361\":5,\"371\":3,\"376\":1,\"377\":1,\"383\":1,\"406\":1,\"467\":7,\"487\":1,\"500\":1,\"526\":2,\"527\":3,\"549\":2,\"633\":2,\"634\":1,\"662\":1,\"670\":1,\"671\":2,\"878\":1,\"884\":1,\"895\":1,\"911\":1,\"948\":1,\"980\":1}}],[\"traversable\",{\"1\":{\"386\":1}}],[\"traversable|array\",{\"1\":{\"369\":1}}],[\"trait\",{\"1\":{\"308\":5,\"351\":1}}],[\"transfer\",{\"1\":{\"230\":1}}],[\"transformif\",{\"1\":{\"760\":1}}],[\"transformif结构化指令\",{\"1\":{\"760\":1}}],[\"transform属性允许你旋转\",{\"1\":{\"50\":1}}],[\"transform不支持inline元素\",{\"1\":{\"12\":1}}],[\"transform\",{\"0\":{\"8\":1,\"12\":1,\"50\":1},\"1\":{\"6\":1,\"8\":8,\"10\":1,\"12\":3,\"13\":5,\"27\":1,\"33\":1,\"37\":1,\"50\":5,\"291\":4,\"633\":4,\"634\":4,\"635\":4}}],[\"transmission\",{\"1\":{\"182\":1}}],[\"transparent\",{\"1\":{\"69\":1,\"90\":4}}],[\"transitiongroup>\",{\"1\":{\"635\":1}}],[\"transitiongroup在感知children发生变化的时候\",{\"1\":{\"635\":1}}],[\"transitiongroup\",{\"0\":{\"635\":1},\"1\":{\"632\":1,\"635\":1}}],[\"transitionheight+\",{\"1\":{\"291\":1}}],[\"transitionheight\",{\"1\":{\"291\":5}}],[\"transition属性可以被指定为一个或多个css属性的过渡效果\",{\"1\":{\"49\":1}}],[\"transition的属性如下\",{\"1\":{\"11\":1}}],[\"transition\",{\"0\":{\"11\":1,\"49\":1},\"1\":{\"10\":1,\"11\":5,\"12\":6,\"49\":5,\"72\":1,\"291\":2,\"631\":1,\"632\":1,\"633\":2,\"634\":3,\"635\":3,\"759\":7}}],[\"translatex\",{\"1\":{\"633\":4}}],[\"translatey\",{\"1\":{\"8\":1,\"291\":2}}],[\"translatez\",{\"1\":{\"8\":5}}],[\"translate\",{\"1\":{\"8\":1,\"12\":2,\"27\":2,\"33\":1,\"50\":1,\"634\":4,\"635\":4}}],[\"translate3d\",{\"0\":{\"8\":1},\"1\":{\"6\":1}}],[\"try\",{\"1\":{\"306\":1,\"500\":1,\"895\":2}}],[\"thorw的代换式\",{\"1\":{\"998\":1}}],[\"that\",{\"1\":{\"928\":1}}],[\"thunk的基本使用\",{\"1\":{\"575\":1}}],[\"thunk中间件会判断你当前传进来的数据类型\",{\"1\":{\"573\":1}}],[\"thunk是官网推荐的异步处理中间件\",{\"1\":{\"573\":1}}],[\"thunk\",{\"0\":{\"573\":1},\"1\":{\"572\":2}}],[\"throttle\",{\"1\":{\"848\":1}}],[\"throwstatement\",{\"1\":{\"998\":1}}],[\"throwcompletion\",{\"1\":{\"969\":1}}],[\"throw\",{\"1\":{\"272\":1,\"969\":1,\"998\":1}}],[\"threshold\",{\"1\":{\"285\":1,\"292\":1,\"895\":2}}],[\"three\",{\"1\":{\"8\":2,\"243\":1}}],[\"then\",{\"1\":{\"573\":1,\"858\":1,\"859\":1}}],[\"these\",{\"1\":{\"330\":1}}],[\"the\",{\"1\":{\"130\":1,\"330\":1,\"331\":3,\"332\":1,\"428\":1,\"556\":1,\"928\":3,\"978\":1}}],[\"this在函数作用域\",{\"1\":{\"270\":1}}],[\"this参数转化为对象\",{\"1\":{\"270\":1}}],[\"this参数的值\",{\"1\":{\"270\":1}}],[\"this指向argument\",{\"1\":{\"270\":1}}],[\"this指向\",{\"1\":{\"270\":2,\"271\":3}}],[\"this表达式的求值\",{\"0\":{\"270\":1}}],[\"this所在的作用域类型\",{\"1\":{\"269\":1}}],[\"this的行为有一定区别\",{\"1\":{\"269\":1}}],[\"thisbindingstatus\",{\"1\":{\"114\":1}}],[\"thisvalue\",{\"1\":{\"114\":1,\"270\":1}}],[\"this绑定\",{\"1\":{\"114\":1}}],[\"this\",{\"0\":{\"269\":1},\"1\":{\"90\":5,\"130\":1,\"251\":4,\"258\":3,\"259\":4,\"260\":5,\"261\":1,\"262\":2,\"263\":6,\"264\":4,\"270\":4,\"272\":3,\"278\":1,\"292\":2,\"321\":2,\"325\":1,\"330\":3,\"331\":3,\"332\":2,\"333\":4,\"368\":2,\"379\":4,\"381\":2,\"414\":10,\"415\":5,\"416\":1,\"428\":1,\"429\":3,\"454\":1,\"457\":1,\"461\":7,\"465\":3,\"466\":4,\"474\":6,\"479\":2,\"480\":13,\"500\":10,\"505\":9,\"508\":4,\"510\":5,\"511\":3,\"512\":6,\"513\":3,\"519\":4,\"520\":6,\"527\":5,\"530\":2,\"533\":1,\"538\":2,\"542\":6,\"549\":1,\"555\":3,\"567\":1,\"579\":1,\"580\":2,\"581\":3,\"582\":3,\"588\":5,\"608\":6,\"609\":1,\"612\":7,\"614\":4,\"615\":4,\"616\":11,\"620\":5,\"621\":2,\"626\":6,\"627\":4,\"633\":4,\"634\":6,\"635\":5,\"649\":1,\"662\":4,\"669\":3,\"672\":2,\"696\":3,\"714\":2,\"752\":1,\"753\":1,\"754\":1,\"769\":1,\"792\":3,\"845\":1,\"848\":1,\"928\":1}}],[\"teleport\",{\"1\":{\"817\":1}}],[\"telnet\",{\"1\":{\"171\":1}}],[\"teenager\",{\"1\":{\"313\":2}}],[\"test=keyof\",{\"1\":{\"645\":1}}],[\"testcomponent\",{\"1\":{\"465\":1}}],[\"testing\",{\"1\":{\"407\":2}}],[\"test\",{\"1\":{\"254\":1,\"332\":2,\"333\":4,\"347\":2,\"403\":1,\"406\":1,\"449\":2,\"485\":2,\"488\":2,\"573\":1,\"689\":1,\"895\":1,\"909\":1,\"948\":1,\"953\":1,\"954\":1}}],[\"testpage\",{\"1\":{\"223\":1}}],[\"temp\",{\"1\":{\"254\":5}}],[\"template>\",{\"1\":{\"696\":2,\"753\":1,\"858\":1,\"911\":1}}],[\"templatemap\",{\"1\":{\"96\":1}}],[\"template\",{\"1\":{\"83\":1,\"753\":1,\"907\":1,\"953\":1,\"954\":1}}],[\"textarea\",{\"1\":{\"881\":1}}],[\"textno\",{\"1\":{\"332\":1}}],[\"text\",{\"1\":{\"7\":5,\"8\":1,\"28\":1,\"32\":1,\"37\":4,\"47\":8,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"87\":4,\"90\":2,\"104\":1,\"106\":1,\"107\":1,\"111\":1,\"123\":2,\"183\":1,\"223\":1,\"224\":1,\"288\":1,\"292\":4,\"332\":1,\"406\":4,\"486\":1,\"496\":1,\"538\":5,\"567\":1,\"684\":1,\"685\":1,\"770\":1,\"837\":1,\"895\":6}}],[\"type2\",{\"1\":{\"645\":1}}],[\"type1\",{\"1\":{\"645\":1}}],[\"type就没有\",{\"1\":{\"538\":1}}],[\"typeerror\",{\"1\":{\"272\":1,\"895\":1,\"969\":2}}],[\"typeofmode\",{\"1\":{\"428\":1}}],[\"typeof\",{\"1\":{\"254\":1,\"272\":1,\"277\":1,\"538\":3,\"549\":2,\"575\":1,\"612\":2,\"659\":4}}],[\"type加以标记\",{\"1\":{\"230\":1}}],[\"typescript\",{\"0\":{\"638\":1},\"1\":{\"945\":1},\"2\":{\"674\":1}}],[\"types=1\",{\"1\":{\"368\":2}}],[\"types\",{\"1\":{\"224\":1,\"314\":1,\"895\":2}}],[\"type的值\",{\"1\":{\"192\":1}}],[\"type=\",{\"1\":{\"82\":1,\"406\":7,\"466\":1,\"555\":2,\"906\":1}}],[\"type\",{\"1\":{\"35\":4,\"37\":1,\"217\":1,\"224\":2,\"258\":1,\"259\":1,\"260\":1,\"428\":3,\"527\":1,\"538\":16,\"567\":1,\"587\":1,\"644\":2,\"645\":3,\"646\":7,\"664\":1,\"670\":2,\"878\":1,\"884\":1,\"907\":1}}],[\"tortoisehg是一个免费的分布式源代码管理工具\",{\"1\":{\"683\":1}}],[\"tortoisesvn是一款非常易于使用的跨平台的版本控制\",{\"1\":{\"679\":1}}],[\"to传入对象\",{\"0\":{\"605\":1},\"1\":{\"602\":1}}],[\"to=\",{\"1\":{\"596\":3,\"597\":1,\"600\":1,\"603\":1,\"604\":1,\"605\":1}}],[\"tolocalelowercase\",{\"1\":{\"538\":1}}],[\"tolowercase\",{\"1\":{\"254\":1}}],[\"tojs\",{\"1\":{\"526\":1}}],[\"tofixed\",{\"1\":{\"304\":1}}],[\"todoitemcontainer\",{\"1\":{\"569\":1}}],[\"todoitem\",{\"1\":{\"569\":1}}],[\"todolistcontainer\",{\"1\":{\"569\":1}}],[\"todolist\",{\"1\":{\"569\":1,\"570\":2}}],[\"todoaction\",{\"1\":{\"569\":1}}],[\"todoreducer\",{\"1\":{\"569\":1}}],[\"todo\",{\"1\":{\"291\":1,\"672\":1}}],[\"touch\",{\"1\":{\"717\":1}}],[\"touchend\",{\"1\":{\"291\":1}}],[\"touches\",{\"1\":{\"291\":3}}],[\"touchmove\",{\"1\":{\"291\":1}}],[\"touchstart\",{\"1\":{\"291\":1}}],[\"token\",{\"1\":{\"287\":5}}],[\"tom\",{\"1\":{\"261\":2,\"597\":2}}],[\"tostring\",{\"1\":{\"254\":2}}],[\"totalpage\",{\"1\":{\"527\":5}}],[\"total\",{\"1\":{\"253\":3,\"254\":7,\"669\":2,\"916\":4,\"917\":4,\"918\":4}}],[\"toboolean方法的抽象定义\",{\"1\":{\"130\":1}}],[\"to\",{\"1\":{\"13\":2,\"90\":1,\"312\":1,\"330\":3,\"331\":2,\"379\":1,\"556\":1,\"596\":1,\"599\":1,\"609\":1,\"612\":1,\"627\":1,\"645\":1,\"928\":10,\"954\":1,\"972\":1}}],[\"toplevellexicallyscopeddeclarations\",{\"1\":{\"978\":2}}],[\"toprecision\",{\"1\":{\"303\":3}}],[\"top=offsettop\",{\"1\":{\"285\":1}}],[\"top\",{\"1\":{\"8\":1,\"25\":1,\"26\":2,\"27\":1,\"33\":2,\"71\":1,\"79\":2,\"285\":4}}],[\"two元素\",{\"1\":{\"35\":1}}],[\"two\",{\"1\":{\"8\":2,\"35\":4}}],[\"fmp\",{\"1\":{\"886\":4}}],[\"fcp\",{\"1\":{\"877\":1,\"878\":1,\"879\":2,\"885\":2,\"886\":2}}],[\"fucntion\",{\"1\":{\"770\":1}}],[\"fun\",{\"1\":{\"653\":2}}],[\"func\",{\"1\":{\"278\":1,\"391\":1}}],[\"functioncomponent\",{\"1\":{\"538\":2}}],[\"functionalcomponent\",{\"1\":{\"458\":1,\"459\":2}}],[\"functions\",{\"1\":{\"326\":1}}],[\"functionstoinitialize\",{\"1\":{\"107\":1}}],[\"functiondeclarationinstantiation\",{\"1\":{\"118\":1}}],[\"functionobject\",{\"1\":{\"114\":1}}],[\"function的值有如下\",{\"1\":{\"11\":1}}],[\"function\",{\"1\":{\"11\":2,\"12\":1,\"13\":1,\"49\":1,\"51\":1,\"59\":1,\"90\":2,\"95\":1,\"103\":2,\"123\":4,\"251\":5,\"253\":2,\"254\":5,\"258\":2,\"259\":3,\"260\":3,\"261\":1,\"262\":3,\"263\":5,\"264\":2,\"270\":2,\"272\":4,\"277\":1,\"278\":1,\"285\":2,\"287\":3,\"291\":3,\"292\":4,\"308\":1,\"315\":3,\"320\":1,\"321\":1,\"323\":1,\"324\":2,\"325\":3,\"326\":6,\"336\":1,\"338\":2,\"339\":2,\"340\":1,\"346\":1,\"347\":1,\"350\":1,\"351\":1,\"368\":7,\"386\":1,\"388\":1,\"389\":1,\"402\":2,\"403\":2,\"413\":1,\"428\":1,\"455\":1,\"457\":1,\"460\":1,\"461\":1,\"472\":1,\"473\":1,\"478\":1,\"479\":2,\"480\":2,\"500\":1,\"519\":1,\"520\":2,\"538\":10,\"549\":2,\"550\":2,\"555\":2,\"575\":5,\"583\":1,\"587\":1,\"588\":5,\"594\":1,\"595\":1,\"606\":1,\"612\":3,\"655\":1,\"659\":3,\"662\":9,\"663\":4,\"665\":1,\"668\":1,\"672\":1,\"752\":2,\"753\":3,\"754\":1,\"770\":1,\"789\":1,\"790\":1,\"792\":4,\"793\":2,\"845\":2,\"848\":2,\"851\":2,\"859\":1,\"916\":1,\"917\":2,\"918\":2,\"955\":1,\"1013\":1}}],[\"fun2\",{\"1\":{\"273\":1}}],[\"f函数全名为resolvefilter\",{\"1\":{\"748\":1}}],[\"feat\",{\"1\":{\"689\":1}}],[\"framents\",{\"1\":{\"817\":1}}],[\"fragment\",{\"1\":{\"918\":3}}],[\"fragment>\",{\"1\":{\"596\":1,\"597\":1,\"599\":1,\"600\":1,\"601\":1}}],[\"fragments\",{\"0\":{\"556\":1},\"1\":{\"554\":1}}],[\"friend\",{\"1\":{\"520\":2,\"635\":5}}],[\"friends\",{\"1\":{\"261\":5,\"262\":2,\"263\":3,\"635\":4}}],[\"freeip\",{\"1\":{\"909\":1}}],[\"free\",{\"1\":{\"247\":1}}],[\"fromjs\",{\"1\":{\"526\":5,\"527\":2}}],[\"from\",{\"1\":{\"13\":2,\"292\":3,\"395\":1,\"449\":21,\"466\":1,\"479\":1,\"480\":2,\"485\":1,\"486\":2,\"487\":2,\"488\":2,\"505\":1,\"519\":1,\"520\":1,\"526\":2,\"527\":3,\"550\":1,\"555\":2,\"560\":4,\"565\":1,\"570\":4,\"574\":2,\"594\":1,\"595\":1,\"599\":1,\"601\":1,\"606\":8,\"608\":2,\"609\":2,\"612\":1,\"634\":1,\"635\":2,\"668\":2,\"670\":1,\"671\":1,\"672\":1,\"884\":1,\"895\":2,\"949\":4}}],[\"ftp\",{\"1\":{\"171\":1,\"176\":1}}],[\"f\",{\"1\":{\"123\":1,\"357\":2,\"380\":1,\"663\":6,\"685\":1,\"769\":3,\"932\":1,\"1010\":1}}],[\"fns\",{\"1\":{\"297\":2}}],[\"fn\",{\"1\":{\"103\":4,\"123\":9,\"272\":5,\"297\":2,\"845\":2,\"848\":2}}],[\"fade\",{\"1\":{\"633\":5}}],[\"fallback=\",{\"1\":{\"559\":1}}],[\"false和true\",{\"1\":{\"367\":1}}],[\"false\",{\"1\":{\"130\":1,\"287\":1,\"291\":3,\"324\":2,\"349\":1,\"357\":2,\"371\":1,\"377\":1,\"467\":7,\"500\":1,\"505\":1,\"526\":3,\"527\":4,\"548\":1,\"549\":3,\"609\":1,\"696\":1,\"770\":2,\"895\":2,\"909\":1,\"916\":1,\"917\":1,\"918\":1}}],[\"failed\",{\"1\":{\"359\":1}}],[\"fatal\",{\"1\":{\"324\":1}}],[\"father\",{\"1\":{\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2}}],[\"farewell\",{\"1\":{\"270\":3}}],[\"factorial2\",{\"1\":{\"254\":2}}],[\"factorial\",{\"1\":{\"253\":20}}],[\"family\",{\"1\":{\"37\":1}}],[\"f0a238\",{\"1\":{\"25\":1}}],[\"flying\",{\"1\":{\"368\":1}}],[\"fly\",{\"1\":{\"368\":4}}],[\"flyable\",{\"1\":{\"368\":3}}],[\"flat\",{\"1\":{\"254\":2}}],[\"float浮点型\",{\"0\":{\"375\":1}}],[\"float|int\",{\"1\":{\"368\":2}}],[\"float类型\",{\"1\":{\"367\":1}}],[\"float\",{\"0\":{\"78\":1,\"80\":1},\"1\":{\"75\":2,\"77\":2,\"78\":2,\"80\":2,\"368\":1,\"373\":2,\"374\":3,\"375\":1,\"409\":1}}],[\"float值为left\",{\"1\":{\"20\":1}}],[\"flex的其他功能实现更多效果\",{\"1\":{\"82\":1}}],[\"flex实现\",{\"1\":{\"77\":1}}],[\"flex容器的一个默认属性值\",{\"1\":{\"76\":1}}],[\"flex可以说是最好的方案了\",{\"1\":{\"76\":1}}],[\"flex时\",{\"1\":{\"29\":1}}],[\"flex弹性布局\",{\"0\":{\"29\":1,\"76\":1},\"1\":{\"75\":1}}],[\"flex布局设置父元素\",{\"1\":{\"32\":1}}],[\"flex布局\",{\"1\":{\"24\":1}}],[\"flex\",{\"0\":{\"61\":1},\"1\":{\"20\":2,\"29\":1,\"32\":1,\"33\":1,\"76\":3,\"82\":2}}],[\"found\",{\"1\":{\"1015\":1}}],[\"following\",{\"1\":{\"928\":2}}],[\"followed\",{\"1\":{\"461\":2}}],[\"foo=bar\",{\"1\":{\"949\":1}}],[\"foo<\",{\"1\":{\"566\":1}}],[\"foobar\",{\"1\":{\"324\":1}}],[\"foo\",{\"1\":{\"251\":3,\"308\":2,\"324\":4,\"325\":5,\"338\":2,\"350\":2,\"381\":1,\"383\":2,\"385\":5,\"388\":5,\"403\":1,\"406\":3,\"407\":1,\"441\":1,\"526\":8,\"566\":5,\"567\":4,\"587\":4,\"588\":11,\"696\":2,\"909\":1,\"926\":2,\"949\":1}}],[\"focused\",{\"1\":{\"527\":3}}],[\"focus\",{\"1\":{\"35\":1,\"527\":1,\"668\":2}}],[\"for优先级高于v\",{\"1\":{\"754\":1}}],[\"for优先级比v\",{\"1\":{\"752\":1}}],[\"for不同\",{\"1\":{\"754\":1}}],[\"forprocessed\",{\"1\":{\"753\":1}}],[\"for指令\",{\"1\":{\"753\":1}}],[\"for置于不同的标签中\",{\"0\":{\"753\":1}}],[\"for=\",{\"1\":{\"752\":1,\"753\":1,\"769\":1}}],[\"for的优先级\",{\"0\":{\"752\":1}}],[\"forwardedref\",{\"1\":{\"479\":3}}],[\"forwardref=\",{\"1\":{\"479\":1}}],[\"forwardref\",{\"1\":{\"479\":6}}],[\"forwards\",{\"1\":{\"13\":1}}],[\"foreach\",{\"1\":{\"254\":1,\"285\":1,\"312\":1,\"323\":1,\"359\":1,\"384\":1,\"385\":1,\"387\":1,\"395\":1,\"538\":1,\"862\":1}}],[\"formalparameters\",{\"1\":{\"996\":1}}],[\"format\",{\"1\":{\"928\":1}}],[\"formatting\",{\"1\":{\"19\":1}}],[\"form>\",{\"1\":{\"406\":2,\"466\":1}}],[\"form\",{\"1\":{\"217\":1,\"224\":1}}],[\"forstatement\",{\"1\":{\"122\":1}}],[\"forloopevaluation语义应用的其中一个代换式\",{\"1\":{\"122\":1}}],[\"forloopevaluation\",{\"1\":{\"121\":1}}],[\"for和for\",{\"1\":{\"121\":1}}],[\"for循环在标准中分为\",{\"1\":{\"121\":1}}],[\"for声明实例化\",{\"1\":{\"118\":1}}],[\"fordeclarationbindinginstantiation\",{\"1\":{\"118\":1}}],[\"for\",{\"0\":{\"751\":1},\"1\":{\"111\":1,\"121\":4,\"122\":2,\"254\":1,\"277\":1,\"312\":1,\"538\":2,\"549\":1,\"555\":2,\"753\":1,\"754\":1,\"792\":3,\"793\":1,\"811\":1,\"878\":1,\"916\":1,\"917\":1,\"918\":1,\"928\":4}}],[\"fontobject\",{\"1\":{\"895\":2}}],[\"fontsize\",{\"1\":{\"59\":1}}],[\"font\",{\"1\":{\"7\":1,\"37\":6,\"56\":1,\"59\":3,\"486\":1,\"895\":4,\"906\":2}}],[\"fid\",{\"1\":{\"881\":3,\"882\":2,\"890\":1}}],[\"fix\",{\"1\":{\"689\":1}}],[\"fixed`表示列宽自身宽度决定\",{\"1\":{\"81\":1}}],[\"fixed\",{\"1\":{\"7\":5,\"81\":1}}],[\"fist\",{\"1\":{\"488\":1}}],[\"fiber把渲染更新过程拆分成多个子任务\",{\"1\":{\"429\":1}}],[\"fiber的版本池\",{\"1\":{\"428\":1}}],[\"fiber\",{\"0\":{\"426\":1,\"428\":1},\"1\":{\"428\":14,\"429\":6}}],[\"filters\",{\"1\":{\"793\":2}}],[\"filters中找出注册的过滤器并返回\",{\"1\":{\"748\":1}}],[\"filtercontainer\",{\"1\":{\"569\":1}}],[\"filteractions\",{\"1\":{\"569\":1}}],[\"filterreducer\",{\"1\":{\"569\":1}}],[\"filter\",{\"1\":{\"538\":1,\"569\":1,\"570\":1,\"754\":1}}],[\"files\",{\"1\":{\"895\":2,\"928\":1}}],[\"file2\",{\"1\":{\"689\":1}}],[\"file1\",{\"1\":{\"689\":1}}],[\"filename\",{\"1\":{\"449\":2,\"895\":2,\"907\":1,\"909\":1,\"926\":1,\"954\":1}}],[\"file\",{\"1\":{\"308\":2,\"359\":4,\"928\":1,\"954\":1}}],[\"fill\",{\"1\":{\"13\":1,\"47\":1,\"51\":1}}],[\"findidxinold\",{\"1\":{\"770\":1}}],[\"finished\",{\"1\":{\"620\":1}}],[\"finishpullup\",{\"1\":{\"292\":2}}],[\"finishpulldown\",{\"1\":{\"292\":1}}],[\"final\",{\"1\":{\"333\":1,\"340\":2,\"350\":1}}],[\"fin\",{\"1\":{\"244\":5}}],[\"fields\",{\"1\":{\"223\":1}}],[\"firefox对dns记录默认的缓存时间为1分钟\",{\"1\":{\"871\":1}}],[\"firefox\",{\"1\":{\"223\":1,\"224\":1}}],[\"firefox就只发送一次\",{\"1\":{\"220\":1}}],[\"firefox等\",{\"1\":{\"218\":1}}],[\"firsteffect\",{\"1\":{\"428\":1}}],[\"firstcontextdependency\",{\"1\":{\"428\":1}}],[\"first\",{\"1\":{\"35\":4,\"878\":2,\"890\":1,\"954\":2}}],[\"fff\",{\"1\":{\"7\":1,\"90\":4}}],[\"7e\",{\"1\":{\"375\":1}}],[\"737060cd8c284d8af7ad3082f209582d\",{\"1\":{\"224\":3}}],[\"7231\",{\"1\":{\"217\":1}}],[\"7\",{\"0\":{\"314\":1},\"1\":{\"7\":1,\"103\":1,\"326\":1,\"345\":1,\"346\":1,\"351\":1,\"357\":1,\"372\":1,\"374\":3,\"375\":1,\"384\":1,\"385\":1,\"393\":1,\"395\":1,\"928\":5,\"994\":1,\"1013\":1}}],[\"0~3和八进制数的组合\",{\"1\":{\"1011\":1}}],[\"0~9\",{\"1\":{\"1010\":1}}],[\"0x和\",{\"1\":{\"991\":1}}],[\"0xhexdigits\",{\"1\":{\"991\":1}}],[\"0x1a\",{\"1\":{\"372\":1}}],[\"0+\",{\"1\":{\"934\":1}}],[\"07\",{\"1\":{\"865\":1}}],[\"0中\",{\"1\":{\"865\":1}}],[\"0中没有明确指出get请求不能携带请求体\",{\"1\":{\"217\":1}}],[\"00\",{\"1\":{\"865\":1}}],[\"000\",{\"1\":{\"542\":1}}],[\"00001\",{\"1\":{\"376\":1}}],[\"007199254740992\",{\"1\":{\"303\":1}}],[\"0b11111111\",{\"1\":{\"372\":1}}],[\"0o123\",{\"1\":{\"372\":1}}],[\"0123\",{\"1\":{\"372\":1}}],[\"0s\",{\"1\":{\"291\":1}}],[\"08\",{\"1\":{\"224\":1}}],[\"04\",{\"1\":{\"223\":1}}],[\"02\",{\"1\":{\"223\":1}}],[\"0在相比之前版本\",{\"1\":{\"148\":1}}],[\"0的基础上\",{\"1\":{\"147\":1}}],[\"0ℤ\",{\"1\":{\"130\":1}}],[\"0𝔽\",{\"1\":{\"130\":1}}],[\"0a3b98\",{\"1\":{\"25\":1}}],[\"0deg\",{\"1\":{\"13\":2,\"52\":1}}],[\"0ea9ff\",{\"1\":{\"11\":1,\"12\":1}}],[\"0px\",{\"1\":{\"8\":1,\"72\":8,\"291\":1}}],[\"0\",{\"0\":{\"69\":1,\"145\":2,\"146\":1,\"148\":1,\"389\":1},\"1\":{\"7\":3,\"11\":14,\"12\":1,\"13\":3,\"25\":4,\"33\":1,\"36\":1,\"50\":3,\"66\":1,\"69\":1,\"70\":5,\"72\":1,\"79\":5,\"80\":1,\"82\":1,\"89\":4,\"90\":2,\"146\":1,\"153\":2,\"223\":3,\"224\":3,\"250\":1,\"270\":1,\"285\":3,\"291\":7,\"292\":1,\"303\":4,\"304\":1,\"306\":4,\"315\":1,\"320\":2,\"323\":1,\"324\":3,\"336\":1,\"340\":1,\"342\":1,\"343\":2,\"344\":4,\"345\":1,\"346\":1,\"347\":1,\"348\":1,\"350\":2,\"351\":5,\"355\":2,\"357\":7,\"372\":2,\"374\":1,\"375\":1,\"376\":1,\"383\":2,\"384\":1,\"385\":2,\"386\":2,\"393\":1,\"394\":1,\"395\":2,\"403\":5,\"414\":1,\"415\":1,\"449\":2,\"458\":1,\"474\":1,\"480\":2,\"519\":2,\"520\":2,\"527\":2,\"538\":3,\"549\":3,\"588\":2,\"615\":1,\"620\":1,\"633\":4,\"634\":8,\"635\":8,\"657\":1,\"685\":1,\"752\":1,\"753\":1,\"769\":1,\"886\":1,\"895\":3,\"916\":4,\"917\":3,\"918\":3,\"928\":3,\"931\":2,\"1008\":1,\"1011\":2}}],[\"pnpm\",{\"1\":{\"928\":1}}],[\"png\",{\"1\":{\"537\":2,\"879\":1,\"895\":2}}],[\"pwa\",{\"1\":{\"928\":1}}],[\"pluginname\",{\"1\":{\"956\":2}}],[\"plugin的集合\",{\"1\":{\"952\":1}}],[\"plugin插件\",{\"1\":{\"909\":1}}],[\"plugins\",{\"0\":{\"952\":1},\"1\":{\"895\":2,\"907\":1,\"909\":1,\"952\":1,\"953\":2,\"954\":1,\"955\":1}}],[\"plugin\",{\"0\":{\"953\":1},\"1\":{\"895\":4,\"907\":2,\"909\":1,\"928\":2,\"932\":3,\"946\":1,\"953\":2,\"954\":1}}],[\"placeholder\",{\"1\":{\"770\":1}}],[\"plain\",{\"1\":{\"224\":1,\"895\":2}}],[\"play\",{\"1\":{\"13\":1,\"258\":4,\"260\":4,\"263\":2}}],[\"pc端\",{\"1\":{\"812\":1}}],[\"pinia\",{\"1\":{\"812\":1}}],[\"pink\",{\"1\":{\"488\":1,\"538\":1}}],[\"pick\",{\"1\":{\"928\":1}}],[\"pick<iperson\",{\"1\":{\"646\":1}}],[\"pick用于抽取对象子集\",{\"1\":{\"646\":1}}],[\"pipe\",{\"1\":{\"297\":1}}],[\"p>\",{\"1\":{\"331\":2,\"333\":1,\"752\":1}}],[\"pdf\",{\"1\":{\"329\":1}}],[\"ph8\",{\"0\":{\"324\":1}}],[\"php会对双引号中的特殊字符进行解析\",{\"1\":{\"380\":1}}],[\"php标记表示了一段可以被php解析器解析的代码\",{\"1\":{\"330\":1}}],[\"php标记\",{\"0\":{\"330\":1}}],[\"php8\",{\"0\":{\"313\":1}}],[\"php\",{\"0\":{\"314\":4,\"329\":1,\"389\":1,\"1018\":1},\"1\":{\"306\":2,\"307\":1,\"312\":3,\"324\":2,\"325\":1,\"326\":3,\"329\":3,\"330\":18,\"331\":15,\"332\":9,\"333\":6,\"336\":2,\"338\":1,\"339\":1,\"340\":2,\"342\":1,\"343\":1,\"344\":2,\"345\":2,\"346\":1,\"347\":1,\"348\":2,\"350\":3,\"351\":5,\"357\":4,\"359\":2,\"360\":2,\"362\":1,\"366\":1,\"368\":2,\"369\":2,\"370\":1,\"371\":1,\"372\":7,\"374\":2,\"375\":2,\"376\":1,\"378\":1,\"379\":1,\"381\":1,\"382\":1,\"383\":2,\"384\":1,\"385\":3,\"386\":2,\"387\":1,\"389\":1,\"393\":1,\"394\":1,\"395\":2,\"399\":1,\"400\":2,\"401\":2,\"402\":1,\"403\":3,\"406\":6,\"407\":1,\"408\":4,\"409\":4,\"895\":2},\"2\":{\"309\":1,\"310\":1,\"317\":1,\"318\":1,\"327\":1,\"328\":1,\"334\":1,\"335\":1,\"352\":1,\"353\":1,\"363\":1,\"364\":1,\"396\":1,\"397\":1,\"410\":1,\"411\":1}}],[\"photo\",{\"1\":{\"7\":3}}],[\"photos\",{\"1\":{\"7\":3}}],[\"p3\",{\"1\":{\"261\":3,\"262\":2}}],[\"p2\",{\"1\":{\"261\":3,\"262\":2}}],[\"p1\",{\"1\":{\"261\":3,\"262\":2,\"646\":3}}],[\"puppeteerrenderer\",{\"1\":{\"909\":1}}],[\"pureclass\",{\"1\":{\"549\":1}}],[\"purecomponent\",{\"0\":{\"549\":1},\"1\":{\"486\":2,\"487\":2,\"547\":1,\"550\":1,\"633\":1,\"634\":1,\"635\":2}}],[\"public\",{\"1\":{\"336\":2,\"338\":2,\"346\":3,\"347\":2,\"349\":1,\"350\":2,\"368\":9,\"449\":3,\"651\":1,\"866\":1,\"907\":1}}],[\"pullinguphandler\",{\"1\":{\"292\":2}}],[\"pullingup\",{\"1\":{\"292\":1}}],[\"pullingdownhandler\",{\"1\":{\"292\":2}}],[\"pullingdown\",{\"1\":{\"292\":1}}],[\"pullupload\",{\"1\":{\"292\":1}}],[\"pullup\",{\"1\":{\"292\":2}}],[\"pull\",{\"1\":{\"292\":2,\"686\":1,\"689\":2}}],[\"pulldownrefresh\",{\"1\":{\"292\":1}}],[\"pulldown\",{\"1\":{\"292\":2}}],[\"push\",{\"1\":{\"254\":1,\"258\":1,\"260\":1,\"261\":2,\"596\":2,\"599\":1,\"686\":1,\"690\":1,\"906\":3}}],[\"put\",{\"1\":{\"147\":1,\"224\":1}}],[\"ppp\",{\"1\":{\"176\":1}}],[\"polyfill\",{\"1\":{\"933\":1}}],[\"polygon\",{\"1\":{\"72\":1}}],[\"points\",{\"1\":{\"932\":1,\"939\":1}}],[\"port\",{\"1\":{\"449\":4}}],[\"pop\",{\"1\":{\"254\":1}}],[\"potential\",{\"1\":{\"251\":1}}],[\"posts\",{\"0\":{\"1016\":1}}],[\"postloaders\",{\"1\":{\"949\":1}}],[\"postloader\",{\"1\":{\"949\":2}}],[\"postcss\",{\"1\":{\"928\":3}}],[\"postmessage\",{\"1\":{\"287\":1}}],[\"post则放在body中\",{\"1\":{\"217\":1}}],[\"post放在request\",{\"1\":{\"216\":1}}],[\"post方法用于将实体提交到指定的资源\",{\"1\":{\"215\":1}}],[\"post\",{\"0\":{\"215\":1,\"406\":1},\"1\":{\"215\":1,\"217\":4,\"219\":1,\"357\":4,\"358\":3,\"406\":6,\"409\":1}}],[\"position=\",{\"1\":{\"532\":1}}],[\"position的值为absolute或fixed\",{\"1\":{\"20\":1}}],[\"position\",{\"0\":{\"71\":1},\"1\":{\"7\":4,\"25\":2,\"26\":2,\"27\":2,\"33\":1,\"37\":1,\"44\":3,\"66\":1,\"71\":1,\"79\":3,\"89\":4,\"90\":2,\"291\":1,\"292\":1,\"532\":1}}],[\"px\",{\"1\":{\"59\":1,\"291\":1}}],[\"p~ul\",{\"1\":{\"35\":1}}],[\"p的所有元素\",{\"1\":{\"35\":1}}],[\"p\",{\"1\":{\"35\":3,\"87\":2,\"90\":7,\"458\":1,\"460\":4,\"486\":1,\"487\":1,\"519\":2,\"520\":2,\"538\":3,\"601\":1,\"646\":1,\"752\":1,\"753\":2,\"769\":1}}],[\"prettier\",{\"1\":{\"928\":2}}],[\"prerender\",{\"1\":{\"909\":1}}],[\"prerenderspaplugin\",{\"1\":{\"909\":3}}],[\"preloader\",{\"1\":{\"949\":3}}],[\"preloadedstate\",{\"1\":{\"575\":2}}],[\"preload\",{\"1\":{\"906\":4,\"907\":1}}],[\"pre\",{\"1\":{\"753\":4,\"828\":1}}],[\"preset\",{\"1\":{\"909\":1,\"928\":1}}],[\"presets\",{\"1\":{\"449\":2,\"909\":1}}],[\"preserve\",{\"1\":{\"8\":2}}],[\"prevent\",{\"1\":{\"699\":1}}],[\"preventdefault方法\",{\"1\":{\"699\":1}}],[\"preventdefault\",{\"1\":{\"466\":1}}],[\"previousstate\",{\"1\":{\"616\":1}}],[\"prevstate\",{\"1\":{\"441\":2,\"616\":4,\"620\":2}}],[\"prevprops\",{\"1\":{\"441\":2,\"549\":1,\"550\":2}}],[\"pre>\",{\"1\":{\"360\":1,\"406\":1}}],[\"pricecontext\",{\"1\":{\"416\":4}}],[\"price\",{\"1\":{\"414\":3,\"416\":4}}],[\"private\",{\"1\":{\"339\":1,\"349\":1,\"350\":1,\"651\":1,\"866\":1}}],[\"privateenvironment\",{\"1\":{\"95\":1}}],[\"printlength\",{\"1\":{\"645\":4}}],[\"printage\",{\"1\":{\"626\":2}}],[\"printname\",{\"1\":{\"626\":2}}],[\"printing\",{\"1\":{\"381\":4}}],[\"printid\",{\"1\":{\"368\":1}}],[\"printf\",{\"1\":{\"326\":1}}],[\"print\",{\"1\":{\"315\":1,\"330\":2,\"331\":1,\"339\":2,\"343\":1,\"349\":1,\"381\":2,\"384\":4,\"387\":1,\"406\":1}}],[\"progressplugin\",{\"1\":{\"954\":2,\"955\":1}}],[\"promise\",{\"1\":{\"933\":1}}],[\"prod\",{\"1\":{\"927\":1}}],[\"production\",{\"1\":{\"895\":1,\"928\":1}}],[\"province\",{\"1\":{\"858\":2}}],[\"provide\",{\"1\":{\"696\":2,\"793\":1}}],[\"provider>\",{\"1\":{\"416\":1,\"608\":1}}],[\"provider\",{\"0\":{\"564\":1},\"1\":{\"416\":1,\"563\":1,\"608\":1}}],[\"provider组件通过value属性用于给后代组件传递数据\",{\"1\":{\"416\":1}}],[\"proxy劫持整个对象的基本操作\",{\"1\":{\"819\":1}}],[\"proxy可以对整个对象进行监听\",{\"1\":{\"819\":1}}],[\"proxy\",{\"1\":{\"723\":1,\"895\":2}}],[\"project\",{\"1\":{\"688\":1,\"928\":3}}],[\"protect\",{\"1\":{\"651\":1}}],[\"proto\",{\"1\":{\"263\":1,\"267\":1,\"268\":1}}],[\"prototype上实现\",{\"1\":{\"717\":1}}],[\"prototype\",{\"1\":{\"254\":1,\"258\":1,\"259\":2,\"260\":3,\"263\":5,\"264\":1,\"270\":1,\"272\":1,\"276\":2,\"549\":1,\"612\":1,\"626\":1,\"662\":2}}],[\"protocols\",{\"1\":{\"200\":2}}],[\"protocol\",{\"1\":{\"162\":1,\"181\":1,\"182\":1,\"200\":2,\"230\":1}}],[\"profile\",{\"1\":{\"537\":2,\"596\":1,\"598\":2}}],[\"profilepage\",{\"1\":{\"461\":2}}],[\"propc\",{\"1\":{\"670\":1}}],[\"propb\",{\"1\":{\"670\":1}}],[\"propa\",{\"1\":{\"670\":1}}],[\"prop\",{\"1\":{\"566\":1,\"662\":1,\"670\":4,\"699\":1}}],[\"props在super\",{\"1\":{\"628\":1}}],[\"props在内部不可变的\",{\"1\":{\"621\":1}}],[\"props为undefined\",{\"1\":{\"627\":1}}],[\"props赋值\",{\"1\":{\"627\":1}}],[\"props都是可以使用的\",{\"1\":{\"627\":1}}],[\"props直接挂载到实例上\",{\"1\":{\"627\":1}}],[\"props除了可以传字符串\",{\"1\":{\"621\":1}}],[\"props并不发生改变\",{\"1\":{\"461\":1}}],[\"props的方式去访问\",{\"1\":{\"454\":1}}],[\"props\",{\"0\":{\"621\":1,\"625\":1,\"670\":1},\"1\":{\"413\":2,\"414\":1,\"415\":2,\"450\":1,\"454\":3,\"455\":2,\"457\":5,\"460\":2,\"461\":7,\"465\":2,\"466\":2,\"472\":2,\"473\":2,\"474\":2,\"479\":10,\"480\":5,\"485\":2,\"488\":6,\"500\":5,\"505\":2,\"512\":2,\"513\":2,\"519\":2,\"520\":4,\"530\":2,\"533\":2,\"538\":14,\"548\":1,\"549\":1,\"550\":1,\"559\":2,\"566\":3,\"567\":3,\"580\":2,\"581\":2,\"582\":2,\"583\":1,\"589\":2,\"596\":1,\"597\":1,\"600\":1,\"603\":1,\"604\":1,\"605\":1,\"608\":1,\"609\":1,\"612\":2,\"616\":2,\"620\":1,\"621\":1,\"622\":3,\"627\":15,\"634\":2,\"635\":2,\"696\":4,\"793\":3}}],[\"propertyname\",{\"1\":{\"662\":2}}],[\"propertydescriptor\",{\"1\":{\"662\":2,\"663\":2}}],[\"propertykey\",{\"1\":{\"662\":3,\"663\":2}}],[\"propertykey方法名称\",{\"1\":{\"662\":3}}],[\"property\",{\"1\":{\"11\":2,\"12\":2,\"49\":1,\"308\":1,\"325\":2,\"345\":1,\"667\":1,\"668\":1,\"670\":1,\"671\":1,\"672\":1,\"895\":1}}],[\"processif\",{\"1\":{\"760\":1}}],[\"process\",{\"1\":{\"101\":1,\"895\":1}}],[\"package\",{\"1\":{\"927\":1,\"928\":4,\"946\":1}}],[\"pass\",{\"1\":{\"895\":2}}],[\"password\",{\"1\":{\"770\":1}}],[\"passive\",{\"1\":{\"699\":1}}],[\"passport将会颁发一个令牌给各个子系统\",{\"1\":{\"286\":1}}],[\"patch更新\",{\"1\":{\"770\":2}}],[\"patch\",{\"1\":{\"770\":3}}],[\"patch函数通过虚拟dom算法利用vnode节点创建真实dom节点\",{\"1\":{\"758\":1}}],[\"patchvnode方法做了以下操作\",{\"1\":{\"733\":1}}],[\"patchvnode后\",{\"1\":{\"732\":2}}],[\"patchvnode\",{\"1\":{\"732\":1,\"770\":1}}],[\"patch方法接受参数\",{\"1\":{\"732\":1}}],[\"patchthunk\",{\"1\":{\"575\":1}}],[\"pathtoregexp\",{\"1\":{\"609\":2}}],[\"pathname\",{\"1\":{\"601\":2,\"605\":1,\"608\":2,\"609\":3}}],[\"path=\",{\"1\":{\"449\":1,\"595\":1,\"598\":4,\"603\":1,\"604\":1,\"606\":4}}],[\"path属性默认为web应用的上下文路径\",{\"1\":{\"287\":1}}],[\"path\",{\"0\":{\"72\":1},\"1\":{\"66\":1,\"72\":1,\"449\":9,\"595\":1,\"609\":3,\"895\":2,\"909\":6,\"926\":4,\"954\":5}}],[\"palevioletred\",{\"1\":{\"488\":1}}],[\"paly\",{\"1\":{\"51\":1}}],[\"payload\",{\"1\":{\"217\":1}}],[\"paint\",{\"1\":{\"192\":1,\"878\":4,\"885\":1,\"890\":1}}],[\"partial<iperson>\",{\"1\":{\"646\":1}}],[\"partialstate\",{\"1\":{\"612\":5}}],[\"parsed\",{\"1\":{\"331\":1}}],[\"parseint\",{\"1\":{\"90\":2,\"274\":1}}],[\"param\",{\"1\":{\"669\":2}}],[\"parameters\",{\"1\":{\"983\":1}}],[\"parameter\",{\"1\":{\"645\":1}}],[\"params\",{\"1\":{\"597\":2,\"600\":1,\"603\":1}}],[\"paramname\",{\"1\":{\"324\":1}}],[\"parallax\",{\"1\":{\"5\":1}}],[\"parentval\",{\"1\":{\"793\":5}}],[\"parentelm\",{\"1\":{\"770\":4}}],[\"parentcondition\",{\"1\":{\"760\":2}}],[\"parentclickfun\",{\"1\":{\"505\":2}}],[\"parentclass\",{\"1\":{\"362\":3}}],[\"parentnode\",{\"1\":{\"538\":7}}],[\"parentref\",{\"1\":{\"505\":3}}],[\"parents\",{\"1\":{\"414\":1}}],[\"parent6\",{\"1\":{\"263\":7}}],[\"parent5\",{\"1\":{\"262\":4}}],[\"parent4\",{\"1\":{\"261\":5}}],[\"parent3\",{\"1\":{\"260\":10}}],[\"parent1\",{\"1\":{\"258\":1,\"259\":2}}],[\"parent\",{\"1\":{\"258\":2,\"259\":3,\"263\":2,\"339\":2,\"340\":2,\"367\":1,\"415\":1,\"696\":1,\"753\":2,\"792\":6}}],[\"pagecount\",{\"1\":{\"916\":4,\"917\":4,\"918\":4}}],[\"pagenav\",{\"1\":{\"884\":2}}],[\"pageno++\",{\"1\":{\"292\":1}}],[\"pageno=1\",{\"1\":{\"292\":1}}],[\"pageno\",{\"1\":{\"292\":1}}],[\"pagemodel全部以栈的形式进行管理\",{\"1\":{\"831\":1}}],[\"pages\",{\"1\":{\"606\":4,\"828\":4}}],[\"pagesize\",{\"1\":{\"292\":1}}],[\"page<\",{\"1\":{\"556\":1,\"560\":1}}],[\"pagey\",{\"1\":{\"291\":3}}],[\"page\",{\"1\":{\"37\":2,\"527\":4,\"916\":1,\"917\":1,\"918\":1}}],[\"pauser\",{\"1\":{\"13\":1}}],[\"padding\",{\"1\":{\"8\":1,\"15\":3,\"16\":3,\"17\":1,\"18\":2,\"43\":1,\"44\":1,\"70\":2,\"78\":1,\"89\":1,\"90\":1}}],[\"pending用于标识\",{\"1\":{\"801\":1}}],[\"pendingprops\",{\"1\":{\"428\":1}}],[\"people\",{\"1\":{\"488\":1}}],[\"performanceobserver\",{\"1\":{\"878\":2,\"884\":2}}],[\"perl\",{\"1\":{\"332\":1,\"333\":1}}],[\"persistent\",{\"1\":{\"525\":1,\"526\":1}}],[\"person=\",{\"1\":{\"664\":1}}],[\"person=add\",{\"1\":{\"662\":1}}],[\"personmap\",{\"1\":{\"646\":1}}],[\"person2\",{\"1\":{\"646\":2}}],[\"person1\",{\"1\":{\"646\":2}}],[\"personal\",{\"1\":{\"406\":2}}],[\"person\",{\"1\":{\"264\":4,\"646\":2,\"662\":7,\"671\":6}}],[\"person6\",{\"1\":{\"263\":5}}],[\"person5\",{\"1\":{\"261\":4,\"262\":3}}],[\"person4\",{\"1\":{\"261\":7}}],[\"perspective\",{\"1\":{\"8\":4}}],[\"periterationlets\",{\"1\":{\"122\":1}}],[\"pexels\",{\"1\":{\"7\":6}}],[\"creation\",{\"1\":{\"928\":1}}],[\"createapp\",{\"1\":{\"926\":1}}],[\"createrenderer\",{\"1\":{\"817\":1}}],[\"createref一致\",{\"1\":{\"583\":1}}],[\"createref\",{\"1\":{\"466\":1,\"505\":2,\"579\":1,\"580\":1,\"581\":2,\"582\":1}}],[\"created\",{\"0\":{\"775\":1},\"1\":{\"789\":1,\"790\":1,\"826\":1,\"969\":1}}],[\"createdocumentfragment\",{\"1\":{\"538\":1,\"918\":1}}],[\"createelm\",{\"1\":{\"770\":2}}],[\"createelement方法用来创建元素的\",{\"1\":{\"587\":1}}],[\"createelement函数对key和ref等特殊的props进行处理\",{\"1\":{\"539\":1}}],[\"createelement或jsx编写react组件\",{\"1\":{\"539\":1}}],[\"createelement会根据传入的节点信息进行一个判断\",{\"1\":{\"538\":1}}],[\"createelement其被调用时会传⼊标签类型type\",{\"1\":{\"538\":1}}],[\"createelement这种形式\",{\"1\":{\"537\":1,\"538\":1}}],[\"createelement执行\",{\"1\":{\"421\":1}}],[\"createelement\",{\"1\":{\"251\":1,\"287\":1,\"421\":2,\"473\":2,\"537\":5,\"538\":3,\"539\":1,\"587\":3,\"851\":1,\"916\":1,\"917\":1,\"918\":1}}],[\"createkeytooldidx\",{\"1\":{\"770\":2}}],[\"createstructuraldirectivetransform\",{\"1\":{\"760\":1}}],[\"createstructuraldirectivetransform工具函数创建\",{\"1\":{\"760\":1}}],[\"createstore\",{\"1\":{\"572\":1,\"574\":2,\"575\":2}}],[\"createlogger\",{\"1\":{\"574\":2}}],[\"createnode\",{\"1\":{\"538\":4}}],[\"createtextnode\",{\"1\":{\"538\":3}}],[\"createcodegennodeforbranch\",{\"1\":{\"760\":2}}],[\"createcontext\",{\"1\":{\"416\":1}}],[\"createcontext创建一个context\",{\"1\":{\"416\":1}}],[\"createclass这种形式\",{\"1\":{\"473\":1}}],[\"createclass是react刚开始推荐的创建组件的方式\",{\"1\":{\"473\":1}}],[\"createclass\",{\"0\":{\"473\":1},\"1\":{\"471\":1,\"475\":1,\"527\":1}}],[\"create\",{\"1\":{\"261\":3,\"262\":1,\"263\":3,\"278\":1,\"793\":2}}],[\"create方法实现普通对象的继承\",{\"1\":{\"261\":1}}],[\"crossorigin=\",{\"1\":{\"906\":1}}],[\"c与f\",{\"1\":{\"769\":1}}],[\"cvs是版本控制系统\",{\"1\":{\"680\":1}}],[\"cvs\",{\"1\":{\"678\":1}}],[\"cn\",{\"1\":{\"587\":2}}],[\"cname实际上在域名解析的过程中承担了中间人\",{\"1\":{\"133\":1}}],[\"cmp\",{\"1\":{\"538\":2}}],[\"cccccc\",{\"0\":{\"395\":1}}],[\"c++\",{\"1\":{\"333\":2}}],[\"csrf跨站请求伪造\",{\"0\":{\"300\":1}}],[\"css$\",{\"1\":{\"948\":1}}],[\"css$|\",{\"1\":{\"895\":1}}],[\"css和js文件\",{\"1\":{\"906\":1}}],[\"css和js等文件\",{\"1\":{\"870\":1}}],[\"csstransition>\",{\"1\":{\"633\":1,\"634\":1,\"635\":1}}],[\"csstransition会给子组件加上xxx\",{\"1\":{\"633\":1}}],[\"csstransition首先会给其子组件加上xxx\",{\"1\":{\"633\":1}}],[\"csstransition\",{\"0\":{\"633\":1},\"1\":{\"632\":1,\"634\":1,\"635\":1}}],[\"css文件对应如下\",{\"1\":{\"634\":1}}],[\"css文件\",{\"1\":{\"486\":1,\"932\":1}}],[\"css引入\",{\"0\":{\"483\":1}}],[\"css结构如下\",{\"1\":{\"90\":1}}],[\"css属性需要转换成驼峰写法\",{\"1\":{\"485\":1}}],[\"css属性\",{\"1\":{\"49\":1}}],[\"css选择器是css规则的第一部分\",{\"1\":{\"35\":1}}],[\"css实现动画的方式\",{\"1\":{\"10\":1}}],[\"css动画\",{\"1\":{\"10\":1}}],[\"css3渐变包括\",{\"1\":{\"52\":1}}],[\"css3里面开始支持对文字的更深层次的渲染\",{\"1\":{\"47\":1}}],[\"css3新增了新的颜色表示方式rgba与hsla\",{\"1\":{\"48\":1}}],[\"css3新增了三个边框属性\",{\"1\":{\"41\":1}}],[\"css3新特性\",{\"0\":{\"39\":1}}],[\"css3中了flex布局\",{\"1\":{\"29\":1}}],[\"css3\",{\"1\":{\"8\":2,\"56\":1}}],[\"css\",{\"0\":{\"5\":1,\"487\":1,\"488\":1,\"1017\":1},\"1\":{\"10\":1,\"13\":1,\"15\":2,\"18\":1,\"82\":1,\"90\":2,\"192\":3,\"484\":3,\"486\":1,\"487\":1,\"488\":1,\"489\":2,\"632\":1,\"879\":1,\"895\":2,\"906\":2,\"928\":5,\"932\":1,\"936\":1,\"945\":1,\"946\":1,\"948\":2,\"949\":8},\"2\":{\"9\":1,\"14\":1,\"22\":1,\"34\":1,\"38\":1,\"53\":1,\"60\":1,\"62\":1,\"64\":1,\"73\":1,\"84\":1,\"91\":1}}],[\"c561c68d0ba92bbeb8b0fff2a9199f722e3a621a\",{\"1\":{\"223\":1}}],[\"cpu\",{\"1\":{\"195\":1}}],[\"cdn命中率都在\",{\"1\":{\"135\":1}}],[\"cdn就是根据用户位置分配最近的资源\",{\"1\":{\"132\":1}}],[\"cdn\",{\"0\":{\"132\":1},\"1\":{\"132\":3,\"135\":1,\"866\":1}}],[\"camel\",{\"1\":{\"699\":1}}],[\"car\",{\"1\":{\"649\":1}}],[\"cart\",{\"1\":{\"407\":1}}],[\"case\",{\"1\":{\"389\":4,\"527\":7}}],[\"capture\",{\"1\":{\"699\":1}}],[\"caption\",{\"1\":{\"20\":1,\"37\":1}}],[\"capital\",{\"1\":{\"381\":2}}],[\"capability\",{\"1\":{\"368\":1}}],[\"cannot\",{\"1\":{\"895\":1}}],[\"candidate\",{\"1\":{\"878\":1}}],[\"canvas优化性能\",{\"1\":{\"914\":1}}],[\"canvas\",{\"0\":{\"959\":1,\"961\":1},\"1\":{\"813\":1},\"2\":{\"924\":1,\"962\":1}}],[\"canmove\",{\"1\":{\"770\":1}}],[\"can\",{\"1\":{\"330\":1,\"368\":2,\"379\":1}}],[\"canonical\",{\"1\":{\"133\":1}}],[\"catch\",{\"1\":{\"306\":1,\"500\":2,\"859\":1}}],[\"cat\",{\"1\":{\"306\":1}}],[\"ca\",{\"1\":{\"240\":1}}],[\"ca验证机构\",{\"0\":{\"240\":1}}],[\"cache=object\",{\"1\":{\"278\":1}}],[\"cache\",{\"1\":{\"223\":1,\"224\":3,\"278\":3,\"811\":1,\"864\":1,\"866\":2}}],[\"callable类型\",{\"1\":{\"367\":1}}],[\"callable\",{\"0\":{\"391\":1},\"1\":{\"346\":1,\"391\":1}}],[\"callable参数的值\",{\"1\":{\"326\":1}}],[\"called\",{\"1\":{\"315\":1,\"325\":1,\"663\":4}}],[\"callbacks是异步操作队列\",{\"1\":{\"801\":1}}],[\"callback=\",{\"1\":{\"285\":1}}],[\"callback\",{\"0\":{\"391\":1},\"1\":{\"270\":7,\"285\":1,\"538\":1,\"608\":1,\"612\":2,\"859\":1}}],[\"call\",{\"0\":{\"271\":1},\"1\":{\"123\":1,\"254\":1,\"257\":1,\"259\":2,\"260\":1,\"263\":1,\"270\":2,\"271\":2,\"391\":1,\"549\":1,\"626\":1}}],[\"cls\",{\"1\":{\"880\":1,\"890\":1}}],[\"cleartimeout\",{\"1\":{\"845\":1}}],[\"clearinterval\",{\"1\":{\"474\":1}}],[\"clearimmediate\",{\"1\":{\"101\":1}}],[\"clubs\",{\"1\":{\"389\":1}}],[\"closing\",{\"1\":{\"332\":1}}],[\"closures\",{\"1\":{\"326\":1}}],[\"closure\",{\"1\":{\"308\":1}}],[\"closed\",{\"1\":{\"244\":2}}],[\"close\",{\"1\":{\"244\":1,\"584\":1}}],[\"clone一个项目到本地\",{\"1\":{\"685\":1}}],[\"clone一个项目的时候\",{\"1\":{\"685\":1}}],[\"cloneobj\",{\"1\":{\"277\":3}}],[\"cloneobj=new\",{\"1\":{\"277\":1}}],[\"clonedeep\",{\"1\":{\"277\":1,\"527\":1}}],[\"clone\",{\"1\":{\"262\":5,\"263\":2,\"686\":1}}],[\"class关键字紧接着类名\",{\"1\":{\"649\":1}}],[\"classcomponent\",{\"1\":{\"538\":1}}],[\"classcomponent等\",{\"1\":{\"428\":1}}],[\"class等\",{\"1\":{\"421\":1}}],[\"classnames=\",{\"1\":{\"633\":1,\"634\":1,\"635\":1}}],[\"classname=\",{\"1\":{\"486\":3,\"487\":3,\"533\":1,\"537\":1,\"538\":4,\"587\":1,\"588\":2,\"633\":3}}],[\"classname\",{\"1\":{\"308\":1,\"343\":6,\"421\":1,\"487\":2,\"537\":1,\"587\":1}}],[\"class\",{\"0\":{\"336\":1,\"343\":1},\"1\":{\"103\":2,\"113\":1,\"123\":2,\"264\":2,\"308\":3,\"325\":2,\"336\":1,\"338\":1,\"339\":3,\"340\":2,\"343\":6,\"346\":1,\"347\":1,\"349\":1,\"350\":2,\"351\":2,\"362\":6,\"367\":1,\"368\":2,\"388\":2,\"414\":2,\"415\":1,\"416\":1,\"428\":1,\"454\":1,\"457\":1,\"460\":1,\"461\":1,\"465\":1,\"466\":1,\"474\":1,\"479\":2,\"480\":5,\"485\":1,\"486\":1,\"487\":1,\"488\":1,\"500\":2,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"517\":1,\"519\":1,\"520\":1,\"530\":1,\"533\":1,\"538\":1,\"555\":2,\"556\":1,\"566\":1,\"567\":1,\"580\":1,\"581\":1,\"582\":1,\"587\":1,\"588\":2,\"608\":1,\"609\":1,\"612\":1,\"620\":1,\"621\":1,\"626\":3,\"627\":3,\"633\":1,\"634\":1,\"635\":1,\"649\":1,\"650\":2,\"652\":1,\"653\":2,\"662\":5,\"663\":1,\"665\":1,\"668\":1,\"669\":1,\"670\":1,\"671\":1,\"672\":1,\"956\":1}}],[\"class=\",{\"1\":{\"7\":7,\"8\":3,\"11\":1,\"12\":1,\"15\":1,\"18\":1,\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2,\"35\":6,\"75\":3,\"76\":3,\"78\":4,\"79\":4,\"80\":4,\"81\":4,\"82\":4,\"83\":4,\"89\":1}}],[\"clamp\",{\"1\":{\"90\":2}}],[\"cli项目\",{\"1\":{\"895\":1}}],[\"cli\",{\"1\":{\"812\":1,\"925\":3,\"928\":10,\"947\":1}}],[\"click=\",{\"1\":{\"696\":1}}],[\"clicked\",{\"1\":{\"519\":2,\"520\":6,\"620\":1}}],[\"clickgoods\",{\"1\":{\"414\":3}}],[\"click\",{\"1\":{\"292\":1,\"505\":4,\"519\":2,\"520\":2,\"555\":2,\"615\":1,\"696\":1}}],[\"client\",{\"1\":{\"449\":2}}],[\"clientheight\",{\"1\":{\"285\":2,\"290\":2}}],[\"clientheight||document\",{\"1\":{\"285\":1}}],[\"clientwidth\",{\"1\":{\"59\":1,\"285\":1}}],[\"clip\",{\"0\":{\"43\":1,\"72\":1},\"1\":{\"42\":1,\"43\":5,\"47\":1,\"66\":1,\"72\":1,\"87\":1}}],[\"cumulative\",{\"1\":{\"890\":1}}],[\"custom\",{\"1\":{\"717\":1}}],[\"curindex\",{\"1\":{\"916\":3,\"917\":3,\"918\":3}}],[\"curtotal\",{\"1\":{\"916\":4,\"917\":4,\"918\":4}}],[\"curr\",{\"1\":{\"828\":1}}],[\"currentcomponent\",{\"1\":{\"858\":2}}],[\"current\",{\"1\":{\"466\":1,\"479\":1,\"505\":2,\"579\":2,\"581\":2,\"583\":1}}],[\"cursor\",{\"1\":{\"37\":1}}],[\"cubic\",{\"1\":{\"11\":7}}],[\"c的值等于\",{\"1\":{\"36\":1}}],[\"c\",{\"0\":{\"395\":3},\"1\":{\"36\":1,\"217\":2,\"243\":1,\"247\":1,\"254\":2,\"332\":1,\"333\":3,\"379\":3,\"383\":2,\"386\":2,\"495\":1,\"526\":4,\"663\":1,\"752\":2,\"753\":2,\"769\":3,\"895\":2}}],[\"chrome和edge提供了ligthouse扩展\",{\"1\":{\"888\":1}}],[\"chrome对dns记录默认的缓存时间为1分钟\",{\"1\":{\"871\":1}}],[\"chrono\",{\"1\":{\"199\":3}}],[\"chunks\",{\"1\":{\"907\":1,\"942\":2}}],[\"chunk\",{\"0\":{\"935\":1},\"1\":{\"859\":2,\"935\":1,\"937\":3}}],[\"chunkname\",{\"1\":{\"859\":1}}],[\"chunkname3\",{\"1\":{\"858\":2}}],[\"chunkname1\",{\"1\":{\"858\":2}}],[\"chore\",{\"1\":{\"689\":1}}],[\"china\",{\"1\":{\"488\":1}}],[\"childval\",{\"1\":{\"793\":8}}],[\"childclickfun\",{\"1\":{\"505\":2}}],[\"childref\",{\"1\":{\"505\":3}}],[\"children\",{\"1\":{\"500\":1,\"538\":9,\"587\":1,\"608\":1,\"653\":1,\"708\":1,\"770\":1}}],[\"childexpirationtime\",{\"1\":{\"428\":1}}],[\"child5\",{\"1\":{\"263\":4}}],[\"child6\",{\"1\":{\"263\":4}}],[\"child3\",{\"1\":{\"260\":7}}],[\"child1\",{\"1\":{\"258\":1}}],[\"child2\",{\"1\":{\"258\":3}}],[\"child\",{\"1\":{\"35\":4,\"258\":2,\"259\":6,\"263\":4,\"313\":1,\"414\":1,\"428\":1,\"429\":1,\"538\":9,\"671\":1,\"792\":6}}],[\"check\",{\"1\":{\"909\":2}}],[\"checksession检验微信登陆状态是否过期\",{\"1\":{\"830\":1}}],[\"checkout\",{\"1\":{\"686\":1,\"690\":4}}],[\"checkcapabilities\",{\"1\":{\"368\":2}}],[\"checked\",{\"1\":{\"35\":1}}],[\"chainwebpack\",{\"1\":{\"895\":1}}],[\"chain\",{\"1\":{\"575\":3}}],[\"change事件之后进行同步\",{\"1\":{\"699\":1}}],[\"changetext\",{\"1\":{\"612\":3,\"614\":2,\"615\":1}}],[\"changerecommendsaction\",{\"1\":{\"573\":1}}],[\"changebannersaction\",{\"1\":{\"573\":1}}],[\"change\",{\"1\":{\"527\":3,\"588\":2}}],[\"changed\",{\"1\":{\"349\":1}}],[\"char\",{\"1\":{\"247\":2}}],[\"charset\",{\"1\":{\"224\":2}}],[\"chatapi\",{\"1\":{\"520\":2}}],[\"chat\",{\"1\":{\"200\":3}}],[\"cell设置为表格单元\",{\"1\":{\"81\":1}}],[\"cells\",{\"1\":{\"37\":1}}],[\"cell\",{\"1\":{\"20\":1,\"28\":2,\"32\":1,\"33\":1,\"81\":1}}],[\"center=\",{\"1\":{\"532\":1}}],[\"center也是同样的道理垂直居中\",{\"1\":{\"29\":1}}],[\"center表示这些元素将相对于本容器水平居中\",{\"1\":{\"29\":1}}],[\"center\",{\"1\":{\"7\":9,\"28\":1,\"29\":2,\"30\":2,\"32\":2,\"79\":1,\"80\":1,\"81\":1,\"532\":1}}],[\"cors\",{\"1\":{\"723\":1}}],[\"core\",{\"1\":{\"292\":1,\"928\":1}}],[\"coral\",{\"1\":{\"78\":1,\"82\":1,\"83\":1}}],[\"cookies\",{\"1\":{\"407\":3}}],[\"cookie的domain属性设置为当前域的父域\",{\"1\":{\"287\":1}}],[\"cookie=\",{\"1\":{\"280\":1}}],[\"cookie决定\",{\"1\":{\"227\":1}}],[\"cookie\",{\"0\":{\"407\":1},\"1\":{\"224\":3,\"227\":3,\"280\":1,\"407\":10}}],[\"connect\",{\"1\":{\"565\":2,\"566\":1,\"567\":1}}],[\"connect方法将store上的getstate\",{\"1\":{\"565\":1}}],[\"connection\",{\"0\":{\"565\":1},\"1\":{\"146\":1,\"147\":1,\"200\":3,\"223\":1,\"224\":3,\"563\":1,\"858\":1}}],[\"configuration\",{\"1\":{\"928\":1,\"955\":2}}],[\"configurewebpack\",{\"1\":{\"895\":1}}],[\"config的工具来帮助设置控制git外观和行为的配置变量\",{\"1\":{\"687\":1}}],[\"config\",{\"1\":{\"538\":5,\"592\":1,\"687\":2,\"723\":1,\"895\":4,\"926\":1,\"927\":3,\"932\":1,\"947\":1,\"953\":1,\"954\":1,\"955\":1}}],[\"conponent层级\",{\"0\":{\"495\":1}}],[\"conponent\",{\"1\":{\"493\":1}}],[\"conditional\",{\"1\":{\"313\":3}}],[\"concatenation\",{\"1\":{\"978\":1}}],[\"concat\",{\"1\":{\"254\":1,\"272\":1,\"276\":1,\"292\":1}}],[\"consumer\",{\"1\":{\"609\":1}}],[\"consumer>\",{\"1\":{\"416\":2,\"609\":1}}],[\"consumer组件\",{\"1\":{\"416\":1}}],[\"consumer组件用于接收数据\",{\"1\":{\"416\":1}}],[\"consolelogonbuildwebpackplugin\",{\"1\":{\"956\":4}}],[\"console\",{\"1\":{\"111\":1,\"123\":2,\"250\":1,\"251\":3,\"258\":2,\"259\":2,\"260\":3,\"261\":5,\"262\":2,\"263\":3,\"264\":1,\"270\":4,\"441\":2,\"449\":3,\"459\":2,\"466\":1,\"479\":2,\"480\":1,\"504\":1,\"505\":6,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"526\":4,\"527\":1,\"538\":1,\"575\":2,\"588\":4,\"603\":1,\"604\":1,\"605\":1,\"608\":1,\"609\":1,\"614\":2,\"615\":2,\"616\":3,\"626\":2,\"627\":4,\"662\":6,\"663\":4,\"672\":2,\"878\":1,\"884\":2,\"956\":1}}],[\"constants\",{\"1\":{\"306\":1,\"527\":9}}],[\"constant\",{\"1\":{\"306\":9,\"350\":6}}],[\"const时\",{\"1\":{\"122\":1}}],[\"const做相应的可变\",{\"1\":{\"120\":1}}],[\"constructor中bind\",{\"0\":{\"512\":1},\"1\":{\"509\":1}}],[\"constructor\",{\"0\":{\"435\":1},\"1\":{\"260\":1,\"263\":1,\"264\":2,\"277\":1,\"339\":6,\"414\":1,\"415\":1,\"434\":1,\"454\":1,\"457\":1,\"465\":1,\"466\":1,\"474\":1,\"480\":1,\"485\":1,\"488\":1,\"500\":2,\"505\":1,\"512\":1,\"513\":1,\"519\":1,\"520\":1,\"533\":1,\"566\":1,\"567\":1,\"580\":1,\"581\":1,\"582\":1,\"608\":1,\"612\":1,\"620\":2,\"622\":1,\"626\":4,\"627\":2,\"634\":1,\"635\":1,\"649\":1,\"662\":7}}],[\"construct\",{\"1\":{\"114\":2,\"338\":1,\"339\":4,\"346\":1,\"347\":1,\"368\":1}}],[\"const声明语句\",{\"1\":{\"107\":1}}],[\"const\",{\"1\":{\"103\":2,\"123\":2,\"250\":1,\"251\":1,\"264\":1,\"270\":4,\"272\":1,\"278\":1,\"285\":11,\"297\":2,\"306\":6,\"314\":1,\"350\":3,\"413\":1,\"416\":1,\"421\":3,\"449\":13,\"458\":2,\"459\":2,\"460\":3,\"461\":2,\"478\":1,\"479\":2,\"480\":1,\"485\":1,\"488\":2,\"504\":5,\"519\":1,\"520\":1,\"526\":3,\"527\":2,\"532\":2,\"533\":1,\"538\":9,\"542\":2,\"549\":3,\"559\":2,\"566\":1,\"567\":1,\"572\":1,\"573\":2,\"574\":2,\"581\":1,\"582\":1,\"583\":2,\"588\":6,\"596\":1,\"597\":1,\"599\":2,\"600\":2,\"601\":2,\"609\":1,\"615\":1,\"621\":1,\"627\":1,\"633\":1,\"634\":1,\"645\":4,\"657\":1,\"658\":1,\"662\":1,\"664\":1,\"759\":1,\"760\":2,\"769\":1,\"792\":2,\"793\":1,\"858\":5,\"862\":2,\"878\":1,\"884\":1,\"895\":1,\"907\":2,\"909\":3,\"926\":1,\"953\":2,\"954\":3,\"955\":2,\"956\":1}}],[\"contact\",{\"1\":{\"594\":1,\"595\":1,\"596\":1,\"599\":1,\"600\":1,\"601\":1,\"908\":1}}],[\"container1\",{\"1\":{\"916\":2}}],[\"containers\",{\"1\":{\"449\":3,\"569\":2,\"570\":1}}],[\"container\",{\"1\":{\"79\":2,\"81\":2,\"538\":4,\"570\":2,\"633\":1,\"917\":2,\"918\":2}}],[\"contain\",{\"1\":{\"45\":1}}],[\"continue\",{\"1\":{\"220\":1,\"224\":1}}],[\"continuous\",{\"1\":{\"46\":1}}],[\"control的优先级高于expires\",{\"1\":{\"864\":1}}],[\"control判断是否命中强缓存\",{\"1\":{\"226\":1}}],[\"control\",{\"0\":{\"1019\":1},\"1\":{\"182\":1,\"223\":1,\"224\":2,\"675\":1,\"864\":1,\"866\":1}}],[\"context或者store\",{\"1\":{\"450\":1}}],[\"context=\",{\"1\":{\"449\":1}}],[\"context为必填参数\",{\"1\":{\"449\":1}}],[\"contextdependency<mixed>\",{\"1\":{\"428\":1}}],[\"contexttype\",{\"1\":{\"416\":1}}],[\"context创建成功后\",{\"1\":{\"416\":1}}],[\"context\",{\"1\":{\"19\":1,\"272\":2,\"416\":1,\"472\":1,\"473\":1,\"485\":1,\"488\":1,\"608\":1,\"609\":1,\"760\":4}}],[\"contentful\",{\"1\":{\"878\":2,\"885\":1,\"890\":1}}],[\"contentwindow\",{\"1\":{\"287\":1}}],[\"content=content\",{\"1\":{\"278\":1}}],[\"content=\",{\"1\":{\"55\":1}}],[\"content\",{\"1\":{\"15\":2,\"18\":2,\"29\":2,\"30\":1,\"32\":1,\"37\":1,\"43\":1,\"44\":1,\"82\":1,\"89\":1,\"90\":1,\"132\":1,\"192\":1,\"217\":1,\"224\":5,\"278\":2,\"449\":6,\"560\":1}}],[\"code一起发送到微信服务器\",{\"1\":{\"829\":1}}],[\"codegennode\",{\"1\":{\"760\":2}}],[\"codegenstate\",{\"1\":{\"753\":1}}],[\"coderwhy\",{\"1\":{\"635\":1}}],[\"code\",{\"1\":{\"95\":1,\"205\":1,\"330\":2,\"505\":1,\"550\":2,\"941\":1,\"942\":1}}],[\"collecation\",{\"1\":{\"248\":1}}],[\"collapse\",{\"1\":{\"37\":1}}],[\"columns\",{\"1\":{\"83\":1}}],[\"color=\",{\"1\":{\"488\":1,\"538\":1}}],[\"color\",{\"1\":{\"7\":1,\"11\":5,\"12\":3,\"37\":2,\"47\":2,\"52\":2,\"75\":2,\"79\":1,\"80\":1,\"81\":1,\"486\":2,\"488\":4,\"538\":2,\"596\":3,\"851\":1}}],[\"count+\",{\"1\":{\"616\":2}}],[\"count的方式获取\",{\"1\":{\"519\":1}}],[\"count=\",{\"1\":{\"415\":1}}],[\"counter\",{\"1\":{\"37\":2}}],[\"count\",{\"1\":{\"13\":1,\"51\":1,\"407\":3,\"415\":4,\"458\":3,\"519\":8,\"520\":15,\"588\":13,\"616\":14,\"620\":4,\"669\":4}}],[\"command\",{\"1\":{\"928\":1}}],[\"commonjs\",{\"1\":{\"925\":1,\"936\":1,\"937\":1}}],[\"commit\",{\"1\":{\"686\":1,\"689\":3}}],[\"committed\",{\"1\":{\"685\":1}}],[\"completion\",{\"1\":{\"968\":1,\"970\":3,\"972\":2,\"973\":1}}],[\"completionrecord\",{\"1\":{\"968\":1}}],[\"complieroptions\",{\"1\":{\"662\":1}}],[\"compilation\",{\"1\":{\"956\":1}}],[\"compiler\",{\"1\":{\"955\":3,\"956\":5}}],[\"compatibility\",{\"0\":{\"933\":1}}],[\"company\",{\"1\":{\"909\":1}}],[\"comp\",{\"1\":{\"895\":2}}],[\"compressionplugin\",{\"1\":{\"895\":2}}],[\"compression\",{\"1\":{\"895\":6}}],[\"computed\",{\"0\":{\"669\":1},\"1\":{\"754\":1,\"789\":1,\"793\":3,\"811\":1}}],[\"componentupdated可使用\",{\"1\":{\"737\":2}}],[\"componentupdated\",{\"1\":{\"737\":1}}],[\"componentb\",{\"1\":{\"668\":2}}],[\"componenta\",{\"1\":{\"668\":2}}],[\"component装饰器他注明了此类为一个vue组件\",{\"1\":{\"668\":1}}],[\"component中继承\",{\"1\":{\"612\":1}}],[\"component>\",{\"1\":{\"609\":1,\"858\":1}}],[\"component<\",{\"1\":{\"556\":1}}],[\"components会给该class添加相关的样式\",{\"1\":{\"488\":1}}],[\"components的基本使用\",{\"1\":{\"488\":1}}],[\"components\",{\"1\":{\"488\":1,\"569\":2,\"570\":2,\"668\":2,\"858\":5}}],[\"component创建一个时钟示例如下\",{\"1\":{\"474\":1}}],[\"component这种形式进行创建\",{\"1\":{\"474\":1}}],[\"component=\",{\"1\":{\"449\":1,\"598\":5,\"600\":1,\"603\":2,\"604\":1,\"606\":4}}],[\"componentwillupdate\",{\"1\":{\"445\":1}}],[\"componentwillunmount\",{\"0\":{\"444\":1},\"1\":{\"474\":1,\"520\":1}}],[\"componentwillreceiveprops\",{\"1\":{\"445\":1,\"479\":1}}],[\"componentwillmount\",{\"1\":{\"445\":2,\"480\":5}}],[\"componentdidcatch\",{\"1\":{\"500\":3}}],[\"componentdidupdate\",{\"0\":{\"442\":1},\"1\":{\"439\":1,\"441\":2,\"520\":2}}],[\"componentdidmount\",{\"0\":{\"438\":1},\"1\":{\"434\":1,\"474\":1,\"480\":3,\"505\":2,\"520\":1,\"608\":1,\"615\":1}}],[\"component\",{\"0\":{\"474\":1,\"533\":1,\"668\":1},\"1\":{\"414\":2,\"415\":1,\"416\":1,\"454\":2,\"457\":1,\"459\":1,\"460\":1,\"461\":1,\"465\":1,\"466\":2,\"471\":1,\"474\":1,\"479\":2,\"480\":6,\"485\":2,\"488\":2,\"500\":2,\"505\":1,\"508\":1,\"510\":1,\"511\":1,\"512\":1,\"513\":1,\"519\":1,\"520\":1,\"527\":1,\"530\":1,\"531\":1,\"533\":1,\"538\":1,\"550\":1,\"555\":2,\"556\":1,\"559\":1,\"566\":1,\"567\":1,\"580\":1,\"581\":1,\"582\":1,\"587\":1,\"588\":2,\"595\":1,\"608\":2,\"609\":4,\"612\":3,\"620\":1,\"621\":1,\"627\":4,\"668\":2,\"669\":1,\"670\":2,\"671\":2,\"672\":2,\"753\":1,\"770\":1,\"789\":2,\"792\":1,\"793\":4}}],[\"composition\",{\"1\":{\"813\":1}}],[\"compositetypes\",{\"1\":{\"549\":1}}],[\"compositetype\",{\"1\":{\"549\":1}}],[\"composite\",{\"1\":{\"69\":1,\"192\":1}}],[\"compose\",{\"1\":{\"297\":1,\"479\":1,\"575\":1}}],[\"com\",{\"1\":{\"7\":3,\"199\":3,\"200\":2,\"224\":1,\"287\":2,\"406\":1,\"413\":1}}],[\"cover\",{\"1\":{\"7\":4,\"45\":1}}],[\"ix\",{\"1\":{\"932\":1}}],[\"iv\",{\"1\":{\"932\":1}}],[\"iii\",{\"1\":{\"932\":1}}],[\"i<l\",{\"1\":{\"792\":1}}],[\"i<10\",{\"1\":{\"122\":1}}],[\"irecord\",{\"1\":{\"646\":2}}],[\"ireadonly\",{\"1\":{\"646\":2}}],[\"ilength\",{\"1\":{\"645\":1}}],[\"ignored\",{\"1\":{\"331\":2}}],[\"it\",{\"1\":{\"330\":1,\"379\":1,\"884\":1}}],[\"item=>\",{\"1\":{\"754\":1}}],[\"item\",{\"1\":{\"542\":2,\"635\":2,\"752\":4,\"753\":4,\"754\":1,\"769\":3}}],[\"items\",{\"1\":{\"29\":2,\"30\":1,\"76\":2,\"754\":1}}],[\"iterable\",{\"1\":{\"369\":1,\"395\":3}}],[\"iteration\",{\"1\":{\"13\":1,\"51\":1}}],[\"icmp\",{\"1\":{\"176\":1}}],[\"ipick\",{\"1\":{\"646\":2}}],[\"ipartial\",{\"1\":{\"646\":2}}],[\"iperson>\",{\"1\":{\"646\":1}}],[\"iperson\",{\"1\":{\"645\":3,\"646\":2}}],[\"ip协议去掉表示层和会话层的原因在于会话层\",{\"1\":{\"177\":1}}],[\"ip协议族按层次分别了五层体系或者四层体系\",{\"1\":{\"169\":1}}],[\"ip协议不仅仅指的是tcp\",{\"1\":{\"168\":1}}],[\"ip等协议构成的协议簇\",{\"1\":{\"168\":1}}],[\"ip\",{\"0\":{\"168\":1},\"1\":{\"133\":1,\"134\":1,\"138\":2,\"141\":1,\"142\":8,\"162\":1,\"163\":1,\"168\":2,\"169\":2,\"171\":1,\"176\":2,\"177\":5,\"181\":1,\"182\":1,\"231\":1}}],[\"isintersecting\",{\"1\":{\"862\":1}}],[\"isinviewport\",{\"1\":{\"285\":1}}],[\"isinviewportofone\",{\"1\":{\"285\":1}}],[\"is=\",{\"1\":{\"858\":1}}],[\"isundef\",{\"1\":{\"770\":5}}],[\"isasyncplaceholder\",{\"1\":{\"770\":1}}],[\"isarray\",{\"1\":{\"254\":1,\"538\":1}}],[\"istrue\",{\"1\":{\"770\":1}}],[\"isdef\",{\"1\":{\"770\":3}}],[\"iscomment\",{\"1\":{\"770\":2}}],[\"isroot\",{\"1\":{\"760\":2}}],[\"isreactcomponent\",{\"1\":{\"538\":1}}],[\"isshow\",{\"1\":{\"752\":1,\"753\":2}}],[\"isset\",{\"1\":{\"358\":1,\"407\":1}}],[\"ismore=false\",{\"1\":{\"292\":1}}],[\"ismore=true\",{\"1\":{\"292\":1}}],[\"ismore\",{\"1\":{\"292\":2}}],[\"isn+1作为ack\",{\"1\":{\"243\":1}}],[\"isn\",{\"1\":{\"243\":1}}],[\"ison\",{\"1\":{\"634\":6}}],[\"isonline\",{\"1\":{\"520\":1}}],[\"isopen\",{\"1\":{\"584\":1}}],[\"iso\",{\"1\":{\"156\":1,\"316\":1}}],[\"is\",{\"1\":{\"130\":3,\"251\":1,\"312\":2,\"321\":2,\"325\":1,\"330\":2,\"331\":3,\"332\":2,\"333\":5,\"344\":2,\"368\":5,\"377\":1,\"379\":2,\"381\":2,\"399\":1,\"409\":5,\"526\":4,\"549\":3,\"556\":1,\"645\":1,\"968\":1,\"970\":2,\"972\":1}}],[\"iswithenvironment\",{\"1\":{\"116\":1}}],[\"i++\",{\"1\":{\"111\":1,\"122\":1,\"538\":1,\"549\":1,\"792\":1,\"916\":1,\"917\":1,\"918\":1}}],[\"ifconditionalexpression\",{\"1\":{\"760\":1}}],[\"ifnode\",{\"1\":{\"760\":5}}],[\"if|else\",{\"1\":{\"760\":2}}],[\"if原理\",{\"0\":{\"760\":1}}],[\"if的状态更改\",{\"1\":{\"757\":1}}],[\"if是真正的条件渲染\",{\"1\":{\"757\":1}}],[\"if切换有一个局部编译\",{\"1\":{\"757\":1}}],[\"if隐藏是将dom元素整个添加或删除\",{\"1\":{\"757\":1}}],[\"if优先级高于v\",{\"1\":{\"754\":1}}],[\"ifprocessed\",{\"1\":{\"753\":1}}],[\"if指令\",{\"1\":{\"753\":1}}],[\"if高\",{\"1\":{\"752\":1}}],[\"if=\",{\"1\":{\"752\":1,\"753\":1,\"756\":1,\"760\":2}}],[\"if和v\",{\"0\":{\"752\":1,\"753\":1,\"755\":1},\"1\":{\"756\":1}}],[\"iframe\",{\"1\":{\"287\":6,\"886\":3}}],[\"if\",{\"0\":{\"751\":1},\"1\":{\"90\":1,\"103\":1,\"130\":2,\"147\":2,\"223\":2,\"224\":8,\"226\":3,\"251\":1,\"253\":2,\"254\":6,\"272\":1,\"277\":6,\"278\":1,\"291\":2,\"292\":3,\"306\":1,\"312\":4,\"315\":1,\"330\":2,\"331\":2,\"344\":2,\"349\":1,\"357\":2,\"358\":2,\"359\":1,\"368\":2,\"376\":1,\"406\":1,\"407\":1,\"500\":2,\"505\":1,\"538\":6,\"549\":6,\"575\":1,\"609\":1,\"659\":2,\"702\":1,\"753\":8,\"754\":1,\"759\":2,\"760\":5,\"770\":9,\"792\":2,\"793\":3,\"811\":1,\"845\":1,\"848\":1,\"858\":1,\"862\":1,\"867\":2,\"868\":1,\"895\":1,\"916\":1,\"917\":1,\"918\":1,\"970\":1}}],[\"i\",{\"1\":{\"90\":1,\"111\":4,\"122\":1,\"379\":1,\"381\":4,\"538\":3,\"549\":5,\"792\":2,\"916\":3,\"917\":3,\"918\":3}}],[\"identifiernamebut\",{\"1\":{\"995\":1}}],[\"identifier\",{\"1\":{\"995\":1}}],[\"identifier词法的产生式\",{\"1\":{\"995\":1}}],[\"idxinold\",{\"1\":{\"770\":4}}],[\"id\",{\"1\":{\"368\":8,\"406\":1,\"421\":1,\"520\":2,\"603\":2,\"752\":1,\"753\":1}}],[\"id选择器出现的次数\",{\"1\":{\"36\":1}}],[\"id选择器\",{\"1\":{\"35\":1,\"36\":1}}],[\"id=3\",{\"1\":{\"406\":1}}],[\"id=xxx\",{\"1\":{\"199\":1}}],[\"id=\",{\"1\":{\"8\":1,\"35\":1,\"421\":1,\"449\":1,\"560\":1,\"752\":1,\"753\":1,\"769\":1,\"851\":2,\"916\":1,\"917\":1,\"918\":1}}],[\"ie8\",{\"1\":{\"933\":1}}],[\"ie对dns记录默认的缓存时间为30分钟\",{\"1\":{\"871\":1}}],[\"ie对url长度的限制是2083字节\",{\"1\":{\"218\":1}}],[\"ie事件模型\",{\"1\":{\"273\":1}}],[\"ie\",{\"0\":{\"17\":1},\"1\":{\"15\":1,\"539\":1}}],[\"invalid\",{\"1\":{\"1013\":1}}],[\"invariant\",{\"1\":{\"612\":1}}],[\"info\",{\"1\":{\"928\":1}}],[\"inject\",{\"1\":{\"696\":2,\"793\":3,\"907\":1,\"909\":1}}],[\"inp\",{\"1\":{\"882\":2,\"883\":1}}],[\"inprocess\",{\"1\":{\"670\":1}}],[\"input=\",{\"1\":{\"696\":1}}],[\"inputvalue\",{\"1\":{\"555\":2}}],[\"inputref\",{\"1\":{\"466\":3}}],[\"input\",{\"1\":{\"406\":1,\"696\":2,\"881\":1,\"890\":1}}],[\"in=\",{\"1\":{\"633\":1}}],[\"increatment\",{\"1\":{\"567\":1}}],[\"increment\",{\"1\":{\"37\":1,\"588\":4}}],[\"inc\",{\"1\":{\"401\":2}}],[\"include\",{\"1\":{\"332\":1,\"359\":1,\"401\":2,\"763\":1,\"907\":1}}],[\"ini\",{\"1\":{\"330\":1}}],[\"initdata方法\",{\"1\":{\"796\":1}}],[\"initstate方法完成props\",{\"1\":{\"796\":1}}],[\"initstate\",{\"1\":{\"796\":1}}],[\"init方法\",{\"1\":{\"796\":1,\"797\":1}}],[\"initmixin\",{\"1\":{\"792\":1}}],[\"init创建或者git\",{\"1\":{\"685\":1}}],[\"init\",{\"1\":{\"59\":4,\"688\":2,\"689\":1,\"796\":1,\"928\":3}}],[\"inital\",{\"1\":{\"55\":1}}],[\"initialised\",{\"1\":{\"928\":1}}],[\"initialising\",{\"1\":{\"928\":1}}],[\"initializeropt\",{\"1\":{\"993\":1}}],[\"initializer\",{\"1\":{\"983\":1,\"993\":1}}],[\"initializeenvironment\",{\"1\":{\"118\":1}}],[\"initialized或\",{\"1\":{\"114\":1}}],[\"initial\",{\"1\":{\"55\":1}}],[\"installedmodules\",{\"1\":{\"941\":1}}],[\"install\",{\"1\":{\"895\":2,\"928\":4}}],[\"instability\",{\"1\":{\"880\":1}}],[\"instance\",{\"1\":{\"460\":2,\"627\":2}}],[\"instanceof也可用于确定一个变量是不是实现了某个接口的对象的实例\",{\"1\":{\"362\":1}}],[\"instanceof\",{\"1\":{\"272\":1,\"277\":2,\"362\":8,\"368\":2}}],[\"inst\",{\"1\":{\"549\":1}}],[\"insertbefore\",{\"1\":{\"770\":1}}],[\"insertedvnodequeue\",{\"1\":{\"770\":4}}],[\"inserted\",{\"1\":{\"668\":1,\"737\":1}}],[\"insertmovie\",{\"1\":{\"542\":2}}],[\"insert\",{\"1\":{\"496\":1}}],[\"insecure\",{\"1\":{\"223\":1}}],[\"indexpath\",{\"1\":{\"909\":1}}],[\"indexof\",{\"1\":{\"670\":1}}],[\"index参数数组中的位置\",{\"1\":{\"662\":1}}],[\"indexeddb\",{\"1\":{\"280\":1}}],[\"index\",{\"1\":{\"217\":2,\"409\":1,\"428\":1,\"449\":4,\"496\":1,\"542\":1,\"543\":1,\"570\":3,\"616\":2,\"635\":2,\"662\":2,\"895\":8,\"907\":3,\"909\":2,\"916\":2,\"917\":2,\"918\":2,\"926\":1,\"953\":1,\"954\":1}}],[\"indent\",{\"1\":{\"37\":1}}],[\"intdiv\",{\"1\":{\"374\":1}}],[\"int整型\",{\"0\":{\"372\":1}}],[\"int类型\",{\"1\":{\"367\":1}}],[\"int\",{\"1\":{\"346\":2,\"356\":1,\"368\":5,\"372\":7,\"373\":2,\"374\":4,\"409\":1}}],[\"integer\",{\"1\":{\"386\":1}}],[\"intel\",{\"1\":{\"223\":1}}],[\"interval\",{\"1\":{\"474\":2}}],[\"interface\",{\"1\":{\"351\":1,\"362\":1,\"368\":2,\"645\":1,\"646\":2,\"665\":1}}],[\"intersectionobserver\",{\"1\":{\"285\":1,\"862\":1}}],[\"intersectionratio\",{\"1\":{\"285\":1}}],[\"intersectionrect\",{\"1\":{\"285\":1}}],[\"intersection\",{\"1\":{\"285\":1}}],[\"interconnect\",{\"1\":{\"156\":1}}],[\"internet\",{\"1\":{\"138\":1,\"162\":1}}],[\"intrinsics\",{\"1\":{\"96\":1}}],[\"innertext\",{\"1\":{\"291\":3,\"916\":1,\"917\":1,\"918\":1}}],[\"innerwidth\",{\"1\":{\"285\":1}}],[\"innerheight\",{\"1\":{\"285\":1}}],[\"innerheight||document\",{\"1\":{\"285\":1}}],[\"innerhtml\",{\"1\":{\"251\":1,\"580\":1,\"851\":1}}],[\"inner\",{\"1\":{\"103\":2}}],[\"inltable\",{\"1\":{\"20\":1}}],[\"inlinefunctioncomponent\",{\"1\":{\"555\":2}}],[\"inline\",{\"1\":{\"11\":1,\"12\":1,\"20\":3,\"28\":2,\"555\":2}}],[\"in\",{\"0\":{\"488\":1},\"1\":{\"11\":4,\"12\":1,\"13\":2,\"99\":1,\"121\":2,\"129\":3,\"130\":1,\"254\":1,\"277\":1,\"326\":1,\"330\":1,\"339\":6,\"379\":1,\"484\":1,\"488\":1,\"489\":1,\"634\":3,\"646\":2,\"752\":1,\"753\":1,\"769\":1,\"792\":2,\"793\":1,\"928\":1,\"983\":3,\"984\":3}}],[\"inheritattrs\",{\"1\":{\"696\":2}}],[\"inheritance\",{\"1\":{\"256\":1}}],[\"inherit\",{\"1\":{\"7\":1,\"18\":1}}],[\"immediate\",{\"1\":{\"671\":1}}],[\"immutable可以给\",{\"1\":{\"558\":1}}],[\"immutable通过is方法则可以完成对比\",{\"1\":{\"527\":1,\"558\":1}}],[\"immutable\",{\"0\":{\"558\":1},\"1\":{\"525\":5,\"526\":8,\"527\":3,\"554\":1}}],[\"immutable数据\",{\"0\":{\"525\":1}}],[\"implements\",{\"1\":{\"362\":1,\"368\":1}}],[\"import\",{\"1\":{\"292\":3,\"449\":21,\"466\":1,\"479\":1,\"480\":2,\"485\":1,\"486\":3,\"487\":3,\"488\":2,\"505\":1,\"519\":1,\"520\":1,\"526\":2,\"527\":3,\"550\":1,\"555\":2,\"559\":1,\"560\":4,\"565\":1,\"570\":4,\"574\":2,\"594\":1,\"595\":1,\"599\":1,\"601\":1,\"606\":8,\"608\":2,\"609\":2,\"612\":1,\"634\":1,\"635\":2,\"668\":2,\"670\":1,\"671\":1,\"672\":1,\"858\":3,\"859\":1,\"884\":1,\"895\":2,\"907\":1,\"933\":1,\"936\":2,\"945\":1,\"946\":1,\"947\":1,\"949\":7}}],[\"import和\",{\"1\":{\"113\":1}}],[\"important\",{\"1\":{\"36\":1}}],[\"im\",{\"1\":{\"199\":1}}],[\"images\",{\"1\":{\"7\":3}}],[\"image\",{\"1\":{\"7\":4,\"41\":1,\"52\":1,\"406\":3,\"488\":1,\"861\":1,\"895\":6,\"906\":1}}],[\"img元素\",{\"1\":{\"879\":1}}],[\"img3\",{\"1\":{\"7\":2}}],[\"img2\",{\"1\":{\"7\":2}}],[\"img1\",{\"1\":{\"7\":2}}],[\"img\",{\"1\":{\"7\":1,\"537\":2,\"862\":3,\"936\":1}}],[\"gz文件访问不到的时候\",{\"1\":{\"895\":1}}],[\"gz文件合并成一个文件\",{\"1\":{\"895\":1}}],[\"gz文件\",{\"1\":{\"895\":2}}],[\"gz\",{\"1\":{\"895\":3}}],[\"gzip\",{\"1\":{\"223\":1,\"224\":1,\"895\":18}}],[\"guest<\",{\"1\":{\"555\":2}}],[\"guinness\",{\"1\":{\"406\":1}}],[\"glamorous\",{\"1\":{\"488\":1}}],[\"glo\",{\"1\":{\"103\":5}}],[\"globalapi\",{\"1\":{\"792\":1}}],[\"global\",{\"0\":{\"402\":1},\"1\":{\"123\":2,\"251\":2,\"270\":1,\"402\":2,\"687\":2}}],[\"globaldeclarationinstantiation\",{\"1\":{\"107\":1,\"118\":1}}],[\"globalthisvalue\",{\"1\":{\"117\":1}}],[\"globalthis\",{\"1\":{\"101\":1,\"270\":1}}],[\"globalenv\",{\"1\":{\"96\":1}}],[\"globalobject\",{\"1\":{\"96\":1}}],[\"github仓库链接\",{\"1\":{\"890\":1}}],[\"github实际就可以充当这个服务器角色\",{\"1\":{\"684\":1}}],[\"git自带一个git\",{\"1\":{\"687\":1}}],[\"git常用的命令\",{\"1\":{\"686\":1}}],[\"git就会修改文件的状态\",{\"1\":{\"685\":1}}],[\"git\",{\"1\":{\"685\":1,\"687\":2,\"688\":2,\"689\":9,\"690\":14},\"2\":{\"692\":1}}],[\"git能够知道git用以计算校验和的机制叫做\",{\"1\":{\"685\":1}}],[\"git中所有数据在存储前都计算校验和\",{\"1\":{\"685\":1}}],[\"git==子目录\",{\"1\":{\"685\":1}}],[\"git是一个分布式版本控制软件\",{\"1\":{\"684\":1}}],[\"git是目前世界上最先进的分布式版本控制系统\",{\"1\":{\"682\":1}}],[\"gif哟组合更优秀的算法\",{\"1\":{\"896\":1}}],[\"gif的图片替换为webp格式的图片\",{\"1\":{\"896\":1}}],[\"gif\",{\"1\":{\"406\":1,\"879\":1,\"895\":2}}],[\"gird网格布局和flex弹性布局都简单粗暴\",{\"1\":{\"30\":1}}],[\"goforward\",{\"1\":{\"596\":1}}],[\"going\",{\"1\":{\"331\":2}}],[\"goodbye\",{\"1\":{\"306\":1}}],[\"gamer\",{\"1\":{\"264\":2}}],[\"garbage\",{\"1\":{\"248\":1}}],[\"gc\",{\"1\":{\"248\":1}}],[\"gmt\",{\"1\":{\"223\":1,\"224\":2,\"865\":1}}],[\"generated\",{\"1\":{\"928\":1}}],[\"generators\",{\"1\":{\"928\":5}}],[\"genelement\",{\"1\":{\"753\":1}}],[\"genslot\",{\"1\":{\"753\":1}}],[\"genstatic\",{\"1\":{\"753\":1}}],[\"genchildren\",{\"1\":{\"753\":1}}],[\"genif\",{\"1\":{\"753\":1}}],[\"genfor\",{\"1\":{\"753\":1}}],[\"genonce\",{\"1\":{\"753\":1}}],[\"gecko\",{\"1\":{\"223\":1,\"224\":1}}],[\"getlongip\",{\"1\":{\"909\":1}}],[\"getlist\",{\"1\":{\"292\":3}}],[\"getentriesbytype\",{\"1\":{\"884\":1}}],[\"getentriesbyname\",{\"1\":{\"878\":1}}],[\"getelementbyid\",{\"1\":{\"251\":2,\"273\":1,\"291\":1,\"421\":1,\"449\":1,\"530\":1,\"532\":1,\"537\":1,\"560\":1,\"615\":1,\"851\":2,\"916\":1,\"917\":1,\"918\":1}}],[\"getuserinfo读取用户数据\",{\"1\":{\"829\":1}}],[\"getparentcondition\",{\"1\":{\"760\":1}}],[\"getprice\",{\"1\":{\"414\":1}}],[\"getprice=\",{\"1\":{\"414\":1}}],[\"gethomemultidataaction\",{\"1\":{\"573\":1}}],[\"getstate函数考虑到我们之后的一些操作需要依赖原来的状态\",{\"1\":{\"573\":1}}],[\"getstate\",{\"1\":{\"573\":1,\"575\":4}}],[\"getsnapshotbeforeupdate\",{\"0\":{\"441\":1},\"1\":{\"439\":1,\"441\":2,\"445\":1}}],[\"getip\",{\"1\":{\"909\":1}}],[\"getinitialstate\",{\"1\":{\"527\":2}}],[\"getin\",{\"1\":{\"526\":7}}],[\"getitem\",{\"1\":{\"480\":2}}],[\"getitemprice\",{\"1\":{\"414\":2}}],[\"getderivedstatefromerror\",{\"1\":{\"500\":3}}],[\"getderivedstatefromprops\",{\"0\":{\"436\":1},\"1\":{\"434\":1,\"439\":1,\"445\":1}}],[\"getdata\",{\"1\":{\"251\":1,\"765\":1}}],[\"gettype\",{\"1\":{\"409\":1}}],[\"getarr\",{\"1\":{\"386\":2}}],[\"getboundingclientrect\",{\"1\":{\"285\":2}}],[\"getfriends\",{\"1\":{\"262\":2,\"263\":2}}],[\"getname\",{\"1\":{\"259\":3,\"260\":3,\"261\":2,\"262\":2,\"263\":2,\"264\":4}}],[\"get参数通过url传递\",{\"1\":{\"216\":1}}],[\"get比post更不安全\",{\"1\":{\"216\":1}}],[\"get只接受ascii字符\",{\"1\":{\"216\":1}}],[\"get请求在url中传送的参数是有长度限制的\",{\"1\":{\"216\":1}}],[\"get请求参数会被完整保留在浏览器历史记录里\",{\"1\":{\"216\":1}}],[\"get请求只能进行url编码\",{\"1\":{\"216\":1}}],[\"get请求会被浏览器主动cache\",{\"1\":{\"216\":1}}],[\"get产生的url地址可以被bookmark\",{\"1\":{\"216\":1}}],[\"get在浏览器回退时是无害的\",{\"1\":{\"216\":1}}],[\"get方法请求一个指定资源的表示形式\",{\"1\":{\"215\":1}}],[\"get\",{\"0\":{\"215\":1,\"406\":1},\"1\":{\"200\":1,\"209\":2,\"215\":1,\"217\":4,\"219\":1,\"223\":1,\"277\":2,\"306\":1,\"348\":1,\"349\":2,\"359\":2,\"406\":5,\"409\":3,\"449\":4,\"526\":1,\"527\":1,\"560\":1,\"573\":1,\"662\":1,\"669\":1}}],[\"gpu\",{\"1\":{\"69\":1,\"192\":2}}],[\"groupanimation\",{\"1\":{\"635\":1}}],[\"group是一种很好的解决方案\",{\"1\":{\"632\":1}}],[\"group\",{\"1\":{\"631\":1,\"634\":1,\"635\":1}}],[\"greet\",{\"1\":{\"270\":2,\"662\":2}}],[\"green\",{\"1\":{\"52\":1,\"79\":2,\"80\":1,\"81\":1,\"486\":1}}],[\"grammatical\",{\"1\":{\"983\":1}}],[\"graph\",{\"1\":{\"931\":1,\"941\":1}}],[\"gray\",{\"1\":{\"75\":1}}],[\"gradient\",{\"1\":{\"52\":4,\"90\":4}}],[\"grid网格布局\",{\"0\":{\"30\":1,\"83\":1},\"1\":{\"77\":1}}],[\"grid布局\",{\"1\":{\"24\":1}}],[\"grid\",{\"0\":{\"63\":1},\"1\":{\"20\":2,\"30\":1,\"33\":1,\"83\":2}}],[\"g\",{\"1\":{\"7\":1,\"254\":1,\"382\":2,\"663\":6,\"932\":1}}],[\"svg元素中的image元素\",{\"1\":{\"879\":1}}],[\"svg元素或非白色的canvas元素\",{\"1\":{\"877\":1}}],[\"sfc\",{\"1\":{\"811\":1}}],[\"slot本质上是返回vnode的函数\",{\"1\":{\"807\":1}}],[\"slot\",{\"0\":{\"804\":1},\"1\":{\"753\":1}}],[\"slottarget\",{\"1\":{\"753\":1}}],[\"slice\",{\"1\":{\"272\":1,\"276\":1,\"538\":2,\"608\":2}}],[\"slip\",{\"1\":{\"176\":1}}],[\"s函数的全称是tostring\",{\"1\":{\"748\":1}}],[\"snapshot\",{\"1\":{\"441\":3}}],[\"square\",{\"1\":{\"633\":2}}],[\"sqrt\",{\"1\":{\"403\":1}}],[\"sql\",{\"1\":{\"301\":3}}],[\"sql注入攻击\",{\"0\":{\"301\":1}}],[\"swich组件的作用适用于当匹配到第一个组件的时候\",{\"1\":{\"598\":1}}],[\"swimming\",{\"1\":{\"368\":1}}],[\"swimmable\",{\"1\":{\"368\":3}}],[\"swim\",{\"1\":{\"368\":4}}],[\"switchtab\",{\"1\":{\"832\":1}}],[\"switchtransition>\",{\"1\":{\"634\":1}}],[\"switchtransition组件里面要有csstransition\",{\"1\":{\"634\":1}}],[\"switchtransition中主要有一个属性mode\",{\"1\":{\"634\":1}}],[\"switchtransition可以完成两个组件之间切换的炫酷动画\",{\"1\":{\"634\":1}}],[\"switchtransition\",{\"0\":{\"634\":1},\"1\":{\"632\":1,\"634\":1}}],[\"switchanimation\",{\"1\":{\"634\":1}}],[\"switch>\",{\"1\":{\"598\":1,\"603\":1,\"604\":1}}],[\"switch\",{\"0\":{\"598\":1},\"1\":{\"312\":1,\"313\":2,\"527\":1,\"593\":1,\"606\":1}}],[\"switching\",{\"1\":{\"200\":2}}],[\"spa\",{\"0\":{\"705\":1},\"1\":{\"592\":1,\"705\":1,\"909\":2}}],[\"span\",{\"1\":{\"421\":1,\"538\":1}}],[\"spanning\",{\"1\":{\"382\":2}}],[\"spades\",{\"1\":{\"389\":2}}],[\"space\",{\"1\":{\"82\":1,\"87\":4}}],[\"spacing\",{\"1\":{\"37\":3}}],[\"splitting\",{\"1\":{\"941\":1,\"942\":1}}],[\"splice\",{\"1\":{\"769\":1}}],[\"spl\",{\"1\":{\"351\":3}}],[\"sass\",{\"1\":{\"936\":1,\"948\":2}}],[\"savedata\",{\"1\":{\"858\":1}}],[\"sameinputtype\",{\"1\":{\"770\":1}}],[\"samevnode\",{\"1\":{\"770\":7}}],[\"sara\",{\"1\":{\"621\":1}}],[\"said\",{\"1\":{\"379\":1}}],[\"sayhi\",{\"1\":{\"460\":5}}],[\"say\",{\"1\":{\"333\":1,\"662\":1}}],[\"sat\",{\"1\":{\"224\":1}}],[\"shaking优化\",{\"1\":{\"813\":1}}],[\"sha\",{\"1\":{\"685\":1}}],[\"shallowequal对应方法大致如下\",{\"1\":{\"549\":1}}],[\"shallowequal\",{\"1\":{\"549\":3}}],[\"sharing\",{\"1\":{\"525\":1,\"526\":1}}],[\"shadow可向文本应用阴影\",{\"1\":{\"47\":1}}],[\"shadow\",{\"1\":{\"41\":2,\"47\":1}}],[\"shift集合\",{\"1\":{\"880\":1}}],[\"shift\",{\"1\":{\"355\":2,\"890\":1}}],[\"shell\",{\"1\":{\"333\":2,\"360\":3}}],[\"shouldupdate\",{\"1\":{\"549\":1}}],[\"shouldcomponentupdate\",{\"0\":{\"440\":1,\"548\":1},\"1\":{\"439\":1,\"547\":1,\"549\":1}}],[\"should\",{\"1\":{\"381\":2}}],[\"show切换\",{\"1\":{\"832\":1}}],[\"show的过渡动画\",{\"1\":{\"759\":1}}],[\"show的初始状态\",{\"1\":{\"759\":1}}],[\"show指令的实现\",{\"1\":{\"759\":1}}],[\"show原理\",{\"0\":{\"759\":1}}],[\"show是纯样式控制\",{\"1\":{\"757\":1}}],[\"show只是简单的改变css属性\",{\"1\":{\"757\":1}}],[\"show隐藏是为元素添加css属性display\",{\"1\":{\"757\":1}}],[\"show=\",{\"1\":{\"756\":1}}],[\"show都是用于控制元素显示隐藏的指令\",{\"1\":{\"756\":1}}],[\"showalert\",{\"1\":{\"508\":5}}],[\"showmessage\",{\"1\":{\"461\":5}}],[\"showconstant\",{\"1\":{\"350\":1}}],[\"show\",{\"0\":{\"751\":1,\"755\":1},\"1\":{\"331\":2,\"633\":5,\"752\":1,\"754\":1,\"756\":2,\"759\":1,\"811\":1,\"827\":1}}],[\"short\",{\"1\":{\"330\":5}}],[\"src=\",{\"1\":{\"406\":1,\"449\":2,\"488\":1,\"537\":1,\"769\":1,\"861\":1,\"936\":1}}],[\"src\",{\"1\":{\"287\":1,\"449\":3,\"488\":1,\"537\":1,\"862\":2,\"909\":1,\"926\":1,\"953\":1,\"954\":1}}],[\"srv\",{\"1\":{\"199\":1}}],[\"ssg\",{\"2\":{\"901\":1}}],[\"ssg静态站点生成\",{\"0\":{\"899\":1}}],[\"ssr服务端渲染\",{\"0\":{\"902\":1}}],[\"ssr优化\",{\"1\":{\"818\":1}}],[\"ssr速度提高2~3倍\",{\"1\":{\"816\":1}}],[\"ssr\",{\"0\":{\"448\":1},\"1\":{\"448\":1,\"449\":1,\"908\":2},\"2\":{\"904\":1}}],[\"sso一般需要一个独立的认证中心\",{\"1\":{\"286\":1}}],[\"sso\",{\"1\":{\"286\":1}}],[\"ssl实现\",{\"0\":{\"234\":1}}],[\"ssl证书来验证服务器的身份\",{\"1\":{\"231\":1}}],[\"ssl\",{\"1\":{\"231\":3,\"232\":1,\"234\":1}}],[\"s4\",{\"1\":{\"260\":3}}],[\"s3\",{\"1\":{\"260\":4}}],[\"s3pplmbitxaq9kygzzhzrbk+xoo=sec\",{\"1\":{\"200\":1}}],[\"s2\",{\"1\":{\"258\":2}}],[\"s1\",{\"1\":{\"258\":3}}],[\"support\",{\"1\":{\"928\":1}}],[\"sup\",{\"1\":{\"626\":3}}],[\"super代替的是父类的构建函数\",{\"1\":{\"626\":1}}],[\"super代表的事父类的构造函数\",{\"1\":{\"626\":2}}],[\"superglobals\",{\"1\":{\"326\":1,\"400\":1}}],[\"super\",{\"0\":{\"625\":1},\"1\":{\"264\":2,\"414\":1,\"415\":1,\"454\":1,\"457\":1,\"465\":1,\"466\":1,\"474\":1,\"480\":6,\"485\":1,\"488\":1,\"500\":2,\"505\":1,\"512\":1,\"513\":1,\"519\":1,\"520\":1,\"533\":1,\"566\":1,\"567\":1,\"580\":1,\"581\":1,\"582\":1,\"608\":1,\"612\":1,\"620\":1,\"626\":2,\"627\":2,\"634\":1,\"635\":1,\"650\":1}}],[\"superchat\",{\"1\":{\"200\":1}}],[\"suspense>\",{\"1\":{\"559\":1}}],[\"suspense\",{\"1\":{\"559\":1}}],[\"suit\",{\"1\":{\"389\":3}}],[\"subscribetofriendstatus\",{\"1\":{\"520\":1}}],[\"substitute\",{\"1\":{\"324\":1}}],[\"sub\",{\"1\":{\"406\":5,\"626\":3}}],[\"submit\",{\"1\":{\"406\":6,\"466\":1}}],[\"subclass\",{\"1\":{\"339\":4}}],[\"subject\",{\"1\":{\"313\":1}}],[\"sum\",{\"1\":{\"254\":1,\"323\":2,\"402\":4}}],[\"sumarray\",{\"1\":{\"254\":1}}],[\"smtp\",{\"1\":{\"158\":1,\"168\":1,\"171\":1,\"176\":1}}],[\"symbol\",{\"1\":{\"277\":1,\"640\":1}}],[\"syntax\",{\"1\":{\"382\":2,\"967\":1}}],[\"syntaxerror\",{\"1\":{\"107\":1}}],[\"syn\",{\"1\":{\"243\":8}}],[\"system\",{\"1\":{\"138\":1,\"156\":1}}],[\"s为饱和度\",{\"1\":{\"48\":1}}],[\"simplify\",{\"1\":{\"928\":1}}],[\"simpleclass\",{\"1\":{\"336\":1,\"340\":1}}],[\"simple\",{\"1\":{\"333\":1,\"379\":1}}],[\"sibling\",{\"1\":{\"428\":1,\"429\":1}}],[\"single\",{\"1\":{\"313\":1}}],[\"since标头发送到服务器\",{\"1\":{\"868\":1}}],[\"since和etag\",{\"1\":{\"867\":1}}],[\"since\",{\"1\":{\"147\":1,\"223\":1,\"224\":2,\"226\":2}}],[\"sideeffecttag\",{\"1\":{\"428\":1}}],[\"side\",{\"1\":{\"37\":1}}],[\"sizing\",{\"0\":{\"18\":1},\"1\":{\"18\":4}}],[\"size来表示\",{\"1\":{\"372\":1}}],[\"size的值\",{\"1\":{\"59\":1}}],[\"size属性\",{\"1\":{\"59\":1}}],[\"size属性常用来调整背景图片的大小\",{\"1\":{\"45\":1}}],[\"size和background\",{\"1\":{\"42\":1}}],[\"size\",{\"0\":{\"45\":1},\"1\":{\"7\":5,\"37\":2,\"45\":4,\"56\":1,\"59\":3,\"486\":1,\"488\":1}}],[\"semantics\",{\"0\":{\"967\":1},\"1\":{\"977\":1}}],[\"segment\",{\"1\":{\"858\":2}}],[\"session\",{\"1\":{\"829\":1}}],[\"sessionstorage将会删除数据\",{\"1\":{\"280\":1}}],[\"sessionstorage\",{\"1\":{\"280\":1}}],[\"sex\",{\"1\":{\"646\":1}}],[\"search传递参数\",{\"0\":{\"604\":1},\"1\":{\"602\":1}}],[\"search\",{\"1\":{\"527\":2,\"604\":1,\"605\":1}}],[\"seq\",{\"1\":{\"526\":1,\"984\":1,\"997\":1}}],[\"send\",{\"1\":{\"449\":4}}],[\"sent\",{\"1\":{\"243\":1}}],[\"seo更彻底\",{\"1\":{\"908\":1}}],[\"seo\",{\"1\":{\"448\":1,\"908\":1}}],[\"service\",{\"1\":{\"883\":1}}],[\"serve\",{\"1\":{\"330\":1}}],[\"server\",{\"1\":{\"200\":1,\"449\":4,\"450\":1,\"560\":1,\"895\":4,\"906\":1,\"928\":2}}],[\"serialize\",{\"1\":{\"407\":1}}],[\"select\",{\"1\":{\"881\":1}}],[\"select><br\",{\"1\":{\"406\":1}}],[\"selector\",{\"1\":{\"35\":1}}],[\"selfbutton>\",{\"1\":{\"488\":1}}],[\"selfbutton\",{\"1\":{\"488\":3}}],[\"selflink>\",{\"1\":{\"488\":1}}],[\"selflink\",{\"1\":{\"488\":2}}],[\"self\",{\"1\":{\"350\":1,\"367\":1,\"538\":1,\"699\":1}}],[\"seconds\",{\"1\":{\"474\":5}}],[\"sec\",{\"1\":{\"200\":9}}],[\"section\",{\"1\":{\"7\":1,\"130\":1}}],[\"setup>语法糖\",{\"1\":{\"813\":1}}],[\"set或this\",{\"1\":{\"811\":1}}],[\"setdisplay\",{\"1\":{\"759\":2}}],[\"set方法会调用dep\",{\"1\":{\"732\":1}}],[\"set方法变得不必要\",{\"1\":{\"349\":1}}],[\"setter\",{\"1\":{\"811\":1}}],[\"settled\",{\"1\":{\"670\":1}}],[\"settimeout任务被放进事件队列中\",{\"1\":{\"916\":1}}],[\"settimeout的执行时间并不是确定的\",{\"1\":{\"916\":1}}],[\"settimeout会导致明显的闪屏现象\",{\"1\":{\"916\":1}}],[\"settimeout\",{\"1\":{\"111\":1,\"287\":2,\"461\":2,\"615\":1,\"769\":1,\"845\":1,\"848\":1,\"916\":1}}],[\"setname\",{\"1\":{\"588\":2}}],[\"setnewstatedata\",{\"1\":{\"555\":2}}],[\"setmap\",{\"1\":{\"532\":1}}],[\"setcount\",{\"1\":{\"415\":2,\"458\":2,\"519\":3,\"520\":2,\"588\":2}}],[\"setcookie\",{\"1\":{\"407\":6}}],[\"setstate还可以接受第二个参数\",{\"1\":{\"620\":1}}],[\"setstate是同步\",{\"1\":{\"615\":1}}],[\"setstate是异步\",{\"1\":{\"615\":1}}],[\"setstate的更新类型分成\",{\"1\":{\"613\":1}}],[\"setstate方法更新state状态\",{\"1\":{\"612\":1}}],[\"setstate修改组件的状态时\",{\"1\":{\"474\":1}}],[\"setstate\",{\"0\":{\"612\":1},\"1\":{\"414\":1,\"415\":1,\"437\":1,\"474\":1,\"480\":2,\"500\":1,\"505\":1,\"519\":2,\"520\":1,\"527\":2,\"542\":2,\"555\":2,\"588\":3,\"589\":1,\"608\":1,\"612\":4,\"614\":2,\"615\":2,\"616\":7,\"620\":3,\"633\":1,\"634\":1,\"635\":1}}],[\"setin\",{\"1\":{\"526\":2}}],[\"setinterval\",{\"1\":{\"251\":1,\"474\":1}}],[\"setisonline\",{\"1\":{\"520\":1}}],[\"setitem\",{\"1\":{\"287\":1}}],[\"setimmediate\",{\"1\":{\"101\":1}}],[\"set\",{\"1\":{\"224\":1,\"277\":1,\"348\":1,\"349\":2,\"359\":1,\"526\":2,\"527\":8,\"669\":1,\"714\":1,\"970\":1,\"972\":1,\"997\":4}}],[\"solutions\",{\"1\":{\"928\":2}}],[\"solidus\",{\"1\":{\"1008\":1}}],[\"solid\",{\"1\":{\"11\":1,\"12\":1,\"25\":1,\"30\":1,\"87\":1,\"90\":1,\"488\":1}}],[\"soon\",{\"1\":{\"884\":1}}],[\"sourcecharacter\",{\"1\":{\"999\":1}}],[\"source\",{\"1\":{\"538\":1}}],[\"someobject\",{\"1\":{\"714\":1}}],[\"someobject=object\",{\"1\":{\"714\":1}}],[\"someclassname\",{\"1\":{\"665\":3}}],[\"somecomponent\",{\"1\":{\"479\":1}}],[\"somenamespacename=\",{\"1\":{\"665\":1}}],[\"somenamespacename||\",{\"1\":{\"665\":1}}],[\"somenamespacename\",{\"1\":{\"665\":8}}],[\"some=boolean|string\",{\"1\":{\"644\":1}}],[\"some\",{\"1\":{\"321\":2,\"332\":2,\"381\":4,\"672\":1,\"955\":1}}],[\"someresource\",{\"1\":{\"251\":3}}],[\"something\",{\"1\":{\"247\":1,\"321\":2,\"479\":1}}],[\"social\",{\"1\":{\"224\":1}}],[\"son\",{\"1\":{\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2}}],[\"store\",{\"1\":{\"564\":2,\"572\":1,\"574\":1,\"575\":13,\"866\":1}}],[\"stopimmediatepropagation\",{\"1\":{\"505\":1}}],[\"stoppropagation方法\",{\"1\":{\"699\":1}}],[\"stoppropagation\",{\"1\":{\"505\":1}}],[\"stop\",{\"1\":{\"292\":1,\"699\":1}}],[\"stop2\",{\"1\":{\"52\":1}}],[\"stop1\",{\"1\":{\"52\":1}}],[\"stuttgarter\",{\"1\":{\"406\":1}}],[\"stuff\",{\"1\":{\"389\":2}}],[\"stdclass\",{\"1\":{\"347\":2}}],[\"step\",{\"1\":{\"130\":1}}],[\"staged\",{\"1\":{\"685\":1,\"689\":1}}],[\"stage\",{\"1\":{\"449\":2}}],[\"stack\",{\"1\":{\"427\":1}}],[\"stats\",{\"1\":{\"955\":1}}],[\"staticdir\",{\"1\":{\"909\":1}}],[\"staticprocessed\",{\"1\":{\"753\":1}}],[\"staticroot\",{\"1\":{\"753\":1}}],[\"staticrouter>\",{\"1\":{\"449\":1}}],[\"staticrouter\",{\"1\":{\"449\":1}}],[\"static定义的属性\",{\"1\":{\"652\":1}}],[\"static\",{\"0\":{\"403\":1},\"1\":{\"325\":4,\"345\":1,\"367\":1,\"403\":5,\"416\":1,\"449\":2,\"500\":3,\"538\":1,\"652\":1}}],[\"status进行查询\",{\"1\":{\"685\":1}}],[\"status\",{\"1\":{\"205\":1,\"520\":2,\"689\":1}}],[\"state和props\",{\"0\":{\"619\":1}}],[\"state的浅比较结果来实现\",{\"1\":{\"549\":1}}],[\"state=defaultstate\",{\"1\":{\"527\":1}}],[\"state更新方式\",{\"1\":{\"519\":1}}],[\"state读取方式\",{\"1\":{\"519\":1}}],[\"state声明方式\",{\"1\":{\"519\":1}}],[\"state进行访问\",{\"1\":{\"474\":1}}],[\"state来加一些限制条件\",{\"1\":{\"436\":1}}],[\"statenode\",{\"1\":{\"428\":1}}],[\"statementlistitem\",{\"1\":{\"978\":2,\"986\":1}}],[\"statementlist\",{\"1\":{\"129\":5,\"978\":3,\"986\":2}}],[\"statement\",{\"1\":{\"122\":1,\"330\":1,\"992\":1}}],[\"state\",{\"0\":{\"620\":1},\"1\":{\"13\":1,\"51\":1,\"95\":1,\"414\":2,\"415\":3,\"465\":4,\"474\":4,\"479\":1,\"480\":2,\"500\":5,\"517\":2,\"519\":5,\"520\":5,\"527\":12,\"533\":1,\"542\":4,\"548\":1,\"549\":1,\"566\":3,\"588\":4,\"589\":2,\"605\":1,\"608\":4,\"609\":3,\"612\":5,\"614\":2,\"615\":2,\"616\":8,\"620\":2,\"622\":4,\"633\":3,\"634\":3,\"635\":3,\"753\":8}}],[\"starttime\",{\"1\":{\"878\":1}}],[\"startindex已经大于endindex\",{\"1\":{\"731\":2}}],[\"startindex移动到b\",{\"1\":{\"731\":1}}],[\"startindex移动到a\",{\"1\":{\"731\":1}}],[\"startindex移动到e\",{\"1\":{\"731\":1}}],[\"startpos\",{\"1\":{\"291\":3}}],[\"start\",{\"1\":{\"76\":1,\"254\":2,\"480\":3,\"587\":2}}],[\"strats\",{\"1\":{\"792\":1,\"793\":8}}],[\"strat\",{\"1\":{\"792\":2}}],[\"str\",{\"1\":{\"645\":1}}],[\"structural\",{\"1\":{\"525\":1,\"526\":1}}],[\"structure\",{\"1\":{\"525\":1,\"526\":1}}],[\"strtoupper\",{\"1\":{\"387\":1}}],[\"strtolower\",{\"1\":{\"349\":1}}],[\"strict\",{\"1\":{\"314\":1,\"368\":2,\"1012\":1,\"1013\":2}}],[\"string字面量\",{\"0\":{\"1008\":1}}],[\"string|number\",{\"1\":{\"670\":1}}],[\"string|int|null\",{\"1\":{\"368\":2}}],[\"stringref\",{\"1\":{\"428\":1}}],[\"strings\",{\"1\":{\"379\":1}}],[\"string类型\",{\"0\":{\"1006\":1},\"1\":{\"367\":1}}],[\"stringify\",{\"1\":{\"251\":1,\"277\":1,\"662\":1}}],[\"string\",{\"0\":{\"378\":1},\"1\":{\"130\":1,\"313\":1,\"320\":1,\"321\":2,\"326\":7,\"330\":2,\"337\":1,\"346\":2,\"349\":2,\"368\":7,\"378\":1,\"379\":1,\"381\":1,\"382\":2,\"386\":1,\"406\":1,\"409\":1,\"428\":2,\"538\":1,\"645\":2,\"646\":4,\"649\":2,\"659\":7,\"662\":8,\"663\":2,\"664\":1,\"670\":7,\"671\":2,\"672\":1,\"753\":1,\"793\":2,\"859\":2,\"1008\":3}}],[\"stretch\",{\"1\":{\"76\":1}}],[\"stroke\",{\"1\":{\"47\":2}}],[\"stylesheet\",{\"1\":{\"936\":1}}],[\"styles\",{\"1\":{\"906\":1,\"949\":8}}],[\"styled\",{\"1\":{\"488\":4}}],[\"style=\",{\"1\":{\"485\":2,\"488\":1,\"533\":1}}],[\"style\",{\"1\":{\"8\":2,\"11\":1,\"12\":1,\"37\":5,\"59\":1,\"291\":5,\"483\":1,\"487\":1,\"488\":1,\"689\":1,\"759\":2,\"851\":1,\"906\":1,\"928\":1,\"948\":2,\"949\":4}}],[\"style>\",{\"1\":{\"7\":1,\"8\":1,\"11\":1,\"12\":1,\"15\":1,\"18\":1,\"25\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1,\"75\":1,\"76\":1,\"78\":1,\"79\":1,\"80\":1,\"81\":1,\"82\":1,\"83\":1,\"87\":1,\"89\":1,\"90\":1}}],[\"s\",{\"1\":{\"13\":1,\"326\":1,\"330\":1,\"488\":1,\"752\":1,\"753\":1,\"884\":1}}],[\"skeleton\",{\"1\":{\"911\":1}}],[\"skew\",{\"1\":{\"12\":2,\"50\":1}}],[\"skin=new\",{\"1\":{\"224\":1}}],[\"skyblue\",{\"1\":{\"8\":1,\"26\":1,\"27\":1,\"28\":1,\"29\":1,\"30\":1}}],[\"s或者ms\",{\"1\":{\"11\":1}}],[\"sciptbody\",{\"1\":{\"986\":1}}],[\"sciptbodyopt\",{\"1\":{\"986\":1}}],[\"scm\",{\"1\":{\"680\":1}}],[\"school\",{\"1\":{\"646\":1}}],[\"schwabenbräu<\",{\"1\":{\"406\":1}}],[\"scoped\",{\"1\":{\"483\":1}}],[\"scripts\",{\"1\":{\"927\":1}}],[\"script\",{\"1\":{\"813\":1,\"906\":2,\"954\":1,\"955\":1,\"986\":1}}],[\"script>标签来引入这个bundle文件\",{\"1\":{\"940\":1}}],[\"script>标签等方式加载和运行了\",{\"1\":{\"932\":1}}],[\"script>\",{\"1\":{\"449\":2,\"769\":2,\"851\":1,\"858\":1}}],[\"script共享的最外层作用域\",{\"1\":{\"117\":1}}],[\"scriptcontext\",{\"1\":{\"106\":1}}],[\"scriptormodule\",{\"1\":{\"95\":1}}],[\"screenx\",{\"1\":{\"101\":1}}],[\"screen\",{\"1\":{\"56\":2,\"59\":3}}],[\"scrollhandler\",{\"1\":{\"292\":2}}],[\"scrollheight\",{\"1\":{\"290\":2}}],[\"scroll=\",{\"1\":{\"292\":1}}],[\"scrollarea\",{\"1\":{\"285\":1}}],[\"scrolltop\",{\"1\":{\"285\":2,\"290\":2}}],[\"scrolltop=document\",{\"1\":{\"285\":1}}],[\"scrolltop滚动条距离\",{\"1\":{\"285\":1}}],[\"scrolly\",{\"1\":{\"101\":1,\"292\":1}}],[\"scroll\",{\"1\":{\"7\":1,\"8\":1,\"20\":1,\"292\":12,\"844\":1}}],[\"scrolling\",{\"1\":{\"5\":1}}],[\"scalable\",{\"1\":{\"55\":1}}],[\"scalable=no\",{\"1\":{\"55\":1}}],[\"scale=1\",{\"1\":{\"55\":2}}],[\"scale\",{\"1\":{\"8\":1,\"12\":2,\"50\":1,\"55\":2}}],[\"当文法定义中的冒号后面跟着\",{\"1\":{\"994\":1}}],[\"当文法参数放在代换式左侧时\",{\"1\":{\"985\":1}}],[\"当文件被修改后\",{\"1\":{\"869\":1}}],[\"当模块内容发生变化时\",{\"1\":{\"942\":1}}],[\"当模块被加载并执行后\",{\"1\":{\"941\":1}}],[\"当使用\",{\"1\":{\"925\":1}}],[\"当使用尚未被定义的类\",{\"1\":{\"351\":1}}],[\"当资源加载完成时\",{\"1\":{\"911\":1}}],[\"当资源到期时\",{\"1\":{\"867\":1}}],[\"当网页上渲染的首个内容包含可见区域上的内容时\",{\"1\":{\"886\":1}}],[\"当存在长任务\",{\"1\":{\"885\":1}}],[\"当浏览器需要加载某个模块时\",{\"1\":{\"941\":1}}],[\"当浏览器请求一个网站的时候\",{\"1\":{\"870\":1}}],[\"当浏览器接收到服务器响应的资源后\",{\"1\":{\"192\":1}}],[\"当web应用获取资源时\",{\"1\":{\"864\":1}}],[\"当缓存过期时\",{\"1\":{\"863\":2,\"868\":1,\"869\":1}}],[\"当视图存在交互时\",{\"1\":{\"836\":1}}],[\"当视口在375px\",{\"1\":{\"56\":1}}],[\"当静态内容大到一定量级时候\",{\"1\":{\"818\":1}}],[\"当组件存在与mixin对象相同的选项时\",{\"1\":{\"791\":1}}],[\"当组件使用mixins对象的选项是所有的mixins对象的选项都将被混入该组件本身的选项中来\",{\"1\":{\"788\":1}}],[\"当组件挂载或卸载时\",{\"1\":{\"504\":1}}],[\"当v\",{\"0\":{\"753\":1}}],[\"当元素进入视口时才加载相关资源\",{\"1\":{\"862\":1}}],[\"当元素自身时触发处理函数\",{\"1\":{\"699\":1}}],[\"当元素涉及\",{\"1\":{\"8\":1}}],[\"当做了第一次改变后\",{\"1\":{\"675\":1}}],[\"当多个装饰器应用于一个声明上\",{\"1\":{\"663\":1}}],[\"当多个分支表达式右侧相同时\",{\"1\":{\"313\":1}}],[\"当修饰类的时候\",{\"1\":{\"662\":1}}],[\"当有一组动画的时候\",{\"1\":{\"635\":1}}],[\"当动画结束后才真正移除\",{\"1\":{\"635\":1}}],[\"当动画结束后\",{\"1\":{\"633\":1}}],[\"当动画执行结束后\",{\"1\":{\"633\":1}}],[\"当in属性置为false时\",{\"1\":{\"633\":1}}],[\"当csstransition的in属性置为true时\",{\"1\":{\"633\":1}}],[\"当component\",{\"1\":{\"495\":1}}],[\"当需要做强制更新\",{\"1\":{\"714\":1}}],[\"当需要修改里面的值的状态需要通过调用setstate来改变\",{\"1\":{\"612\":1,\"620\":1}}],[\"当需要时\",{\"1\":{\"466\":1}}],[\"当这个组件出现时\",{\"1\":{\"597\":1}}],[\"当数组的值不发生改变了\",{\"1\":{\"588\":1}}],[\"当数据变化之时\",{\"1\":{\"777\":1}}],[\"当数据发生改变时\",{\"1\":{\"732\":1}}],[\"当数据发生变化时它们会使用接收到的新值\",{\"1\":{\"418\":1}}],[\"当数据被修改时\",{\"1\":{\"525\":1}}],[\"当ref传入为一个函数的时候\",{\"1\":{\"582\":1}}],[\"当action发出之后\",{\"1\":{\"571\":1}}],[\"当abcd节点比较完成后\",{\"1\":{\"496\":1}}],[\"当状态发生修改的时候\",{\"1\":{\"551\":1}}],[\"当没有key的时候\",{\"1\":{\"542\":1}}],[\"当拥有key的时候\",{\"1\":{\"542\":1}}],[\"当首次调用时\",{\"1\":{\"538\":1}}],[\"当首字母为大写时\",{\"1\":{\"537\":1}}],[\"当首字母为小写时\",{\"1\":{\"537\":1}}],[\"当返回true执行render方法\",{\"1\":{\"527\":1,\"558\":1}}],[\"当按钮被点击时\",{\"1\":{\"508\":1}}],[\"当真实\",{\"1\":{\"505\":1}}],[\"当事件发生时\",{\"1\":{\"504\":1}}],[\"当oldindex<maxindex时\",{\"1\":{\"496\":1}}],[\"当oldindex=maxindex时\",{\"1\":{\"496\":1}}],[\"当oldindex>maxindex时\",{\"1\":{\"496\":1}}],[\"当调用vm\",{\"1\":{\"779\":1}}],[\"当调用this\",{\"1\":{\"474\":1}}],[\"当调用静态方法时\",{\"1\":{\"325\":1}}],[\"当请求根目录时\",{\"1\":{\"449\":1}}],[\"当\",{\"1\":{\"427\":1,\"581\":1,\"931\":1}}],[\"当其中一个线程执行时\",{\"1\":{\"427\":1}}],[\"当你在一次操作时\",{\"1\":{\"422\":1}}],[\"当用户点击到子包的目录时\",{\"1\":{\"839\":1}}],[\"当用户点击到图像中的某处时\",{\"1\":{\"406\":1}}],[\"当用户输入新的内容时\",{\"1\":{\"465\":1}}],[\"当用在\",{\"1\":{\"308\":1}}],[\"当提交表单时\",{\"1\":{\"406\":1}}],[\"当包含文件时\",{\"1\":{\"401\":1}}],[\"当包的到达顺序出现乱序时\",{\"1\":{\"181\":1}}],[\"当将其放置在一个\",{\"1\":{\"359\":1}}],[\"当$a小于\",{\"1\":{\"356\":1}}],[\"当覆盖\",{\"1\":{\"341\":1}}],[\"当一个变量有几种可能的取值时\",{\"1\":{\"654\":1}}],[\"当一个表单提交给\",{\"1\":{\"406\":1}}],[\"当一个方法在类定义内部被调用时\",{\"1\":{\"336\":1}}],[\"当一个系统成功登录以后\",{\"1\":{\"286\":1}}],[\"当解析一个文件时\",{\"1\":{\"330\":1}}],[\"当函数被定义而不是被调用的时候继承变量的值\",{\"1\":{\"326\":1}}],[\"当函数调用时\",{\"1\":{\"123\":1}}],[\"当然\",{\"1\":{\"326\":1}}],[\"当前使用的数据\",{\"1\":{\"811\":1}}],[\"当前已经比较完了\",{\"1\":{\"496\":1}}],[\"当前节点在老集合中的下标\",{\"1\":{\"496\":1}}],[\"当前处理过程中的组件props对象\",{\"1\":{\"428\":1}}],[\"当前命名空间的名称\",{\"1\":{\"308\":1}}],[\"当前类的名称\",{\"1\":{\"308\":1}}],[\"当前函数的名称\",{\"1\":{\"308\":1}}],[\"当前应用系统的cookie\",{\"1\":{\"287\":1}}],[\"当前上下文的词法环境恢复为oldenv\",{\"1\":{\"119\":1}}],[\"当本页操作localstorage\",{\"1\":{\"280\":1}}],[\"当触发子节点\",{\"1\":{\"273\":1}}],[\"当试图访问一个对象的属性时\",{\"1\":{\"267\":1}}],[\"当变量离开环境时\",{\"1\":{\"249\":1}}],[\"当变量进入执行环境是\",{\"1\":{\"249\":1}}],[\"当携带参数的时候\",{\"1\":{\"217\":1}}],[\"当不携带参数的时候\",{\"1\":{\"217\":1}}],[\"当页面关闭之后\",{\"1\":{\"191\":1}}],[\"当页面的其余部分滚动时\",{\"1\":{\"7\":1}}],[\"当服务器接收到浏览器的请求之后\",{\"1\":{\"191\":1}}],[\"当建立tcp连接之后\",{\"1\":{\"190\":1}}],[\"当发现文件中存在资源文件的时候\",{\"1\":{\"146\":1}}],[\"当false\",{\"1\":{\"122\":1}}],[\"当在for中使用let\",{\"1\":{\"122\":1}}],[\"当对象包含复杂的数据结构时\",{\"1\":{\"549\":1}}],[\"当对象内文本溢出时显示省略标记\",{\"1\":{\"87\":1}}],[\"当对象内文本溢出部分裁切掉\",{\"1\":{\"87\":1}}],[\"当对一个文档进行布局\",{\"1\":{\"15\":1}}],[\"当我们修改文件的时候\",{\"1\":{\"685\":1}}],[\"当我们通过git\",{\"1\":{\"685\":1}}],[\"当我们的组件需要处理多个互不相关的\",{\"1\":{\"517\":1}}],[\"当我们设置背景图片时\",{\"1\":{\"44\":1}}],[\"当我们在浏览器查看元素时\",{\"1\":{\"15\":1}}],[\"当滚动鼠标滑轮的时候\",{\"1\":{\"5\":1}}],[\"背景都是覆盖整个元素的\",{\"1\":{\"43\":1}}],[\"背景显content区域开始显示\",{\"1\":{\"43\":1}}],[\"背景从padding开始显示\",{\"1\":{\"43\":1}}],[\"背景从border开始显示\",{\"1\":{\"43\":1}}],[\"背景\",{\"0\":{\"42\":1,\"427\":1}}],[\"背景图片\",{\"1\":{\"37\":1}}],[\"背景图像不会移动\",{\"1\":{\"7\":1}}],[\"背景图像会随着页面其余部分的滚动而移动\",{\"1\":{\"7\":1}}],[\"背景属性\",{\"1\":{\"37\":1}}],[\"背景一开始就已经被固定在初始的位置\",{\"1\":{\"7\":1}}],[\"背景也不会随着元素的内容而滚动\",{\"1\":{\"7\":1}}],[\"背景层\",{\"1\":{\"5\":1}}],[\"悬浮层\",{\"1\":{\"5\":1}}],[\"hg\",{\"1\":{\"681\":1}}],[\"huihui\",{\"1\":{\"662\":3}}],[\"href=\",{\"1\":{\"538\":1,\"594\":3,\"595\":3,\"906\":4}}],[\"h3>\",{\"1\":{\"538\":1}}],[\"h\",{\"1\":{\"495\":1,\"932\":1}}],[\"h2>\",{\"1\":{\"486\":1,\"487\":1,\"556\":1,\"612\":1}}],[\"hint\",{\"1\":{\"907\":1}}],[\"history的路由切换会被当成http请求\",{\"1\":{\"693\":1}}],[\"history\",{\"1\":{\"596\":3,\"599\":2,\"606\":1}}],[\"hi\",{\"1\":{\"508\":1}}],[\"highordercomponent\",{\"1\":{\"478\":1}}],[\"higher\",{\"1\":{\"478\":1}}],[\"hid\",{\"1\":{\"421\":1}}],[\"hide\",{\"1\":{\"67\":1,\"71\":1,\"72\":1,\"827\":1}}],[\"hidden和white\",{\"1\":{\"87\":1}}],[\"hidden和text\",{\"1\":{\"87\":1}}],[\"hiddenbox\",{\"1\":{\"70\":1}}],[\"hidden来隐藏其子元素\",{\"1\":{\"70\":1}}],[\"hidden\",{\"0\":{\"68\":1},\"1\":{\"8\":2,\"20\":1,\"66\":1,\"68\":2,\"70\":1,\"72\":1,\"75\":1,\"78\":1,\"87\":1,\"89\":3,\"90\":3,\"251\":1}}],[\"hydrate\",{\"1\":{\"449\":1}}],[\"hypertext\",{\"1\":{\"230\":1}}],[\"hclass\",{\"1\":{\"421\":1}}],[\"have\",{\"1\":{\"379\":1}}],[\"has\",{\"1\":{\"928\":1}}],[\"hasown\",{\"1\":{\"792\":1}}],[\"hasownproperty\",{\"1\":{\"254\":1,\"277\":1,\"549\":3}}],[\"haserror\",{\"1\":{\"500\":3}}],[\"hashchange\",{\"1\":{\"607\":2,\"608\":2}}],[\"hashrouter包裹了整应用\",{\"1\":{\"608\":1}}],[\"hashrouter模式\",{\"1\":{\"594\":1}}],[\"hashrouter\",{\"0\":{\"594\":1,\"608\":1},\"1\":{\"593\":1,\"606\":3,\"608\":2}}],[\"hash\",{\"1\":{\"277\":4,\"606\":1,\"607\":2,\"608\":4,\"685\":1}}],[\"hash=new\",{\"1\":{\"277\":1}}],[\"handleinputchange\",{\"1\":{\"696\":1}}],[\"handlewrapperclick\",{\"1\":{\"696\":1}}],[\"handlename\",{\"1\":{\"621\":1}}],[\"handleadd\",{\"1\":{\"527\":2}}],[\"handlestatuschange\",{\"1\":{\"520\":3}}],[\"handlesubmit\",{\"1\":{\"466\":2}}],[\"handleclick\",{\"1\":{\"461\":4,\"500\":4,\"504\":7,\"510\":2,\"511\":2,\"512\":4,\"513\":2,\"616\":1}}],[\"handle\",{\"1\":{\"428\":1,\"696\":1}}],[\"handler\",{\"1\":{\"273\":3,\"315\":3,\"359\":1}}],[\"handshake\",{\"1\":{\"243\":1}}],[\"hala分为四部分\",{\"1\":{\"48\":1}}],[\"hdlc\",{\"1\":{\"176\":1}}],[\"here\",{\"1\":{\"998\":2}}],[\"heredoc结构\",{\"0\":{\"381\":1}}],[\"heredoc\",{\"1\":{\"378\":1,\"381\":2}}],[\"hexintegerliteral\",{\"1\":{\"991\":1}}],[\"help\",{\"1\":{\"909\":1}}],[\"hellodecorator\",{\"1\":{\"669\":1}}],[\"hellomessage\",{\"1\":{\"530\":1,\"627\":1}}],[\"hellocomponent\",{\"1\":{\"472\":1,\"473\":1}}],[\"hello\",{\"1\":{\"250\":1,\"306\":3,\"326\":10,\"330\":1,\"404\":2,\"421\":1,\"449\":1,\"459\":1,\"473\":1,\"530\":2,\"532\":2,\"537\":1,\"580\":1,\"587\":2,\"612\":1,\"614\":1,\"662\":1,\"672\":1}}],[\"heavy\",{\"1\":{\"858\":1}}],[\"hearts\",{\"1\":{\"389\":1}}],[\"headless\",{\"1\":{\"909\":2}}],[\"head><body>\",{\"1\":{\"560\":1}}],[\"head>\",{\"1\":{\"449\":4}}],[\"header中添加vary\",{\"1\":{\"895\":2}}],[\"header>\",{\"1\":{\"587\":1}}],[\"header加上if\",{\"1\":{\"226\":1}}],[\"header\",{\"1\":{\"223\":1,\"333\":1,\"407\":1,\"533\":1,\"556\":1,\"587\":1}}],[\"header和data一并发送出去\",{\"1\":{\"220\":1}}],[\"head\",{\"1\":{\"163\":1,\"209\":1}}],[\"height属性\",{\"1\":{\"285\":1}}],[\"height和width等影响元素盒模型的属性设置成0\",{\"1\":{\"70\":1}}],[\"height\",{\"1\":{\"7\":3,\"8\":6,\"11\":3,\"12\":2,\"15\":1,\"16\":2,\"17\":2,\"18\":3,\"25\":2,\"26\":2,\"27\":2,\"28\":2,\"29\":2,\"30\":2,\"32\":2,\"37\":1,\"57\":1,\"70\":1,\"75\":2,\"78\":4,\"79\":2,\"80\":2,\"81\":2,\"82\":1,\"83\":1,\"87\":2,\"89\":4,\"90\":6,\"488\":2,\"605\":1}}],[\"hook修改状态\",{\"1\":{\"588\":1}}],[\"hook是通过\",{\"1\":{\"579\":1}}],[\"hook\",{\"1\":{\"517\":1,\"956\":2}}],[\"hooks\",{\"0\":{\"517\":1,\"521\":1},\"1\":{\"956\":1}}],[\"hooks的出现\",{\"1\":{\"475\":1,\"522\":1}}],[\"hooks出来之前\",{\"1\":{\"472\":1,\"474\":1}}],[\"home<\",{\"1\":{\"596\":1,\"599\":1}}],[\"home\",{\"1\":{\"223\":1,\"449\":9,\"480\":2,\"486\":2,\"487\":2,\"527\":3,\"598\":1,\"606\":3,\"909\":1}}],[\"hosts\",{\"1\":{\"141\":1}}],[\"host\",{\"1\":{\"98\":1,\"200\":1,\"217\":2,\"223\":1,\"224\":3}}],[\"hostdefined\",{\"1\":{\"96\":1}}],[\"hover\",{\"1\":{\"11\":1,\"12\":1,\"35\":1}}],[\"h为色相\",{\"1\":{\"48\":1}}],[\"h6标签字体的大下也是不能被继承的\",{\"1\":{\"37\":1}}],[\"h1>\",{\"1\":{\"333\":1,\"421\":1,\"454\":1,\"455\":1,\"457\":2,\"459\":2,\"480\":1,\"500\":2,\"533\":1,\"555\":2,\"556\":1,\"587\":2,\"588\":4,\"595\":1,\"596\":1,\"597\":1,\"599\":1,\"600\":1,\"601\":1,\"621\":1}}],[\"h1\",{\"1\":{\"37\":1,\"421\":1}}],[\"htm\",{\"1\":{\"895\":2}}],[\"htmlwebpackplugin\",{\"1\":{\"907\":2,\"953\":2,\"954\":3}}],[\"html$|\",{\"1\":{\"895\":1}}],[\"html文档\",{\"1\":{\"870\":1}}],[\"html字符串在把最终的\",{\"1\":{\"450\":1}}],[\"html字符转为html实体字符\",{\"1\":{\"406\":1}}],[\"html><html><head><title>my\",{\"1\":{\"560\":1}}],[\"html>\",{\"1\":{\"449\":4,\"560\":1}}],[\"html表单\",{\"0\":{\"406\":1}}],[\"html401\",{\"1\":{\"324\":1}}],[\"htmlspecialchars将特定的\",{\"1\":{\"406\":1}}],[\"htmlspecialchars\",{\"1\":{\"324\":2,\"406\":1}}],[\"html\",{\"1\":{\"8\":1,\"59\":3,\"217\":2,\"223\":3,\"287\":1,\"292\":1,\"329\":1,\"333\":2,\"406\":1,\"448\":1,\"450\":2,\"693\":1,\"881\":1,\"895\":6,\"907\":3,\"909\":1,\"928\":2,\"936\":1,\"953\":4,\"954\":3}}],[\"html5的loading属性\",{\"0\":{\"861\":1}}],[\"html5\",{\"0\":{\"3\":1}}],[\"httpd\",{\"1\":{\"895\":2}}],[\"http就拥有了https的加密\",{\"1\":{\"233\":1}}],[\"http安全隐患\",{\"1\":{\"233\":1}}],[\"http是80\",{\"1\":{\"232\":1}}],[\"http允许传输任意类型的数据对象\",{\"1\":{\"230\":1}}],[\"http常被用于在web浏览器和网站服务器之间传递信息\",{\"1\":{\"230\":1}}],[\"http和https\",{\"0\":{\"230\":1}}],[\"http头部字段可以自己根据需要定义\",{\"1\":{\"223\":1}}],[\"http头字段\",{\"1\":{\"223\":1}}],[\"http协议的数据传输是明文的\",{\"1\":{\"232\":1}}],[\"http协议的第二个版本\",{\"1\":{\"146\":1}}],[\"http协议无法根据之前的状态进行本次的请求处理\",{\"1\":{\"230\":1}}],[\"http协议规范\",{\"1\":{\"217\":1}}],[\"http状态码的作用是服务器告诉客户端当前请求响应的状态\",{\"1\":{\"205\":1}}],[\"http状态码\",{\"1\":{\"205\":1}}],[\"http2引入服务器推送\",{\"1\":{\"152\":1}}],[\"http2\",{\"0\":{\"148\":1},\"1\":{\"150\":1,\"153\":1,\"906\":2}}],[\"http\",{\"0\":{\"190\":1,\"407\":1},\"1\":{\"146\":1,\"147\":1,\"149\":1,\"150\":2,\"151\":1,\"158\":1,\"176\":1,\"186\":1,\"190\":1,\"195\":1,\"198\":2,\"200\":4,\"205\":1,\"211\":2,\"217\":6,\"218\":1,\"219\":1,\"223\":3,\"224\":1,\"230\":1,\"231\":1,\"232\":2,\"287\":2,\"406\":1,\"407\":1,\"409\":1,\"573\":1,\"895\":4}}],[\"http1\",{\"0\":{\"145\":1,\"146\":1,\"147\":1},\"1\":{\"147\":1,\"153\":2}}],[\"https为何安全\",{\"0\":{\"233\":1}}],[\"https需要ssl\",{\"1\":{\"232\":1}}],[\"https是建立在ssl之上\",{\"1\":{\"233\":1}}],[\"https是443\",{\"1\":{\"232\":1}}],[\"https是http协议的安全版本\",{\"1\":{\"232\":1}}],[\"https使用了ssl\",{\"1\":{\"232\":1}}],[\"https出现是为了解决http不安全的特性\",{\"1\":{\"231\":1}}],[\"https\",{\"0\":{\"231\":1},\"1\":{\"7\":3,\"223\":1,\"231\":1,\"232\":2}}],[\"htnl\",{\"2\":{\"2\":1,\"962\":1}}],[\"h5的新增属性\",{\"1\":{\"861\":1}}],[\"h5\",{\"0\":{\"1\":1},\"2\":{\"4\":1,\"960\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,Mt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=St[s];e==="suggest"?self.postMessage([e,o,et(t,r,n)]):e==="search"?self.postMessage([e,o,tt(t,r,n)]):self.postMessage({suggestions:[e,o,et(t,r,n)],results:[e,o,tt(t,r,n)]})};
//# sourceMappingURL=index.js.map
