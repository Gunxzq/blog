[...new Array(6)].map((e,t)=>`[vp-content] h${t+1}`).join(",");const{entries:$}=Object,{fromEntries:st}=Object,nt="ENTRIES",D="KEYS",W="VALUES",_="";class F{set;_type;_path;constructor(t,s){const n=t._tree,o=Array.from(n.keys());this.set=t,this._type=s,this._path=o.length>0?[{node:n,keys:o}]:[]}next(){const t=this.dive();return this.backtrack(),t}dive(){if(this._path.length===0)return{done:!0,value:void 0};const{node:t,keys:s}=b(this._path);if(b(s)===_)return{done:!1,value:this.result()};const n=t.get(b(s));return this._path.push({node:n,keys:Array.from(n.keys())}),this.dive()}backtrack(){if(this._path.length===0)return;const t=b(this._path).keys;t.pop(),!(t.length>0)&&(this._path.pop(),this.backtrack())}key(){return this.set._prefix+this._path.map(({keys:t})=>b(t)).filter(t=>t!==_).join("")}value(){return b(this._path).node.get(_)}result(){switch(this._type){case W:return this.value();case D:return this.key();default:return[this.key(),this.value()]}}[Symbol.iterator](){return this}}const b=e=>e[e.length-1],ot=(e,t,s)=>{const n=new Map;if(typeof t!="string")return n;const o=t.length+1,r=o+s,i=new Uint8Array(r*o).fill(s+1);for(let c=0;c<o;++c)i[c]=c;for(let c=1;c<r;++c)i[c*o]=c;return q(e,t,s,n,i,1,o,""),n},q=(e,t,s,n,o,r,i,c)=>{const h=r*i;t:for(const u of e.keys())if(u===_){const d=o[h-1];d<=s&&n.set(c,[e.get(u),d])}else{let d=r;for(let a=0;a<u.length;++a,++d){const m=u[a],g=i*d,y=g-i;let l=o[g];const f=Math.max(0,d-s-1),w=Math.min(i-1,d+s);for(let p=f;p<w;++p){const C=m!==t[p],S=o[y+p]+ +C,I=o[y+p+1]+1,x=o[g+p]+1,k=o[g+p+1]=Math.min(S,I,x);k<l&&(l=k)}if(l>s)continue t}q(e.get(u),t,s,n,o,d,i,c+u)}};class z{_tree;_prefix;_size=void 0;constructor(t=new Map,s=""){this._tree=t,this._prefix=s}atPrefix(t){if(!t.startsWith(this._prefix))throw new Error("Mismatched prefix");const[s,n]=M(this._tree,t.slice(this._prefix.length));if(s===void 0){const[o,r]=L(n);for(const i of o.keys())if(i!==_&&i.startsWith(r)){const c=new Map;return c.set(i.slice(r.length),o.get(i)),new z(c,t)}}return new z(s,t)}clear(){this._size=void 0,this._tree.clear()}delete(t){return this._size=void 0,rt(this._tree,t)}entries(){return new F(this,nt)}forEach(t){for(const[s,n]of this)t(s,n,this)}fuzzyGet(t,s){return ot(this._tree,t,s)}get(t){const s=v(this._tree,t);return s!==void 0?s.get(_):void 0}has(t){return v(this._tree,t)?.has(_)??!1}keys(){return new F(this,D)}set(t,s){if(typeof t!="string")throw new Error("key must be a string");return this._size=void 0,E(this._tree,t).set(_,s),this}get size(){if(this._size)return this._size;this._size=0;const t=this.entries();for(;!t.next().done;)this._size+=1;return this._size}update(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);return n.set(_,s(n.get(_))),this}fetch(t,s){if(typeof t!="string")throw new Error("key must be a string");this._size=void 0;const n=E(this._tree,t);let o=n.get(_);return o===void 0&&n.set(_,o=s()),o}values(){return new F(this,W)}[Symbol.iterator](){return this.entries()}static from(t){const s=new z;for(const[n,o]of t)s.set(n,o);return s}static fromObject(t){return z.from(Object.entries(t))}}const M=(e,t,s=[])=>{if(t.length===0||e==null)return[e,s];for(const n of e.keys())if(n!==_&&t.startsWith(n))return s.push([e,n]),M(e.get(n),t.slice(n.length),s);return s.push([e,t]),M(void 0,"",s)},v=(e,t)=>{if(t.length===0||!e)return e;for(const s of e.keys())if(s!==_&&t.startsWith(s))return v(e.get(s),t.slice(s.length))},E=(e,t)=>{const s=t.length;t:for(let n=0;e&&n<s;){for(const r of e.keys())if(r!==_&&t[n]===r[0]){const i=Math.min(s-n,r.length);let c=1;for(;c<i&&t[n+c]===r[c];)++c;const h=e.get(r);if(c===r.length)e=h;else{const u=new Map;u.set(r.slice(c),h),e.set(t.slice(n,n+c),u),e.delete(r),e=u}n+=c;continue t}const o=new Map;return e.set(t.slice(n),o),o}return e},rt=(e,t)=>{const[s,n]=M(e,t);if(s!==void 0){if(s.delete(_),s.size===0)A(n);else if(s.size===1){const[o,r]=s.entries().next().value;R(n,o,r)}}},A=e=>{if(e.length===0)return;const[t,s]=L(e);if(t.delete(s),t.size===0)A(e.slice(0,-1));else if(t.size===1){const[n,o]=t.entries().next().value;n!==_&&R(e.slice(0,-1),n,o)}},R=(e,t,s)=>{if(e.length===0)return;const[n,o]=L(e);n.set(o+t,s),n.delete(o)},L=e=>e[e.length-1],it=(e,t)=>{const s=e._idToShortId.get(t);if(s!=null)return e._storedFields.get(s)},ct=/[\n\r\p{Z}\p{P}]+/u,j="or",N="and",ut="and_not",dt=(e,t)=>{e.includes(t)||e.push(t)},B=(e,t)=>{for(const s of t)e.includes(s)||e.push(s)},P=({score:e},{score:t})=>t-e,ht=()=>new Map,O=e=>{const t=new Map;for(const s of Object.keys(e))t.set(parseInt(s,10),e[s]);return t},G=(e,t)=>Object.prototype.hasOwnProperty.call(e,t)?e[t]:void 0,H={[j]:(e,t)=>{for(const s of t.keys()){const n=e.get(s);if(n==null)e.set(s,t.get(s));else{const{score:o,terms:r,match:i}=t.get(s);n.score=n.score+o,n.match=Object.assign(n.match,i),B(n.terms,r)}}return e},[N]:(e,t)=>{const s=new Map;for(const n of t.keys()){const o=e.get(n);if(o==null)continue;const{score:r,terms:i,match:c}=t.get(n);B(o.terms,i),s.set(n,{score:o.score+r,terms:o.terms,match:Object.assign(o.match,c)})}return s},[ut]:(e,t)=>{for(const s of t.keys())e.delete(s);return e}},lt=(e,t,s,n,o,r)=>{const{k:i,b:c,d:h}=r;return Math.log(1+(s-t+.5)/(t+.5))*(h+e*(i+1)/(e+i*(1-c+c*n/o)))},ft=e=>(t,s,n)=>({term:t,fuzzy:typeof e.fuzzy=="function"?e.fuzzy(t,s,n):e.fuzzy??!1,prefix:typeof e.prefix=="function"?e.prefix(t,s,n):e.prefix===!0,termBoost:typeof e.boostTerm=="function"?e.boostTerm(t,s,n):1}),J=(e,t,s,n)=>{for(const o of Object.keys(e._fieldIds))if(e._fieldIds[o]===s){e._options.logger("warn",`SlimSearch: document with ID ${e._documentIds.get(t)} has changed before removal: term "${n}" was not present in field "${o}". Removing a document after it has changed can corrupt the index!`,"version_conflict");return}},at=(e,t,s,n)=>{if(!e._index.has(n)){J(e,s,t,n);return}const o=e._index.fetch(n,ht),r=o.get(t),i=r?.get(s);!r||typeof i>"u"?J(e,s,t,n):i<=1?r.size<=1?o.delete(t):r.delete(s):r.set(s,i-1),e._index.get(n).size===0&&e._index.delete(n)},mt={k:1.2,b:.7,d:.5},gt={idField:"id",extractField:(e,t)=>e[t],tokenize:e=>e.split(ct),processTerm:e=>e.toLowerCase(),fields:void 0,searchOptions:void 0,storeFields:[],logger:(e,t)=>{console?.[e]?.(t)},autoVacuum:!0},Y={combineWith:j,prefix:!1,fuzzy:!1,maxFuzzy:6,boost:{},weights:{fuzzy:.45,prefix:.375},bm25:mt},pt={combineWith:N,prefix:(e,t,s)=>t===s.length-1},_t={batchSize:1e3,batchWait:10},K={minDirtFactor:.1,minDirtCount:20},yt={..._t,...K},U=Symbol("*"),wt=(e,t)=>{const s=new Map,n={...e._options.searchOptions,...t};for(const[o,r]of e._documentIds){const i=n.boostDocument?n.boostDocument(r,"",e._storedFields.get(o)):1;s.set(o,{score:i,terms:[],match:{}})}return s},Q=(e,t=j)=>{if(e.length===0)return new Map;const s=t.toLowerCase();if(!(s in H))throw new Error(`Invalid combination operator: ${t}`);return e.reduce(H[s])},T=(e,t,s,n,o,r,i,c,h,u=new Map)=>{if(r==null)return u;for(const d of Object.keys(i)){const a=i[d],m=e._fieldIds[d],g=r.get(m);if(g==null)continue;let y=g.size;const l=e._avgFieldLength[m];for(const f of g.keys()){if(!e._documentIds.has(f)){at(e,m,f,s),y-=1;continue}const w=c?c(e._documentIds.get(f),s,e._storedFields.get(f)):1;if(!w)continue;const p=g.get(f),C=e._fieldLength.get(f)[m],S=lt(p,y,e._documentCount,C,l,h),I=n*o*a*w*S,x=u.get(f);if(x){x.score+=I,dt(x.terms,t);const k=G(x.match,s);k?k.push(d):x.match[s]=[d]}else u.set(f,{score:I,terms:[t],match:{[s]:[d]}})}}return u},xt=(e,t,s)=>{const n={...e._options.searchOptions,...s},o=(n.fields??e._options.fields).reduce((l,f)=>({...l,[f]:G(n.boost,f)||1}),{}),{boostDocument:r,weights:i,maxFuzzy:c,bm25:h}=n,{fuzzy:u,prefix:d}={...Y.weights,...i},a=e._index.get(t.term),m=T(e,t.term,t.term,1,t.termBoost,a,o,r,h);let g,y;if(t.prefix&&(g=e._index.atPrefix(t.term)),t.fuzzy){const l=t.fuzzy===!0?.2:t.fuzzy,f=l<1?Math.min(c,Math.round(t.term.length*l)):l;f&&(y=e._index.fuzzyGet(t.term,f))}if(g)for(const[l,f]of g){const w=l.length-t.term.length;if(!w)continue;y?.delete(l);const p=d*l.length/(l.length+.3*w);T(e,t.term,l,p,t.termBoost,f,o,r,h,m)}if(y)for(const l of y.keys()){const[f,w]=y.get(l);if(!w)continue;const p=u*l.length/(l.length+w);T(e,t.term,l,p,t.termBoost,f,o,r,h,m)}return m},X=(e,t,s={})=>{if(t===U)return wt(e,s);if(typeof t!="string"){const d={...s,...t,queries:void 0},a=t.queries.map(m=>X(e,m,d));return Q(a,d.combineWith)}const{tokenize:n,processTerm:o,searchOptions:r}=e._options,i={tokenize:n,processTerm:o,...r,...s},{tokenize:c,processTerm:h}=i,u=c(t).flatMap(d=>h(d)).filter(d=>!!d).map(ft(i)).map(d=>xt(e,d,i));return Q(u,i.combineWith)},Z=(e,t,s={})=>{const{searchOptions:n}=e._options,o={...n,...s},r=X(e,t,s),i=[];for(const[c,{score:h,terms:u,match:d}]of r){const a=u.length||1,m={id:e._documentIds.get(c),score:h*a,terms:Object.keys(d),queryTerms:u,match:d};Object.assign(m,e._storedFields.get(c)),(o.filter==null||o.filter(m))&&i.push(m)}return t===U&&o.boostDocument==null||i.sort(P),i},zt=(e,t,s={})=>{s={...e._options.autoSuggestOptions,...s};const n=new Map;for(const{score:r,terms:i}of Z(e,t,s)){const c=i.join(" "),h=n.get(c);h!=null?(h.score+=r,h.count+=1):n.set(c,{score:r,terms:i,count:1})}const o=[];for(const[r,{score:i,terms:c,count:h}]of n)o.push({suggestion:r,terms:c,score:i/h});return o.sort(P),o};class bt{_options;_index;_documentCount;_documentIds;_idToShortId;_fieldIds;_fieldLength;_avgFieldLength;_nextId;_storedFields;_dirtCount;_currentVacuum;_enqueuedVacuum;_enqueuedVacuumConditions;constructor(t){if(!t?.fields)throw new Error('SlimSearch: option "fields" must be provided');const s=t.autoVacuum==null||t.autoVacuum===!0?yt:t.autoVacuum;this._options={...gt,...t,autoVacuum:s,searchOptions:{...Y,...t.searchOptions},autoSuggestOptions:{...pt,...t.autoSuggestOptions}},this._index=new z,this._documentCount=0,this._documentIds=new Map,this._idToShortId=new Map,this._fieldIds={},this._fieldLength=new Map,this._avgFieldLength=[],this._nextId=0,this._storedFields=new Map,this._dirtCount=0,this._currentVacuum=null,this._enqueuedVacuum=null,this._enqueuedVacuumConditions=K,this.addFields(this._options.fields)}get isVacuuming(){return this._currentVacuum!=null}get dirtCount(){return this._dirtCount}get dirtFactor(){return this._dirtCount/(1+this._documentCount+this._dirtCount)}get documentCount(){return this._documentCount}get termCount(){return this._index.size}toJSON(){const t=[];for(const[s,n]of this._index){const o={};for(const[r,i]of n)o[r]=Object.fromEntries(i);t.push([s,o])}return{documentCount:this._documentCount,nextId:this._nextId,documentIds:Object.fromEntries(this._documentIds),fieldIds:this._fieldIds,fieldLength:Object.fromEntries(this._fieldLength),averageFieldLength:this._avgFieldLength,storedFields:Object.fromEntries(this._storedFields),dirtCount:this._dirtCount,index:t,version:2}}addFields(t){for(let s=0;s<t.length;s++)this._fieldIds[t[s]]=s}}const kt=e=>new bt(e),It=({documentCount:e,nextId:t,fieldIds:s,averageFieldLength:n,dirtCount:o,version:r},i)=>{if(r!==2)throw new Error("SlimSearch: cannot deserialize an index created with an incompatible version");const c=kt(i);return c._documentCount=e,c._nextId=t,c._idToShortId=new Map,c._fieldIds=s,c._avgFieldLength=n,c._dirtCount=o??0,c._index=new z,c},Mt=(e,t)=>{const{index:s,documentIds:n,fieldLength:o,storedFields:r}=e,i=It(e,t);i._documentIds=O(n),i._fieldLength=O(o),i._storedFields=O(r);for(const[c,h]of i._documentIds)i._idToShortId.set(h,c);for(const[c,h]of s){const u=new Map;for(const d of Object.keys(h))u.set(parseInt(d,10),O(h[d]));i._index.set(c,u)}return i},V=(e,t)=>{const s=e.toLowerCase(),n=t.toLowerCase(),o=[];let r=0,i=0;const c=(u,d=!1)=>{let a;i===0?a=u.length>20?`… ${u.slice(-20)}`:u:d?a=u.length+i>100?`${u.slice(0,100-i)}… `:u:a=u.length>20?`${u.slice(0,20)} … ${u.slice(-20)}`:u,a&&o.push(a),i+=a.length,d||(o.push(["mark",t]),i+=t.length,i>=100&&o.push(" …"))};let h=s.indexOf(n,r);if(h===-1)return null;for(;h>=0;){const u=h+n.length;if(c(e.slice(r,h)),r=u,i>100)break;h=s.indexOf(n,r)}return i<100&&c(e.slice(r),!0),o},Ot=(e,t)=>t.contents.reduce((s,[,n])=>s+n,0)-e.contents.reduce((s,[,n])=>s+n,0),Ct=(e,t)=>Math.max(...t.contents.map(([,s])=>s))-Math.max(...e.contents.map(([,s])=>s)),tt=(e,t,s={})=>{const n={};return Z(t,e,{boost:{h:2,t:1,c:4},prefix:!0,...s}).forEach(o=>{const{id:r,terms:i,score:c}=o,h=r.includes("@"),u=r.includes("#"),[d,a]=r.split(/[#@]/),m=Number(d),g=i.sort((l,f)=>l.length-f.length).filter((l,f)=>i.slice(f+1).every(w=>!w.includes(l))),{contents:y}=n[m]??={title:"",contents:[]};if(h)y.push([{type:"customField",id:m,index:a,display:g.map(l=>o.c.map(f=>V(f,l))).flat().filter(l=>l!==null)},c]);else{const l=g.map(f=>V(o.h,f)).filter(f=>f!==null);if(l.length&&y.push([{type:u?"heading":"title",id:m,...u&&{anchor:a},display:l},c]),"t"in o&&o.t)for(const f of o.t){const w=g.map(p=>V(f,p)).filter(p=>p!==null);w.length&&y.push([{type:"text",id:m,...u&&{anchor:a},display:w},c])}}}),$(n).sort(([,o],[,r])=>"max"==="total"?Ot(o,r):Ct(o,r)).map(([o,{title:r,contents:i}])=>{if(!r){const c=it(t,o);c&&(r=c.h)}return{title:r,contents:i.map(([c])=>c)}})},et=(e,t,s={})=>{const n=zt(t,e,{fuzzy:.2,maxFuzzy:3,...s}).map(({suggestion:o})=>o);return e.includes(" ")?n:n.filter(o=>!o.includes(" "))},St=st($(JSON.parse("{\"/\":{\"documentCount\":710,\"nextId\":710,\"documentIds\":{\"0\":\"1\",\"1\":\"2\",\"2\":\"2@0\",\"3\":\"3\",\"4\":\"3@0\",\"5\":\"4\",\"6\":\"4@0\",\"7\":\"5\",\"8\":\"5#agent-程序的执行环境\",\"9\":\"5#执行上下文栈-调用栈\",\"10\":\"5#执行上下文-代码的执行环境\",\"11\":\"5#realm-执行所需的资源总和\",\"12\":\"5@0\",\"13\":\"6\",\"14\":\"6#宿主提供的资源\",\"15\":\"6#宿主内置对象\",\"16\":\"6#宿主对全局对象的扩展\",\"17\":\"6@0\",\"18\":\"7\",\"19\":\"7#初始化realm环境-initializehostdefinedrealm\",\"20\":\"7#解析脚本\",\"21\":\"7#脚本求值\",\"22\":\"7#全局声明实例化\",\"23\":\"7@0\",\"24\":\"8\",\"25\":\"8@0\",\"26\":\"9\",\"27\":\"9#环境记录器\",\"28\":\"9#声明式环境记录\",\"29\":\"9#函数环境记录\",\"30\":\"9#模块环境记录\",\"31\":\"9#对象环境记录\",\"32\":\"9#全局环境记录器\",\"33\":\"9#作用域的分析\",\"34\":\"9#块级求值\",\"35\":\"9#blockdeclarationinstantiation\",\"36\":\"9#for求值\",\"37\":\"9#for求值-1\",\"38\":\"9#函数求值\",\"39\":\"9#闭包\",\"40\":\"9@0\",\"41\":\"9@1\",\"42\":\"10\",\"43\":\"10#产生式、非终结-production\",\"44\":\"10#文法参数-grammatical-parameters\",\"45\":\"10#伪代码\",\"46\":\"10@0\",\"47\":\"11\",\"48\":\"11#预定义常量\",\"49\":\"11#魔术常量\",\"50\":\"11@0\",\"51\":\"11@1\",\"52\":\"12\",\"53\":\"12#替代语法\",\"54\":\"12#match-php8\",\"55\":\"12#declare-php-4-php-5-php-7-php-8\",\"56\":\"12#ticks\",\"57\":\"12#encoding\",\"58\":\"12@0\",\"59\":\"12@1\",\"60\":\"13\",\"61\":\"13#函数参数\",\"62\":\"13#引用传递\",\"63\":\"13#默认参数\",\"64\":\"13#可变数量的参数值列表\",\"65\":\"13#命名参数-ph8\",\"66\":\"13#可变函数\",\"67\":\"13#匿名函数\",\"68\":\"13@0\",\"69\":\"13@1\",\"70\":\"14\",\"71\":\"14#php标记\",\"72\":\"14#与html文档的混合\",\"73\":\"14#指令分隔符\",\"74\":\"14#注释\",\"75\":\"14@0\",\"76\":\"14@1\",\"77\":\"15\",\"78\":\"15#new实例化\",\"79\":\"15#属性和方法\",\"80\":\"15#构造函数\",\"81\":\"15#继承\",\"82\":\"15#签名覆盖规则\",\"83\":\"15#readonly\",\"84\":\"15#class-1\",\"85\":\"15#访问符\",\"86\":\"15#属性\",\"87\":\"15#类型声明\",\"88\":\"15#只读-地址\",\"89\":\"15#动态属性\",\"90\":\"15#属性钩子-拦截器、代理\",\"91\":\"15#类常量\",\"92\":\"15#类自动引入\",\"93\":\"15@0\",\"94\":\"15@1\",\"95\":\"16\",\"96\":\"16#位运算\",\"97\":\"16#比较运算\",\"98\":\"16#三元表达式\",\"99\":\"16#null合并\",\"100\":\"16#错误控制\",\"101\":\"16#执行运算符\",\"102\":\"16#数组运算符\",\"103\":\"16#类型运算符\",\"104\":\"16@0\",\"105\":\"16@1\",\"106\":\"17\",\"107\":\"17#类型系统\",\"108\":\"17#原子类型\",\"109\":\"17#复合类型\",\"110\":\"17#类型别名\",\"111\":\"17#null\",\"112\":\"17#boolean布尔类型\",\"113\":\"17#int整型\",\"114\":\"17#溢出\",\"115\":\"17#整数除法\",\"116\":\"17#float浮点型\",\"117\":\"17#比较\",\"118\":\"17#nan\",\"119\":\"17#string\",\"120\":\"17#单引号\",\"121\":\"17#双引号\",\"122\":\"17#heredoc结构\",\"123\":\"17#nowdoc结构\",\"124\":\"17#array数组\",\"125\":\"17#访问\",\"126\":\"17#数组解构\",\"127\":\"17#数组展开\",\"128\":\"17#拷贝\",\"129\":\"17#object\",\"130\":\"17#枚举-php-8-8-1-0\",\"131\":\"17#resource-资源类型\",\"132\":\"17#callback-callable-类型\",\"133\":\"17#mixed\",\"134\":\"17#void\",\"135\":\"17#never\",\"136\":\"17#可迭代c-c-c-c-cccccc\",\"137\":\"17@0\",\"138\":\"17@1\",\"139\":\"18\",\"140\":\"18#引用赋值\",\"141\":\"18#预定义变量\",\"142\":\"18#作用域\",\"143\":\"18#global\",\"144\":\"18#static\",\"145\":\"18#可变变量名\",\"146\":\"18#来自php之外的变量\",\"147\":\"18#html表单-get-和-post\",\"148\":\"18#http-cookie\",\"149\":\"18#变量名中的点\",\"150\":\"18#确定变量类型\",\"151\":\"18@0\",\"152\":\"18@1\",\"153\":\"19\",\"154\":\"19#父组件向子组件传递\",\"155\":\"19#子组件向父组件传递\",\"156\":\"19#兄弟组件之间的通信\",\"157\":\"19#父组件向后代组件传递\",\"158\":\"19#非关系组件传递\",\"159\":\"19#总结\",\"160\":\"19@0\",\"161\":\"19@1\",\"162\":\"20\",\"163\":\"20#区别\",\"164\":\"20#优缺点\",\"165\":\"20@0\",\"166\":\"20@1\",\"167\":\"21\",\"168\":\"21#背景\",\"169\":\"21#fiber\",\"170\":\"21#解决\",\"171\":\"21@0\",\"172\":\"21@1\",\"173\":\"22\",\"174\":\"22#流程\",\"175\":\"22#创建阶段\",\"176\":\"22#constructor\",\"177\":\"22#getderivedstatefromprops\",\"178\":\"22#render\",\"179\":\"22#componentdidmount\",\"180\":\"22#更新阶段\",\"181\":\"22#shouldcomponentupdate\",\"182\":\"22#getsnapshotbeforeupdate\",\"183\":\"22#componentdidupdate\",\"184\":\"22#卸载阶段\",\"185\":\"22#componentwillunmount\",\"186\":\"22#总结\",\"187\":\"22@0\",\"188\":\"22@1\",\"189\":\"23\",\"190\":\"23#类组件\",\"191\":\"23#函数组件\",\"192\":\"23#区别\",\"193\":\"23#编写形式\",\"194\":\"23#状态管理\",\"195\":\"23#生命周期\",\"196\":\"23#调用方式\",\"197\":\"23#获取渲染的值\",\"198\":\"23@0\",\"199\":\"23@1\",\"200\":\"24\",\"201\":\"24#受控组件\",\"202\":\"24#非受控组件\",\"203\":\"24#应用场景\",\"204\":\"24@0\",\"205\":\"24@1\",\"206\":\"25\",\"207\":\"25#构建方式\",\"208\":\"25#函数式创建\",\"209\":\"25#通过-react-createclass-方法创建\",\"210\":\"25#继承-react-component-创建\",\"211\":\"25#区别\",\"212\":\"25@0\",\"213\":\"25@1\",\"214\":\"26\",\"215\":\"26#编写方式\",\"216\":\"26#应用场景\",\"217\":\"26@0\",\"218\":\"26@1\",\"219\":\"27\",\"220\":\"27#方式\",\"221\":\"27#在组件内直接使用\",\"222\":\"27#组件中引入css文件\",\"223\":\"27#组件中引入-module-css-文件\",\"224\":\"27#css-in-js\",\"225\":\"27#区别\",\"226\":\"27@0\",\"227\":\"27@1\",\"228\":\"28\",\"229\":\"28#原理\",\"230\":\"28#tree层级\",\"231\":\"28#conponent层级\",\"232\":\"28#element层级\",\"233\":\"28#注意事项\",\"234\":\"28@0\",\"235\":\"28@1\",\"236\":\"29\",\"237\":\"29@0\",\"238\":\"29@1\",\"239\":\"30\",\"240\":\"30#合成事件\",\"241\":\"30#执行顺序\",\"242\":\"30@0\",\"243\":\"30@1\",\"244\":\"31\",\"245\":\"31#绑定方法\",\"246\":\"31#render方法中使用bind\",\"247\":\"31#render方法中使用箭头函数\",\"248\":\"31#constructor中bind\",\"249\":\"31#定义阶段使用箭头函数绑定\",\"250\":\"31#区别\",\"251\":\"31@0\",\"252\":\"31@1\",\"253\":\"32\",\"254\":\"32#常见hooks\",\"255\":\"32#usestate\",\"256\":\"32#useeffect\",\"257\":\"32#其它-hooks\",\"258\":\"32#解决什么\",\"259\":\"32@0\",\"260\":\"32@1\",\"261\":\"33\",\"262\":\"33#特性\",\"263\":\"33#声明式编程\",\"264\":\"33#component\",\"265\":\"33#优势\",\"266\":\"33@0\",\"267\":\"33@1\",\"268\":\"34\",\"269\":\"34#过程\",\"270\":\"34#总结\",\"271\":\"34@0\",\"272\":\"34@1\",\"273\":\"35\",\"274\":\"35#总结\",\"275\":\"35@0\",\"276\":\"35@1\",\"277\":\"36\",\"278\":\"36#避免不必要的渲染\",\"279\":\"36#shouldcomponentupdate\",\"280\":\"36#purecomponent\",\"281\":\"36#react-memo\",\"282\":\"36#总结\",\"283\":\"36@0\",\"284\":\"36@1\",\"285\":\"37\",\"286\":\"37@0\",\"287\":\"37@1\",\"288\":\"38\",\"289\":\"38#创建refs\",\"290\":\"38#传入字符串\",\"291\":\"38#传入对象\",\"292\":\"38#传入函数\",\"293\":\"38#传入hook\",\"294\":\"38#应用场景\",\"295\":\"38@0\",\"296\":\"38@1\",\"297\":\"39\",\"298\":\"39#触发时机\",\"299\":\"39#总结\",\"300\":\"39@0\",\"301\":\"39@1\",\"302\":\"40\",\"303\":\"40#更新类型\",\"304\":\"40#异步更新\",\"305\":\"40#同步更新\",\"306\":\"40#批量更新\",\"307\":\"40@0\",\"308\":\"40@1\",\"309\":\"41\",\"310\":\"41#state\",\"311\":\"41#props\",\"312\":\"41#区别\",\"313\":\"41@0\",\"314\":\"41@1\",\"315\":\"42\",\"316\":\"42#es6类\",\"317\":\"42#类组件\",\"318\":\"42#总结\",\"319\":\"42@0\",\"320\":\"42@1\",\"321\":\"43\",\"322\":\"43#实现\",\"323\":\"43#csstransition\",\"324\":\"43#switchtransition\",\"325\":\"43#transitiongroup\",\"326\":\"43@0\",\"327\":\"43@1\",\"328\":\"44\",\"329\":\"44#特性\",\"330\":\"44#数据类型\",\"331\":\"44#高级类型\",\"332\":\"44#交叉类型\",\"333\":\"44#联合类型\",\"334\":\"44#类型别名\",\"335\":\"44#类型索引\",\"336\":\"44#映射类型\",\"337\":\"44#条件类型\",\"338\":\"44#类\",\"339\":\"44#定义\",\"340\":\"44#继承\",\"341\":\"44#修饰符\",\"342\":\"44#静态属性-es自带能力\",\"343\":\"44#抽象类\",\"344\":\"44#枚举\",\"345\":\"44#原理\",\"346\":\"44#ts函数\",\"347\":\"44#可选参数\",\"348\":\"44#剩余参数\",\"349\":\"44#函数重载\",\"350\":\"44#泛型\",\"351\":\"44#装饰器\",\"352\":\"44#使用\",\"353\":\"44#执行顺序\",\"354\":\"44#命名空间和模块\",\"355\":\"44#命名空间\",\"356\":\"44#区别\",\"357\":\"44#在vue中使用\",\"358\":\"44#component\",\"359\":\"44#computed、data、methods\",\"360\":\"44#props\",\"361\":\"44#watch\",\"362\":\"44#emit\",\"363\":\"44@0\",\"364\":\"44@1\",\"365\":\"45\",\"366\":\"45#分类\",\"367\":\"45#本地版本控制系统\",\"368\":\"45#集中式版本控制系统\",\"369\":\"45#svn\",\"370\":\"45#cvs\",\"371\":\"45#分布式版本控制系统\",\"372\":\"45#git\",\"373\":\"45#hg\",\"374\":\"45#git-1\",\"375\":\"45#工作原理\",\"376\":\"45#命令\",\"377\":\"45#配置命令\",\"378\":\"45#启动命令\",\"379\":\"45#日常基本操作\",\"380\":\"45#分支操作\",\"381\":\"45@0\",\"382\":\"45@1\",\"383\":\"46\",\"384\":\"46@0\",\"385\":\"46@1\",\"386\":\"47\",\"387\":\"47@0\",\"388\":\"47@1\",\"389\":\"48\",\"390\":\"48@0\",\"391\":\"48@1\",\"392\":\"49\",\"393\":\"49@0\",\"394\":\"49@1\",\"395\":\"50\",\"396\":\"50@0\",\"397\":\"50@1\",\"398\":\"51\",\"399\":\"51#为什么需要\",\"400\":\"51@0\",\"401\":\"51@1\",\"402\":\"52\",\"403\":\"52#原理\",\"404\":\"52#解决\",\"405\":\"52@0\",\"406\":\"52@1\",\"407\":\"53\",\"408\":\"53#区别\",\"409\":\"53#场景\",\"410\":\"53@0\",\"411\":\"53@1\",\"412\":\"54\",\"413\":\"54#方法\",\"414\":\"54@0\",\"415\":\"54@1\",\"416\":\"55\",\"417\":\"55#区别\",\"418\":\"55#原理\",\"419\":\"55@0\",\"420\":\"55@1\",\"421\":\"56\",\"422\":\"56#原理\",\"423\":\"56#总结\",\"424\":\"56@0\",\"425\":\"56@1\",\"426\":\"57\",\"427\":\"57#实现\",\"428\":\"57#场景\",\"429\":\"57@0\",\"430\":\"57@1\",\"431\":\"58\",\"432\":\"58@0\",\"433\":\"58@1\",\"434\":\"59\",\"435\":\"59#使用\",\"436\":\"59#定义\",\"437\":\"59#应用场景\",\"438\":\"59#原理\",\"439\":\"59@0\",\"440\":\"59@1\",\"441\":\"60\",\"442\":\"60#v-if和v-for的优先级\",\"443\":\"60#当v-if和v-for置于不同的标签中\",\"444\":\"60#注意和结论\",\"445\":\"60#v-if和v-show\",\"446\":\"60#共同点\",\"447\":\"60#不同点\",\"448\":\"60#解析原理\",\"449\":\"60#v-show原理\",\"450\":\"60#v-if原理\",\"451\":\"60@0\",\"452\":\"60@1\",\"453\":\"61\",\"454\":\"61#场景\",\"455\":\"61#获取缓存后组件的数据\",\"456\":\"61@0\",\"457\":\"61@1\",\"458\":\"62\",\"459\":\"62#设置key与不设置key的差异\",\"460\":\"62#原理\",\"461\":\"62@0\",\"462\":\"62@1\",\"463\":\"63\",\"464\":\"63#beforecreate\",\"465\":\"63#created-options\",\"466\":\"63#bedoremounted\",\"467\":\"63#mounted\",\"468\":\"63#beforeupdate\",\"469\":\"63#updated\",\"470\":\"63#beforedestroy\",\"471\":\"63#destroyed\",\"472\":\"63#activated\",\"473\":\"63#deactivated\",\"474\":\"63#父子组件渲染顺序\",\"475\":\"63@0\",\"476\":\"63@1\",\"477\":\"64\",\"478\":\"64#vue中的mixin\",\"479\":\"64#局部混入\",\"480\":\"64#全局混入\",\"481\":\"64#注意\",\"482\":\"64#源码\",\"483\":\"64#合并策略\",\"484\":\"64@0\",\"485\":\"64@1\",\"486\":\"65\",\"487\":\"65#结论\",\"488\":\"65@0\",\"489\":\"65@1\",\"490\":\"66\",\"491\":\"66#场景\",\"492\":\"66@0\",\"493\":\"66@1\",\"494\":\"67\",\"495\":\"67#场景\",\"496\":\"67#分类\",\"497\":\"67#原理\",\"498\":\"67@0\",\"499\":\"67@1\",\"500\":\"68\",\"501\":\"68#他的核心特性与技术原理如下\",\"502\":\"68#他的生态体系完善覆盖全开发流程\",\"503\":\"68#vue3的关键更新\",\"504\":\"68@0\",\"505\":\"68@1\",\"506\":\"69\",\"507\":\"69#新特性\",\"508\":\"69#vue3优化\",\"509\":\"69#响应式系统\",\"510\":\"69@0\",\"511\":\"69@1\",\"512\":\"70\",\"513\":\"70#生命周期\",\"514\":\"70#应用的生命周期\",\"515\":\"70#页面的生命周期\",\"516\":\"70#组件的生命周期\",\"517\":\"70#组件所在页面的生命周期\",\"518\":\"70#执行过程\",\"519\":\"70#登录流程\",\"520\":\"70#检验登录状态是否过期\",\"521\":\"70#路由跳转\",\"522\":\"70#跳转方式\",\"523\":\"70#发布流程\",\"524\":\"70#支付流程\",\"525\":\"70#实现原理\",\"526\":\"70#通信\",\"527\":\"70#运行机制\",\"528\":\"70#优化手段\",\"529\":\"70#加载\",\"530\":\"70#渲染\",\"531\":\"70@0\",\"532\":\"70@1\",\"533\":\"71\",\"534\":\"71#防抖-debounce\",\"535\":\"71#最佳实践\",\"536\":\"71#应用场景\",\"537\":\"71#节流-throttle\",\"538\":\"71#最佳实践-1\",\"539\":\"71#应用场景-1\",\"540\":\"71#事件委托-事件代理-event-delegation\",\"541\":\"71#最佳实践-2\",\"542\":\"71#应用场景-2\",\"543\":\"71#分时函数\",\"544\":\"71@0\",\"545\":\"71@1\",\"546\":\"72\",\"547\":\"72#按需加载-lazy-loading、on-demand-loading\",\"548\":\"72#动态导入模块\",\"549\":\"72#代码分割、分包\",\"550\":\"72#延迟加载、懒加载\",\"551\":\"72#html5的loading属性\",\"552\":\"72#intersection-observer-api\",\"553\":\"72#http缓存\",\"554\":\"72#强缓存\",\"555\":\"72#expires标头\",\"556\":\"72#cahe-control标头\",\"557\":\"72#协商缓存\",\"558\":\"72#last-modified-if-modified-since-上一次的修改时间\",\"559\":\"72#etag-if-none-match-文件指纹\",\"560\":\"72#浏览器缓存\",\"561\":\"72#dns缓存\",\"562\":\"72#cdn缓存\",\"563\":\"72@0\",\"564\":\"72@1\",\"565\":\"73\",\"566\":\"73#性能优化指标\",\"567\":\"73#fcp-first-contentful-paint\",\"568\":\"73#在js中衡量fcp\",\"569\":\"73#lcp-largest-contentful-paint\",\"570\":\"73#cls-cumulative-layout-shift\",\"571\":\"73#fid-first-input-delay\",\"572\":\"73#inp-interaction-to-next-paint\",\"573\":\"73#ttfb-time-to-first-byte\",\"574\":\"73#在js中衡量ttfb\",\"575\":\"73#tbt-total-blocking-time\",\"576\":\"73#fmp-first-meaningful-paint\",\"577\":\"73#性能分析工具\",\"578\":\"73#ligthouse\",\"579\":\"73#perfance选项卡\",\"580\":\"73#web-vitals库\",\"581\":\"73@0\",\"582\":\"74\",\"583\":\"74#gizp压缩\",\"584\":\"74#配置流程\",\"585\":\"74#最佳实践\",\"586\":\"74#图片优化\",\"587\":\"74@0\",\"588\":\"74@1\",\"589\":\"75\",\"590\":\"75@0\",\"591\":\"75@1\",\"592\":\"76\",\"593\":\"76@0\",\"594\":\"76@1\",\"595\":\"77\",\"596\":\"77#预加载\",\"597\":\"77#构建工具支持\",\"598\":\"77#预渲染\",\"599\":\"77#webpack方案\",\"600\":\"77#骨架屏\",\"601\":\"77#ui库方案\",\"602\":\"77@0\",\"603\":\"77@1\",\"604\":\"78\",\"605\":\"78#时间分片-分时渲染\",\"606\":\"78#使用定时器\",\"607\":\"78#requestanimationframe\",\"608\":\"78#documentfragment\",\"609\":\"78#虚拟列表、表格\",\"610\":\"78#实现要点\",\"611\":\"78#最佳实践\",\"612\":\"78#canvas\",\"613\":\"78@0\",\"614\":\"78@1\",\"615\":\"79\",\"616\":\"79#基本配置\",\"617\":\"79#使用不同的配置文件\",\"618\":\"79#设置一个新的-webpack-项目\",\"619\":\"79@0\",\"620\":\"79@1\",\"621\":\"80\",\"622\":\"80#打包过程\",\"623\":\"80#浏览器兼容性-browser-compatibility\",\"624\":\"80#环境-environment\",\"625\":\"80#模块-modules、chunk\",\"626\":\"80#依赖关系\",\"627\":\"80#支持的模块类型\",\"628\":\"80#打包结果-bundle\",\"629\":\"80#打包过程-1\",\"630\":\"80#设置bundle\",\"631\":\"80#运行时-runtime\",\"632\":\"80#数据集合-manifest\",\"633\":\"80@0\",\"634\":\"80@1\",\"635\":\"81\",\"636\":\"81#特点\",\"637\":\"81#使用loader\",\"638\":\"81#配置方式\",\"639\":\"81#内联方式\",\"640\":\"81@0\",\"641\":\"81@1\",\"642\":\"82\",\"643\":\"82#插件-plugin\",\"644\":\"82#配置方式\",\"645\":\"82#使用node-api-方式配置\",\"646\":\"82#剖析\",\"647\":\"82@0\",\"648\":\"82@1\",\"649\":\"83\",\"650\":\"83@0\",\"651\":\"84\",\"652\":\"84@0\",\"653\":\"85\",\"654\":\"85@0\",\"655\":\"86\",\"656\":\"86@0\",\"657\":\"87\",\"658\":\"87#完成-completion\",\"659\":\"87#抛出异常-throw-an-exception\",\"660\":\"87#returnifabrupt\",\"661\":\"87#符号-returnifabrupt-简写\",\"662\":\"87#符号\",\"663\":\"87#隐式正常完成-implicit-normal-completion\",\"664\":\"87@0\",\"665\":\"88\",\"666\":\"88#抽象操作-abstract-operations\",\"667\":\"88#语法导向操作-syntax-directed-operations\",\"668\":\"88#静态语义-static-semantics\",\"669\":\"88#数学运算\",\"670\":\"88#值表示法-value-notation\",\"671\":\"88#标识-identity\",\"672\":\"88@0\",\"673\":\"89\",\"674\":\"89#文法参数的含义\",\"675\":\"89#文法前缀参数的含义\",\"676\":\"89#例子\",\"677\":\"89@0\",\"678\":\"90\",\"679\":\"90@0\",\"680\":\"91\",\"681\":\"91#终结符\",\"682\":\"91#非终结符与产生式规则\",\"683\":\"91#opt符号\",\"684\":\"91#one-of短语\",\"685\":\"91#but-not短语\",\"686\":\"91#empty-短语\",\"687\":\"91#前瞻限制短语\",\"688\":\"91#no-lineterminator-here\",\"689\":\"91#描述性短语\",\"690\":\"91@0\",\"691\":\"91@1\",\"692\":\"92\",\"693\":\"92@0\",\"694\":\"93\",\"695\":\"93@0\",\"696\":\"94\",\"697\":\"94@0\",\"698\":\"95\",\"699\":\"95#语法\",\"700\":\"95#转义字符\",\"701\":\"95#转义序列-escapesequence\",\"702\":\"95#先觉错误\",\"703\":\"95#在代码块内使用严格模式\",\"704\":\"95@0\",\"705\":\"96\",\"706\":\"97\",\"707\":\"98\",\"708\":\"99\",\"709\":\"100\"},\"fieldIds\":{\"h\":0,\"t\":1,\"c\":2},\"fieldLength\":{\"0\":[1],\"1\":[1],\"2\":[null,null,1],\"3\":[1],\"4\":[null,null,1],\"5\":[1],\"6\":[null,null,1],\"7\":[1,13],\"8\":[1,4],\"9\":[1,12],\"10\":[1,34],\"11\":[1,26],\"12\":[null,null,1],\"13\":[1,9],\"14\":[1,18],\"15\":[1,8],\"16\":[1,22],\"17\":[null,null,1],\"18\":[1,29],\"19\":[1,9],\"20\":[1,6],\"21\":[1,12],\"22\":[1,44],\"23\":[null,null,1],\"24\":[1],\"25\":[null,null,1],\"26\":[1,31],\"27\":[1,14],\"28\":[1,8],\"29\":[1,34],\"30\":[1,6],\"31\":[1,12],\"32\":[1,27],\"33\":[1,24],\"34\":[1,11],\"35\":[1,11],\"36\":[1,11],\"37\":[1,46],\"38\":[1,64],\"39\":[1],\"40\":[null,null,1],\"41\":[null,null,1],\"42\":[1,16],\"43\":[1,15],\"44\":[1,15],\"45\":[1,39],\"46\":[null,null,1],\"47\":[1,69],\"48\":[1,7],\"49\":[1,54],\"50\":[null,null,1],\"51\":[null,null,1],\"52\":[1],\"53\":[1,43],\"54\":[3,67],\"55\":[7,23],\"56\":[1,39],\"57\":[1,9],\"58\":[null,null,1],\"59\":[null,null,1],\"60\":[1],\"61\":[1,34],\"62\":[1,24],\"63\":[1,18],\"64\":[1,23],\"65\":[3,67],\"66\":[1,36],\"67\":[1,68],\"68\":[null,null,1],\"69\":[null,null,1],\"70\":[1,18],\"71\":[1,83],\"72\":[1,71],\"73\":[1,54],\"74\":[1,61],\"75\":[null,null,1],\"76\":[null,null,1],\"77\":[1,37],\"78\":[1,11],\"79\":[1,26],\"80\":[1,31],\"81\":[1,35],\"82\":[1,8],\"83\":[1,15],\"84\":[2,22],\"85\":[2,30],\"86\":[1,38],\"87\":[1,30],\"88\":[3,33],\"89\":[1,22],\"90\":[3,49],\"91\":[1,39],\"92\":[1,47],\"93\":[null,null,1],\"94\":[null,null,1],\"95\":[1],\"96\":[1,43],\"97\":[1,41],\"98\":[1,49],\"99\":[1,14],\"100\":[1,59],\"101\":[1,24],\"102\":[1,28],\"103\":[1,22],\"104\":[null,null,1],\"105\":[null,null,1],\"106\":[1],\"107\":[1,5],\"108\":[1,32],\"109\":[1,103],\"110\":[1,13],\"111\":[1,13],\"112\":[1,19],\"113\":[1,50],\"114\":[1,9],\"115\":[1,28],\"116\":[1,28],\"117\":[1,27],\"118\":[1,19],\"119\":[1,19],\"120\":[1,50],\"121\":[1,26],\"122\":[1,41],\"123\":[1,26],\"124\":[1,41],\"125\":[1,44],\"126\":[1,51],\"127\":[1,49],\"128\":[1,19],\"129\":[1,14],\"130\":[7,18],\"131\":[2,9],\"132\":[3,14],\"133\":[1,5],\"134\":[1,13],\"135\":[1,16],\"136\":[3,23],\"137\":[null,null,1],\"138\":[null,null,1],\"139\":[1,17],\"140\":[1,21],\"141\":[1,16],\"142\":[1,25],\"143\":[1,32],\"144\":[1,34],\"145\":[1,14],\"146\":[1],\"147\":[5,123],\"148\":[2,63],\"149\":[1,25],\"150\":[1,37],\"151\":[null,null,1],\"152\":[null,null,1],\"153\":[1,7],\"154\":[1,27],\"155\":[1,44],\"156\":[1,32],\"157\":[1,45],\"158\":[1,5],\"159\":[1,8],\"160\":[null,null,1],\"161\":[null,null,1],\"162\":[1,71],\"163\":[1,24],\"164\":[1,29],\"165\":[null,null,1],\"166\":[null,null,1],\"167\":[2],\"168\":[1,28],\"169\":[1,123],\"170\":[1,62],\"171\":[null,null,1],\"172\":[null,null,1],\"173\":[1,7],\"174\":[1,6],\"175\":[1,5],\"176\":[1,4],\"177\":[1,15],\"178\":[1,9],\"179\":[1,4],\"180\":[1,6],\"181\":[1,10],\"182\":[1,18],\"183\":[1,6],\"184\":[1],\"185\":[1,6],\"186\":[1,19],\"187\":[null,null,1],\"188\":[null,null,1],\"189\":[1],\"190\":[1,26],\"191\":[1,13],\"192\":[1,7],\"193\":[1,21],\"194\":[1,33],\"195\":[1,30],\"196\":[1,25],\"197\":[1,51],\"198\":[null,null,1],\"199\":[null,null,1],\"200\":[1],\"201\":[1,39],\"202\":[1,52],\"203\":[1,23],\"204\":[null,null,1],\"205\":[null,null,1],\"206\":[1,7],\"207\":[1,10],\"208\":[1,19],\"209\":[4,18],\"210\":[4,44],\"211\":[1,14],\"212\":[null,null,1],\"213\":[null,null,1],\"214\":[1,21],\"215\":[1,89],\"216\":[1,80],\"217\":[null,null,1],\"218\":[null,null,1],\"219\":[1,27],\"220\":[1,9],\"221\":[1,58],\"222\":[1,44],\"223\":[4,56],\"224\":[3,88],\"225\":[1,26],\"226\":[null,null,1],\"227\":[null,null,1],\"228\":[1,7],\"229\":[1,5],\"230\":[1,12],\"231\":[1,12],\"232\":[1,75],\"233\":[1,40],\"234\":[null,null,1],\"235\":[null,null,1],\"236\":[1,99],\"237\":[null,null,1],\"238\":[null,null,1],\"239\":[1,6],\"240\":[1,51],\"241\":[1,87],\"242\":[null,null,1],\"243\":[null,null,1],\"244\":[1,36],\"245\":[1,5],\"246\":[1,26],\"247\":[1,22],\"248\":[1,24],\"249\":[1,26],\"250\":[1,15],\"251\":[null,null,1],\"252\":[null,null,1],\"253\":[2,31],\"254\":[1,4],\"255\":[1,66],\"256\":[1,95],\"257\":[2,7],\"258\":[1,15],\"259\":[null,null,1],\"260\":[null,null,1],\"261\":[1,50],\"262\":[1,7],\"263\":[1,38],\"264\":[1,54],\"265\":[1,9],\"266\":[null,null,1],\"267\":[null,null,1],\"268\":[1,49],\"269\":[1,160],\"270\":[1,27],\"271\":[null,null,1],\"272\":[null,null,1],\"273\":[1,62],\"274\":[1,14],\"275\":[null,null,1],\"276\":[null,null,1],\"277\":[1,16],\"278\":[1,14],\"279\":[1,10],\"280\":[1,66],\"281\":[2,29],\"282\":[1,12],\"283\":[null,null,1],\"284\":[null,null,1],\"285\":[1],\"286\":[null,null,1],\"287\":[null,null,1],\"288\":[1,13],\"289\":[1,28],\"290\":[1,24],\"291\":[1,32],\"292\":[1,27],\"293\":[1,27],\"294\":[1,27],\"295\":[null,null,1],\"296\":[null,null,1],\"297\":[1,62],\"298\":[1,69],\"299\":[1,32],\"300\":[null,null,1],\"301\":[null,null,1],\"302\":[1,85],\"303\":[1,4],\"304\":[1,19],\"305\":[1,30],\"306\":[1,39],\"307\":[null,null,1],\"308\":[null,null,1],\"309\":[1],\"310\":[1,45],\"311\":[1,42],\"312\":[1,21],\"313\":[null,null,1],\"314\":[null,null,1],\"315\":[4],\"316\":[1,47],\"317\":[1,60],\"318\":[1,10],\"319\":[null,null,1],\"320\":[null,null,1],\"321\":[1,8],\"322\":[1,22],\"323\":[1,74],\"324\":[1,75],\"325\":[1,76],\"326\":[null,null,1],\"327\":[null,null,1],\"328\":[1],\"329\":[1,19],\"330\":[1,10],\"331\":[1,2],\"332\":[1,2],\"333\":[1,5],\"334\":[1,12],\"335\":[1,48],\"336\":[1,46],\"337\":[1,7],\"338\":[1,5],\"339\":[1,13],\"340\":[1,11],\"341\":[1,11],\"342\":[3,9],\"343\":[1,13],\"344\":[1,16],\"345\":[1,10],\"346\":[1,1],\"347\":[1,8],\"348\":[1,10],\"349\":[1,24],\"350\":[1,7],\"351\":[1,5],\"352\":[1,80],\"353\":[1,20],\"354\":[1,13],\"355\":[1,17],\"356\":[1,4],\"357\":[1,11],\"358\":[2,23],\"359\":[3,25],\"360\":[2,35],\"361\":[2,27],\"362\":[2,30],\"363\":[null,null,1],\"364\":[null,null,1],\"365\":[1,37],\"366\":[1,4],\"367\":[1,10],\"368\":[1,10],\"369\":[1,2],\"370\":[1,14],\"371\":[1,13],\"372\":[1,6],\"373\":[1,8],\"374\":[1,28],\"375\":[1,59],\"376\":[1,8],\"377\":[1,16],\"378\":[1,9],\"379\":[1,53],\"380\":[1,36],\"381\":[null,null,1],\"382\":[null,null,1],\"383\":[1,6],\"384\":[null,null,1],\"385\":[null,null,1],\"386\":[1,93],\"387\":[null,null,1],\"388\":[null,null,1],\"389\":[1,47],\"390\":[null,null,1],\"391\":[null,null,1],\"392\":[1,44],\"393\":[null,null,1],\"394\":[null,null,1],\"395\":[1,3],\"396\":[null,null,1],\"397\":[null,null,1],\"398\":[1,13],\"399\":[1,13],\"400\":[null,null,1],\"401\":[null,null,1],\"402\":[1,2],\"403\":[1,4],\"404\":[1,21],\"405\":[null,null,1],\"406\":[null,null,1],\"407\":[1,30],\"408\":[1,5],\"409\":[1,2],\"410\":[null,null,1],\"411\":[null,null,1],\"412\":[1,7],\"413\":[1,16],\"414\":[null,null,1],\"415\":[null,null,1],\"416\":[1,2],\"417\":[1,7],\"418\":[1,7],\"419\":[null,null,1],\"420\":[null,null,1],\"421\":[1,29],\"422\":[1,58],\"423\":[1,22],\"424\":[null,null,1],\"425\":[null,null,1],\"426\":[1,2],\"427\":[1,42],\"428\":[1,3],\"429\":[null,null,1],\"430\":[null,null,1],\"431\":[1,5],\"432\":[null,null,1],\"433\":[null,null,1],\"434\":[1,4],\"435\":[1,3],\"436\":[1,2],\"437\":[1,4],\"438\":[1,8],\"439\":[null,null,1],\"440\":[null,null,1],\"441\":[4],\"442\":[3,43],\"443\":[3,83],\"444\":[1,22],\"445\":[3],\"446\":[1,10],\"447\":[1,19],\"448\":[1,7],\"449\":[2,41],\"450\":[2,67],\"451\":[null,null,1],\"452\":[null,null,1],\"453\":[2,10],\"454\":[1,13],\"455\":[1,8],\"456\":[null,null,1],\"457\":[null,null,1],\"458\":[1,11],\"459\":[1,82],\"460\":[1,129],\"461\":[null,null,1],\"462\":[null,null,1],\"463\":[1,19],\"464\":[1,8],\"465\":[2,18],\"466\":[1,7],\"467\":[1,9],\"468\":[1,7],\"469\":[1,8],\"470\":[2,12],\"471\":[2,4],\"472\":[1,11],\"473\":[1,10],\"474\":[1,9],\"475\":[null,null,1],\"476\":[null,null,1],\"477\":[1,4],\"478\":[1,4],\"479\":[1,16],\"480\":[1,10],\"481\":[1,7],\"482\":[1,62],\"483\":[1,48],\"484\":[null,null,1],\"485\":[null,null,1],\"486\":[1,40],\"487\":[1,20],\"488\":[null,null,1],\"489\":[null,null,1],\"490\":[1,8],\"491\":[1,15],\"492\":[null,null,1],\"493\":[null,null,1],\"494\":[1,4],\"495\":[1,7],\"496\":[1,4],\"497\":[1,4],\"498\":[null,null,1],\"499\":[null,null,1],\"500\":[1,3],\"501\":[2,115],\"502\":[1,39],\"503\":[1,34],\"504\":[null,null,1],\"505\":[null,null,1],\"506\":[1,11],\"507\":[1,11],\"508\":[1,23],\"509\":[1,18],\"510\":[null,null,1],\"511\":[null,null,1],\"512\":[1,10],\"513\":[1],\"514\":[1,19],\"515\":[1,18],\"516\":[1,14],\"517\":[1,6],\"518\":[1,50],\"519\":[1,40],\"520\":[1,10],\"521\":[1,3],\"522\":[1,28],\"523\":[1,3],\"524\":[1,7],\"525\":[1,17],\"526\":[1,28],\"527\":[1,20],\"528\":[1,13],\"529\":[1,15],\"530\":[1,17],\"531\":[null,null,1],\"532\":[null,null,1],\"533\":[1,5],\"534\":[1,32],\"535\":[1,27],\"536\":[1,11],\"537\":[1,13],\"538\":[1,23],\"539\":[1,13],\"540\":[4,16],\"541\":[1,34],\"542\":[1,3],\"543\":[1],\"544\":[null,null,1],\"545\":[null,null,3],\"546\":[1,5],\"547\":[1,4],\"548\":[1,59],\"549\":[1,24],\"550\":[1,5],\"551\":[1,11],\"552\":[1,22],\"553\":[1,9],\"554\":[1,10],\"555\":[1,19],\"556\":[1,28],\"557\":[1,13],\"558\":[2,15],\"559\":[2,13],\"560\":[1,15],\"561\":[1,20],\"562\":[1],\"563\":[null,null,1],\"564\":[null,null,3],\"565\":[1],\"566\":[1],\"567\":[1,7],\"568\":[1,29],\"569\":[1,31],\"570\":[1,10],\"571\":[1,28],\"572\":[1,17],\"573\":[1,18],\"574\":[1,42],\"575\":[1,26],\"576\":[1,27],\"577\":[1],\"578\":[1,8],\"579\":[1],\"580\":[2,31],\"581\":[null,null,1],\"582\":[1,5],\"583\":[1,7],\"584\":[1,4],\"585\":[1,161],\"586\":[1,10],\"587\":[null,null,1],\"588\":[null,null,1],\"589\":[1],\"590\":[null,null,1],\"591\":[null,null,1],\"592\":[1],\"593\":[null,null,1],\"594\":[null,null,2],\"595\":[1,5],\"596\":[1,32],\"597\":[1,34],\"598\":[1,29],\"599\":[1,68],\"600\":[1,6],\"601\":[1,14],\"602\":[null,null,1],\"603\":[null,null,3],\"604\":[1,8],\"605\":[1,5],\"606\":[1,55],\"607\":[1,46],\"608\":[1,52],\"609\":[1,4],\"610\":[1,15],\"611\":[1],\"612\":[1],\"613\":[null,null,1],\"614\":[null,null,3],\"615\":[1,43],\"616\":[1,31],\"617\":[1,13],\"618\":[3,119],\"619\":[null,null,1],\"620\":[null,null,1],\"621\":[1,29],\"622\":[1,102],\"623\":[4,22],\"624\":[3,10],\"625\":[4,13],\"626\":[1,33],\"627\":[1,30],\"628\":[3,7],\"629\":[1,23],\"630\":[1,13],\"631\":[3,72],\"632\":[3,58],\"633\":[null,null,1],\"634\":[null,null,1],\"635\":[3,21],\"636\":[1,71],\"637\":[1,23],\"638\":[1,48],\"639\":[1,52],\"640\":[null,null,1],\"641\":[null,null,1],\"642\":[3,9],\"643\":[3,48],\"644\":[1,47],\"645\":[3,31],\"646\":[1,36],\"647\":[null,null,1],\"648\":[null,null,1],\"649\":[1],\"650\":[null,null,1],\"651\":[1],\"652\":[null,null,2],\"653\":[1],\"654\":[null,null,1],\"655\":[3],\"656\":[null,null,1],\"657\":[3,13],\"658\":[1,16],\"659\":[1,13],\"660\":[1,32],\"661\":[1,7],\"662\":[1,19],\"663\":[1,14],\"664\":[null,null,1],\"665\":[1],\"666\":[1],\"667\":[1,24],\"668\":[1,23],\"669\":[1],\"670\":[1,5],\"671\":[1,16],\"672\":[null,null,1],\"673\":[1,16],\"674\":[1,15],\"675\":[1,15],\"676\":[1,36],\"677\":[null,null,1],\"678\":[1],\"679\":[null,null,1],\"680\":[1],\"681\":[1,8],\"682\":[1,21],\"683\":[1,15],\"684\":[1,17],\"685\":[1,12],\"686\":[1,11],\"687\":[1,17],\"688\":[1,14],\"689\":[1,7],\"690\":[null,null,1],\"691\":[null,null,1],\"692\":[1],\"693\":[null,null,1],\"694\":[1],\"695\":[null,null,1],\"696\":[1],\"697\":[null,null,1],\"698\":[1,35],\"699\":[1,8],\"700\":[1,10],\"701\":[1,19],\"702\":[1,9],\"703\":[1,14],\"704\":[null,null,1],\"705\":[1,3],\"706\":[1],\"707\":[1],\"708\":[2],\"709\":[1]},\"averageFieldLength\":[1.1950032516080806,26.01255008202891,0.8263811940071111],\"storedFields\":{\"0\":{\"h\":\"介绍页\"},\"1\":{\"h\":\"JS\"},\"2\":{\"c\":[\"JavaScript\"]},\"3\":{\"h\":\"H5\"},\"4\":{\"c\":[\"HTNL\"]},\"5\":{\"h\":\"HTML5\"},\"6\":{\"c\":[\"h5\"]},\"7\":{\"h\":\"执行环境\",\"t\":[\"JavaScript必须依赖一个宿主环境才能实现完整的功能。\",\"宿主环境中有多个Agent，每个Agent对于一个js程序，也就是说Agent是程序的执行环境。\",\"Agent集群中的agent可以共享内存。\",\"每个Agent包含一个执行上下文栈，一个执行线程。\",\"执行上下文是代码的执行环境，包含一个Realm，代码创建的执行上下文还有一个词法环境。\",\"Realm提供了代码执行需要的基础资源，词法环境是作用域链的起点。\"]},\"8\":{\"h\":\"\",\"t\":[\"Agent是程序的执行环境，包括一个执行上下文栈、一个Agent记录器和一个执行线程。\"]},\"9\":{\"h\":\"\",\"t\":[\"执行上下文栈用于跟踪执行上下文。正在运行的执行上下文始终是该栈顶部元素。\",\"以下情况会创建执行上下文：\",\"程序初始化：程序初始化操作\",\"脚本执行：脚本求值\",\"模块环境初始化：模块环境初始化\",\"模块执行：模块执行\",\"函数执行：\",\"会创建迭代器的内置对象方法：\"]},\"10\":{\"h\":\"\",\"t\":[\"用于跟踪运行时执行的代码。在任何时候，每个agent至多只有一个正在实际执行代码的执行上下文。\",\"组件\",\"作用\",\"code evaluation state\",\"执行、暂停、恢复与此执行上下文的关联代码所需的任何状态。\",\"Function\",\"如果正在求值函数对象的代码，值为该函数对象。如果正在求值脚本、模块，则值为null。\",\"Realm\",\"执行上下文的关联代码所需的资源的Realm记录器。(不同的执行上下文可能有不同的realm)\",\"ScriptOrModule\",\"关联代码来源的模块记录器、脚本记录器（源文本解析结果）。\",\"ECMAScript代码的执行上下文还有额外的三个组件\",\"组件\",\"作用\",\"LexicalEnvironment\",\"指向代码中创建的标识符引用(存放在环境记录器)。\",\"VariableEnvironment\",\"指向代码中创建的变量声明(存放在环境记录器)\",\"PrivateEnvironment\",\"指向包含类中的类元素创建的私有名称(存放在私有环境记录)\"]},\"11\":{\"h\":\"\",\"t\":[\"一个Realm由一组内置对象、一个ECMAscript全局环境、该全局环境范围内加载的所有ECMAscript代码、以及其他相关状态和资源组成。 Realm包含了代码需要执行的最小资源。\",\"字段\",\"值\",\"含义\",\"[[AgentSignifier]]\",\"Agent标识符\",\"拥有此Realm的Agent代理\",\"[[Intrinsics]]\",\"记录器\",\"关联代码使用的内置值\",\"[[GlobalObject]]\",\"全局对象\",\"此范围使用的全局对象\",\"[[GlobalEnv]]\",\"全局环境记录器\",\"范围的全局环境\",\"[[TemplateMap]]\",\"列表\",\"[[LoadedModules]]\",\"列表\",\"[[HostDefined]]\",\"默认值为undefined\",\"宿主环境保留字段\"]},\"12\":{\"c\":[\"ECMA标准\"]},\"13\":{\"h\":\"宿主环境\",\"t\":[\"ECMAScript并不是一门能够独立运行的编程语言，它必须要接入到一个宿主环境（host environment） 中才能发挥作用。\",\"ECMAScript有两种常见的宿主：\",\"web客户端的浏览器。\",\"web服务端的Node.Js\"]},\"14\":{\"h\":\"\",\"t\":[\"标准中宿主可以提高的内容\",\"在程序运行前，环境会初始化一系列的内置对象（Built-in Objects） ，这些内置对象至少包括一个全局对象以及所有标准定义的固有对象（如Array、Object、Number等）。这些内置对象会帮助实现最基础的语言功能。 宿主环境，则可以依据自身的业务需求，增加环境中的内置对象（俗称“宿主对象”）并扩展全局对象的属性和方法。\"]},\"15\":{\"h\":\"\",\"t\":[\"浏览器，会提供两类重要的宿主对象：DOM、BOM。\",\"服务端，Node.js则会提供与服务端操作相关的对象。\"]},\"16\":{\"h\":\"\",\"t\":[\"标准关于全局对象的定义\",\"浏览器宿主的全局对象window，就新增了许多访问页面尺寸和位置的属性，如window.screenX、window.scrollY，以及许多事件监听方法，如window.ondrag、window.onblur等等。\",\"Node.js宿主，则在全局对象上新增了进程属性globalThis.process、缓冲区构造器属性globalThis.Buffer、以及一些特别的定时器方法globalThis.setImmediate()、globalThis.clearImmediate()等等。\"]},\"17\":{\"c\":[\"ECMA标准\"]},\"18\":{\"h\":\"程序执行过程\",\"t\":[\"// 全局代码 const glo_const = 1 let glo_let = 2 var glo_var = 3 class Glo_class{} function glo_fn(){ // ③ // 位于函数体内声明语句 let inner_fn_let = 4 var inner_fn_var = 5 } if(true){ // ④ // 位于块内的声明语句 let block_let = 6 // ⑤ var block_var = 7 // ⑥ function block_fn(){} // ⑦ }\"]},\"19\":{\"h\":\"\",\"t\":[\"标准\",\"创建全局执行上下文、realm记录器。realm记录器包含全局对象、全局环境记录器、固有对象。\",\"图示\",\"alt text\"]},\"20\":{\"h\":\"\",\"t\":[\"标准\",\"每一段脚本执行前，需要先解析脚本，将其转换为解析树。返回一个脚本记录器。\"]},\"21\":{\"h\":\"\",\"t\":[\"标准\",\"创建ECMAScript代码执行上下文(scriptContext) ，设置scriptContext的词法环境、变量环境指向全局环境记录器等。\",\"接着推送到执行上下文栈，使其成为运行中的执行上下文。\",\"然后进行全局声明实例化，最后对脚本语句求值。\",\"全局声明实例化以后的调用栈。\",\"alt text\"]},\"22\":{\"h\":\"\",\"t\":[\"声明实例化，不等于初始化，只有执行到对应的位置，才能知道确切的值。\",\"GlobalDeclarationInstantiation\",\"调用LexicallyDeclaredNames 、VarDeclaredNames语义收集标识符。 \",\"从结果来看LexicallyDeclaredNames只会收集let、const声明语句(只会处理Declaration)的标识符，会忽略所有的函数声明。\",\"VarDeclaredNames对语句递归的调用，收集可见var声明、函数声明的标识符。不会处理函数和类中的。\",\"如果词法声明和变量声明的连接有重复项，则抛出 SyntaxError 异常。\",\"调用VarScopedDeclarations语义收集变量声明语句varDeclarations，调用LexicallyScopedDeclarations 语义收集词法声明语句 lexDeclarations。\",\"最后得到三个列表：lexDeclarations、varDeclarations、functionsToInitialize。根据标识符的类型进行绑定 \",\"对于lexDeclarations中的标识符，绑定到全局环境记录器的[[DeclarativeRecord]]字段上。\",\"对于functionsToInitialize，实例化相应的函数对象，并绑定到全局环境记录器的[[ObjectRecord]]字段上((实际上是成为全局对象的属性))。\",\"对于varDeclarations中的标识符，绑定到全局环境记录器的[[ObjectRecord]]字段上((实际上是成为全局对象的属性))。\",\"关于严格模式\",\"非严格模式函数标识符会被实例化并初始化为undefined，严格模式下函数不会被实例化。\",\"全局声明实例化以后的调用栈。\",\"alt text\"]},\"23\":{\"c\":[\"ECMA标准\"]},\"24\":{\"h\":\"ECMA标准\"},\"25\":{\"c\":[\"ECMA标准\"]},\"26\":{\"h\":\"作用域分析\",\"t\":[\"标准使用 环境记录器(Environment Record) 来表示作用域。\",\"每个环境记录器都有一个 [[OuterEnv]] 字段指向另一个环境记录器，通过该字段连接起来的所有的环境记录器共同构成一条作用域链。\",\"作用域链例子\",\"for (var i = 1; i < 5; i++) { setTimeout(() => { console.log(i) }, i * 1000) }\",\"alt text\",\"ECMAscript执行上下文的词法环境组件指向一个环境记录器，这就是执行上下文的代码查找变量的起点，也就是作用域链的起点。\",\"调用栈上有几个ECMAScript代码执行上下文，运行环境中就有几条作用域链。\"]},\"27\":{\"h\":\"\",\"t\":[\"环境记录器存放着标识符的绑定，标准中有五种环境记录器：\",\"全局环境记录器：绑定全局顶层代码的标识符。\",\"声明式环境记录器：常用于绑定块级语句内的标识符。\",\"函数环境记录器：绑定函数体内的标识符。\",\"模块环境记录器：绑定模块顶层代码的标识符。\",\"对象环境记录器：把一个对象中的属性方法抽取出来作为标识符绑定在环境中，这是with语句和全局对象所使用的记录器。\"]},\"28\":{\"h\":\"\",\"t\":[\"声明式环境记录绑定其范围内包含的声明所定义的一组标识符。 这些标识符可能是变量、常量、let、class、模块、import和/或函数声明\"]},\"29\":{\"h\":\"\",\"t\":[\"一种声明式环境记录，表示函数的顶级作用域，并且如果函数不是一个箭头函数，则提供一个 this绑定。\",\"附加字段\",\"字段\",\"值\",\"说明\",\"[[ThisValue]]\",\"ES语言值\",\"函数调用中使用的this值\",\"[[ThisBindingStatus]]\",\"lexical, initialized或 uninitialized\",\"如果值是lexical，则这是一个箭头函数，并且没有本地的this值。\",\"[[FunctionObject]]\",\"函数对象\",\"创建此环境记录的函数对象\",\"[[NewTarget]]\",\"对象、undefined\",\"如果此环境记录是由[[Construct]]内部方法创建的， 则[[NewTarget]]是[[Construct]]的newTarget参数的值。 否则，其值为undefined。\"]},\"30\":{\"h\":\"\",\"t\":[\"一种声明式环境记录，用于表示 ECMAScript 模块 的外部作用域。\"]},\"31\":{\"h\":\"\",\"t\":[\"对象环境记录绑定一组字符串标识符名称，这些名称直接对应于其绑定对象的属性名称。\",\"附加字段\",\"字段\",\"值\",\"说明\",\"[[BindingObject]]\",\"对象\",\"环境记录绑定的对象\",\"[[IsWithEnvironment]]\",\"boolean\",\"此环境记录是否为with语句创建\"]},\"32\":{\"h\":\"\",\"t\":[\"全局环境记录用于表示所有在同一个realm中处理的ECMAScript script共享的最外层作用域。\",\"附加字段\",\"字段\",\"值\",\"说明\",\"[[ObjectRecord]]\",\"对象环境记录\",\"全局对象，包含内置绑定、全局代码中的函数声明、变量声明绑定，针对相关的Realm\",\"[[GlobalThisValue]]\",\"对象\",\"全局作用域中this返回的值。宿主可以提供任何ECMAScript对象值。\",\"[[DeclarativeRecord]]\",\"声明式环境记录器\",\"包含所有在相关领域代码中的全局代码声明的绑定，除了[[ObjectRecord]]中的绑定\",\"[[VarNames]]\",\"字符串列表\",\"在相关领域代码的全局代码中，函数声明和变量声明的绑定名称。\"]},\"33\":{\"h\":\"作用域的分析\",\"t\":[\"有的语句的求值过程中，需要创建环境记录器(并使他指向旧有的)，然后进行声明实例化，之后对每个子语句进行求值。 实例化的过程中，会收集自身区域的标识符并绑定到相应的环境记录器。 如果层层嵌套，很自然的就组成了一个作用域链。\",\"在标准中可以找到六种声明实例化操作，都需要环境记录器。\",\"GlobalDeclarationInstantiation：全局声明实例化。\",\"FunctionDeclarationInstantiation：函数声明实例化。\",\"BlockDeclarationInstantiation：块级声明实例化。\",\"ForDeclarationBindingInstantiation：for声明实例化。\",\"InitializeEnvironment：模块声明实例化。\",\"EvalDeclarationInstantiation：eval函数声明实例化。\"]},\"34\":{\"h\":\"\",\"t\":[\"简述步骤：\",\"保存当前指向上下文的词法环境oldEnv ，创建新的声明式环境记录器blockEnv(blockEnv.[[OuterEnv]]=OldEnv)。\",\"执行BlockDeclarationInstantiation。\",\"设置当前上下文的词法环境为blockEnv。\",\"对块中语句挨个执行。\",\"当前上下文的词法环境恢复为oldEnv。\"]},\"35\":{\"h\":\"\",\"t\":[\"收集标识符，并完成环境记录器的绑定。\",\"调用LexicallyScopedDeclarations收集词法声明declarations。\",\"对declarations中的元素，进行相应的绑定。 \",\"let、const做相应的可变、不可变的绑定。\",\"实例化函数对象，初始化绑定。\"]},\"36\":{\"h\":\"\",\"t\":[\"for循环在标准中分为，for和for-In、for-of、for-await-of。\",\"标准中的调用链是这样的：\",\"可以看出分歧为ForInOfLoopEvaluation(应用for-In、for-of、for-await-of)、ForLoopEvaluation(应用for)。\"]},\"37\":{\"h\":\"\",\"t\":[\"ForLoopEvaluation语义应用的其中一个代换式\",\"ForStatement : for ( LexicalDeclarationExpressionopt ; Expressionopt )Statement\",\"那他很有可能是这样的 for(let i;i<10;i++){}\",\"当在for中使用let、const时，有以下简述步骤：\",\"保存当前上下文的词法环境oldEnv，创建新的环境记录器loopEnv。\",\"对标识符进行对应的绑定，设置当前上下文的词法环境为loopEnv\",\"调用ForBodyEvaluation(，，，perIterationLets，)。 \",\"调用CreatePerIterationEnvironment语义，创建记录器，绑定标识符。\",\"重复 \",\"如果test(条件)不为空，对其求值，当false，返回v\",\"求值for块中的语句为result，LoopContinues为false(循环终止)，返回result。\",\"将v值给予result，执行CreatePerIterationEnvironment，创建记录器，绑定标识符。\",\"恢复词法环境为oldEnv。\",\"重要\",\"总来来说，为词法声明创建一次环境记录器，接着对for块不断创建环境(复制上一个记录器中的绑定和值，然后递增)记录器，直到条件达成或循环终止条件。\",\"调用栈\"]},\"38\":{\"h\":\"函数求值\",\"t\":[\"函数被调用时会触发函数的内部方法[[Call]]方法。简述步骤:\",\"创建函数的执行上下文以及函数环境记录器，并把执行上下文的词法环境指向该记录器。\",\"对函数进行声明实例化。\",\"执行函数体中的语句。 实例化\",\"对参数标识符进行实例化 2. 普通参数：如果函数调用的时候有赋值，则初始化为这个值，否则为undefined。 3. 表达式参数：如果函数调用的时候有赋值，则初始化为这个值，否则为表达式中的默认值。 此外，为了避免参数表达式的标识符与函数体变量声明的标识符发生“碰撞”，会在函数环境记录器上再创建一个声明式环境记录器，并把变量声明的标识符绑定在这个环境当中，从而实现两种类型标识符的隔离。\",\"创建arguments对象，以下情况不需要创建： \",\"函数是箭头函数。\",\"参数中有名为arguments的参数。\",\"函数体内有名为arguments的函数或标识符为arguments的词法声明语句。\",\"// 全局代码 fn_example(1) function fn_example(normal_arg, expression_arg = 2){ console.log(arguments) let fn_let = 3; var fn_var = 4; const fn_const = 5 class Fn_class{} function fn_fn(){} }\",\"alt text\",\"关于函数的环境记录器的指向问题。\",\"函数定义处进行声明实例化的时候，会OrdinaryFunctionCreate创建函数对象,并且 F.[[Environment]] 设置为 env。。\",\"当函数调用时，创建的函数环境记录器的outenv就会使用这个值。\",\"let target = \\\"global\\\" a() function a(){ let target = \\\"fn_a\\\" b() } function b(){ console.log(target) // \\\"global\\\" }\",\"alt text\"]},\"39\":{\"h\":\"闭包\"},\"40\":{\"c\":[\"ECMA标准\"]},\"41\":{\"c\":[\"作用域\"]},\"42\":{\"h\":\"如何阅读ECMA标准\",\"t\":[\"ECMA是一个js标准，他只提供抽象定义，具体实现取决于实际环境。例如Node和浏览器环境就有不同的全局对象。\",\"阅读ECMA有以下难点：\",\"概念：大量的概念横跨整个文档。\",\"产生式的上下标：简略的表达了各种含义。\",\"伪代码：只提供抽象定义。\",\"省略语义：有很多的操作序列被简化成简单的词汇存在于各种代换式中。\",\"本文只对ECMA的内容进行简单的介绍，具体需要看术语部分。\"]},\"43\":{\"h\":\"\",\"t\":[\"ECMA中的产生式(也称为非终结符号)如下所示，产生式用于说明或定义句子的组成结构。非终结符号在ECMA中显示为斜体类型。\",\"参数列表的产生式\",\"ArgumentList:AssignmentExpressionArgumentList,AssignmentExpression\",\"这说明一个参数列表(ArgumentList)可以表达为一个参数表达式(AssignmentExpression)或一个参数列表通过逗号(,)与参数列表(ArgumentList)的组合。\"]},\"44\":{\"h\":\"\",\"t\":[\"ECMA中的携带文法参数产生式如下所示，参数化的产生式是一组产生式的简写。产生式的下标如果是 [] 包括的，显然他是语法参数。\",\"参数化的产生式\",\"StatementList[Return,In]:ReturnStatementExpressionStatement\",\"该产生式是以下的缩写：\",\"参数化产生式的完整样子\",\"StatementList:ReturnStatementExpressionStatement\",\"StatementList_Return:ReturnStatementExpressionStatement\",\"StatementList_In:ReturnStatementExpressionStatement\",\"StatementList_Return_In:ReturnStatementExpressionStatement\",\"可以看出 [] 中的每个参数都经过组合。\"]},\"45\":{\"h\":\"\",\"t\":[\"ECMA在抽象操作(或称为算法)的定义时，就会展示如下的伪代码。ECMA中的语言值以粗体表示，如以下中的underfined。\",\"ToBoolean方法的抽象定义\",\"If argument is a Boolean, return argument.\",\"If argument is one of undefined, null, +0𝔽, -0𝔽, NaN, 0ℤ, or the empty String,return false.\",\"NOTE: This step is replaced in section B.3.6.1.\",\"Return true.\"]},\"46\":{\"c\":[\"ECMA标准\"]},\"47\":{\"h\":\"常量\",\"t\":[\"可以使用 const 关键字或 define() 函数两种方法来定义一个常量。个常量一旦被定义，就不能再改变或者取消定义。\",\"重要\",\"在 PHP 8.0.0 之前，使用 define() 定义的常量可能不区分大小写且可以包含保留字或非常规名称的常量。 这类常量可以通过 constant() 函数来获取名称，但是非常不推荐这种用法。\",\"常量不需要使用 $ 来访问。\",\"如果常量名是动态的，也可以用函数 constant() 来获取常量的值。\",\"用 get_defined_constants() 可以获得所有已定义的常量列表。\",\"如果要检查是否定义了某常量，请使用 defined() 函数。\",\"define(\\\"CONSTANT\\\", \\\"Hello world.\\\"); echo CONSTANT; // 输出 \\\"Hello world.\\\" echo Constant; // 抛出错误：未定义的常量 \\\"Constant\\\" // 在 PHP 8.0.0 之前，输出 \\\"Constant\\\" 并发出一个提示级别错误信息 // 简单的标量值 const CONSTANT = 'Hello World'; // .是替代性的 字符连接符号 const ANOTHER_CONST = CONSTANT.'; Goodbye World'; // 常量数组 define('ANIMALS', array( 'dog', 'cat', 'bird' ));\",\"重要\",\"和使用 define() 来定义常量相反的是，使用 const 关键字定义常量必须处于最顶端的作用域，因为用此方法是在编译时定义的。这就意味着不能在函数内，循环内以及 if 或 try/catch 语句之内用 const 来定义常量。\"]},\"48\":{\"h\":\"预定义常量\",\"t\":[\"PHP 向它运行的任何脚本提供了大量的预定义常量。不过很多常量都是由不同的扩展库定义的，只有在加载了这些扩展库时才会出现，或者动态加载后，或者在编译时已经包括进去了。\"]},\"49\":{\"h\":\"魔术常量\",\"t\":[\"一些魔术常量会根据使用位置而变化。例如 _LINE_ 的值取决于它在脚本中使用的行。所有这些“魔术”常量都在编译时解析，而常规常量则在运行时解析。这些特殊的常量不区分大小写，如下：\",\"名字\",\"说明\",\"_LINE_\",\"文件中的当前行号。\",\"_FILE_\",\"文件的完整路径和文件名。如果用在被包含文件中，则返回被包含的文件名。\",\"_DIR_\",\"文件所在的目录。如果用在被包括文件中，则返回被包括的文件所在的目录。它等价于 dirname(_FILE_)。除非是根目录，否则目录中名不包括末尾的斜杠。\",\"_FUNCTION_\",\"当前函数的名称。匿名函数则为 {closure}。\",\"_CLASS_\",\"当前类的名称。类名包括其被声明的作用域（例如 Foo\\\\Bar）。当用在 trait 方法中时，_CLASS_ 是调用 trait 方法的类的名字。\",\"_TRAIT_\",\"Trait 的名字。Trait 名包括其被声明的作用域（例如 Foo\\\\Bar）。\",\"_METHOD_\",\"类的方法名。\",\"_PROPERTY_\",\"仅在属性挂钩内有效。等同于属性的名称。\",\"_NAMESPACE_\",\"当前命名空间的名称。\",\"ClassName::class\",\"完整的类名。\"]},\"50\":{\"c\":[\"PHP\"]},\"51\":{\"c\":[\"PHP\"]},\"52\":{\"h\":\"流程控制\"},\"53\":{\"h\":\"替代语法\",\"t\":[\"PHP 提供了一些流程控制的替代语法，包括 if，while，for，foreach 和 switch。 替代语法的基本形式是把左花括号（{）换成冒号（:），把右花括号（}）分别换成 endif;，endwhile;，endfor;，endforeach; 以及 endswitch;。\",\"<?php if ($a == 5): ?> A is equal to 5 <?php endif; ?>\",\"替代语法同样可以用在 else 和 elseif 中。下面是一个包括 elseif 和 else 的 if 结构用替代语法格式写的例子：\",\"if ($a == 5): echo \\\"a equals 5\\\"; echo \\\"...\\\"; elseif ($a == 6): echo \\\"a equals 6\\\"; echo \\\"!!!\\\"; else: echo \\\"a is neither 5 nor 6\\\"; endif;\"]},\"54\":{\"h\":\"match(php8)\",\"t\":[\"match 表达式基于值的一致性进行分支计算。 match表达式和 switch 语句类似， 都有一个表达式主体，可以和多个可选项进行比较。 与 switch 不同点是，它会像三元表达式一样求值。 且他的比较是严格比较. match 表达式结构\",\"$return_value = match (subject_expression) { single_conditional_expression => return_expression, conditional_expression1, conditional_expression2 => return_expression, // 之前的条件都匹配时运行 default =>return_expression, };\",\"与比较运算符的例子\",\"$age = 18; $output = match (true) { $age < 2 => \\\"Baby\\\", $age < 13 => \\\"Child\\\", $age <= 19 => \\\"Teenager\\\", $age >= 40 => \\\"Old adult\\\", $age > 19 => \\\"Young adult\\\", }; var_dump($output); // 输出 string(8) \\\"Teenager\\\"\",\"当多个分支表达式右侧相同时，就可以用这种缩写。\",\"$result = match ($x) { // 匹配分支： $a, $b, $c => 5, // 等同于以下三个分支： $a => 5, $b => 5, $c => 5, };\",\"重要\",\"match 表达式必须详尽列出所有情况(起码要有一个满足的)。 如果主体表达式不能被任意分支条件处理， 会抛出 UnhandledMatchError。\"]},\"55\":{\"h\":\"declare(PHP 4, PHP 5, PHP 7, PHP 8)\",\"t\":[\"declare 结构用来设定一段代码的执行指令。 directive 部分允许设定 declare 代码段的行为。 目前只认识三个指令：\",\"ticks\",\"encoding\",\"strict_types 因为本指令是在文件编译时处理的，所以指令只接受字面量的值。 无法使用变量和常量。\",\"// 这样是有效的： declare(ticks=1); // 这样是无效的： const TICK_VALUE = 1; declare(ticks=TICK_VALUE);\"]},\"56\":{\"h\":\"Ticks\",\"t\":[\"Tick（时钟周期）是一个在 declare 代码段中解释器每执行 N 条可计时的低级语句就会发生的事件。N 的值是在 declare 中的 directive 部分用 ticks=N 来指定的。 在每个 tick 中出现的事件是由 register_tick_function() 来指定的。\",\"declare(ticks=1); // 不是所有语句都可计时。通常条件表达式和参数表达式都不可计时。 // 每次 tick 事件都会调用该函数 function tick_handler() { echo \\\"tick_handler() called\\\\n\\\"; } register_tick_function('tick_handler'); // 引起 tick 事件 $a = 1; // 引起 tick 事件 if ($a > 0) { $a += 2; // 引起 tick 事件 print $a; // 引起 tick 事件 }\"]},\"57\":{\"h\":\"Encoding\",\"t\":[\"用 encoding 指令来对每段脚本指定其编码方式。\",\"declare(encoding='ISO-8859-1'); // 在这里写代码\"]},\"58\":{\"c\":[\"PHP\"]},\"59\":{\"c\":[\"PHP\"]},\"60\":{\"h\":\"函数\"},\"61\":{\"h\":\"函数参数\",\"t\":[\"函数在实际调用之前，值参数( 实参 )是从左向右求值的（及早求值），并将结果赋值给函数的参数( 形参 )。 函数参数使用尾部逗号\",\"function takes_many_args( $first_arg, $second_arg, $a_very_long_argument_name, $arg_with_default = 5, // 在 8.0.0 之前，这个尾部的逗号是不允许的。 $again = 'a default string', ) {}\"]},\"62\":{\"h\":\"引用传递\",\"t\":[\"默认情况下，函数参数值通过值传递（因而即使在函数内部改变参数值，它并不会改变函数外部的值）。如果希望允许函数修改它的参数值，必须通过引用传递。 如果想要函数的参数值始终通过引用传递，可以在函数定义中该参数的前面加上符号 &：\",\"function add_some_extra(&$string) { $string .= 'and something extra.'; } $str = 'This is a string, '; add_some_extra($str); echo $str; // 输出“This is a string, and something extra.”\"]},\"63\":{\"h\":\"默认参数\",\"t\":[\"使用类似分配变量的语法定义参数的默认值。仅当参数未传递值时才使用默认值；注意传递null不会分配默认值 。\",\"unction makeyogurt($flavour, $container = \\\"bowl\\\") { return \\\"Making a $container of $flavour yogurt.\\\\n\\\"; } echo makeyogurt(\\\"raspberry\\\"); // \\\"raspberry\\\" 是 $flavour\"]},\"64\":{\"h\":\"可变数量的参数值列表\",\"t\":[\"参数列表可能包含 ... 记号，表示该函数接受可变数量的参数值。参数值将作为 array 传递到指定变量中：\",\"function sum(...$numbers) { $acc = 0; foreach ($numbers as $n) { $acc += $n; } return $acc; } echo sum(1, 2, 3, 4);\"]},\"65\":{\"h\":\"命名参数(ph8)\",\"t\":[\"PHP 8.0.0 开始引入了命名参数作为现有位置参数的扩展。命名参数允许根据参数名而不是参数位置向函数传参。这使得参数的含义自成体系，参数与顺序无关，并允许任意跳过默认值。 命名参数通过在参数名前加上冒号来传递。允许使用保留关键字作为参数名。\",\"// 参数名必须是一个标识符，不允许动态指定。 myFunction(paramName: $value); array_foobar(array: $value); // 不支持。 function_name($variableStoringParamName: $value);\",\"命名参数也可以与位置参数相结合使用。此种情况下，命名参数必须在位置参数之后。也可以只指定一个函数的部分可选参数，而不考虑它们的顺序。\",\"htmlspecialchars($string, double_encode: false); // 等价于 htmlspecialchars($string, ENT_QUOTES | ENT_SUBSTITUTE | ENT_HTML401, 'UTF-8', false);\",\"自 PHP 8.1.0 起，可以在解包参数后面使用命名参数。命名参数不能覆盖已解包的参数。\",\"function foo($a, $b, $c = 3, $d = 4) { return $a + $b + $c + $d; } var_dump(foo(...[1, 2], d: 40)); // 46 var_dump(foo(...['b' => 2, 'a' => 1], d: 40)); // 46 var_dump(foo(...[1, 2], b: 20)); // Fatal error。命名参数 $b 覆盖之前的参数\"]},\"66\":{\"h\":\"可变函数\",\"t\":[\"如果一个变量名后有圆括号，PHP 将寻找与变量的值同名的函数，并且尝试执行它。可变函数可以用来实现包括回调函数，函数表在内的一些用途。\",\"class Foo { function Variable(){ $name = 'Bar'; $this->$name(); // 调用 Bar() 方法 } function Bar(){ echo \\\"This is Bar\\\"; } } $foo = new Foo(); $funcname = \\\"Variable\\\"; $foo->$funcname(); // 调用 $foo->Variable()\",\"当调用静态方法时，函数调用要比静态属性优先：\",\"class Foo { static $variable = 'static property'; static function Variable() { echo 'Method Variable called'; } } echo Foo::$variable; // 打印 'static property'。在该作用域中需要 $variable。 $variable = \\\"Variable\\\"; Foo::$variable(); // 在该作用域中读取 $variable 调用 $foo->Variable()。\"]},\"67\":{\"h\":\"匿名函数\",\"t\":[\"匿名函数（Anonymous functions），也叫闭包函数（closures），允许 临时创建一个没有指定名称的函数。最经常用作回调函数 callable参数的值。当然，也有其它应用的情况。\",\"$greet = function($name) { printf(\\\"Hello %s\\\\r\\\\n\\\", $name); }; $greet('World'); $greet('PHP');\",\"闭包可以从父作用域中继承变量。 任何此类变量都应该用 use 语言结构传递进去。 PHP 7.1 起，不能传入此类变量： superglobals、 $this 或者和参数重名。 返回类型声明必须放在 use 子句的 后面 。\",\"$message = 'hello'; // 没有 \\\"use\\\" $example = function () { var_dump($message); }; $example(); //Notice: Undefined variable: message in /example.php on line 6 NULL // 继承 $message $example = function () use ($message) { var_dump($message); }; $example(); //string(5) \\\"hello\\\" // 当函数被定义而不是被调用的时候继承变量的值 $message = 'world'; $example(); //string(5) \\\"hello\\\" // 重置 message $message = 'hello'; // 通过引用继承 $example = function () use (&$message) { var_dump($message); }; $example(); //string(5) \\\"hello\\\" // 父级作用域改变的值反映在函数调用中 $message = 'world'; $example(); //string(5) \\\"world\\\" // 闭包函数也可以接受常规参数 $example = function ($arg) use ($message) { var_dump($arg . ' ' . $message); }; $example(\\\"hello\\\"); string(11) \\\"hello world\\\" // 返回类型在 use 子句的后面 $example = function () use ($message): string { return \\\"hello $message\\\"; }; var_dump($example()); //string(11) \\\"hello world\\\"\"]},\"68\":{\"c\":[\"PHP\"]},\"69\":{\"c\":[\"PHP\"]},\"70\":{\"h\":\"PHP\",\"t\":[\"PHP 不仅限于输出 HTML。PHP 的功能包括输出丰富的文件类型，例如图像或 PDF 文件、加密数据和发送电子邮件。还可以轻松输出任何文本，例如 JSON 或 XML。PHP 可以自动生成这些文件，并将它们保存在文件系统中，而不是将其打印出来，从而形成动态内容的服务器端缓存。\"]},\"71\":{\"h\":\"PHP标记\",\"t\":[\"PHP标记表示了一段可以被PHP解析器解析的代码。\",\"当解析一个文件时，PHP 会寻找起始和结束标记，也就是 <?php 和 ?> ，这告诉 PHP 开始和停止解析二者之间的代码。\",\"此种解析方式使得 PHP 可以被嵌入到各种不同的文档中去，而任何起始和结束标记之外的部分都会被 PHP 解析器忽略。\",\"三种PHP标记\",\"// 标准 <?php ?> 1. <?php echo 'if you want to serve PHP code in XHTML or XML documents,use these tags'; ?> // <?= ?> 是 <?php echo ?>的简写 2. You can use the short echo tag to <?= 'print this string' ?>. It's equivalent to <?php echo 'print this string' ?>. // 短标记 <? ?> 3. <? echo 'this code is within short tags, but will only work '. 'if short_open_tag is enabled'; ?>\",\"短标记是被默认开启的，但是也可以通过 short_open_tag( php.ini ) 来直接禁用。如果 PHP 在被安装时使用了 --disable-short-tags 的配置，该功能则是被默认禁用的。 如果文件内容仅仅包含 PHP 代码，最好在文件末尾删除 PHP 结束标记。这可以避免在 PHP 结束标记之后万一意外加入了空格或者换行符，会导致 PHP 开始输出这些空白，而脚本中此时并无输出的意图。\",\"<?php echo \\\"Hello world\\\"; // ... 更多代码 echo \\\"Last statement\\\"; // 脚本在此处结束，没有 PHP 结束标记\"]},\"72\":{\"h\":\"与HTML文档的混合\",\"t\":[\"在PHP标记以外的内容都会被PHP解析器忽略，这可以使php混合其他内容。\",\"混合HTML\",\"<p>This is going to be ignored by PHP and displayed by the browser.</p> <?php echo 'While this is going to be parsed.'; ?> <p>This will also be ignored by PHP and displayed by the browser.</p>\",\"这将如预期中的运行，因为当 PHP 解释器碰到 ?> 结束标记时就简单地将其后内容原样输出（除非马上紧接换行 - 见 指令分隔符）直到碰到下一个开始标记；例外是处于条件语句中间时，此时 PHP 解释器会根据条件判断来决定哪些输出，哪些跳过。见下例。 使用条件结构：\",\"<?php if ($expression == true): ?> This will show if the expression is true. <?php else: ?> Otherwise this will show. <?php endif; ?>\",\"上例中 PHP 将跳过条件语句未达成的段落，即使该段落位于 PHP 开始和结束标记之外。由于 PHP 解释器会在条件未达成时直接跳过该段条件语句块，因此 PHP 会根据条件来忽略之。 要输出大段文本时，跳出 PHP 解析模式通常比将文本通过 echo 或 print 输出更有效率。 注意: 此外注意如果将 PHP 嵌入到 XML 或 XHTML 中则需要使用 <?php?> 标记以保持符合标准。\"]},\"73\":{\"h\":\"指令分隔符\",\"t\":[\"同 C 或 Perl 一样，PHP 需要在每个语句后用分号结束指令。一段 PHP 代码中的结束标记隐含表示了一个分号；在一个 PHP 代码段中的最后一行可以不用分号结束。如果后面还有新行，则代码段的结束标记包含了行结束。 示例 #1 包含末尾换行符的结束标记的例子\",\"<?php echo \\\"Some text\\\"; ?> No newline <?= \\\"But newline now\\\" ?>\",\"以上示例会输出：\",\"Some textNo newline But newline now\",\"进入和退出 PHP 解析的例子：\",\"<?php echo 'This is a test'; ?> <?php echo 'This is a test' ?> <?php echo 'We omitted the last closing tag';\",\"注意: 文件末尾的 PHP 代码段结束标记可以不要，有些情况下当使用 include 或者 require 时省略掉会更好些，这样不期望的空白符就不会出现在文件末尾，之后仍然可以输出响应标头。在使用输出缓冲时也很便利，就不会看到由包含文件生成的不期望的空白符。\"]},\"74\":{\"h\":\"注释\",\"t\":[\"PHP 支持 C，C++ 和 Unix Shell 风格（Perl 风格）的注释。例如:\",\"<?php echo 'This is a test'; // 这是单行 c++ 样式注释 /* 这是一条多行注释 另一行也是注释 */ echo 'This is yet another test'; echo 'One Final Test'; # 这是单行 shell 风格的注释 ?>\",\"单行注释仅仅注释到行末或者当前的 PHP 代码块，视乎哪个首先出现。这意味着在 // ... ?> 或者 # ... ?> 之后的 HTML 代码将被显示出来：?> 跳出了 PHP 模式并返回了 HTML 模式，// 或 # 并不能影响到这一点。\",\"<h1>This is an <?php # echo 'simple';?> example</h1> <p>The header above will say 'This is an example'.</p>\",\"C 风格的注释在碰到第一个 */ 时结束。要确保不要嵌套 C 风格的注释。试图注释掉一大块代码时很容易出现该错误。\",\"<?php /* echo 'This is a test'; /* 这个注释会引发问题 */ */ ?>\"]},\"75\":{\"c\":[\"PHP\"]},\"76\":{\"c\":[\"PHP\"]},\"77\":{\"h\":\"class\",\"t\":[\"自 PHP 8.4.0 起，弃用使用单个下划线 _ 作为类名。一个类可以包含有属于自己的 常量，变量（称为“属性”）以及函数（称为“方法”）。\",\"<?php class SimpleClass { // 声明属性 public $var = 'a default value'; // 声明方法 public function displayVar() { echo $this->var; } } ?>\",\"当一个方法在类定义内部被调用时，有一个可用的伪变量 $this。$this 是一个到当前对象的引用。\"]},\"78\":{\"h\":\"new实例化\",\"t\":[\"如果一个变量包含一个类名的 string 和 new 时，将创建该类的一个新实例。 如果该类属于一个命名空间，则必须使用其完整名称。如果没有参数要传递给类的构造函数，类名后的括号则可以省略掉。\"]},\"79\":{\"h\":\"属性和方法\",\"t\":[\"类的属性和方法存在于不同的“命名空间”中，这意味着同一个类的属性和方法可以使用同样的名字。 如果你的类属性被分配给一个 匿名函数 你将无法直接调用它。因为访问类属性的优先级要更高，在此场景下需要用括号包裹起来调用。\",\"class Foo { public $bar; public function __construct() { $this->bar = function() { return 42; }; } } $obj = new Foo(); echo ($obj->bar)(), PHP_EOL;\"]},\"80\":{\"h\":\"构造函数\",\"t\":[\"PHP 允许开发者在一个类中定义一个方法作为构造函数（ 本质上他只是个普通函数 ）。 具有构造函数的类会在每次创建新对象时先调用此方法，所以非常适合在使用对象之前做一些初始化工作。\",\"重要\",\"如果子类中定义了构造函数则不会隐式调用其父类的构造函数。要执行父类的构造函数，需要在子类的构造函数中调用 parent::__construct()。如果子类没有定义构造函数则会如同一个普通的类方法一样从父类继承（假如没有被定义为 private 的话）。\",\"class BaseClass { function __construct() { print \\\"In BaseClass constructor\\\\n\\\"; } } class SubClass extends BaseClass { function __construct() { parent::__construct(); print \\\"In SubClass constructor\\\\n\\\"; } } class OtherSubClass extends BaseClass { // 继承 BaseClass 的构造函数 } // In BaseClass constructor $obj = new BaseClass(); // In BaseClass constructor // In SubClass constructor $obj = new SubClass(); // In BaseClass constructor $obj = new OtherSubClass();\"]},\"81\":{\"h\":\"继承\",\"t\":[\"一个类可以在声明中用 extends 关键字继承另一个类的方法和属性。PHP 不支持多重继承，一个类只能继承一个基类。\",\"被继承的方法和属性可以通过用同样的名字重新声明被覆盖。但是如果父类定义方法或者常量时使用了 final，则不可被覆盖。可以通过 parent:: 来访问被覆盖的方法或属性。\",\"重要\",\"从 PHP 8.1.0 起，常量可以声明为 final。\",\"class ExtendClass extends SimpleClass { // 同样名称的方法，将会覆盖父类的方法 function displayVar() { echo \\\"Extending class\\\\n\\\"; parent::displayVar(); } } $extended = new ExtendClass(); $extended->displayVar();\"]},\"82\":{\"h\":\"签名覆盖规则\",\"t\":[\"当覆盖（override）方法时，签名必须兼容父类方法。强制参数可以改为可选参数；添加的新参数只能是可选；放宽可见性而不是继续限制。除了构造方法和私有方法\"]},\"83\":{\"h\":\"readonly\",\"t\":[\"自 PHP 8.2.0 起，可以使用 readonly 修饰符来标记类。将类标记为 readonly 只会向每个声明的属性添加 readonly 修饰符并禁止创建动态属性。\",\"重要\",\"无类型的属性和静态属性不能用 readonly 修饰符\"]},\"84\":{\"h\":\"::class\",\"t\":[\"使用 ClassName::class 可以获取包含类 ClassName 的完全限定名称。这对使用了 命名空间 的类尤其有用。\",\"namespace NS { class ClassName { } echo ClassName::class; }\",\"自 PHP 8.0.0 起，::class 也可用于对象。\",\"namespace NS { class ClassName { } } $c = new ClassName(); print $c::class;\"]},\"85\":{\"h\":\"?>访问符\",\"t\":[\"自 PHP 8.0.0 起，类属性和方法可以通过 \\\"nullsafe\\\" 操作符访问： ?->。 对象引用解析（dereference）为 null 时不抛出异常，而是返回 null。 并且如果是链式调用中的一部分，剩余链条会直接跳过。\",\"// 自 PHP 8.0.0 起可用 $result = $repository?->getUser(5)?->name; // 上边那行代码等价于以下代码 if (is_null($repository)) { $result = null; } else { $user = $repository->getUser(5); if (is_null($user)) { $result = null; } else { $result = $user->name; } }\"]},\"86\":{\"h\":\"属性\",\"t\":[\"类的变量成员叫做属性，或者叫字段。 属性开头至少使用一个修饰符（比如 访问控制（可见性）、静态（static）关键字或者自 PHP 8.1.0 起支持的 readonly）， 除了 readonly 属性之外都是可选的，然后自 PHP 7.4 起可以跟一个类型声明，然后跟一个普通的变量声明来组成。属性中的变量可以初始化，但是初始化的值必须是 常量值。\",\"重要\",\"没有声明访问控制（可见性）修饰符的属性将默认声明为public。\",\"->\",\"->（对象运算符）：$this->property（其中 property 是该属性名）这种方式来访问非静态属性。 静态属性则是用 \"]},\"87\":{\"h\":\"类型声明\",\"t\":[\"从 PHP 7.4.0 开始，属性定义可以包含类型声明，但 callable 除外。\",\"class User { public int $id; public ?string $name; public function __construct(int $id, ?string $name) { $this->id = $id; $this->name = $name; } } $user = new User(1234, null); var_dump($user->id); var_dump($user->name);\"]},\"88\":{\"h\":\"只读(地址)\",\"t\":[\"自 PHP 8.1.0 起，可以使用 readonly 修饰符声明属性，防止初始化后修改属性。 不支持静态属性，且必须在他的声明作用域内初始化。 然而，只读属性并不会妨碍内部可变性。存储在只读属性中的对象（或资源）仍然可以在内部修改：\",\"class Test { public function __construct(public readonly object $obj) {} } $test = new Test(new stdClass); // 内部可变正常。 $test->obj->foo = 1; // 赋值异常。 $test->obj = new stdClass;\"]},\"89\":{\"h\":\"动态属性\",\"t\":[\"如果尝试在 object 上赋值不存在的属性，PHP 将会自动创建相应的属性。动态创建的属性将仅能在此类实例上使用。\",\"重要\",\"自 PHP 8.2.0 起弃用动态属性。建议更改为属性声明。要处理任意属性名称，类应该实现魔术方法 __get() 和 __set()。最后可以使用 #[\\\\AllowDynamicProperties] 注解标记此类。\"]},\"90\":{\"h\":\"属性钩子（拦截器、代理\",\"t\":[\"属性钩子是拦截和覆盖属性的读写行为的一种方法。 这个功能有两个目的：\",\"它允许直接使用属性，而不需要get和set方法， 同时为将来添加其他行为留有余地。 这使得大多数样板get/set方法变得不必要， 即使不使用钩子\",\"它允许不需要存储就能描述对象的属性 直接一个值。 在非静态属性上有两个钩子： get 和 set 。 它们分别允许重写属性的读和写行为。 钩子可用于类型化和非类型化属性。\",\"重要\",\"属性挂钩是在PHP 8.4中引入的。属性挂钩与 readonly 属性不兼容。\",\"class Example { private bool $modified = false; public string $foo = 'default value' { get { if ($this->modified) { return $this->foo . ' (modified)'; } return $this->foo; } set(string $value) { $this->foo = strtolower($value); $this->modified = true; } } } $example = new Example(); $example->foo = 'changed'; print $example->foo;\"]},\"91\":{\"h\":\"类常量\",\"t\":[\"类常量的默认可见性是 public。\",\"重要\",\"类常量可以通过子类重新定义。PHP 8.1.0 起，如果类常量定义为 final，则不能被子类重新定义。\",\"class MyClass { const CONSTANT = 'constant value'; function showConstant() { echo self::CONSTANT . \\\"\\\\n\\\"; } } echo MyClass::CONSTANT . \\\"\\\\n\\\"; $classname = \\\"MyClass\\\"; echo $classname::CONSTANT . \\\"\\\\n\\\"; $class = new MyClass(); $class->showConstant(); echo $class::CONSTANT.\\\"\\\\n\\\";\",\"重要\",\"自 PHP 8.3.0 起，可以使用变量动态获取类常量。\",\"class Foo { public const BAR = 'bar'; private const BAZ = 'baz'; } $name = 'BAR'; echo Foo::{$name}, PHP_EOL; // bar\"]},\"92\":{\"h\":\"类自动引入\",\"t\":[\"spl_autoload_register() 函数可以注册任意数量的自动加载器，当使用尚未被定义的类（class）和接口（interface）时自动去加载。通过注册自动加载器，脚本引擎在 PHP 出错失败前有了最后一个机会加载所需的类。 像 class 一样的结构都可以以相同方式自动加载。包括类、接口、trait 和枚举。\",\"重要\",\"PHP 8.0.0 之前，可以使用 __autoload() 自动加载类和接口。然而，它是 spl_autoload_register() 的一种不太灵活的替代方法，并且 __autoload() 在 PHP 7.2.0 起弃用，在 PHP 8.0.0 起移除。\",\"spl_autoload_register(function ($class_name) { require_once $class_name . '.php'; }); $obj = new MyClass1(); $obj2 = new MyClass2();\"]},\"93\":{\"c\":[\"PHP\"]},\"94\":{\"c\":[\"PHP\"]},\"95\":{\"h\":\"运算符\"},\"96\":{\"h\":\"位运算\",\"t\":[\"例子\",\"名称\",\"结果\",\"$a & $b\",\"And（按位与）\",\"将把 $a 和 $b 中都为 1 的位设为 1。\",\"$a | $b\",\"Or（按位或）\",\"将把 $a 和 $b 中任何一个为 1 的位设为 1。\",\"$a ^ $b\",\"Xor（按位异或）\",\"将把 $a 和 $b 中一个为 1 另一个为 0 的位设为 1。\",\"~ $a\",\"Not（按位取反）\",\"将 $a 中为 0 的位设为 1，反之亦然。\",\"$a << $b\",\"Shift left（左移）\",\"将 $a 中的位向左移动 $b 次（每一次移动都表示“乘以 2”）。\",\"$a >> $b\",\"Shift right（右移）\",\"将 $a 中的位向右移动 $b 次（每一次移动都表示“除以 2”）。\"]},\"97\":{\"h\":\"比较运算\",\"t\":[\"例子\",\"名称\",\"结果\",\"$a == $b\",\"等于\",\"true，如果类型转换后 $a 等于 $b。\",\"$a === $b\",\"全等\",\"true，如果 $a 等于 $b，并且它们的类型也相同。\",\"$a != $b\",\"不等\",\"true，如果类型转换后 $a 不等于 $b。\",\"$a <> $b\",\"不等\",\"true，如果类型转换后 $a 不等于 $b。\",\"$a !== $b\",\"不全等\",\"true，如果 $a 不等于 $b，或者它们的类型不同。\",\"$a < $b\",\"小于\",\"true，如果 $a 严格小于 $b。\",\"$a > $b\",\"大于\",\"true，如果 $a 严格大于 $b。\",\"$a <= $b\",\"小于等于\",\"true，如果 $a 小于或者等于 $b。\",\"$a >= $b\",\"大于等于\",\"true，如果 $a 大于或者等于 $b。\",\"$a <=> $b\",\"太空船运算符（组合比较符）\",\"当$a小于、等于、大于 $b时 分别返回一个小于、等于、大于0的 int 值。\"]},\"98\":{\"h\":\"三元表达式\",\"t\":[\"“?:”（或三元）运算符 。\",\"// 三元运算符的例子 $action = (empty($_POST['action'])) ? 'default' : $_POST['action']; // 以上等同于以下的 if/else 语句 if (empty($_POST['action'])) { $action = 'default'; } else { $action = $_POST['action']; }\",\"重要\",\"表达式 expr1 ?: expr3 等同于如果 expr1 求值为 true 时返回 expr1 的结果，否则返回 expr3。expr1 在这里仅执行一次。\",\"在 PHP 8.0.0 之前，三元运算符是从左到右执行的， 而大多数其他编程语言是从右到左的。 自 PHP 7.4.0 起，弃用依靠左联。 PHP 8.0.0 起，三元运算符是非关联的。\",\"// 乍看起来下面的输出是 'true',实际输出是't'，因为在 PHP 8.0.0 之前三元运算符是左联的 echo (true ? 'true' : false ? 't' : 'f'); // 下面是与上面等价的语句，但更清晰 echo ((true ? 'true' : 'false') ? 't' : 'f');\"]},\"99\":{\"h\":\"NULL合并\",\"t\":[\"// NULL 合并运算符的例子 $action = $_POST['action'] ?? 'default'; // 以上例子等同于于以下 if/else 语句 if (isset($_POST['action'])) { $action = $_POST['action']; } else { $action = 'default'; }\"]},\"100\":{\"h\":\"错误控制\",\"t\":[\"PHP 支持一个错误控制运算符：@。当将其放置在一个 PHP 表达式之前，该表达式可能产生的任何错误诊断都被抑制。 如果用 set_error_handler() 设定了自定义的错误处理函数，即使诊断信息被抑制，也仍然会被调用。 error_get_last() 返回数组中的 \\\"message\\\" 元素储存了表达式产生的任意错误信息。 此函数的返回结果会随着每次错误的发生而相应变化，所以需要尽早检查。\",\"/* 故意文件错误 */ $my_file = @file ('non_existent_file') or die (\\\"Failed opening file: error was '\\\" . error_get_last()['message'] . \\\"'\\\"); // 这适用于所有表达式，而不仅仅是函数： $value = @$cache[$key]; // 如果索引 $key 不存在，则不会发出通知。\",\"重要\",\"@ 运算符只对 表达式 有效。 对新手来说一个简单的规则就是：如果能从某处获得值，就能在它前面加上 @ 运算符。 例如，可以把它放在变量，函数调用，某些语言构造调用（例如 include ）等等之前。 不能把它放在函数或类的定义之前，也不能用于条件结构例如 if 和 foreach 等。\"]},\"101\":{\"h\":\"执行运算符\",\"t\":[\"PHP 支持一个执行运算符：反引号（``）。 PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回。 使用反引号运算符“`”的效果与函数 shell_exec() 相同。\",\"$output = `ls -al`; echo \\\"<pre>$output</pre>\\\";\",\"重要\",\"关闭了 shell_exec() 时反引号运算符是无效的。\"]},\"102\":{\"h\":\"数组运算符\",\"t\":[\"例子\",\"名称\",\"结果\",\"$a + $b\",\"联合\",\"把b的数组元素附加到a的数组后面，对于系统的键值对，使用a的\",\"$a == $b\",\"相等\",\"如果 $a 和 $b 具有相同的键／值对则为 true。\",\"$a === $b\",\"全等\",\"如果 $a 和 $b 具有相同的键／值对并且顺序和类型都相同则为 true。\",\"$a != $b\",\"不等\",\"如果 $a 不等于 $b 则为 true。\",\"$a <> $b\",\"不等\",\"如果 $a 不等于 $b 则为 true。\",\"$a !== $b\",\"不全等\",\"如果 $a 不全等于 $b 则为 true。\"]},\"103\":{\"h\":\"类型运算符\",\"t\":[\"instanceof 用于确定一个 PHP 变量是否属于某一类 class 的实例（即对象）\",\"class MyClass{} class NotMyClass{} $a = new MyClass; var_dump($a instanceof MyClass); var_dump($a instanceof NotMyClass);\",\"instanceof 也可用来确定一个变量是不是继承自某一父类的子类的实例：\",\"class ParentClass{} class MyClass extends ParentClass{} $a = new MyClass; var_dump($a instanceof MyClass); var_dump($a instanceof ParentClass);\",\"instanceof也可用于确定一个变量是不是实现了某个接口的对象的实例:\",\"interface MyInterface{} class MyClass implements MyInterface{} $a = new MyClass; var_dump($a instanceof MyClass); var_dump($a instanceof MyInterface);\"]},\"104\":{\"c\":[\"PHP\"]},\"105\":{\"c\":[\"PHP\"]},\"106\":{\"h\":\"类型\"},\"107\":{\"h\":\"类型系统\",\"t\":[\"PHP 的类型系统支持各种原子类型，可以组合在一起创建更加复杂的类型。其中一些类型可以写成类型声明。\"]},\"108\":{\"h\":\"原子类型\",\"t\":[\"内置类型\",\"标量类型： 1. bool类型 2. int类型 3. float类型 4. string类型\",\"array类型：引用类型\",\"object类型\",\"resource类型\",\"never类型\",\"void类型\",\"相对类的类型：self、parent、static\",\"单例类型：false和true\",\"单值类型：null\",\"用户定义的类型：使用interface、class、枚举定义的自定义类型\",\"接口\",\"类\",\"枚举\",\"callable类型\"]},\"109\":{\"h\":\"复合类型\",\"t\":[\"交集类型:通过实现多个接口、泛型或类型约束来实现\",\"<?php declare(strict_types=1); // 定义两个接口 interface Flyable { public function fly(): void; } interface Swimmable { public function swim(): void; } // 实现交集的类（同时实现两个接口） class Duck implements Flyable, Swimmable { public function fly(): void { echo \\\"Duck is flying!\\\"; } public function swim(): void { echo \\\"Duck is swimming!\\\"; } } // 使用交集类型（通过类型检查） function checkCapabilities(object $object): void { if ($object instanceof Flyable && $object instanceof Swimmable) { echo \\\"This object can both fly and swim!\\\"; } else { echo \\\"Not a valid capability!\\\"; } } // 测试 $duck = new Duck(); checkCapabilities($duck); // 输出：This object can both fly and swim! ?>\",\"联合类型：接受多个不同类型的值，可接受的类型之间使用 | 符号 连接。如果其中一种类型是交集类型，需要使用括号括起来，在 DNF 中写成：T|(X&Y) 。\",\"<?php declare(strict_types=1); class User { // 定义属性，使用联合类型（string | int | null） public string|int|null $id; public string $name; public float|int $age; // age 可以是整数或浮点数 // 构造函数，强制类型约束 public function __construct( string|int|null $id, string $name, float|int $age ) { $this->id = $id; $this->name = $name; $this->age = $age; } // 方法：根据 id 类型输出不同信息 public function printId(): void { if (is_int($this->id)) { echo \\\"ID (int): \\\" . $this->id; } elseif (is_string($this->id)) { echo \\\"ID (string): \\\" . $this->id; } else { echo \\\"ID is null\\\"; } } } // 使用示例 $user1 = new User(123, \\\"Alice\\\", 25); // int 类型的 id $user2 = new User(\\\"user_456\\\", \\\"Bob\\\", 30.5); // string 类型的 id，float 类型的 age $user1->printId(); // 输出：ID (int): 123 $user2->printId(); // 输出：ID (string): user_456 ?>\"]},\"110\":{\"h\":\"类型别名\",\"t\":[\"PHP 支持两种类型别名：mixed 和 iterable，分别对应 object|resource|array|string|float|int|bool|null 和 Traversable|array 的 联合类型。 注意: PHP 不支持用户定义类型别名。\"]},\"111\":{\"h\":\"NULL\",\"t\":[\"未定义和 unset() 的变量都将解析为值 null。 null 类型只有一个值，就是不区分大小写的常量 null。\",\"// 不区分大小写 <?php $var = NULL; ?>\"]},\"112\":{\"h\":\"Boolean布尔类型\",\"t\":[\"bool 仅有两个值，用于表达真（truth）值，不是 true 就是 false。同样的不区分大小写。\",\"<?php $foo = True; // 设置 $foo 为 TRUE ?>\"]},\"113\":{\"h\":\"int整型\",\"t\":[\"Int 可以使用十进制，十六进制，八进制或二进制表示，前面可以加上可选的符号（- 或者 +）。 可以用负运算符 来表示一个负的 int。\",\"<?php $a = 1234; // 十进制数 $a = 0123; // 八进制数 (等于十进制 83) $a = 0o123; // 八进制数 (PHP 8.1.0 起) $a = 0x1A; // 十六进制数 (等于十进制 26) $a = 0b11111111; // 二进制数字 (等于十进制 255) $a = 1_234_567; // 整型数值 (PHP 7.4.0 以后) ?>\",\"PHP 不支持无符号的 int。int 值的字长可以用常量 PHP_INT_SIZE来表示， 最大值可以用常量 PHP_INT_MAX 来表示， 最小值可以用常量 PHP_INT_MIN 表示。\"]},\"114\":{\"h\":\"溢出\",\"t\":[\"如果给定的一个数超出了 int 的范围，将会被解释为 float。同样如果执行的运算结果超出了 int 范围，也会返回 float。\"]},\"115\":{\"h\":\"整数除法\",\"t\":[\"PHP 没有 int 除法取整运算符，要使用 intdiv() 实现。 1/2 产生出 float 0.5。 值可以舍弃小数部分，强制转换为 int，或者使用 round() 函数可以更好地进行四舍五入。\",\"<?php var_dump(25/7); // float(3.5714285714286) var_dump((int) (25/7)); // int(3) var_dump(round(25/7)); // float(4) ?>\"]},\"116\":{\"h\":\"Float浮点型\",\"t\":[\"浮点型（也叫浮点数 float，双精度数 double 或实数 real）可以用以下任一语法定义：\",\"<?php $a = 1.234; $b = 1.2e3; $c = 7E-10; $d = 1_234.567; // 从 PHP 7.4.0 开始支持 ?>\"]},\"117\":{\"h\":\"比较\",\"t\":[\"由于内部表达方式的原因，比较两个浮点数是否相等是有问题的。不过还是有迂回的方法来比较浮点数值的。 要测试浮点数是否相等，要使用一个仅比该数值大一丁点的最小误差值。该值也被称为机器极小值（epsilon）或最小单元取整数，是计算中所能接受的最小的差别值。 $a 和 $b 在小数点后五位精度内都是相等的。\",\"<?php $a = 1.23456789; $b = 1.23456780; $epsilon = 0.00001; if(abs($a-$b) < $epsilon) { echo \\\"true\\\"; } ?>\"]},\"118\":{\"h\":\"NaN\",\"t\":[\"某些数学运算会产生一个由常量 NAN 所代表的结果。此结果代表着一个在浮点数运算中未定义或不可表述的值。任何拿此值与其它任何值（除了 true）进行的松散或严格比较的结果都是 false。 由于 NAN 代表着任何不同值，不应拿 NAN 去和其它值进行比较，包括其自身，应该用 is_nan() 来检查。\"]},\"119\":{\"h\":\"string\",\"t\":[\"一个字符串 string 就是由一系列的字符组成，其中每个字符等同于一个字节。这意味着 PHP 只能支持 256 的字符集，因此不支持 Unicode 。 一个字符串可以用 4 种方式表达：\",\"单引号\",\"双引号\",\"heredoc 语法结构\",\"nowdoc 语法结构\"]},\"120\":{\"h\":\"单引号\",\"t\":[\"在单引号字符串中的 变量 和 特殊字符 的转义序列将不会被替换。\",\"<?php echo 'this is a simple string'; // 可以断行 echo 'You can also have embedded newlines in strings this way as it is okay to do'; // 对单引号转义 echo 'Arnold once said: \\\"I\\\\'ll be back\\\"'; // 反斜杠转义 echo 'You deleted C:\\\\\\\\*.*?'; // 输出： You deleted C:\\\\*.*? echo 'You deleted C:\\\\*.*?'; // 输出： This will not expand: \\\\n a newline echo 'This will not expand: \\\\n a newline'; // 输出： Variables do not $expand $either echo 'Variables do not $expand $either'; ?>\"]},\"121\":{\"h\":\"双引号\",\"t\":[\"PHP会对双引号中的特殊字符进行解析,对于包含的变量，具备模板字符串的能力\",\"序列\",\"含义\",\"\\\\n\",\"换行\",\"\\\\r\",\"回车\",\"\\\\t\",\"水平制表符\",\"\\\\v\",\"垂直制表符\",\"\\\\e\",\"Escape\",\"\\\\f\",\"换页\",\"\\\\\\\\\",\"反斜线\",\"$\",\"美元标记\",\"\\\\\\\"\",\"双引号\",\"\\\\\",\"八进制\",\"\\\\x\",\"十六进制\",\"\\\\u\",\"Unicode\"]},\"122\":{\"h\":\"Heredoc结构\",\"t\":[\"由 <<< 标识符 内容 标识符包裹的内容。 在 heredoc 结构中单引号不用被转义，但是上文中列出的转义序列还可以使用。变量将被替换，但在 heredoc 结构中含有复杂的变量时要像 string 一样格外小心。\",\"<?php $name = 'MyName'; echo <<<EOT My name is \\\"$name\\\". I am printing some. Now, I am printing some. This should print a capital 'A': \\\\x41 EOT; ?> // 输出 // My name is \\\"MyName\\\". I am printing some Foo. // Now, I am printing some Bar2. // This should print a capital 'A': A\"]},\"123\":{\"h\":\"Nowdoc结构\",\"t\":[\"类似于单引号，不会发生转义和插值。\",\"<?php echo <<<'EOD' Example of string spanning multiple lines using nowdoc syntax. Backslashes are always treated literally, e.g. \\\\\\\\ and \\\\'. EOD; // 以上示例会输出： Example of string spanning multiple lines using nowdoc syntax. Backslashes are always treated literally, e.g. \\\\\\\\ and \\\\'.\"]},\"124\":{\"h\":\"array数组\",\"t\":[\"PHP 中的 array 实际上是一个有序映射。映射是一种把 values 关联到 keys 的类型。\",\"声明\",\"// 关联数组 $array = [\\\"foo\\\" => \\\"bar\\\",\\\"bar\\\" => \\\"foo\\\",]; // 键值只支持int和string，且转换后的键值后者覆盖前者 $array = array(1=> \\\"a\\\",\\\"1\\\" => \\\"b\\\",1.5 => \\\"c\\\",true => \\\"d\\\",); // 未提供键值，为上一个+1 $array = array(\\\"a\\\",\\\"b\\\",6 => \\\"c\\\",\\\"d\\\",); // 对于负数键值也成立，PHP 8.3.0 之前，分配负整数 key n 会将下一个 key 分配给 0 $array = []; $array[-5] = 1; $array[] = 2;\"]},\"125\":{\"h\":\"访问\",\"t\":[\"使用 [] 来访问键值对\",\"$arr = array(5 => 1, 12 => 2); // 添加 $arr[] = 56; // 添加 $arr[\\\"x\\\"] = 42; unset($arr[5]); // 从数组中删除元素 unset($arr);\",\"最大整数键名目前不需要存在于 array 中。 它只要在上次 array 重新生成索引后曾经存在于 array 就行了\",\"<?php // 创建一个简单的数组 $array = array(1, 2, 3, 4, 5); print_r($array); // 现在删除其中的所有元素，但保持数组本身不变: foreach ($array as $i => $value) { unset($array[$i]); } print_r($array); // 添加一个单元（注意新的键名是 5，而不是你可能以为的 0） $array[] = 6; print_r($array); // 重新索引： $array = array_values($array); $array[] = 7; print_r($array); ?>\"]},\"126\":{\"h\":\"数组解构\",\"t\":[\"使用 []或者 list() 语言结构解包数组\",\"<?php $source_array = ['foo', 'bar', 'baz']; [$foo, $bar, $baz] = $source_array; echo $foo; // 打印 \\\"foo\\\" echo $bar; // 打印 \\\"bar\\\" echo $baz; // 打印 \\\"baz\\\" ?>\",\"多维数组\",\"$source_array = [[1, 'John'],[2, 'Jane'],]; foreach ($source_array as [$id, $name]) { // 这里是 $id 和 $name 的逻辑 }\",\"如果变量未提供，数组元素将会被忽略。数组解包始终从索引 0 开始。\",\"$source_array = ['foo', 'bar', 'baz']; // 将索引 2 的元素分配给变量 $baz [, , $baz] = $source_array; echo $baz; // 打印 \\\"baz\\\"\",\"自 PHP 7.1.0 起，也可以解包关联数组。这在数字索引数组中更容易选择正确的元素，因为可以显式指定索引。\",\"$source_array = ['foo' => 1, 'bar' => 2, 'baz' => 3]; // 将索引 'baz' 处的元素分配给变量 $three ['baz' => $three] = $source_array; echo $three; // 打印 3 $source_array = ['foo', 'bar', 'baz']; // 将索引 2 处的元素分配给变量 $baz [2 => $baz] = $source_array; echo $baz; // 打印 \\\"baz\\\"\",\"数组解包可以方便的用于两个变量交换。\",\"<?php $a = 1; $b = 2; [$b, $a] = [$a, $b]; echo $a; // 打印 2 echo $b; // 打印 1 ?>\"]},\"127\":{\"h\":\"数组展开\",\"t\":[\"在 array 定义时，用 ... 前缀的一个 array 可以被展开到当前位置。 只有实现了 Traversable 的数组和对象才能被展开。\",\"<?php // 使用简短的数组语法。 // 亦可用于 array() 语法 $arr1 = [1, 2, 3]; $arr2 = [...$arr1]; //[1, 2, 3] $arr3 = [0, ...$arr1]; //[0, 1, 2, 3] $arr4 = [...$arr1, ...$arr2, 111]; //[1, 2, 3, 1, 2, 3, 111] $arr5 = [...$arr1, ...$arr1]; //[1, 2, 3, 1, 2, 3] function getArr() { return ['a', 'b']; } $arr6 = [...getArr(), 'c' => 'd']; //['a', 'b', 'c' => 'd'] ?>\",\"key 为字符时，后面的字符键会覆盖之前的字符键；key 为 integer 时则会重新编号：\",\"三种PHP标记\",\"在 PHP 8.1 之前，带有 string 键的 array 无法解包\"]},\"128\":{\"h\":\"拷贝\",\"t\":[\"可以通过引用传递 array 的值来直接更改数组的值。\",\"<?php foreach ($colors as &$color) { // $clolor $color = mb_strtoupper($color); } unset($color); /* 确保后面对$color 的写入不会修改最后一个数组元素 */ print_r($colors); ?>\"]},\"129\":{\"h\":\"object\",\"t\":[\"使用 class 定义类， new 关键字实例化为对象。\",\"class foo { function do_foo() { echo \\\"Doing foo.\\\"; } } $bar = new foo; $bar->do_foo();\"]},\"130\":{\"h\":\"枚举(PHP 8 >= 8.1.0)\",\"t\":[\"枚举是在类、类常量基础上的约束层， 目标是提供一种能力：定义包含可能值的封闭集合类型。\",\"<?php enum Suit { case Hearts; case Diamonds; case Clubs; case Spades; } function do_stuff(Suit $s) { // ... } do_stuff(Suit::Spades); ?>\"]},\"131\":{\"h\":\"Resource 资源类型\",\"t\":[\"资源 resource 是一种特殊变量，保存了到外部资源的一个引用。资源是通过专门的函数来建立和使用的。 资源类型变量保存有为打开文件、数据库连接、图形画布区域等的特殊句柄。\"]},\"132\":{\"h\":\"Callback / Callable 类型\",\"t\":[\"回调可以通过 callable 类型声明来表示。 一些函数如 call_user_func() 或 usort() 可以接受用户自定义的回调函数作为参数。回调函数不止可以是简单函数，还可以是对象的方法，包括静态类方法。\"]},\"133\":{\"h\":\"Mixed\",\"t\":[\"在类型理论中，mixed 是顶级类型。这意味着其它所有类型都是它的子类型。\"]},\"134\":{\"h\":\"void\",\"t\":[\"void 是仅用于返回类型，表示函数不返回值，但该函数仍可能会终止。因此，它不能成为联合类型声明的一部分。自 PHP 7.1.0 起可用。\"]},\"135\":{\"h\":\"Never\",\"t\":[\"never 是仅用于返回的类型，表示函数不会终止。这意味着它要么调用 exit()，要么抛出异常，要么无限循环。因此，它不能是联合类型声明的一部分。自 PHP 8.1.0 起可用。\"]},\"136\":{\"h\":\"可迭代c'c'c'c'cccccc\",\"t\":[\"Iterable 是内置编译时 array|Traversable 的类型别名。从 PHP 7.1.0 到 PHP 8.2.0 之间的描述来看，iterable 是内置伪类型，充当上述类型别名，也可以用于类型声明。iterable 类型可用于 foreach 或在生成器中使用 yield from。\"]},\"137\":{\"c\":[\"PHP\"]},\"138\":{\"c\":[\"PHP\"]},\"139\":{\"h\":\"变量\",\"t\":[\"变量用一个美元符号后面跟变量名来表示。变量名是区分大小写的。 有效的变量名由字母（A-Z、a-z 或 128 到 255 之间的字节）或者下划线开头，后面跟上任意数量的字母，数字，或者下划线。\"]},\"140\":{\"h\":\"引用赋值\",\"t\":[\"新的变量简单的引用了原始变量。改动新的变量将影响到原始变量，反之亦然。\",\"<?php $foo = 'Bob'; // 将 'Bob' 赋给 $foo $bar = &$foo; // 通过 $bar 引用 $foo $bar = \\\"My name is $bar\\\"; // 修改 $bar 变量 echo $bar; echo $foo; // $foo 的值也被修改 ?>\"]},\"141\":{\"h\":\"预定义变量\",\"t\":[\"PHP 提供了许多 预定义变量。PHP 提供了一套附加的预定数组，这些数组变量包含了来自 web 服务器（如果可用），运行环境，和用户输入的数据。这些数组在每个作用域内自动可用。因此通常被称为自动全局变量（autoglobals）或者超全局变量（superglobals）。\"]},\"142\":{\"h\":\"作用域\",\"t\":[\"PHP 有函数作用域和全局作用域。在函数之外定义的任何变量都仅限于全局作用域。 当包含文件时，该文件中的代码继承了包含语句所在行的变量作用域。\",\"<?php $a = 1; include 'b.inc'; // 变量 $a 将在 b.inc 内可用 ?>\",\"在命名函数或匿名函数内创建的任何变量都仅限于函数主体的作用域。然而，箭头函数会绑定父级作用域中的变量，使其在函数体内可用。 如果在函数内部 include 文件，那么包含文件中的变量将如同在调用函数内部定义一样可用。\"]},\"143\":{\"h\":\"global\",\"t\":[\"global 关键字用于将变量从全局作用域绑定到局部作用域。该关键字可以与变量列表或单个变量一起使用。 将创建引用同名全局变量的局部变量。如果全局变量不存在，则将在全局作用域内创建该变量并赋值为 null。\",\"$a = 1; $b = 2; function Sum() { global $a, $b; $b = $a + $b; } Sum(); echo $b;\",\"访问变量的第二个办法，是用特殊的 PHP 自定义 $GLOBALS 数组。\",\"$a = 1; $b = 2; function Sum() { $GLOBALS['b'] = $GLOBALS['a'] + $GLOBALS['b']; } Sum(); echo $b;\",\"$GLOBALS 是一个关联数组，每一个变量为一个元素，键名对应变量名，值对应变量的内容。$GLOBALS 之所以在全局作用域内存在，是因为 $GLOBALS 是一个超全局变量。\"]},\"144\":{\"h\":\"static\",\"t\":[\"变量作用域的另一个重要特性是 static 变量。静态变量仅在局部函数作用域中存在，但当程序执行离开此作用域时，其值并不丢失。\",\"function test() { // a有着局部作用域，但生命周期极长 static $a = 0; echo $a; $a++; }\",\"在 PHP 8.3.0 之前，静态变量只能使用常量表达式进行初始化。自 PHP 8.3.0 起，还允许使用动态表达式（例如函数调用）：\",\"function foo(){ static $int = 0; // 正确 static $int = 1+2; // 正确 static $int = sqrt(121); // 自 PHP 8.3.0 起正确 $int++; echo $int; }\"]},\"145\":{\"h\":\"可变变量名\",\"t\":[\"有时候使用可变变量名是很方便的。就是说，一个变量的变量名可以动态的设置和使用。 一个可变变量获取了一个普通变量的值作为这个可变变量的变量名。\",\"// $a 的内容是“hello”并且 $hello 的内容是“world” $a = 'hello'; $$a = 'world'; // echo \\\"$a {$$a}\\\"; echo \\\"$a $hello\\\";\"]},\"146\":{\"h\":\"来自PHP之外的变量\"},\"147\":{\"h\":\"HTML表单（GET 和 POST）\",\"t\":[\"当一个表单提交给 PHP 脚本时，表单中的信息会自动在脚本中可用。有几个方法访问此信息，例如：\",\"<form action=\\\"foo.php\\\" method=\\\"POST\\\"> Name: <input type=\\\"text\\\" name=\\\"username\\\"><br /> Email: <input type=\\\"text\\\" name=\\\"email\\\"><br /> <input type=\\\"submit\\\" name=\\\"submit\\\" value=\\\"Submit me!\\\" /> </form>\",\"只有两种方法可以访问 HTML 表单中的数据。以下列出了当前有效的方法：\",\"echo $_POST['username']; echo $_REQUEST['username'];\",\"使用 GET 表单也类似，只不过要用适当的 GET 预定义变量。GET 也适用于 QUERY_STRING（URL 中在“?”之后的信息）。 因此，举例说，http://www.example.com/test.php?id=3 包含有可用 $_GET['id'] 来访问的 GET 数据。\",\"重要\",\"变量名中的点和空格被转换成下划线。例如 变成了 $_REQUEST[\\\"a_b\\\"]。\",\"PHP 也理解表单变量上下文中的数组。例如可以将相关的变量编成组，或者用此功能从多选输入框中取得值。例如，将表单 POST 给自己并在提交时显示数据：\",\"<?php if ($_POST) { echo '<pre>'; // htmlspecialchars将特定的·html字符转为HTML实体字符 echo htmlspecialchars(print_r($_POST, true)); echo '</pre>'; } ?> <form action=\\\"\\\" method=\\\"post\\\"> Name: <input type=\\\"text\\\" name=\\\"personal[name]\\\" /><br /> Email: <input type=\\\"text\\\" name=\\\"personal[email]\\\" /><br /> Beer: <br /> <select multiple name=\\\"beer[]\\\"> <option value=\\\"warthog\\\">Warthog</option> <option value=\\\"guinness\\\">Guinness</option> <option value=\\\"stuttgarter\\\">Stuttgarter Schwabenbräu</option> </select><br /> <input type=\\\"submit\\\" value=\\\"submit me!\\\" /> </form>\",\"重要\",\"如果外部变量名以有效的数组语法开头，则将会忽略尾随字符。例如， <\\\\input name=\\\"foo[\\\\bar]baz\\\"> 变为 $_REQUEST ['foo']['bar']。\",\"IMAGE SUBMIT 变量名 当提交表单时，可以用一幅图像代替标准的提交按钮，用类似这样的标记：\",\"<input type=\\\"image\\\" src=\\\"image.gif\\\" name=\\\"sub\\\" />\",\"当用户点击到图像中的某处时，相应的表单会被传送到服务器，并加上两个变量 sub_x 和 sub_y。 它们包含了用户点击图像的坐标。有经验的用户可能会注意到被浏览器发送的实际变量名包含的是一个点而不是下划线（即 sub.x 和 sub.y），但 PHP 自动将点转换成了下划线。\"]},\"148\":{\"h\":\"HTTP Cookie\",\"t\":[\"Cookies 是一种在远端浏览器端存储数据并能追踪或识别再次访问的用户的机制。可以用 setcookie() 函数设定 cookies。 Cookies 是 HTTP 信息头中的一部分，因此 SetCookie 函数必须在向浏览器发送任何输出之前调用。 对于 header() 函数也有同样的限制。Cookie 数据会在相应的 cookie 数据数组中可用，例如 $_COOKIE 和 $_REQUEST。\",\"如果要将多个值赋给单个 cookie 变量，可以将其赋成数组。例如：\",\"<?php setcookie(\\\"MyCookie[foo]\\\", 'Testing 1', time()+3600); setcookie(\\\"MyCookie[bar]\\\", 'Testing 2', time()+3600); ?>\",\"尽管 MyCookie 在脚本中是单个数组，这将会建立两个单独的 cookie。如果只需为一个 cookie 设定多个值，考虑先在值上使用 serialize() 或 explode()。\",\"注意，除非路径或者域不同，cookie 将替换浏览器中先前的同名 cookie。因此对于购物车程序，可以保留一个计数器并一起传递，即\",\"if (isset($_COOKIE['count'])) { $count = $_COOKIE['count'] + 1; } else { $count = 1; } setcookie('count', $count, time()+3600); setcookie(\\\"Cart[$count]\\\", $item, time()+3600);\"]},\"149\":{\"h\":\"变量名中的点\",\"t\":[\"通常，PHP 不会改变传递给脚本中的变量名。然而应该注意到点（句号）不是 PHP 变量名中的合法字符。\",\"<?php $varname.ext; /* 非法变量名 */ ?>\",\"这时，解析器看到是一个名为 $varname 的变量，后面跟着一个字符串连接运算符，后面跟着一个裸字符串（即没有加引号的字符串，且不匹配任何已知的健名或保留字）'ext'。很明显这不是想要的结果。 出于此原因，要注意 PHP 将会自动将变量名中的点替换成下划线。\"]},\"150\":{\"h\":\"确定变量类型\",\"t\":[\"因为 PHP 会判断变量类型并在需要时进行转换（通常情况下），因此在某一时刻给定的变量是何种类型并不明显。 PHP 包括几个函数可以判断变量的类型，例如：gettype()，is_array()，is_float()，is_int()，is_object() 和 is_string()。\",\"HTTP 是一种文本协议，大多数（可能不是全部）超全局数组中的内容（如 $_POST 和 $_GET）将保留为字符串。PHP 不会尝试将值转换为特定类型。 在下面的示例中，$_GET[\\\"var1\\\"] 将包含字符串“null”，而 $_GET[\\\"var2\\\"] 将包含字符串“123”。\",\"/index.php?var1=null&var2=123\"]},\"151\":{\"c\":[\"PHP\"]},\"152\":{\"c\":[\"PHP\"]},\"153\":{\"h\":\"组件通信\",\"t\":[\"组件传递的方式有很多种，根据传送者和接收者可以分为如下：\",\"父组件向子组件传递\",\"子组件向父组件传递\",\"兄弟组件之间的通信\",\"父组件向后代组件传递\",\"非关系组件传递\"]},\"154\":{\"h\":\"父组件向子组件传递\",\"t\":[\"由于React的数据流动为单向的，父组件向子组件传递是最常见的方式 父组件在调用子组件的时候，只需要在子组件标签内传递参数，子组件通过props属性就能接收父组件传递过来的参数\",\"function EmailInput(props) { return ( <label> {/* 通过props属性接收父组件传递的参数 */} Email: <input value={props.email} /> </label> ); } const element = <EmailInput email=\\\"123124132@163.com\\\" />;\"]},\"155\":{\"h\":\"子组件向父组件传递\",\"t\":[\"子组件向父组件通信的基本思路是，父组件向子组件传一个函数，然后通过这个函数的回调，拿到子组件传过来的值 父组件对应代码如下：\",\"class Parents extends Component { constructor() { super(); this.state = { price: 0 }; } getItemPrice(e) { this.setState({ price: e }); } render() { return ( <div> <div>price: {this.state.price}</div> {/* 向子组件中传入一个函数 */} <Child getPrice={this.getItemPrice.bind(this)} /> </div> ); } }\",\"子组件对应代码如下：\",\"class Child extends Component { clickGoods(e) { // 在此函数中传入值 this.props.getPrice(e); } render() { return ( <div> <button onClick={this.clickGoods.bind(this, 100)}>goods1</button> <button onClick={this.clickGoods.bind(this, 1000)}>goods2</button> </div> ); } }\"]},\"156\":{\"h\":\"兄弟组件之间的通信\",\"t\":[\"如果是兄弟组件之间的传递，则父组件作为中间层来实现数据的互通，通过使用父组件传递\",\"class Parent extends React.Component { constructor(props) { super(props) this.state = {count: 0} } setCount = () => { this.setState({count: this.state.count + 1}) } render() { return ( <div> <SiblingA count={this.state.count} /> <SiblingB onClick={this.setCount} /> </div> ); } }\"]},\"157\":{\"h\":\"父组件向后代组件传递\",\"t\":[\"父组件向后代组件传递数据是一件最普通的事情，就像全局数据一样 使用context提供了组件之间通讯的一种方式，可以共享数据，其他数据都能读取对应的数据\",\"通过使用React.createContext创建一个context\",\" const PriceContext = React.createContext('price')\",\"context创建成功后，其下存在Provider组件用于创建数据源，Consumer组件用于接收数据，使用实例如下： Provider组件通过value属性用于给后代组件传递数据：\",\"<PriceContext.Provider value={100}> </PriceContext.Provider>\",\"如果想要获取Provider传递的数据，可以通过Consumer组件或者或者使用contextType属性接收，对应分别如下：\",\"class MyClass extends React.Component { static contextType = PriceContext; render() { let price = this.context; /* 基于这个值进行渲染工作 */ } }\",\"Consumer组件：\",\"<PriceContext.Consumer> { /*这里是一个函数*/ } { price => <div>price：{price}</div> } </PriceContext.Consumer>\"]},\"158\":{\"h\":\"非关系组件传递\",\"t\":[\"如果组件之间关系类型比较复杂的情况，建议将数据进行一个全局资源管理，从而实现通信，例如redux。\"]},\"159\":{\"h\":\"总结\",\"t\":[\"由于React是单向数据流，主要思想是组件不会改变接收的数据，只会监听数据的变化，当数据发生变化时它们会使用接收到的新值，而不是去修改已有的值 因此，可以看到通信过程中，数据的存储位置都是存放在上级位置中\"]},\"160\":{\"c\":[\"React\"]},\"161\":{\"c\":[\"React\"]},\"162\":{\"h\":\"真实DOM和虚拟DOM\",\"t\":[\"Real DOM，真实DOM， 意思为文档对象模型，是一个结构化文本的抽象，在页面渲染出的每一个结点都是一个真实DOM结构 Virtual Dom，本质上是以 JavaScript 对象形式存在的对 DOM 的描述 创建虚拟DOM目的就是为了更好将虚拟的节点渲染到页面视图中，虚拟DOM对象的节点与真实DOM的属性一一照应 在React中，JSX是其一大特性，可以让你在JS中通过使用XML的方式去直接声明界面的DOM结构\",\"const vDom = <h1>Hello World</h1> // 创建h1标签，右边千万不能加引号 const root = document.getElementById('root') // 找到<div id=\\\"root\\\"></div>节点 ReactDOM.render(vDom, root) // 把创建的h1标签渲染到root节点上\",\"上述中，ReactDOM.render()用于将你创建好的虚拟DOM节点插入到某个真实节点上，并渲染到页面上 JSX实际是一种语法糖，在使用过程中会被babel进行编译转化成JS代码，上述VDOM转化为如下：\",\"const vDom = React.createElement( 'h1'， { className: 'hClass', id: 'hId' }, 'hello world' )\",\"可以看到，JSX就是为了简化直接调用React.createElement() 方法：\",\"第一个参数是标签名，例如h1、span、table...\",\"第二个参数是个对象，里面存着标签的一些属性，例如id、class等\",\"第三个参数是节点中的文本 通过console.log(VDOM)，则能够得到虚拟VDOM消息 所以可以得到，JSX通过babel的方式转化成React.createElement执行，返回值是一个对象，也就是虚拟DOM\"]},\"163\":{\"h\":\"区别\",\"t\":[\"两者的区别如下：\",\"虚拟DOM不会进行排版与重绘操作，而真实DOM会频繁重排与重绘\",\"虚拟DOM的总损耗是“虚拟DOM增删改+真实DOM差异增删改+排版与重绘”，真实DOM的总损耗是“真实DOM 完全 增删改+排版与重绘”\",\"传统的原生api或jQuery去操作DOM时，浏览器会从构建DOM树开始从头到尾执行一遍流程 当你在一次操作时，需要更新10个DOM节点，浏览器没这么智能，收到第一个更新DOM请求后，并不知道后续还有9次更新操作，因此会马上执行流程，最终执行10次流程 而通过VNode，同样更新10个DOM节点，虚拟DOM不会立即操作DOM，而是将这10次更新的diff内容保存到本地的一个js对象中，最终将这个js对象一次性attach到DOM树上，避免大量的无谓计算\"]},\"164\":{\"h\":\"优缺点\",\"t\":[\"真实DOM的优势：\",\"易用 缺点：\",\"效率低，解析速度慢，内存占用量过高\",\"性能差：频繁操作真实DOM，易于导致重绘与回流\",\"使用虚拟DOM的优势如下：\",\"简单方便：如果使用手动操作真实DOM来完成页面，繁琐又容易出错，在大规模应用下维护起来也很困难\",\"性能方面：使用Virtual DOM，能够有效避免真实DOM数频繁更新，减少多次引起重绘与回流，提高性能\",\"跨平台：React借助虚拟DOM， 带来了跨平台的能力，一套代码多端运行 缺点：\",\"在一些性能要求极高的应用中虚拟 DOM 无法进行针对性的极致优化\",\"首次渲染大量DOM时，由于多了一层虚拟DOM的计算，速度比正常稍慢\"]},\"165\":{\"c\":[\"React\"]},\"166\":{\"c\":[\"React\"]},\"167\":{\"h\":\"React Fiber\"},\"168\":{\"h\":\"背景\",\"t\":[\"JavaScript 引擎和页面渲染引擎两个线程是互斥的，当其中一个线程执行时，另一个线程只能挂起等待 如果 JavaScript 线程长时间地占用了主线程，那么渲染层面的更新就不得不长时间地等待，界面长时间不更新，会导致页面响应度变差，用户可能会感觉到卡顿 而这也正是 React 15 的 Stack Reconciler 所面临的问题，当 React 在渲染组件时，从开始到渲染完成整个过程是一气呵成的，无法中断 如果组件较大，那么js线程会一直执行，然后等到整棵VDOM树计算完成后，才会交给渲染的线程 这就会导致一些用户交互、动画等任务无法立即得到处理，导致卡顿的情况\"]},\"169\":{\"h\":\"Fiber\",\"t\":[\"React Fiber 是对 React 核心算法的一次重新实现。 在react中，主要做了以下的操作：\",\"为每个增加了优先级，优先级高的任务可以中断低优先级的任务。然后再重新执行优先级低的任务\",\"增加了异步任务，调用requestIdleCallback api，浏览器空闲的时候执行\",\"dom diff树变成了链表，一个dom对应两个fiber（一个链表），对应两个队列，这都是为找到被中断的任务，重新执行\",\"从架构角度来看，Fiber 是对 React 核心算法（即调和过程）的重写 从编码角度来看，Fiber 是 React 内部所定义的一种数据结构，它是 Fiber 树结构的节点单位，也就是 React 16 新架构下的 虚拟DOM 一个 fiber 就是一个 JavaScript 对象，包含了元素的信息、该元素的更新操作队列、类型，其数据结构如下：\",\"type Fiber = { // 用于标记fiber的WorkTag类型，主要表示当前fiber代表的组件类型如FunctionComponent、ClassComponent等 tag: WorkTag, // ReactElement里面的key key: null | string, // ReactElement.type，调用`createElement`的第一个参数 elementType: any, // The resolved function/class/ associated with this fiber. // 表示当前代表的节点类型 type: any, // 表示当前FiberNode对应的element组件实例 stateNode: any, // 指向他在Fiber节点树中的`parent`，用来在处理完这个节点之后向上返回 return: Fiber | null, // 指向自己的第一个子节点 child: Fiber | null, // 指向自己的兄弟结构，兄弟节点的return指向同一个父节点 sibling: Fiber | null, index: number, ref: null | (((handle: mixed) => void) & { _stringRef: ?string }) | RefObject, // 当前处理过程中的组件props对象 pendingProps: any, // 上一次渲染完成之后的props memoizedProps: any, // 该Fiber对应的组件产生的Update会存放在这个队列里面 updateQueue: UpdateQueue<any> | null, // 上一次渲染的时候的state memoizedState: any, // 一个列表，存放这个Fiber依赖的context firstContextDependency: ContextDependency<mixed> | null, mode: TypeOfMode, // Effect // 用来记录Side Effect effectTag: SideEffectTag, // 单链表用来快速查找下一个side effect nextEffect: Fiber | null, // 子树中第一个side effect firstEffect: Fiber | null, // 子树中最后一个side effect lastEffect: Fiber | null, // 代表任务在未来的哪个时间点应该被完成，之后版本改名为 lanes expirationTime: ExpirationTime, // 快速确定子树中是否有不在等待的变化 childExpirationTime: ExpirationTime, // fiber的版本池，即记录fiber更新过程，便于恢复 alternate: Fiber | null, }\"]},\"170\":{\"h\":\"解决\",\"t\":[\"Fiber把渲染更新过程拆分成多个子任务，每次只做一小部分，做完看是否还有剩余时间，如果有继续下一个任务；如果没有，挂起当前任务，将时间控制权交给主线程，等主线程不忙的时候在继续执行\",\"即可以中断与恢复，恢复后也可以复用之前的中间状态，并给不同的任务赋予不同的优先级，其中每个任务更新单元为 React Element 对应的 Fiber 节点\",\"实现的上述方式的是requestIdleCallback方法\",\"window.requestIdleCallback()方法将在浏览器的空闲时段内调用的函数排队。这使开发者能够在主事件循环上执行后台和低优先级工作，而不会影响延迟关键事件，如动画和输入响应\",\"首先 React 中任务切割为多个步骤，分批完成。在完成一部分任务之后，将控制权交回给浏览器，让浏览器有时间再进行页面的渲染。等浏览器忙完之后有剩余时间，再继续之前 React 未完成的任务，是一种合作式调度。\",\"该实现过程是基于 Fiber 节点实现，作为静态的数据结构来说，每个 Fiber 节点对应一个 React element，保存了该组件的类型（函数组件/类组件/原生组件等等）、对应的 DOM 节点等信息。\",\"作为动态的工作单元来说，每个 Fiber 节点保存了本次更新中该组件改变的状态、要执行的工作。\",\"每个 Fiber 节点有个对应的 React element，多个 Fiber 节点根据如下三个属性构建一颗树：\",\"// 指向父级Fiber节点 this.return = null // 指向子Fiber节点 this.child = null // 指向右边第一个兄弟Fiber节点 this.sibling = null\",\"通过这些属性就能找到下一个执行目标\"]},\"171\":{\"c\":[\"React\"]},\"172\":{\"c\":[\"React\"]},\"173\":{\"h\":\"生命周期\",\"t\":[\"React整个组件生命周期包括从创建、初始化数据、编译模板、挂载Dom→渲染、更新→渲染、卸载等一系列过程。\"]},\"174\":{\"h\":\"流程\",\"t\":[\"react16.4之后的生命周期，可以分成三个阶段：\",\"创建阶段\",\"更新阶段\",\"卸载阶段\"]},\"175\":{\"h\":\"创建阶段\",\"t\":[\"创建阶段主要分成了以下几个生命周期方法：\",\"constructor\",\"getDerivedStateFromProps\",\"render\",\"componentDidMount\"]},\"176\":{\"h\":\"constructor\",\"t\":[\"实例过程中自动调用的方法，在方法内部通过super关键字获取来自父组件的props 在该方法中，通常的操作为初始化state状态或者在this上挂载方法\"]},\"177\":{\"h\":\"getDerivedStateFromProps\",\"t\":[\"该方法是新增的生命周期方法，是一个静态的方法，因此不能访问到组件的实例 执行时机：组件创建和更新阶段，不论是props变化还是state变化，也会调用 在每次render方法前调用，第一个参数为即将更新的props，第二个参数为上一个状态的state，可以比较props 和 state来加一些限制条件，防止无用的state更新 该方法需要返回一个新的对象作为新的state或者返回null表示state状态不需要更新\"]},\"178\":{\"h\":\"render\",\"t\":[\"类组件必须实现的方法，用于渲染DOM结构，可以访问组件state与prop属性\",\"重要\",\"不要在 render 里面 setState, 否则会触发死循环导致内存崩溃\"]},\"179\":{\"h\":\"componentDidMount\",\"t\":[\"组件挂载到真实DOM节点后执行，其在render方法之后执行 此方法多用于执行一些数据获取，事件监听等操作\"]},\"180\":{\"h\":\"更新阶段\",\"t\":[\"该阶段的函数主要为如下方法：\",\"getDerivedStateFromProps\",\"shouldComponentUpdate\",\"render\",\"getSnapshotBeforeUpdate\",\"componentDidUpdate\"]},\"181\":{\"h\":\"shouldComponentUpdate\",\"t\":[\"用于告知组件本身基于当前的props和state是否需要重新渲染组件，默认情况返回true 执行时机：到新的props或者state时都会调用，通过返回true或者false告知组件更新与否 一般情况，不建议在该周期方法中进行深层比较，会影响效率 同时也不能调用setState，否则会导致无限循环调用更新\"]},\"182\":{\"h\":\"getSnapshotBeforeUpdate\",\"t\":[\"该周期函数在render后执行，执行之时DOM元素还没有被更新 该方法返回的一个Snapshot值，作为componentDidUpdate第三个参数传入\",\"getSnapshotBeforeUpdate(prevProps, prevState) { console.log('#enter getSnapshotBeforeUpdate'); return 'foo'; } componentDidUpdate(prevProps, prevState, snapshot) { console.log('#enter componentDidUpdate snapshot = ', snapshot); }\",\"此方法的目的在于获取组件更新前的一些信息，比如组件的滚动位置之类的，在组件更新后可以根据这些信息恢复一些UI视觉上的状态\"]},\"183\":{\"h\":\"componentDidUpdate\",\"t\":[\"执行时机：组件更新结束后触发 在该方法中，可以根据前后的props和state的变化做相应的操作，如获取数据，修改DOM样式等\"]},\"184\":{\"h\":\"卸载阶段\"},\"185\":{\"h\":\"componentWillUnmount\",\"t\":[\"此方法用于组件卸载前，清理一些注册是监听事件，或者取消订阅的网络请求等 一旦一个组件实例被卸载，其不会被再次挂载，而只可能是被重新创建\"]},\"186\":{\"h\":\"总结\",\"t\":[\"新版生命周期整体流程如下图所示： 旧的生命周期流程图如下： 通过两个图的对比，可以发现新版的生命周期减少了以下三种方法：\",\"componentWillMount\",\"componentWillReceiveProps\",\"componentWillUpdate\",\"其实这三个方法仍然存在，只是在前者加上了UNSAFE_前缀，如UNSAFE_componentWillMount，并不像字面意思那样表示不安全，而是表示这些生命周期的代码可能在未来的 react 版本可能废除\",\"同时也新增了两个生命周期函数：\",\"getDerivedStateFromProps = getSnapshotBeforeUpdate\"]},\"187\":{\"c\":[\"React\"]},\"188\":{\"c\":[\"React\"]},\"189\":{\"h\":\"类组件和函数式组件\"},\"190\":{\"h\":\"类组件\",\"t\":[\"类组件，顾名思义，也就是通过使用ES6类的编写形式去编写组件，该类必须继承React.Component 如果想要访问父组件传递过来的参数，可通过this.props的方式去访问 在组件中必须实现render方法，在return中返回React对象，如下：\",\"class Welcome extends React.Component { constructor(props) { super(props) } render() { return <h1>Hello, {this.props.name}</h1> } }\"]},\"191\":{\"h\":\"函数组件\",\"t\":[\"函数组件，顾名思义，就是通过函数编写的形式去实现一个React组件，是React中定义组件最简单的方式\",\"function Welcome(props) { return <h1>Hello, {props.name}</h1>; }\",\"函数第一个参数为props用于接收父组件传递过来的参数\"]},\"192\":{\"h\":\"区别\",\"t\":[\"针对两种React组件，其区别主要分成以下几大方向：\",\"编写形式\",\"状态管理\",\"生命周期\",\"调用方式\",\"获取渲染的值\"]},\"193\":{\"h\":\"编写形式\",\"t\":[\"两者最明显的区别在于编写形式的不同，同一种功能的实现可以分别对应类组件和函数组件的编写形式 函数组件：\",\"function Welcome(props) { return <h1>Hello, {props.name}</h1>; }\",\"类组件：\",\"class Welcome extends React.Component { constructor(props) { super(props) } render() { return <h1>Hello, {this.props.name}</h1> } }\"]},\"194\":{\"h\":\"状态管理\",\"t\":[\"在hooks出来之前，函数组件就是无状态组件，不能保管组件的状态，不像类组件中调用setState 如果想要管理state状态，可以使用useState，如下：\",\"const FunctionalComponent = () => { const [count, setCount] = React.useState(0); return ( <div> <p>count: {count}</p > <button onClick={() => setCount(count + 1)}>Click</button> </div> ); };\",\"在使用hooks情况下，一般如果函数组件调用state，则需要创建一个类组件或者state提升到你的父组件中，然后通过props对象传递到子组件\"]},\"195\":{\"h\":\"生命周期\",\"t\":[\"在函数组件中，并不存在生命周期，这是因为这些生命周期钩子都来自于继承的React.Component 所以，如果用到生命周期，就只能使用类组件 但是函数组件使用useEffect也能够完成替代生命周期的作用，这里给出一个简单的例子：\",\"const FunctionalComponent = () => { useEffect(() => { console.log(\\\"Hello\\\"); }, []); return <h1>Hello, World</h1>; };\",\"上述简单的例子对应类组件中的componentDidMount生命周期 如果在useEffect回调函数中return 一个函数，则return函数会在组件卸载的时候执行，正如componentWillUnmount\",\"const FunctionalComponent = () => { React.useEffect(() => { return () => { console.log(\\\"Bye\\\"); }; }, []); return <h1>Bye, World</h1>; };\"]},\"196\":{\"h\":\"调用方式\",\"t\":[\"如果是一个函数组件，调用则是执行函数即可：\",\"// 你的代码 function SayHi() { return <p>Hello, React</p > } // React内部 const result = SayHi(props) // » <p>Hello, React</p >\",\"如果是一个类组件，则需要将组件进行实例化，然后调用实例对象的render方法：\",\"// 你的代码 class SayHi extends React.Component { render() { return <p>Hello, React</p > } } // React内部 const instance = new SayHi(props) // » SayHi {} const result = instance.render() // » <p>Hello, React</p >\"]},\"197\":{\"h\":\"获取渲染的值\",\"t\":[\"首先给出一个示例\",\"函数组件对应如下：\",\"function ProfilePage(props) { const showMessage = () => { alert('Followed ' + props.user); } const handleClick = () => { setTimeout(showMessage, 3000); } return ( <button onClick={handleClick}>Follow</button> ) }\",\"类组件对应如下：\",\"class ProfilePage extends React.Component { showMessage() { alert('Followed ' + this.props.user); } handleClick() { setTimeout(this.showMessage.bind(this), 3000); } render() { return <button onClick={this.handleClick.bind(this)}>Follow</button> } }\",\"两者看起来实现功能是一致的，但是在类组件中，输出this.props.user，Props 在 React 中是不可变的所以它永远不会改变，但是 this 总是可变的，以便您可以在 render 和生命周期函数中读取新版本 因此，如果我们的组件在请求运行时更新。this.props 将会改变。showMessage 方法从“最新”的 props 中读取 user 而函数组件，本身就不存在this，props并不发生改变，因此同样是点击，alert的内容仍旧是之前的内容\"]},\"198\":{\"c\":[\"React\"]},\"199\":{\"c\":[\"React\"]},\"200\":{\"h\":\"受控组件和非受控组件\"},\"201\":{\"h\":\"受控组件\",\"t\":[\"受控组件，简单来讲，就是受我们控制的组件，组件的状态全程响应外部数据\",\"举个简单的例子：\",\"class TestComponent extends React.Component { constructor (props) { super(props); this.state = { username: 'lindaidai' }; } render () { return <input name=\\\"username\\\" value={this.state.username} /> } }\",\"这时候当我们在输入框输入内容的时候，会发现输入的内容并无法显示出来，也就是input标签是一个可读的状态 这是因为value被this.state.username所控制住。当用户输入新的内容时，this.state.username并不会自动更新，这样的话input内的内容也就不会变了 如果想要解除被控制，可以为input标签设置onChange事件，输入的时候触发事件函数，在函数内部实现state的更新，从而导致input框的内容页发现改变 因此，受控组件我们一般需要初始状态和一个状态更新事件函数\"]},\"202\":{\"h\":\"非受控组件\",\"t\":[\"非受控组件，简单来讲，就是不受我们控制的组件 一般情况是在初始化的时候接受外部数据，然后自己在内部存储其自身状态 当需要时，可以使用ref 查询 DOM 并查找其当前值，如下：\",\"import React, { Component } from 'react'; export class UnControll extends Component { constructor (props) { super(props); this.inputRef = React.createRef(); } handleSubmit = (e) => { console.log('我们可以获得input内的值为', this.inputRef.current.value); e.preventDefault(); } render () { return ( <form onSubmit={e => this.handleSubmit(e)}> <input defaultValue=\\\"lindaidai\\\" ref={this.inputRef} /> <input type=\\\"submit\\\" value=\\\"提交\\\" /> </form> ) } }\"]},\"203\":{\"h\":\"应用场景\",\"t\":[\"大部分时候推荐使用受控组件来实现表单，因为在受控组件中，表单数据由React组件负责处理 如果选择非受控组件的话，控制能力较弱，表单数据就由DOM本身处理，但更加方便快捷，代码量少 针对两者的区别，其应用场景如下图所示：\",\"特征\",\"不受控制\",\"受控\",\"一次性取值(提交)\",\"true\",\"false\",\"提交时验证\",\"true\",\"false\",\"即时现场验证\",\"false\",\"true\",\"有条件地禁用提交按钮\",\"false\",\"true\",\"强制输入格式\",\"false\",\"true\",\"一个数据的多个输入\",\"false\",\"true\",\"动态输入\",\"false\",\"true\"]},\"204\":{\"c\":[\"React\"]},\"205\":{\"c\":[\"React\"]},\"206\":{\"h\":\"构建组件的方式\",\"t\":[\"组件就是把图形、非图形的各种逻辑均抽象为一个统一的概念（组件）来实现开发的模式 在React中，一个类、一个函数都可以视为一个组件\"]},\"207\":{\"h\":\"构建方式\",\"t\":[\"在React目前来讲，组件的创建主要分成了三种方式：\",\"函数式创建\",\"通过 React.createClass 方法创建\",\"继承 React.Component 创建\"]},\"208\":{\"h\":\"函数式创建\",\"t\":[\"在React Hooks出来之前，函数式组件可以视为无状态组件，只负责根据传入的props来展示视图，不涉及对state状态的操作 大多数组件可以写为无状态组件，通过简单组合构建其他组件 在React中，通过函数简单创建组件的示例如下：\",\"function HelloComponent(props, /* context */) { return <div>Hello {props.name}</div> }\"]},\"209\":{\"h\":\"通过 React.createClass 方法创建\",\"t\":[\"React.createClass是react刚开始推荐的创建组件的方式，目前这种创建方式已经不怎么用了 像上述通过函数式创建的组件的方式，最终会通过babel转化成React.createClass这种形式，转化成如下：\",\"function HelloComponent(props) /* context */{ // React.createElement return React.createElement( \\\"div\\\", null, \\\"Hello \\\", props.name ); }\"]},\"210\":{\"h\":\"继承 React.Component 创建\",\"t\":[\"同样在react hooks出来之前，有状态的组件只能通过继承React.Component这种形式进行创建 有状态的组件也就是组件内部存在维护的数据，在类创建的方式中通过this.state进行访问 当调用this.setState修改组件的状态时，组价会再次会调用render()方法进行重新渲染 通过继承React.Component创建一个时钟示例如下：\",\"class Timer extends React.Component { constructor(props) { super(props); this.state = { seconds: 0 }; } tick() { this.setState(state => ({ seconds: state.seconds + 1 })); } componentDidMount() { this.interval = setInterval(() => this.tick(), 1000); } componentWillUnmount() { clearInterval(this.interval); } render() { return ( <div> Seconds: {this.state.seconds} </div> ); } }\"]},\"211\":{\"h\":\"区别\",\"t\":[\"由于React.createClass 创建的方式过于冗杂，并不建议使用 而像函数式创建和类组件创建的区别主要在于需要创建的组件是否需要为有状态组件：\",\"对于一些无状态的组件创建，建议使用函数式创建的方式\",\"由于react hooks的出现，函数式组件创建的组件通过使用hooks方法也能使之成为有状态组件，再加上目前推崇函数式编程，所以这里建议都使用函数式的方式来创建组件 在考虑组件的选择原则上，能用无状态组件则用无状态组件\"]},\"212\":{\"c\":[\"React\"]},\"213\":{\"c\":[\"React\"]},\"214\":{\"h\":\"高阶组件\",\"t\":[\"高阶函数（Higher-order function），至少满足下列一个条件的函数\",\"接受一个或多个函数作为输入\",\"输出一个函数\",\"在React中，高阶组件即接受一个或多个组件作为参数并且返回一个组件，本质也就是一个函数，并不是一个组件\",\"const EnhancedComponent = highOrderComponent(WrappedComponent);\",\"上述代码中，该函数接受一个组件WrappedComponent作为参数，返回加工过的新组件EnhancedComponent\",\"高阶组件的这种实现方式，本质上是一个装饰者设计模式\"]},\"215\":{\"h\":\"编写方式\",\"t\":[\"最基本的高阶组件的编写模板如下：\",\"import React, { Component } from 'react'; export default (WrappedComponent) => { return class EnhancedComponent extends Component { // do something render() { return <WrappedComponent />; } } }\",\"通过对传入的原始组件 WrappedComponent 做一些你想要的操作（比如操作 props，提取 state，给原始组件包裹其他元素等），从而加工出想要的组件 EnhancedComponent 把通用的逻辑放在高阶组件中，对组件实现一致的处理，从而实现代码的复用 所以，高阶组件的主要功能是封装并分离组件的通用逻辑，让通用逻辑在组件间更好地被复用 但在使用高阶组件的同时，一般遵循一些约定，如下：\",\"props 保持一致\",\"你不能在函数式（无状态）组件上使用 ref 属性，因为它没有实例\",\"不要以任何方式改变原始组件 WrappedComponent\",\"透传不相关 props 属性给被包裹的组件 WrappedComponent\",\"不要再 render() 方法中使用高阶组件\",\"使用 compose 组合高阶组件\",\"包装显示名字以便于调试 这里需要注意的是，高阶组件可以传递所有的props，但是不能传递ref 如果向一个高阶组件添加refe引用，那么ref 指向的是最外层容器组件实例的，而不是被包裹的组件，如果需要传递refs的话，则使用React.forwardRef，如下：\",\"function withLogging(WrappedComponent) { class Enhance extends WrappedComponent { componentWillReceiveProps() { console.log('Current props', this.props); console.log('Next props', nextProps); } render() { const {forwardedRef, ...rest} = this.props; // 把 forwardedRef 赋值给 ref return <WrappedComponent {...rest} ref={forwardedRef} />; } }; // React.forwardRef 方法会传入 props 和 ref 两个参数给其回调函数 // 所以这边的 ref 是由 React.forwardRef 提供的 function forwardRef(props, ref) { return <Enhance {...props} forwardRef={ref} /> } return React.forwardRef(forwardRef); } const EnhancedComponent = withLogging(SomeComponent);\"]},\"216\":{\"h\":\"应用场景\",\"t\":[\"通过上面的了解，高阶组件能够提高代码的复用性和灵活性，在实际应用中，常常用于与核心业务无关但又在多个模块使用的功能，如权限控制、日志记录、数据校验、异常处理、统计上报等 举个例子，存在一个组件，需要从缓存中获取数据，然后渲染。一般情况，我们会如下编写：\",\"import React, { Component } from 'react' class MyComponent extends Component { componentWillMount() { let data = localStorage.getItem('data'); this.setState({data}); } render() { return <div>{this.state.data}</div> } }\",\"上述代码当然可以实现该功能，但是如果还有其他组件也有类似功能的时候，每个组件都需要重复写componentWillMount中的代码，这明显是冗杂的 下面就可以通过高价组件来进行改写，如下：\",\"import React, { Component } from 'react' function withPersistentData(WrappedComponent) { return class extends Component { // 挂载完成 componentWillMount() { let data = localStorage.getItem('data'); this.setState({data}); } render() { // 通过{...this.props} 把传递给当前组件的属性继续传递给被包装的组件WrappedComponent return <WrappedComponent data={this.state.data} {...this.props} /> } } } class MyComponent2 extends Component { render() { return <div>{this.props.data}</div> } } const MyComponentWithPersistentData = withPersistentData(MyComponent2)\",\"再比如组件渲染性能监控，如下：\",\"class Home extends React.Component { render() { return (<h1>Hello World.</h1>); } } function withTiming(WrappedComponent) { return class extends WrappedComponent { constructor(props) { super(props); this.start = 0; this.end = 0; } componentWillMount() { super.componentWillMount && super.componentWillMount(); this.start = Date.now(); } componentDidMount() { super.componentDidMount && super.componentDidMount(); this.end = Date.now(); console.log(`${WrappedComponent.name} 组件渲染时间为 ${this.end - this.start} ms`); } render() { return super.render(); } }; } export default withTiming(Home);\"]},\"217\":{\"c\":[\"React\"]},\"218\":{\"c\":[\"React\"]},\"219\":{\"h\":\"css引入\",\"t\":[\"组件式开发选择合适的css解决方案尤为重要\",\"通常会遵循以下规则：\",\"可以编写局部css，不会随意污染其他组件内的原生；\",\"可以编写动态的css，可以获取当前组件的一些状态，根据状态的变化生成不同的css样式；\",\"支持所有的css特性：伪类、动画、媒体查询等；\",\"编写起来简洁方便、最好符合一贯的css风格特点\",\"在这一方面，vue使用css起来更为简洁：\",\"通过 style 标签编写样式\",\"scoped 属性决定编写的样式是否局部有效\",\"lang 属性设置预处理器\",\"内联样式风格的方式来根据最新状态设置和改变css 而在react中，引入CSS就不如Vue方便简洁，其引入css的方式有很多种，各有利弊\"]},\"220\":{\"h\":\"方式\",\"t\":[\"常见的CSS引入方式有以下：\",\"在组件内直接使用\",\"组件中引入 .css 文件\",\"组件中引入 .module.css 文件\",\"CSS in JS\"]},\"221\":{\"h\":\"在组件内直接使用\",\"t\":[\"直接在组件中书写css样式，通过style属性直接引入，如下：\",\"import React, { Component } from \\\"react\\\"; const div1 = { width: \\\"300px\\\", margin: \\\"30px auto\\\", backgroundColor: \\\"#44014C\\\", //驼峰法 minHeight: \\\"200px\\\", boxSizing: \\\"border-box\\\" }; class Test extends Component { constructor(props, context) { super(props); } render() { return ( <div> <div style={div1}>123</div> <div style={{backgroundColor:\\\"red\\\"}}> </div> ); } } export default Test;\",\"上面可以看到，css属性需要转换成驼峰写法\",\"这种方式优点：\",\"内联样式, 样式之间不会有冲突\",\"可以动态获取当前state中的状态 缺点：\",\"写法上都需要使用驼峰标识\",\"某些样式没有提示\",\"大量的样式, 代码混乱\",\"某些样式无法编写(比如伪类/伪元素)\"]},\"222\":{\"h\":\"组件中引入css文件\",\"t\":[\"将css单独写在一个css文件中，然后在组件中直接引入\",\"App.css文件： .title { color: red; font-size: 20px; } .desc { color: green; text-decoration: underline; }\",\"组件中引入：\",\"import React, { PureComponent } from 'react'; import Home from './Home'; import './App.css'; export default class App extends PureComponent { render() { return ( <div className=\\\"app\\\"> <h2 className=\\\"title\\\">我是App的标题</h2> <p className=\\\"desc\\\">我是App中的一段文字描述</p > <Home/> </div> ) } }\",\"这种方式存在不好的地方在于样式是全局生效，样式之间会互相影响\"]},\"223\":{\"h\":\"组件中引入 .module.css 文件\",\"t\":[\"将css文件作为一个模块引入，这个模块中的所有css，只作用于当前组件。不会影响当前组件的后代组件 这种方式是webpack特有的方案，只需要配置webpack配置文件中 modules:true 即可\",\"import React, { PureComponent } from 'react'; import Home from './Home'; import './App.module.css'; export default class App extends PureComponent { render() { return ( <div className=\\\"app\\\"> <h2 className=\\\"title\\\">我是App的标题</h2> <p className=\\\"desc\\\">我是App中的一段文字描述</p > <Home/> </div> ) } }\",\"这种方式能够解决局部作用域问题，但也有一定的缺陷：\",\"引用的类名，不能使用连接符(.xxx-xx)，在 JavaScript 中是不识别的\",\"所有的 className 都必须使用 {style.className} 的形式来编写\",\"不方便动态来修改某些样式，依然需要使用内联样式的方式；\"]},\"224\":{\"h\":\"CSS in JS\",\"t\":[\"CSS-in-JS， 是指一种模式，其中CSS由 JavaScript 生成而不是在外部文件中定义 此功能并不是 React 的一部分，而是由第三方库提供，例如：\",\"styled-components\",\"emotion\",\"glamorous\",\"下面主要看看styled-components的基本使用 本质是通过函数的调用，最终创建出一个组件：这个组件会被自动添加上一个不重复的class,styled-components会给该class添加相关的样式 基本使用如下： 创建一个style.js文件用于存放样式组件：\",\"export const SelfLink = styled.div` height: 50px; border: 1px solid red; color: yellow; `; export const SelfButton = styled.div` height: 150px; width: 150px; color: ${props => props.color}; background-image: url(${props => props.src}); background-size: 150px 150px; `;\",\"引入样式组件也很简单：\",\"import React, { Component } from \\\"react\\\"; import { SelfLink, SelfButton } from \\\"./style\\\"; class Test extends Component { constructor(props, context) { super(props); } render() { return ( <div> <SelfLink title=\\\"People's Republic of China\\\">app.js</SelfLink> <SelfButton color=\\\"palevioletred\\\" style={{ color: \\\"pink\\\" }} src={fist}> SelfButton </SelfButton> </div> ); } } export default Test;\"]},\"225\":{\"h\":\"区别\",\"t\":[\"通过上面四种样式的引入，可以看到：\",\"在组件内直接使用css该方式编写方便，容易能够根据状态修改样式属性，但是大量的演示编写容易导致代码混乱\",\"组件中引入 .css 文件符合我们日常的编写习惯，但是作用域是全局的，样式之间会层叠\",\"引入.module.css 文件能够解决局部作用域问题，但是不方便动态修改样式，需要使用内联的方式进行样式的编写\",\"通过css in js 这种方法，可以满足大部分场景的应用，可以类似于预处理器一样样式嵌套、定义、修改状态等 至于使用react用哪种方案引入css，并没有一个绝对的答案，可以根据各自情况选择合适的方案\"]},\"226\":{\"c\":[\"React\"]},\"227\":{\"c\":[\"React\"]},\"228\":{\"h\":\"diff\",\"t\":[\"跟Vue一致，React通过引入Virtual DOM的概念，极大地避免无效的Dom操作，使我们的页面的构建效率提到了极大的提升\",\"而diff算法就是更高效地通过对比新旧Virtual DOM来找出真正的Dom变化之处\"]},\"229\":{\"h\":\"原理\",\"t\":[\"react中diff算法主要遵循三个层级的策略：\",\"tree层级\",\"conponent 层级\",\"element 层级\"]},\"230\":{\"h\":\"tree层级\",\"t\":[\"DOM节点跨层级的操作不做优化，只会对相同层级的节点进行比较\",\"只有删除、创建操作，没有移动操作，如下图：\",\"react发现新树中，A节点下没有了B，那么直接删除B，在C节点下创建B以及下属节点\",\"上述操作中，只有删除和创建操作\"]},\"231\":{\"h\":\"conponent层级\",\"t\":[\"如果是同一个类的组件，则会继续往下diff运算，如果不是一个类的组件，那么直接删除这个组件下的所有子节点，创建新的\",\"当component C 换成了component H 后，即使两者的结构非常类似，也会将C删除再重新创建H\"]},\"232\":{\"h\":\"element层级\",\"t\":[\"对于比较同一层级的节点们，每个节点在对应的层级用唯一的key作为标识 提供了 3 种节点操作，分别为 INSERT_MARKUP (插入)、MOVE_EXISTING (移动)和 REMOVE_NODE (删除) 如下场景：\",\"alt text\",\"通过key可以准确地发现新旧集合中的节点都是相同的节点，因此无需进行节点删除和创建，只需要将旧集合中节点的位置进行移动，更新为新集合中节点的位置\",\"index： 新集合的遍历下标。\",\"oldIndex：当前节点在老集合中的下标\",\"maxIndex：在新集合访问过的节点中，其在老集合的最大下标 如果当前节点在新集合中的位置比老集合中的位置靠前的话，是不会影响后续节点操作的，这里这时候被动字节不用动\",\"操作过程中只比较oldIndex和maxIndex，规则如下：\",\"当oldIndex>maxIndex时，将oldIndex的值赋值给maxIndex\",\"当oldIndex=maxIndex时，不操作\",\"当oldIndex<maxIndex时，将当前节点移动到index的位置\",\"diff过程如下：\",\"节点B：此时 maxIndex=0，oldIndex=1；满足 maxIndex< oldIndex，因此B节点不动，此时maxIndex= Math.max(oldIndex, maxIndex)，就是1\",\"节点A：此时maxIndex=1，oldIndex=0；不满足maxIndex< oldIndex，因此A节点进行移动操作，此时maxIndex= Math.max(oldIndex, maxIndex)，还是1\",\"节点D：此时maxIndex=1, oldIndex=3；满足maxIndex< oldIndex，因此D节点不动，此时maxIndex= Math.max(oldIndex, maxIndex)，就是3\",\"节点C：此时maxIndex=3，oldIndex=2；不满足maxIndex< oldIndex，因此C节点进行移动操作，当前已经比较完了 当ABCD节点比较完成后，diff过程还没完，还会整体遍历老集合中节点，看有没有没用到的节点，有的话，就删除\"]},\"233\":{\"h\":\"注意事项\",\"t\":[\"对于简单列表渲染而言，不使用key比使用key的性能，例如：\",\"将一个[1,2,3,4,5]，渲染成如下的样子：\",\"<div>1</div> <div>2</div> <div>3</div> <div>4</div> <div>5</div>\",\"后续更改成[1,3,2,5,4]，使用key与不使用key作用如下：\",\"1.加key\",\"<div key='1'>1</div> <div key='1'>1</div> <div key='2'>2</div> <div key='3'>3</div> <div key='3'>3</div> ========> <div key='2'>2</div> <div key='4'>4</div> <div key='5'>5</div> <div key='5'>5</div> <div key='4'>4</div>\",\"操作：节点2移动至下标为2的位置，节点4移动至下标为4的位置。\",\"2.不加key\",\"<div>1</div> <div>1</div> <div>2</div> <div>3</div> <div>3</div> ========> <div>2</div> <div>4</div> <div>5</div> <div>5</div> <div>4</div>\",\"操作：修改第1个到第5个节点的innerText 如果我们对这个集合进行增删的操作改成[1,3,2,5,6]\",\"1.加key\",\"<div key='1'>1</div> <div key='1'>1</div> <div key='2'>2</div> <div key='3'>3</div> <div key='3'>3</div> ========> <div key='2'>2</div> <div key='4'>4</div> <div key='5'>5</div> <div key='5'>5</div> <div key='6'>6</div>\",\"操作：节点2移动至下标为2的位置，新增节点6至下标为4的位置，删除节点4。\",\"2.不加key\",\"<div>1</div> <div>1</div> <div>2</div> <div>3</div> <div>3</div> ========> <div>2</div> <div>4</div> <div>5</div> <div>5</div> <div>6</div>\",\"操作：修改第1个到第5个节点的innerText 由于dom节点的移动操作开销是比较昂贵的，没有key的情况下要比有key的性能更好\"]},\"234\":{\"c\":[\"React\"]},\"235\":{\"c\":[\"React\"]},\"236\":{\"h\":\"错误处理\",\"t\":[\"react16引用了错误边界新的概念 错误边界是一种 React 组件，这种组件可以捕获发生在其子组件树任何位置的 JavaScript 错误，并打印这些错误，同时展示降级 UI，而并不会渲染那些发生崩溃的子组件树 错误边界在渲染期间、生命周期方法和整个组件树的构造函数中捕获错误 形成错误边界组件的两个条件：\",\"使用了 static getDerivedStateFromError()\",\"使用了 componentDidCatch() 抛出错误后，请使用 static getDerivedStateFromError() 渲染备用 UI ，使用 componentDidCatch() 打印错误信息，如下：\",\"class ErrorBoundary extends React.Component { constructor(props) { super(props); this.state = { hasError: false }; } static getDerivedStateFromError(error) { // 更新 state 使下一次渲染能够显示降级后的 UI return { hasError: true }; } componentDidCatch(error, errorInfo) { // 你同样可以将错误日志上报给服务器 logErrorToMyService(error, errorInfo); } render() { if (this.state.hasError) { // 你可以自定义降级后的 UI 并渲染 return <h1>Something went wrong.</h1>; } return this.props.children; } }\",\"然后就可以把自身组件的作为错误边界的子组件，如下：\",\"<ErrorBoundary> <MyWidget /> </ErrorBoundary>\",\"下面这些情况无法捕获到异常：\",\"事件处理\",\"异步代码\",\"服务端渲染\",\"自身抛出来的错误 在react 16版本之后，会把渲染期间发生的所有错误打印到控制台 除了错误信息和 JavaScript 栈外，React 16 还提供了组件栈追踪。 对于错误边界无法捕获的异常，如事件处理过程中发生问题并不会捕获到，是因为其不会在渲染期间触发，并不会导致渲染时候问题 这种情况可以使用js的try...catch...语法，如下：\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.state = { error: null }; this.handleClick = this.handleClick.bind(this); } handleClick() { try { // 执行操作，如有错误则会抛出 } catch (error) { this.setState({ error }); } } render() { if (this.state.error) { return <h1>Caught an error.</h1> } return <button onClick={this.handleClick}>Click Me</button> } }\",\"除此之外还可以通过监听onerror事件\",\"window.addEventListener('error', function(event) { ... })\"]},\"237\":{\"c\":[\"React\"]},\"238\":{\"c\":[\"React\"]},\"239\":{\"h\":\"事件机制\",\"t\":[\"React基于浏览器的事件机制自身实现了一套事件机制，包括事件注册、事件的合成、事件冒泡、事件派发等。在React中这套事件机制被称之为合成事件\"]},\"240\":{\"h\":\"合成事件\",\"t\":[\"合成事件是 React 模拟原生 DOM 事件所有能力的一个事件对象，即浏览器原生事件的跨浏览器包装器 根据 W3C 规范来定义合成事件，兼容所有浏览器，拥有与浏览器原生事件相同的接口，例如：\",\"const button = <button onClick={handleClick}>按钮</button>\",\"如果想要获得原生DOM事件，可以通过e.nativeEvent属性获取\",\"const handleClick = (e) => console.log(e.nativeEvent);; const button = <button onClick={handleClick}>按钮</button>\",\"从上面可以看到React事件和原生事件也非常的相似，但也有一定的区别：\",\"事件名称命名方式不同\",\"// 原生事件绑定方式 <button onclick=\\\"handleClick()\\\">按钮命名</button> // React 合成事件绑定方式 const button = <button onClick={handleClick}>按钮命名</button>\",\"事件处理函数书写不同\",\"// 原生事件 事件处理函数写法 <button onclick=\\\"handleClick()\\\">按钮命名</button> // React 合成事件 事件处理函数写法 const button = <button onClick={handleClick}>按钮命名</button>\",\"虽然onclick看似绑定到DOM元素上，但实际并不会把事件代理函数直接绑定到真实的节点上，而是把所有的事件绑定到结构的最外层，使用一个统一的事件去监听 这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数。当组件挂载或卸载时，只是在这个统一的事件监听器上插入或删除一些对象 当事件发生时，首先被这个统一的事件监听器处理，然后在映射里找到真正的事件处理函数并调用。这样做简化了事件处理和回收机制，效率也有很大提升\"]},\"241\":{\"h\":\"执行顺序\",\"t\":[\"关于React 合成事件与原生事件执行顺序，可以看看下面一个例子：\",\"import React from 'react'; class App extends React.Component{ constructor(props) { super(props); this.parentRef = React.createRef(); this.childRef = React.createRef(); } componentDidMount() { console.log(\\\"React componentDidMount！\\\"); // 原生事件 this.parentRef.current?.addEventListener(\\\"click\\\", () => { console.log(\\\"原生事件：父元素 DOM 事件监听！\\\"); }); this.childRef.current?.addEventListener(\\\"click\\\", () => { console.log(\\\"原生事件：子元素 DOM 事件监听！\\\"); }); document.addEventListener(\\\"click\\\", (e) => { console.log(\\\"原生事件：document DOM 事件监听！\\\"); }); } // react事件 parentClickFun = () => { console.log(\\\"React 事件：父元素事件监听！\\\"); }; childClickFun = () => { console.log(\\\"React 事件：子元素事件监听！\\\"); }; render() { return ( <div ref={this.parentRef} onClick={this.parentClickFun}> <div ref={this.childRef} onClick={this.childClickFun}> 分析事件执行顺序 </div> </div> ); } } export default App;\",\"输出顺序为：\",\"原生事件：子元素 DOM 事件监听！ 原生事件：父元素 DOM 事件监听！ React 事件：子元素事件监听！ React 事件：父元素事件监听！ 原生事件：document DOM 事件监听！\",\"可以得出以下结论：\",\"React 所有事件都挂载在 document 对象上 当真实 DOM 元素触发事件，会冒泡到 document 对象后，再处理 React 事件 所以会先执行原生事件，然后处理 React 事件 最后真正执行 document 上挂载的事件 对应过程如图所示：\",\"所以想要阻止不同时间段的冒泡行为，对应使用不同的方法，对应如下： 阻止合成事件间的冒泡，用e.stopPropagation() 阻止合成事件与最外层 document 上的事件间的冒泡，用e.nativeEvent.stopImmediatePropagation() 阻止合成事件与除最外层document上的原生事件上的冒泡，通过判断e.target来避免\",\"document.body.addEventListener('click', e => { if (e.target && e.target.matches('div.code')) { return; } this.setState({ active: false, }); }); }\"]},\"242\":{\"c\":[\"React\"]},\"243\":{\"c\":[\"React\"]},\"244\":{\"h\":\"事件绑定\",\"t\":[\"在react应用中，事件名都是用小驼峰格式进行书写，例如onclick要改写成onClick\",\"最简单的事件绑定如下：\",\"class ShowAlert extends React.Component { // showAlert() 方法没有绑定 this，当按钮被点击时，this 的上下文可能不会指向 ShowAlert 类实例，而是指向其他对象（例如全局对象或者 undefined），从而导致错误。 showAlert() { console.log(\\\"Hi\\\"); } render() { return <button onClick={this.showAlert}>show</button>; } }\",\"从上面可以看到，事件绑定的方法需要使用{}包住 上述的代码看似没有问题，但是当将处理函数输出代码换成console.log(this)的时候，点击按钮，则会发现控制台输出undefined\"]},\"245\":{\"h\":\"绑定方法\",\"t\":[\"常见的绑定方式有如下：\",\"render方法中使用bind\",\"render方法中使用箭头函数\",\"constructor中bind\",\"定义阶段使用箭头函数绑定\"]},\"246\":{\"h\":\"render方法中使用bind\",\"t\":[\"如果使用一个类组件，在其中给某个组件/元素一个onClick属性，它现在并会自定绑定其this到当前组件，解决这个问题的方法是在事件函数后使用.bind(this)将this绑定到当前组件中\",\"class App extends React.Component { handleClick() { console.log('this > ', this); } render() { return ( <div onClick={this.handleClick.bind(this)}>test</div> ) } }\",\"这种方式在组件每次render渲染的时候，都会重新进行bind的操作，影响性能\"]},\"247\":{\"h\":\"render方法中使用箭头函数\",\"t\":[\"通过ES6的上下文来将this的指向绑定给当前组件，同样再每一次render的时候都会生成新的方法，影响性能\",\"class App extends React.Component { handleClick() { console.log('this > ', this); } render() { return ( <div onClick={e => this.handleClick(e)}>test</div> ) } }\"]},\"248\":{\"h\":\"constructor中bind\",\"t\":[\"在constructor中预先bind当前组件，可以避免在render操作中重复绑定\",\"class App extends React.Component { constructor(props) { super(props); this.handleClick = this.handleClick.bind(this); } handleClick() { console.log('this > ', this); } render() { return ( <div onClick={this.handleClick}>test</div> ) } }\"]},\"249\":{\"h\":\"定义阶段使用箭头函数绑定\",\"t\":[\"跟上述方式三一样，能够避免在render操作中重复绑定，实现也非常的简单，如下：\",\"class App extends React.Component { constructor(props) { super(props); } handleClick = () => { console.log('this > ', this); } render() { return ( <div onClick={this.handleClick}>test</div> ) } }\"]},\"250\":{\"h\":\"区别\",\"t\":[\"上述四种方法的方式，区别主要如下：\",\"编写方面：方式一、方式二写法简单，方式三的编写过于冗杂\",\"性能方面：方式一和方式二在每次组件render的时候都会生成新的方法实例，性能问题欠缺。若该函数作为属性值传给子组件的时候，都会导致额外的渲染。而方式三、方式四只会生成一个方法实例 综合上述，方式四是最优的事件绑定方式\"]},\"251\":{\"c\":[\"React\"]},\"252\":{\"c\":[\"React\"]},\"253\":{\"h\":\"React Hooks\",\"t\":[\"Hook 是 React 16.8 的新增特性。它可以让你在不编写 class 的情况下使用 state 以及其他的 React 特性\",\"至于为什么引入hook，官方给出的动机是解决长时间使用和维护react过程中常遇到的问题，例如：\",\"难以重用和共享组件中的与状态相关的逻辑\",\"逻辑复杂的组件难以开发与维护，当我们的组件需要处理多个互不相关的 local state 时，每个生命周期函数中可能会包含着各种互不相关的逻辑在里面\",\"类组件中的this增加学习成本，类组件在基于现有工具的优化上存在些许问题\",\"由于业务变动，函数组件不得不改为类组件等等 在以前，函数组件也被称为无状态的组件，只负责渲染的一些工作 因此，现在的函数组件也可以是有状态的组件，内部也可以维护自身的状态以及做一些逻辑方面的处理\"]},\"254\":{\"h\":\"常见hooks\",\"t\":[\"最常见的hooks有如下：\",\"useState\",\"useEffect\",\"其他\"]},\"255\":{\"h\":\"useState\",\"t\":[\"首先给出一个例子，如下：\",\"import React, { useState } from 'react'; function Example() { // 声明一个叫 \\\"count\\\" 的 state 变量 const [count, setCount] = useState(0); return ( <div> <p>You clicked {count} times</p > <button onClick={() => setCount(count + 1)}> Click me </button> </div> ); }\",\"在函数组件中通过useState实现函数内部维护state，参数为state默认的值，返回值是一个数组，第一个值为当前的state，第二个值为更新state的函数\",\"该函数组件等价于的类组件如下：\",\"class Example extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } render() { return ( <div> <p>You clicked {this.state.count} times</p > <button onClick={() => this.setState({ count: this.state.count + 1 })}> Click me </button> </div> ); } }\",\"从上述两种代码分析，可以看出两者区别：\",\"state声明方式：在函数组件中通过 useState 直接获取，类组件通过constructor 构造函数中设置\",\"state读取方式：在函数组件中直接使用变量，类组件通过this.state.count的方式获取\",\"state更新方式：在函数组件中通过 setCount 更新，类组件通过this.setState()\",\"总的来讲，useState 使用起来更为简洁，减少了this指向不明确的情况\"]},\"256\":{\"h\":\"useEffect\",\"t\":[\"useEffect可以让我们在函数组件中进行一些带有副作用的操作\",\"同样给出一个计时器示例：\",\"class Example extends React.Component { constructor(props) { super(props); this.state = { count: 0 }; } componentDidMount() { document.title = `You clicked ${this.state.count} times`; } componentDidUpdate() { document.title = `You clicked ${this.state.count} times`; } render() { return ( <div> <p>You clicked {this.state.count} times</p > <button onClick={() => this.setState({ count: this.state.count + 1 })}> Click me </button> </div> ); } }\",\"从上面可以看见，组件在加载和更新阶段都执行同样操作\",\"而如果使用useEffect后，则能够将相同的逻辑抽离出来，这是类组件不具备的方法\",\"对应的useEffect示例如下：\",\"import React, { useState, useEffect } from 'react'; function Example() { const [count, setCount] = useState(0); useEffect(() => { document.title = `You clicked ${count} times`; }); return ( <div> <p>You clicked {count} times</p > <button onClick={() => setCount(count + 1)}> Click me </button> </div> ); }\",\"useEffect第一个参数接受一个回调函数，默认情况下，useEffect会在第一次渲染和更新之后都会执行，相当于在componentDidMount和componentDidUpdate两个生命周期函数中执行回调\",\"如果某些特定值在两次重渲染之间没有发生变化，你可以跳过对 effect 的调用，这时候只需要传入第二个参数，如下：\",\"useEffect(() => { document.title = `You clicked ${count} times`; }, [count]); // 仅在 count 更改时更新\",\"上述传入第二个参数后，如果 count 的值是 5，而且我们的组件重渲染的时候 count 还是等于 5，React 将对前一次渲染的 [5] 和后一次渲染的 [5] 进行比较，如果是相等则跳过effects执行\",\"回调函数中可以返回一个清除函数，这是effect可选的清除机制，相当于类组件中componentwillUnmount生命周期函数，可做一些清除副作用的操作，如下：\",\"useEffect(() => { function handleStatusChange(status) { setIsOnline(status.isOnline); } ChatAPI.subscribeToFriendStatus(props.friend.id, handleStatusChange); return () => { ChatAPI.unsubscribeFromFriendStatus(props.friend.id, handleStatusChange); }; });\",\"所以， useEffect相当于componentDidMount，componentDidUpdate 和 componentWillUnmount 这三个生命周期函数的组合\"]},\"257\":{\"h\":\"其它 hooks\",\"t\":[\"在组件通信过程中可以使用useContext\",\"还有很多额外的hooks，如：\",\"useReducer\",\"useCallback\",\"useMemo\",\"useRef\"]},\"258\":{\"h\":\"解决什么\",\"t\":[\"通过对上面的初步认识，可以看到hooks能够更容易解决状态相关的重用的问题：\",\"每调用useHook一次都会生成一份独立的状态\",\"通过自定义hook能够更好的封装我们的功能\",\"编写hooks为函数式编程，每个功能都包裹在函数中，整体风格更清爽，更优雅\",\"hooks的出现，使函数组件的功能得到了扩充，拥有了类组件相似的功能，在我们日常使用中，使用hooks能够解决大多数问题，并且还拥有代码复用机制，因此优先考虑hooks\"]},\"259\":{\"c\":[\"React\"]},\"260\":{\"c\":[\"React\"]},\"261\":{\"h\":\"React\",\"t\":[\"React，用于构建用户界面的 JavaScript 库，只提供了 UI 层面的解决方案 遵循组件设计模式、声明式编程范式和函数式编程概念，以使前端应用程序更高效 使用虚拟DOM来有效地操作DOM，遵循从高阶组件到低阶组件的单向数据流 帮助我们将界面成了各个独立的小块，每一个块就是组件，这些组件之间可以组合、嵌套，构成整体页面\",\"react 类组件使用一个名为 render() 的方法或者函数组件 return ，接收输入的数据并返回需要展示的内容\",\"class HelloMessage extends React.Component { render() { return ( <div> Hello {this.props.name} </div> ); } } ReactDOM.render( <HelloMessage name=\\\"Taylor\\\" />, document.getElementById('hello-example') );\",\"上述这种类似 XML形式就是 JSX，最终会被babel编译为合法的JS语句调用 被传入的数据可在组件中通过 this.props 在 render() 访问\"]},\"262\":{\"h\":\"特性\",\"t\":[\"React特性有很多，如：\",\"JSX语法\",\"单向数据绑定\",\"虚拟DOM\",\"声明式编程\",\"Component\"]},\"263\":{\"h\":\"声明式编程\",\"t\":[\"声明式编程是一种编程范式，它表达逻辑而不显式地定义步骤 如实现一个标记的地图： 通过命令式创建地图、创建标记、以及在地图上添加的标记的步骤如下：\",\"// 创建地图 const map = new Map.map(document.getElementById('map'), { zoom: 4, center: {lat,lng} }); // 创建标记 const marker = new Map.marker({ position: {lat, lng}, title: 'Hello Marker' }); // 地图上添加标记 marker.setMap(map);\",\"而用React实现上述功能则如下：\",\"<Map zoom={4} center={lat, lng}> <Marker position={lat, lng} title={'Hello Marker'}/> </Map>\",\"声明式编程方式使得React组件很容易使用，最终的代码简单易于维护\"]},\"264\":{\"h\":\"Component\",\"t\":[\"在React 中，一切皆为组件。通常将应用程序的整个逻辑分解为小的单个部分。 我们将每个单独的部分称为组件 组件可以是一个函数或者是一个类，接受数据输入，处理它并返回在UI中呈现的React元素\",\"函数式组件如下：\",\"const Header = () => { return( <Jumbotron style={{backgroundColor:'orange'}}> <h1>TODO App</h1> </Jumbotron> ) }\",\"类组件（有状态组件）如下：\",\"class Dashboard extends React.Component { constructor(props){ super(props); this.state = { } } render() { return ( <div className=\\\"dashboard\\\"> <ToDoForm /> <ToDolist /> </div> ); } }\",\"一个组件该有的特点如下：\",\"可组合：个组件易于和其它组件一起使用，或者嵌套在另一个组件内部\",\"可重用：每个组件都是具有独立功能的，它可以被使用在多个UI场景\",\"可维护：每个小的组件仅仅包含自身的逻辑，更容易被理解和维护\"]},\"265\":{\"h\":\"优势\",\"t\":[\"通过上面的初步了解，可以感受到React存在的优势：\",\"高效灵活\",\"声明式的设计，简单使用\",\"组件式开发，提高代码复用率\",\"单向响应的数据流会比双向绑定的更安全，速度更快\"]},\"266\":{\"c\":[\"React\"]},\"267\":{\"c\":[\"React\"]},\"268\":{\"h\":\"jsx转为真实DOM\",\"t\":[\"react通过将组件编写的JSX映射到屏幕，以及组件中的状态发生了变化之后 React会将这些「变化」更新到屏幕上 JSX通过babel最终转化成React.createElement这种形式，例如：\",\"<div> < img src=\\\"avatar.png\\\" className=\\\"profile\\\" /> <Hello /> </div>\",\"会被bebel转化成如下：\",\"React.createElement( \\\"div\\\", null, React.createElement(\\\"img\\\", { src: \\\"avatar.png\\\", className: \\\"profile\\\" }), React.createElement(Hello, null) );\",\"在转化过程中，babel在编译时会判断 JSX 中组件的首字母：\",\"当首字母为小写时，其被认定为原生 DOM 标签，createElement 的第一个变量被编译为字符串\",\"当首字母为大写时，其被认定为自定义组件，createElement 的第一个变量被编译为对象 最终都会通过RenderDOM.render(...)方法进行挂载，如下：\",\"ReactDOM.render(<App />, document.getElementById(\\\"root\\\"));\"]},\"269\":{\"h\":\"过程\",\"t\":[\"在react中，节点大致可以分成四个类别：\",\"原生标签节点\",\"文本节点\",\"函数组件\",\"类组件 如下所示：\",\"class ClassComponent extends Component { static defaultProps = { color: \\\"pink\\\" }; render() { return ( <div className=\\\"border\\\"> <h3>ClassComponent</h3> <p className={this.props.color}>{this.props.name}</p > </div> ); } } function FunctionComponent(props) { return ( <div className=\\\"border\\\"> FunctionComponent <p>{props.name}</p > </div> ); } const jsx = ( <div className=\\\"border\\\"> <p>xx</p > < a href=\\\" \\\">xxx</ a> <FunctionComponent name=\\\"函数组件\\\" /> <ClassComponent name=\\\"类组件\\\" color=\\\"red\\\" /> </div> );\",\"这些类别最终都会被转化成React.createElement这种形式 React.createElement其被调用时会传⼊标签类型type，标签属性props及若干子元素children，作用是生成一个虚拟Dom对象，如下所示：\",\"function createElement(type, config, ...children) { if (config) { delete config.__self; delete config.__source; } // ! 源码中做了详细处理，⽐如过滤掉key、ref等 const props = { ...config, children: children.map(child => typeof child === \\\"object\\\" ? child : createTextNode(child) ) }; return { type, props }; } function createTextNode(text) { return { type: TEXT, props: { children: [], nodeValue: text } }; } export default { createElement };\",\"createElement会根据传入的节点信息进行一个判断：\",\"如果是原生标签节点， type 是字符串，如div、span\",\"如果是文本节点， type就没有，这里是 TEXT\",\"如果是函数组件，type 是函数名\",\"如果是类组件，type 是类名\",\"虚拟DOM会通过ReactDOM.render进行渲染成真实DOM，使用方法如下：\",\"ReactDOM.render(element, container[, callback])\",\"当首次调用时，容器节点里的所有 DOM 元素都会被替换，后续的调用则会使用 React 的 diff算法进行高效的更新 如果提供了可选的回调函数callback，该回调将在组件被渲染或更新之后被执行 render大致实现方法如下：\",\"function render(vnode, container) { console.log(\\\"vnode\\\", vnode); // 虚拟DOM对象 // vnode _> node const node = createNode(vnode, container); container.appendChild(node); } // 创建真实DOM节点 function createNode(vnode, parentNode) { let node = null; const {type, props} = vnode; if (type === TEXT) { node = document.createTextNode(\\\"\\\"); } else if (typeof type === \\\"string\\\") { node = document.createElement(type); } else if (typeof type === \\\"function\\\") { // 更新 node = type.isReactComponent ? updateClassComponent(vnode, parentNode) : updateFunctionComponent(vnode, parentNode); } else { // 其他类型 node = document.createDocumentFragment(); } reconcileChildren(props.children, node); updateNode(node, props); return node; } // 遍历下子vnode，然后把子vnode->真实DOM节点，再插入父node中 function reconcileChildren(children, node) { for (let i = 0; i < children.length; i++) { let child = children[i]; if (Array.isArray(child)) { for (let j = 0; j < child.length; j++) { render(child[j], node); } } else { render(child, node); } } } function updateNode(node, nextVal) { Object.keys(nextVal) .filter(k => k !== \\\"children\\\") .forEach(k => { if (k.slice(0, 2) === \\\"on\\\") { let eventName = k.slice(2).toLocaleLowerCase(); node.addEventListener(eventName, nextVal[k]); } else { node[k] = nextVal[k]; } }); } // 返回真实dom节点 // 执行函数 function updateFunctionComponent(vnode, parentNode) { const {type, props} = vnode; let vvnode = type(props); const node = createNode(vvnode, parentNode); return node; } // 返回真实dom节点 // 先实例化，再执行render函数 function updateClassComponent(vnode, parentNode) { const {type, props} = vnode; let cmp = new type(props); const vvnode = cmp.render(); const node = createNode(vvnode, parentNode); return node; } export default { render };\"]},\"270\":{\"h\":\"总结\",\"t\":[\"在react源码中，虚拟Dom转化成真实Dom整体流程如下所示：\",\"参数处理\",\"批处理、事物调用\",\"生成、渲染html\",\"IE、Edge逐个渲染，其他浏览器一次渲染 其渲染流程如下所示：\",\"使用React.createElement或JSX编写React组件，实际上所有的 JSX 代码最后都会转换成React.createElement(...) ，Babel帮助我们完成了这个转换的过程。\",\"createElement函数对key和ref等特殊的props进行处理，并获取defaultProps对默认props进行赋值，并且对传入的孩子节点进行处理，最终构造成一个虚拟DOM对象\",\"ReactDOM.render将生成好的虚拟DOM渲染到指定容器上，其中采用了批处理、事务等机制并且对特定浏览器进行了性能优化，最终转换为真实DOM\"]},\"271\":{\"c\":[\"React\"]},\"272\":{\"c\":[\"React\"]},\"273\":{\"h\":\"key\",\"t\":[\"跟Vue一样，React 也存在 Diff算法，而元素key属性的作用是用于判断元素是新创建的还是被移动的元素，从而减少不必要的Diff\",\"因此key的值需要为每一个元素赋予一个确定的标识\",\"如果列表数据渲染中，在数据后面插入一条数据，key作用并不大，如下：\",\"this.state = { numbers:[111,222,333] } insertMovie() { const newMovies = [...this.state.numbers, 444]; this.setState({ movies: newMovies }) } <ul> { this.state.movies.map((item, index) => { return <li>{item}</li> }) } </ul>\",\"前面的元素在diff算法中，前面的元素由于是完全相同的，并不会产生删除创建操作，在最后一个比较的时候，则需要插入到新的DOM树中\",\"因此，在这种情况下，元素有无key属性意义并不大\",\"下面再来看看在前面插入数据时，使用key与不使用key的区别：\",\"insertMovie() { const newMovies = [000 ,...this.state.numbers]; this.setState({ movies: newMovies }) }\",\"当拥有key的时候，react根据key属性匹配原有树上的子元素以及最新树上的子元素，像上述情况只需要将000元素插入到最前面位置\",\"当没有key的时候，所有的li标签都需要进行修改\",\"同样，并不是拥有key值代表性能越高，如果说只是文本内容改变了，不写key反而性能和效率更高\",\"主要是因为不写key是将所有的文本内容替换一下，节点不会发生变化\",\"而写key则涉及到了节点的增和删，发现旧key不存在了，则将其删除，新key在之前没有，则插入，这就增加性能的开销\"]},\"274\":{\"h\":\"总结\",\"t\":[\"良好使用key属性是性能优化的非常关键的一步，注意事项为：\",\"key 应该是唯一的\",\"key不要使用随机值（随机数在下一次 render 时，会重新生成一个数字）\",\"避免使用 index 作为 key react判断key的流程具体如下图：\"]},\"275\":{\"c\":[\"React\"]},\"276\":{\"c\":[\"React\"]},\"277\":{\"h\":\"渲染优化\",\"t\":[\"react 基于虚拟 DOM 和高效 Diff 算法的完美配合，实现了对 DOM 最小粒度的更新，大多数情况下，React 对 DOM 的渲染效率足以我们的业务日常\",\"复杂业务场景下，性能问题依然会困扰我们。此时需要采取一些措施来提升运行性能，避免不必要的渲染则是业务中常见的优化手段之一\"]},\"278\":{\"h\":\"避免不必要的渲染\",\"t\":[\"render的触发时机，简单来讲就是类组件通过调用setState方法， 就会导致render，父组件一旦发生render渲染，子组件一定也会执行render渲染\",\"从上面可以看到，父组件渲染导致子组件渲染，子组件并没有发生任何改变，这时候就可以从避免无谓的渲染，具体实现的方式有如下：\",\"shouldComponentUpdate\",\"PureComponent\",\"React.memo\"]},\"279\":{\"h\":\"shouldComponentUpdate\",\"t\":[\"通过shouldComponentUpdate生命周期函数来比对 state 和 props，确定是否要重新渲染\",\"默认情况下返回true表示重新渲染，如果不希望组件重新渲染，返回 false 即可\"]},\"280\":{\"h\":\"PureComponent\",\"t\":[\"跟shouldComponentUpdate 原理基本一致，通过对 props 和 state的浅比较结果来实现 shouldComponentUpdate，源码大致如下：\",\"if (this._compositeType === CompositeTypes.PureClass) { shouldUpdate = !shallowEqual(prevProps, nextProps) || ! shallowEqual(inst.state, nextState); }\",\"shallowEqual对应方法大致如下：\",\"const hasOwnProperty = Object.prototype.hasOwnProperty; function is(x: mixed, y: mixed): boolean { if (x === y) { return x !== 0 || y !== 0 || 1 / x === 1 / y; } else { return x !== x && y !== y; } } function shallowEqual(objA: mixed, objB: mixed): boolean { // 首先对基本类型进行比较 if (is(objA, objB)) { return true; } if (typeof objA !== 'object' || objA === null || typeof objB !== 'object' || objB === null) { return false; } const keysA = Object.keys(objA); const keysB = Object.keys(objB); // 长度不相等直接返回false if (keysA.length !== keysB.length) { return false; } // key相等的情况下，再去循环比较 for (let i = 0; i < keysA.length; i++) { if ( !hasOwnProperty.call(objB, keysA[i]) || !is(objA[keysA[i]], objB[keysA[i]]) ) { return false; } } return true; }\",\"当对象包含复杂的数据结构时，对象深层的数据已改变却没有触发 render\",\"重要\",\"在react中，是不建议使用深层次结构的数据\"]},\"281\":{\"h\":\"React.memo\",\"t\":[\"React.memo用来缓存组件的渲染，避免不必要的更新，其实也是一个高阶组件，与 PureComponent 十分类似。但不同的是， React.memo 只能用于函数组件\",\"import { memo } from 'react'; function Button(props) { // Component code } export default memo(Button);\",\"如果需要深层次比较，这时候可以给memo第二个参数传递比较函数\",\"function arePropsEqual(prevProps, nextProps) { // your code return prevProps === nextProps; } export default memo(Button, arePropsEqual);\"]},\"282\":{\"h\":\"总结\",\"t\":[\"在实际开发过程中，前端性能问题是一个必须考虑的问题，随着业务的复杂，遇到性能问题的概率也在增高\",\"除此之外，建议将页面进行更小的颗粒化，如果一个过大，当状态发生修改的时候，就会导致整个大组件的渲染，而对组件进行拆分后，粒度变小了，也能够减少子组件不必要的渲染\"]},\"283\":{\"c\":[\"React\"]},\"284\":{\"c\":[\"React\"]},\"285\":{\"h\":\"性能优化\"},\"286\":{\"c\":[\"React\"]},\"287\":{\"c\":[\"React\"]},\"288\":{\"h\":\"refs\",\"t\":[\"React 中的 Refs提供了一种方式，允许我们访问 DOM 节点或在 render 方法中创建的 React 元素 本质为ReactDOM.render()返回的组件实例，如果是渲染组件则返回的是组件实例，如果渲染dom则返回的是具体的dom节点\"]},\"289\":{\"h\":\"创建refs\",\"t\":[\"创建ref的形式有四种种：\",\"传入字符串，使用时通过 this.refs.传入的字符串的格式获取对应的元素\",\"传入对象，对象是通过 React.createRef() 方式创建出来，使用时获取到创建的对象中存在 current 属性就是对应的元素\",\"传入函数，该函数会在 DOM 被挂载时进行回调，这个函数会传入一个 元素对象，可以自己保存，使用时，直接拿到之前保存的元素对象即可\",\"传入hook，hook是通过 useRef() 方式创建，使用时通过生成hook对象的 current 属性就是对应的元素\"]},\"290\":{\"h\":\"传入字符串\",\"t\":[\"只需要在对应元素或组件中ref属性\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return <div ref=\\\"myref\\\" />; } }\",\"访问当前节点的方式如下：\",\"this.refs.myref.innerHTML = \\\"hello\\\";\"]},\"291\":{\"h\":\"传入对象\",\"t\":[\"refs通过React.createRef()创建，然后将ref属性添加到React元素中，如下：\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return <div ref={this.myRef} />; } }\",\"当 ref 被传递给 render 中的元素时，对该节点的引用可以在 ref 的 current 属性中访问\",\"const node = this.myRef.current;\"]},\"292\":{\"h\":\"传入函数\",\"t\":[\"当ref传入为一个函数的时候，在渲染过程中，回调函数参数会传入一个元素对象，然后通过实例将对象进行保存\",\"class MyComponent extends React.Component { constructor(props) { super(props); this.myRef = React.createRef(); } render() { return <div ref={element => this.myref = element} />; } }\",\"获取ref对象只需要通过先前存储的对象即可\",\"const node = this.myref\"]},\"293\":{\"h\":\"传入hook\",\"t\":[\"通过useRef创建一个ref，整体使用方式与React.createRef一致\",\"function App(props) { const myref = useRef() return ( <> <div ref={myref}></div> </> ) }\",\"获取ref属性也是通过hook对象的current属性\",\"const node = myref.current;\",\"上述三种情况都是ref属性用于原生HTML元素上，如果ref设置的组件为一个类组件的时候，ref对象接收到的是组件的挂载实例 注意的是，不能在函数组件上使用ref属性，因为他们并没有实例\"]},\"294\":{\"h\":\"应用场景\",\"t\":[\"在某些情况下，我们会通过使用refs来更新组件，但这种方式并不推荐，更多情况我们是通过props与state的方式进行去重新渲染子元素 过多使用refs，会使组件的实例或者是DOM结构暴露，违反组件封装的原则 例如，避免在 Dialog 组件里暴露 open() 和 close() 方法，最好传递 isOpen 属性 但下面的场景使用refs非常有用：\",\"对Dom元素的焦点控制、内容选择、控制\",\"对Dom元素的内容设置及媒体播放\",\"对Dom元素的操作和对组件实例的操作\",\"集成第三方 DOM 库\"]},\"295\":{\"c\":[\"React\"]},\"296\":{\"c\":[\"React\"]},\"297\":{\"h\":\"render\",\"t\":[\"render函数在react中有两种形式：\",\"在类组件中，指的是render方法：\",\"class Foo extends React.Component { render() { return <h1> Foo </h1>; } }\",\"在函数组件中，指的是函数组件本身：\",\"function Foo() { return <h1> Foo </h1>; }\",\"在render中，我们会编写jsx，jsx通过babel编译后就会转化成我们熟悉的js格式，如下：\",\"return ( <div className='cn'> <Header> hello </Header> <div> start </div> Right Reserve </div> )\",\"babel编译后：\",\"return ( React.createElement( 'div', { className : 'cn' }, React.createElement( Header, null, 'hello' ), React.createElement( 'div', null, 'start' ), 'Right Reserve' ) )\",\"从名字上来看，createElement方法用来创建元素的 在react中，这个元素就是虚拟DOM树的节点，接收三个参数：\",\"type：标签\",\"attributes：标签属性，若无则为null\",\"children：标签的子节点 这些虚拟DOM树最终会渲染成真实DOM 在render过程中，React 将新调用的 render 函数返回的树与旧版本的树进行比较，这一步是决定如何更新 DOM 的必要步骤，然后进行 diff 比较，更新 DOM 树\"]},\"298\":{\"h\":\"触发时机\",\"t\":[\"render的执行时机主要分成了两部分：\",\"类组件调用 setState 修改状态\",\"class Foo extends React.Component { state = { count: 0 }; increment = () => { const { count } = this.state; const newCount = count < 10 ? count + 1 : count; this.setState({ count: newCount }); }; render() { const { count } = this.state; console.log(\\\"Foo render\\\"); return ( <div> <h1> {count} </h1> <button onClick={this.increment}>Increment</button> </div> ); } }\",\"点击按钮，则调用setState方法，无论count发生变化辩护，控制台都会输出Foo render，证明render执行了\",\"函数组件通过useState hook修改状态\",\"function Foo() { const [count, setCount] = useState(0); function increment() { const newCount = count < 10 ? count + 1 : count; setCount(newCount); } console.log(\\\"Foo render\\\"); return ( <div> <h1> {count} </h1> <button onClick={increment}>Increment</button> </div> ); }\",\"函数组件通过useState这种形式更新数据，当数组的值不发生改变了，就不会触发render\",\"类组件重新渲染\",\"class App extends React.Component { state = { name: \\\"App\\\" }; render() { return ( <div className=\\\"App\\\"> <Foo /> <button onClick={() => this.setState({ name: \\\"App\\\" })}> Change name </button> </div> ); } } function Foo() { console.log(\\\"Foo render\\\"); return ( <div> <h1> Foo </h1> </div> ); }\",\"只要点击了 App 组件内的 Change name 按钮，不管 Foo 具体实现是什么，都会被重新render渲染\",\"函数组件重新渲染\",\"function App(){ const [name,setName] = useState('App') return ( <div className=\\\"App\\\"> {/* 父组件变化不会渲染子组件 */} <Foo /> <button onClick={() => setName(\\\"aaa\\\")}> { name } </button> </div> ) } function Foo() { console.log(\\\"Foo render\\\"); return ( <div> <h1> Foo </h1> </div> ); }\",\"可以发现，使用useState来更新状态的时候，只有首次会触发Foo render，后面并不会导致Foo render\"]},\"299\":{\"h\":\"总结\",\"t\":[\"render函数里面可以编写JSX，转化成createElement这种形式，用于生成虚拟DOM，最终转化成真实DOM 在 React 中，类组件只要执行了 setState 方法，就一定会触发 render 函数执行，函数组件使用useState更改状态不一定导致重新render 组件的 props 改变了，不一定触发 render 函数的执行，但是如果 props 的值来自于父组件或者祖先组件的 state 在这种情况下，父组件或者祖先组件的 state 发生了改变，就会导致子组件的重新渲染 所以，一旦执行了setState就会执行render方法，useState 会判断当前值有无发生改变确定是否执行render方法，一旦父组件发生渲染，子组件也会渲染\"]},\"300\":{\"c\":[\"React\"]},\"301\":{\"c\":[\"React\"]},\"302\":{\"h\":\"setState\",\"t\":[\"一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state 当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用 如下例子：\",\"import React, { Component } from 'react' export default class App extends Component { constructor(props) { super(props); this.state = { message: \\\"Hello World\\\" } } render() { return ( <div> <h2>{this.state.message}</h2> <button onClick={e => this.changeText()}>面试官系列</button> </div> ) } changeText() { this.setState({ message: \\\"JS每日一题\\\" }) } }\",\"通过点击按钮触发onclick事件，执行this.setState方法更新state状态，然后重新执行render函数，从而导致页面的视图更新 如果直接修改state的状态，如下：\",\"changeText() { this.state.message = \\\"你好啊,李银河\\\"; }\",\"我们会发现页面并不会有任何反应，但是state的状态是已经发生了改变 这是因为React并不像vue2中调用Object.defineProperty数据响应式或者Vue3调用Proxy监听数据的变化 必须通过setState方法来告知react组件state已经发生了改变 关于state方法的定义是从React.Component中继承，定义的源码如下：\",\"Component.prototype.setState = function(partialState, callback) { invariant( typeof partialState === 'object' || typeof partialState === 'function' || partialState == null, 'setState(...): takes an object of state variables to update or a ' + 'function which returns an object of state variables.', ); this.updater.enqueueSetState(this, partialState, callback, 'setState'); };\",\"从上面可以看到setState第一个参数可以是一个对象，或者是一个函数，而第二个参数是一个回调函数，用于可以实时的获取到更新之后的数据\"]},\"303\":{\"h\":\"更新类型\",\"t\":[\"在使用setState更新数据的时候，setState的更新类型分成：\",\"异步更新\",\"同步更新\"]},\"304\":{\"h\":\"异步更新\",\"t\":[\"先举出一个例子：\",\"changeText() { this.setState({ message: \\\"你好啊\\\" }) console.log(this.state.message); // Hello World }\",\"从上面可以看到，最终打印结果为Hello world，并不能在执行完setState之后立马拿到最新的state的结果 如果想要立刻获取更新后的值，在第二个参数的回调中更新后会执行\",\"changeText() { this.setState({ message: \\\"你好啊\\\" }, () => { console.log(this.state.message); // 你好啊 }); }\"]},\"305\":{\"h\":\"同步更新\",\"t\":[\"同样先给出一个在setTimeout中更新的例子：\",\"changeText() { setTimeout(() => { this.setState({ message: \\\"你好啊 }); console.log(this.state.message); // 你好啊 }, 0); }\",\"上面的例子中，可以看到更新是同步\",\"再来举一个原生DOM事件的例子：\",\"componentDidMount() { const btnEl = document.getElementById(\\\"btn\\\"); btnEl.addEventListener('click', () => { this.setState({ message: \\\"你好啊,李银河\\\" }); console.log(this.state.message); // 你好啊,李银河 }) }\",\"重要\",\"在组件生命周期或React合成事件中，setState是异步 在setTimeout或者原生dom事件中，setState是同步\"]},\"306\":{\"h\":\"批量更新\",\"t\":[\"同样先给出一个例子：\",\"handleClick = () => { this.setState({ count: this.state.count + 1, }) console.log(this.state.count) // 1 this.setState({ count: this.state.count + 1, }) console.log(this.state.count) // 1 this.setState({ count: this.state.count + 1, }) console.log(this.state.count) // 1 }\",\"点击按钮触发事件，打印的都是 1，页面显示 count 的值为 2 对同一个值进行多次 setState ， setState 的批量更新策略会对其进行覆盖，取最后一次的执行结果 上述的例子，实际等价于如下：\",\"Object.assign( previousState, {index: state.count+ 1}, {index: state.count+ 1}, ...)\",\"由于后面的数据会覆盖前面的更改，所以最终只加了一次 如果是下一个state依赖前一个state的话，推荐给setState一个参数传入一个function，如下：\",\"onClick = () => { this.setState((prevState, props) => { return {count: prevState.count + 1}; }); this.setState((prevState, props) => { return {count: prevState.count + 1}; }); }\",\"而在setTimeout或者原生dom事件中，由于是同步的操作，所以并不会进行覆盖现象\"]},\"307\":{\"c\":[\"React\"]},\"308\":{\"c\":[\"React\"]},\"309\":{\"h\":\"state和props\"},\"310\":{\"h\":\"state\",\"t\":[\"一个组件的显示形态可以由数据状态和外部参数所决定，而数据状态就是state，一般在 constructor 中初始化 当需要修改里面的值的状态需要通过调用setState来改变，从而达到更新组件内部数据的作用，并且重新调用组件render方法。\",\"class Button extends React.Component { constructor() { super(); this.state = { count: 0, }; } updateCount() { this.setState((prevState, props) => { return { count: prevState.count + 1 } }); } render() { return (<button onClick={() => this.updateCount()} > Clicked {this.state.count} times </button>); } }\",\"setState还可以接受第二个参数，它是一个函数，会在setState调用完成并且组件开始重新渲染时被调用，可以用来监听渲染是否完成\",\"this.setState({ name:'a' },()=>console.log('setState finished'))\"]},\"311\":{\"h\":\"props\",\"t\":[\"React的核心思想就是组件化思想，页面会被切分成一些独立的、可复用的组件 组件从概念上看就是一个函数，可以接受一个参数作为输入值，这个参数就是props，所以可以把props理解为从外部传入组件内部的数据 react具有单向数据流的特性，所以他的主要作用是从父组件向子组件中传递数据 props除了可以传字符串，数字，还可以传递对象，数组甚至是回调函数，如下：\",\"class Welcome extends React.Component { render() { return <h1>Hello {this.props.name}</h1>; } } const element = <Welcome name=\\\"Sara\\\" onNameChanged={this.handleName} />;\",\"上述name属性与onNameChanged方法都能在子组件的props变量中访问 在子组件中，props在内部不可变的，如果想要改变它看，只能通过外部组件传入新的props来重新渲染子组件，否则子组件的props和展示形式不会改变\"]},\"312\":{\"h\":\"区别\",\"t\":[\"相同点：\",\"两者都是 JavaScript 对象\",\"两者都是用于保存信息\",\"props 和 state 都能触发渲染更新 区别：\",\"props 是外部传递给组件的，而 state 是在组件内被组件自己管理的，一般在 constructor 中初始化\",\"props 在组件内部是不可修改的，但 state 在组件内部可以进行修改\",\"state 是多变的、可以修改\"]},\"313\":{\"c\":[\"React\"]},\"314\":{\"c\":[\"React\"]},\"315\":{\"h\":\"super()和super(props)的区别\"},\"316\":{\"h\":\"ES6类\",\"t\":[\"在ES6中，通过extends关键字实现类的继承，方式如下：\",\"class sup { constructor(name) { this.name = name } printName() { console.log(this.name) } } class sub extends sup{ constructor(name,age) { super(name) // super代表的事父类的构造函数 this.age = age } printAge() { console.log(this.age) } } let jack = new sub('jack',20) jack.printName() //输出 : jack jack.printAge() //输出 : 20\",\"在上面的例子中，可以看到通过super关键字实现调用父类，super代替的是父类的构建函数，使用super(name)相当于调用sup.prototype.constructor.call(this,name) 如果在子类中不使用super，关键字，则会引发报错，如下： 报错的原因是 子类是没有自己的this对象的，它只能继承父类的this对象，然后对其进行加工 而super()就是将父类中的this对象继承给子类的，没有super() 子类就得不到this对象 如果先调用this，再初始化super()，同样是禁止的行为\",\"class sub extends sup{ constructor(name,age) { this.age = age super(name) // super代表的事父类的构造函数 } }\",\"所以在子类constructor中，必须先代用super才能引用this\"]},\"317\":{\"h\":\"类组件\",\"t\":[\"在React中，类组件是基于es6的规范实现的，继承React.Component，因此如果用到constructor就必须写super()才初始化this 这时候，在调用super()的时候，我们一般都需要传入props作为参数，如果不传进去，React内部也会将其定义在组件实例中\",\"// React 内部 const instance = new YourComponent(props); instance.props = props; // props直接挂载到实例上\",\"所以无论有没有constructor，在render中this.props都是可以使用的，这是React自动附带的，是可以不写的：\",\"class HelloMessage extends React.Component{ render (){ return ( <div>nice to meet you! {this.props.name}</div> ); } }\",\"但是也不建议使用super()代替super(props) 因为在React会在类组件构造函数生成实例后再给this.props赋值，所以在不传递props且super的情况下，调用this.props为undefined，如下情况：\",\"class Button extends React.Component { constructor(props) { super(); // 没传入 props console.log(props); // {} console.log(this.props); // undefined // ... }\",\"而传入props的则都能正常访问，确保了 this.props 在构造函数执行完毕之前已被赋值，更符合逻辑，如下：\",\"class Button extends React.Component { constructor(props) { super(props); // 没传入 props console.log(props); // {} console.log(this.props); // {} // ... }\"]},\"318\":{\"h\":\"总结\",\"t\":[\"在React中，类组件基于ES6，所以在constructor中必须使用super 在调用super过程，无论是否传入props，React内部都会将porps赋值给组件实例porps属性中 如果只调用了super()，那么this.props在super()和构造函数结束之间仍是undefined\"]},\"319\":{\"c\":[\"React\"]},\"320\":{\"c\":[\"React\"]},\"321\":{\"h\":\"过渡动画\",\"t\":[\"在react中实现过渡动画效果会有很多种选择，如react-transition-group，react-motion，Animated，以及原生的CSS都能完成切换动画\"]},\"322\":{\"h\":\"实现\",\"t\":[\"在react中，react-transition-group是一种很好的解决方案，其为元素添加enter，enter-active，exit，exit-active这一系列勾子 可以帮助我们方便的实现组件的入场和离场动画 其主要提供了三个主要的组件：\",\"CSSTransition：在前端开发中，结合 CSS 来完成过渡动画效果\",\"SwitchTransition：两个组件显示和隐藏切换时，使用该组件\",\"TransitionGroup：将多个动画组件包裹在其中，一般用于列表中元素的动画\"]},\"323\":{\"h\":\"CSSTransition\",\"t\":[\"其实现动画的原理在于，当CSSTransition的in属性置为true时，CSSTransition首先会给其子组件加上xxx-enter、xxx-enter-active的class执行动画 当动画执行结束后，会移除两个class，并且添加-enter-done的class 所以可以利用这一点，通过css的transition属性，让元素在两个状态之间平滑过渡，从而得到相应的动画效果 当in属性置为false时，CSSTransition会给子组件加上xxx-exit和xxx-exit-active的class，然后开始执行动画，当动画结束后，移除两个class，然后添加-enter-done的class 如下例子：\",\"export default class App2 extends React.PureComponent { state = {show: true}; onToggle = () => this.setState({show: !this.state.show}); render() { const {show} = this.state; return ( <div className={'container'}> <div className={'square-wrapper'}> <CSSTransition in={show} timeout={500} classNames={'fade'} unmountOnExit={true} > <div className={'square'} /> </CSSTransition> </div> <Button onClick={this.onToggle}>toggle</Button> </div> ); } }\",\"对应css样式如下：\",\".fade-enter { opacity: 0; transform: translateX(100%); } .fade-enter-active { opacity: 1; transform: translateX(0); transition: all 500ms; } .fade-exit { opacity: 1; transform: translateX(0); } .fade-exit-active { opacity: 0; transform: translateX(-100%); transition: all 500ms; }\"]},\"324\":{\"h\":\"SwitchTransition\",\"t\":[\"SwitchTransition可以完成两个组件之间切换的炫酷动画 比如有一个按钮需要在on和off之间切换，我们希望看到on先从左侧退出，off再从右侧进入 SwitchTransition中主要有一个属性mode，对应两个值：\",\"in-out：表示新组件先进入，旧组件再移除；\",\"out-in：表示旧组件先移除，新组件再进入 SwitchTransition组件里面要有CSSTransition，不能直接包裹你想要切换的组件 里面的CSSTransition组件不再像以前那样接受in属性来判断元素是何种状态，取而代之的是key属性 下面给出一个按钮入场和出场的示例，如下：\",\"import { SwitchTransition, CSSTransition } from \\\"react-transition-group\\\"; export default class SwitchAnimation extends PureComponent { constructor(props) { super(props); this.state = { isOn: true } } render() { const {isOn} = this.state; return ( <SwitchTransition mode=\\\"out-in\\\"> <CSSTransition classNames=\\\"btn\\\" timeout={500} key={isOn ? \\\"on\\\" : \\\"off\\\"}> { <button onClick={this.btnClick.bind(this)}> {isOn ? \\\"on\\\": \\\"off\\\"} </button> } </CSSTransition> </SwitchTransition> ) } btnClick() { this.setState({isOn: !this.state.isOn}) } }\",\"css文件对应如下：\",\".btn-enter { transform: translate(100%, 0); opacity: 0; } .btn-enter-active { transform: translate(0, 0); opacity: 1; transition: all 500ms; } .btn-exit { transform: translate(0, 0); opacity: 1; } .btn-exit-active { transform: translate(-100%, 0); opacity: 0; transition: all 500ms; }\"]},\"325\":{\"h\":\"TransitionGroup\",\"t\":[\"当有一组动画的时候，就可将这些CSSTransition放入到一个TransitionGroup中来完成动画 同样CSSTransition里面没有in属性，用到了key属性 TransitionGroup在感知children发生变化的时候，先保存移除的节点，当动画结束后才真正移除 其处理方式如下：\",\"插入的节点，先渲染dom，然后再做动画\",\"删除的节点，先做动画，然后再删除dom\",\"如下：\",\"import React, { PureComponent } from 'react' import { CSSTransition, TransitionGroup } from 'react-transition-group'; export default class GroupAnimation extends PureComponent { constructor(props) { super(props); this.state = { friends: [] } } render() { return ( <div> <TransitionGroup> { this.state.friends.map((item, index) => { return ( <CSSTransition classNames=\\\"friend\\\" timeout={300} key={index}> <div>{item}</div> </CSSTransition> ) }) } </TransitionGroup> <button onClick={e => this.addFriend()}>+friend</button> </div> ) } addFriend() { this.setState({ friends: [...this.state.friends, \\\"coderwhy\\\"] }) } }\",\"对应css如下：\",\".friend-enter { transform: translate(100%, 0); opacity: 0; } .friend-enter-active { transform: translate(0, 0); opacity: 1; transition: all 500ms; } .friend-exit { transform: translate(0, 0); opacity: 1; } .friend-exit-active { transform: translate(-100%, 0); opacity: 0; transition: all 500ms; }\"]},\"326\":{\"c\":[\"React\"]},\"327\":{\"c\":[\"React\"]},\"328\":{\"h\":\"Typescript\"},\"329\":{\"h\":\"特性\",\"t\":[\"类型批注和编译时类型检查\",\"类型推断：未批准变量自动推断类型\",\"类型擦除：编译过程中批准的内容\",\"接口：ts中用接口来定义对象类型\",\"枚举：用于取值被限定在一定范围内的场景\",\"Mixin：可以接受任意类型的值\",\"泛型编程：写代码时使用一些以后才指定的类型\",\"名字空间：名字只在该区域内有效，其他区域可重复使用该名字而不冲突\",\"元组：元组合并了不同类型的对象，相当于一个可以装不同类型数据的数组\"]},\"330\":{\"h\":\"数据类型\",\"t\":[\"除了js自身的数据类型（不包含bigint，symbol），他还有以下类型： void、enum、tuple、any、never、array\"]},\"331\":{\"h\":\"高级类型\",\"t\":[\"严格来说，应该叫类型表达式\"]},\"332\":{\"h\":\"交叉类型\",\"t\":[\"使用 & 将多个类型合并在一起\"]},\"333\":{\"h\":\"联合类型\",\"t\":[\"使用 | 将类型联合起来（或）\"]},\"334\":{\"h\":\"类型别名\",\"t\":[\"可以作用于原始值、联合类型、元组以及其他需要手写的类型\",\"type some=boolean|string\",\"可以使用类型别名在属性里引用自己\",\"type Tree<T>={ value:T; left:Tree<T> }\"]},\"335\":{\"h\":\"类型索引\",\"t\":[\"keyof（索引查询）类似于object.keys，获取类型所有键，返回其联合类型\",\"type Test=keyof name\",\"T[k]（索引访问）获取某个属性的类型\",\"interface IPerson { name: string; age: number; } let type1: IPerson['name'] // string let type2: IPerson['age'] // number\",\"extends（泛型约束）继承一个或多个类型，获得属性\",\"const str = printLength('lin') const arr = printLength([1,2,3]) const obj = printLength({ length: 10 }) const num = printLength(10) // 报错，Argument of type 'number' is not assignable to parameter of type 'ILength'\"]},\"336\":{\"h\":\"映射类型\",\"t\":[\"将一个类型映射为另一个类型\",\"in，对联合类型实现遍历\",\"type Person = \\\"name\\\" | \\\"school\\\" | \\\"major\\\" type Obj = { [p in Person]: string }\",\"将T的所有属性映射为可选的\",\"interface IPerson { name: string age: number } type IPartial = Partial<IPerson> let p1: IPartial = {}\",\"将T的所有属性映射为只读的\",\"type IReadOnly = Readonly<IPerson> let p1: IReadOnly = { name: 'lin', age: 18 }\",\"Pick用于抽取对象子集，挑选一组属性并组成一个新的类型，例如：\",\"interface IPerson { name: string age: number sex: string } type IPick = Pick<IPerson, 'name' | 'age'> let p1: IPick = { name: 'lin', age: 18 }\",\"Record 是会创建新属性的非同态映射类型。\",\"type one=“person1”|“person2” type IRecord = Record<one, IPerson> let personMap: IRecord = { person1: { name: 'lin', age: 18 }, person2: { name: 'liu', age: 25 } }\"]},\"337\":{\"h\":\"条件类型\",\"t\":[\"与三元表达式一致，经常用于一些类型不确定的情况\",\"T extends U ? X : Y\"]},\"338\":{\"h\":\"类\",\"t\":[\"在ES6之后，JS拥有了class关键字，虽然本质上是构造函数，且仍然有一些特性还没有加入，比如修饰符和抽象类\"]},\"339\":{\"h\":\"定义\",\"t\":[\"class关键字紧接着类名，包含以下的数据成员：字段、构造函数、方法\",\"class car{ engine:string; constructor( engine:string){ this.engine=engine } }\"]},\"340\":{\"h\":\"继承\",\"t\":[\"类继承后，子类可以对父类的方法重新定义，通过super关键字引用父类的属性和方法\",\"class demo1{ doprint():void{} } class demo2 extends demo1{ doprint():void{ super.doprint() } }\"]},\"341\":{\"h\":\"修饰符\",\"t\":[\"TS添加了三种修饰符\",\"public：外部可以自由访问\",\"private：只能在类内部使用（es特性，#可定义私有属性）\",\"protect：子类和类的内部可以访问\",\"readonly：只读修饰符\"]},\"342\":{\"h\":\"静态属性(es自带能力)\",\"t\":[\"static定义的属性，属于类本身，而不是类的实例\",\"class demo1{ static width='100px' }\"]},\"343\":{\"h\":\"抽象类\",\"t\":[\"抽象类作为其他派生类的基类使用，抽象类可以包含成员的实现细节\",\"abstract class demo{ abstract fun():void; move():void{} }\",\"抽象类不能被实例化，需要创建子类去实现：\",\"class children extends demo{ fun(){} }\"]},\"344\":{\"h\":\"枚举\",\"t\":[\"用于声明一组命名的常数，当一个变量有几种可能的取值时，可以将他定义为枚举类型\",\"enum axxx {}\",\"有以下类型：\",\"数字枚举：声明而没有赋值，默认从0开始累加\",\"enum direction { up, //默认0 down }\",\"字符串枚举\",\"异构枚举：混合数字枚举和字符串枚举\"]},\"345\":{\"h\":\"原理\",\"t\":[\"本质上是对象，和构建对象的函数\",\"var direction; (function (direction){ direction[direction['up']=0]='up'; direction[direction['down']=0]='down' })\"]},\"346\":{\"h\":\"TS函数\",\"t\":[\"ts为函数添加了额外的功能\"]},\"347\":{\"h\":\"可选参数\",\"t\":[\"const add=(a:number,b?:number)=>a+(b?b:0)\"]},\"348\":{\"h\":\"剩余参数\",\"t\":[\"const add=(a:number,...rest:number[])=>rest.reduce(((a,b)=>a+b),a)\"]},\"349\":{\"h\":\"函数重载\",\"t\":[\"把精确的定义放在前面，函数实现时，使用|或者？操作符，把所有的尽可能的输入类型包含进去，用于具体实现。 只是多个函数的声明，具体逻辑还需要是西安\",\"// 声明 function add (arg1: string, arg2: string): string function add (arg1: number, arg2: number): number // 实现 function add (arg1: string | number, arg2: string | number) { // arg1 + arg2 if (typeof arg1 === 'string' && typeof arg2 === 'string') { return arg1 + arg2 } else if (typeof arg1 === 'number' && typeof arg2 === 'number') { return arg1 + arg2 } }\"]},\"350\":{\"h\":\"泛型\",\"t\":[\"在类型实例化时，才指明确切的类型 泛型通过<>的形式进行表述，可以声明：\",\"函数\",\"接口\",\"类\"]},\"351\":{\"h\":\"装饰器\",\"t\":[\"一种不改变原类和使用继承的情况下，动态地扩展对象功能 本质上是一个函数，@expression的形式是object.defineProperty的语法糖\"]},\"352\":{\"h\":\"使用\",\"t\":[\"实验特性，在tsconfig.json文件启动\",\"{ \\\"complierOptions\\\":{ \\\"target\\\":'ES5', \\\"experimentalDecorators\\\":true } }\",\"可以装饰：\",\"类\",\"function add(constructor:Function){ constructor.prototype.age=18 } @add class person{ name:string constructor(){ this.name='huihui' } } // 实际上等同于 Person=add(function person(){})\",\"当修饰类的时候，为每个实例化对象添加一个age属性 2. 方法/属性 此时装饰器接受参数如下：target对象原型、propertyKey方法名称、descriptor方法的属性描述符\",\"function method(target:any,propertyKey:string,descriptor:PropertyDescriptor){ descriptor.writable=false } class person{ @method say(){ return 'das' } }\",\"参数 此时装饰器接受参数如下：target对象原型、propertyKey方法名称、index参数数组中的位置\",\"function logParameter(target: Object, propertyName: string, index: number){ console.log(target); console.log(propertyName); console.log(index); } class Employee { greet(@logParameter message: string): string { return `hello ${message}`; } } const emp = new Employee(); emp.greet('hello');\",\"访问器 此时装饰器接受参数如下：target对象原型、propertyKey方法名称、descriptor方法的属性描述符\",\"function modification(target: Object, propertyKey: string, descriptor: PropertyDescriptor) { console.log(target); console.log(\\\"prop \\\" + propertyKey); console.log(\\\"desc \\\" + JSON.stringify(descriptor) + \\\"\\\\n\\\\n\\\"); }; class Person{ _name: string; constructor() { this._name = 'huihui'; } @modification get name() { return this._name } }\",\"装饰器工厂：可接受参数的装饰器\",\"function addAge(age: number) { return function(constructor: Function) { constructor.prototype.age = age } } @addAge(10) class Person{ name: string; age!: number; constructor() { this.name = 'huihui'; } } let person = new Person();\"]},\"353\":{\"h\":\"执行顺序\",\"t\":[\"当多个装饰器应用于一个声明上，将由上至下依次对装饰器表达式求值，求职的结果会被当作函数，由上到下依次调用\",\"function f() { console.log(\\\"f(): evaluated\\\"); return function (target, propertyKey: string, descriptor: PropertyDescriptor) { console.log(\\\"f(): called\\\"); } } function g() { console.log(\\\"g(): evaluated\\\"); return function (target, propertyKey: string, descriptor: PropertyDescriptor) { console.log(\\\"g(): called\\\"); } } class C { @f() @g() method() {} } // f(): evaluated g(): evaluated g(): called f(): called\"]},\"354\":{\"h\":\"命名空间和模块\",\"t\":[\"任何包含顶级import或者export文件都被视为一个模块，如果一个文件不带有，则它的内容被视为全局可见的 在ts中，export关键字可以导出类型\",\"export const a=1 export type person={ name:string }\"]},\"355\":{\"h\":\"命名空间\",\"t\":[\"命名空间定义了标识符的可见范围，一个标识符可在多个命名空间中定义，他在不同的命名空间中的含义互不相干 使用namespace来定义：\",\"namespace SomeNameSpaceName{ export interface SomeNameSpaceName{} export class SomeClassName{} } // 使用方法如下 SomeNameSpaceName.SomeClassName\",\"本质上是一个对象\",\"var SomeNameSpaceName; (function (SomeNameSpaceName){ SomeNameSpaceName.SomeNameSpaceName SomeNameSpaceName.SomeClassName })(SomeNameSpaceName||(SomeNameSpaceName={}))\"]},\"356\":{\"h\":\"区别\",\"t\":[\"正常的的TS项目开发过程中不建议使用命名空间，但通常在通过d.ts文件标记js库类型的时候使用命名空间\",\"命名空间不能识别组件之间的依赖关系\"]},\"357\":{\"h\":\"在vue中使用\",\"t\":[\"引入vue-property-decorator，主要的功能如下：\",\"methods可以直接声明为类的成员方法\",\"计算属性可以被声明为类的属性访问器\",\"初始化的data可以被声明为类属性\",\"data、render以及所有的Vue生命周期钩子能够直接作为类的成员方法\",\"其他所有的属性，需要放在装饰器中\"]},\"358\":{\"h\":\"@Component\",\"t\":[\"Component装饰器他注明了此类为一个vue组件，因此即使没有设置选项也不能忽略\",\"import {Component,Vue} from 'vue-property-decorator'; import {componentA,componentB} from '@/components'; @Component({ components:{ componentA,componentB, }, directives: { focus: { inserted: function (el) { el.focus() } } } }) export default class YourCompoent extends Vue{ }\"]},\"359\":{\"h\":\"computed、data、methods\",\"t\":[\"取消了组件的data和methods属性，\",\"@Component export default class HelloDecorator extends Vue { count: number = 123 // data add(): number { //method this.count + 1 } get total(): number { return this.count + 1 } set total(param:number): void { this.count = param } }\"]},\"360\":{\"h\":\"@props\",\"t\":[\"组件接受属性的装饰器,对应每一个属性\",\"import {Component,Vue,Prop} from vue-property-decorator; @Component export default class YourComponent extends Vue { @Prop(String) propA:string; @Prop([String,Number]) propB:string|number; @Prop({ type: String, // type: [String , Number] default: 'default value', // String Number required: true, validator: (value) => { return ['InProcess','Settled'].indexOf(value) !== -1 } }) propC:string; }\"]},\"361\":{\"h\":\"@watch\",\"t\":[\"监听器\",\"import { Vue, Component, Watch } from 'vue-property-decorator' @Component export default class YourComponent extends Vue { @Watch('child') onChildChanged(val: string, oldVal: string) {} @Watch('person', { immediate: true, deep: true }) onPersonChanged1(val: Person, oldVal: Person) {} @Watch('person') onPersonChanged2(val: Person, oldVal: Person) {} }\"]},\"362\":{\"h\":\"@emit\",\"t\":[\"import {Vue, Component, Emit} from 'vue-property-decorator'; @Component({}) export default class Some extends Vue{ mounted(){ // 监听事件 this.$on('emit-todo', function(n) {console.log(n)}) // 触发事件 this.emitTodo('world'); } // 注册事件 @Emit() emitTodo(n: string){console.log('hello');} }\"]},\"363\":{\"c\":[\"JS框架\"]},\"364\":{\"c\":[\"typescript\"]},\"365\":{\"h\":\"版本管理\",\"t\":[\"版本控制(Version control)，是维护工程蓝图的标准作法，能追踪工程蓝图从诞生一直到定案的过程。此外，版本控制也是一种软件工程技巧，借此能在软件开发的过程中，确保由不同人所编辑的同一程序文件都得到同步。\",\"通过文档控制，能记录任何工程项目内各个模块的改动历程，并为每次改动编上序号。\",\"一种简单的版本控制形式如下：赋给图的初版一个版本等级\\\"A\\\"。当做了第一次改变后，版本等级改为\\\"B\\\",以此类推。\",\"版本控制能提供项目的设计者，将设计恢复到之前任一状态的选择权。\",\"简言之，修改只要提交到版本控制系统，基本上都能找回，版本控制系统就像一台时光机器，可以让你回到任何一个时间点。\",\"优点：\",\"记录文件所有的历史变化，这是版本控制系统的基本能力\",\"随时恢复到任意时间点，历史记录功能使我们不怕改错代码了\",\"支持多功能并行开发，通常版本控制系统都支持分支，保证了并行开发的可行\",\"多人协作并行开发，对于多人协作项目、支持多人协作开发的版本管理系统将事半功倍\"]},\"366\":{\"h\":\"\",\"t\":[\"版本控制系统根据类别可以分成：\",\"本地版本控制系统\",\"集中式版本控制系统\",\"分布式版本控制系统\"]},\"367\":{\"h\":\"\",\"t\":[\"结构如下图所示： 优点：\",\"简单，很多系统中都有内置\",\"适合管理文本，如系统设置 缺点：\",\"其不支持远程操作，因此并不适合多人版本开发。\"]},\"368\":{\"h\":\"\",\"t\":[\"结构如下图所示： 优点：\",\"适合多人团队协作开发\",\"代码集中化管理 缺点：\",\"单点故障\",\"必须联网，无法单机工作 代表工具有SVN、CVS\"]},\"369\":{\"h\":\"\",\"t\":[\"TortoiseSVN是一款非常易于使用的跨平台的版本控制/源代码控制软件\"]},\"370\":{\"h\":\"\",\"t\":[\"CVS是版本控制系统，是源配置管理(SCM)的重要组成部分。使用它，您可以记录源文件和文档的历史记录。 老牌的版本控制系统，它是基于客户端/服务器的行为使其可以容纳多用户，构成网络也很方便。 这一特性使得CVS成为位于不同地点的人同时处理数据文件(特别是程序的源代码)时的首选。\"]},\"371\":{\"h\":\"\",\"t\":[\"结构如下图所示： 优点：\",\"适合多人团队协作开发\",\"代码集中化管理 缺点：\",\"可以离线工作\",\"每个计算机都是一个完整仓库 分布式版本管理系统每个计算机都有一个完整仓库，可本地提交，可做到离线工作，则不用像集中版本管理那样因为断网情况而无法工作 代表工具为Git、HG\"]},\"372\":{\"h\":\"\",\"t\":[\"Git是目前世界上最先进的分布式版本控制系统，旨在快速高效地处理从小型到大型项目的所以事务特性：易于学习、占用内存小，具有闪电般快速的性能。 使用Git和Gitlab搭建版本控制环境是现在互联网公司最流行的版本控制方式\"]},\"373\":{\"h\":\"\",\"t\":[\"TortoiseHg是一个免费的分布式源代码管理工具。它可以有效地处理任何规模的项目，并提供简单直观的界面。MercurialHg是一种轻量级分布式版本控制系统，采用Python语言实现，易于学习和使用，扩展性强。\"]},\"374\":{\"h\":\"\",\"t\":[\"git是一个分布式版本控制软件，最初是为了更好地管理Linux内核开发而设计 分布式版本控制系统的客户端并不只是提取最新版本的文件快照，而是把代码仓库完整地镜像下来。这么一来，任何一处协调工作用的服务器发生故障、事后都可以用任何一个镜像出来的本地仓库恢复\",\"alt text\",\"项目开始，只有一个原始版仓库，别的机器可以clone这个原始版本库，那么所有的clone的机器，他们的版本库其实都是一样的，并没有主次之分。\",\"所以在实现团队协作的时候，只要有一台电脑充当服务器的角色，其他每个人都从这个”服务器“仓库clone一份到自己的电脑上，并且各自把各自的提交推送到服务器仓库里，也从服务器仓库中拉取别人的提交。\",\"github实际就可以充当这个服务器角色，其是一个开源协作社区，提供Git仓库托管服务，既可以让别人参与你的开源项目，也可以参与别人的开源项目。\"]},\"375\":{\"h\":\"\",\"t\":[\"当我们通过git init创建或者git clone一个项目的时候，项目目录会隐藏一个==.git==子目录，其作用是用来跟踪管理版本的\",\"Git中所有数据在存储前都计算校验和，然后以校验和来引用，所以在我们修改或者删除文件的时候，Git能够知道Git用以计算校验和的机制叫做 SHA-1 散列(hash，哈希)。这是一个由40个十六进制字符(0-9和a-f)组成字符串，基于 Git 中文件的内容或目录结构计算出来，如下：\",\"24b9da6552252987aa493b52f8696cd6d3b00373\",\"当我们修改文件的时候，git就会修改文件的状态，可以通过git status进行查询，状态情况如下：\",\"已修改(modified)：表示修改了文件，但还没保存到数据库中。\",\"已暂存(staged)：表示对一个已修改文件的当前版本做了标记，使之包含在下次提交的快照中。\",\"已提交(committed)：表示数据已经安全的保存在本地数据库中。 文件状态对应的，不同状态的文件在Git中处于不同的工作区域，主要分成了四个部分：\",\"工作区：相当于本地写代码的区域，如git clone一个项目到本地，相当于本地克隆了远程仓库项目的一个副本\",\"暂存区：暂存区是一个文件，保存了下次将提交的文件列表信息，一般在Git仓库目录中\",\"本地仓库：提交更新，找到暂存区域的文件，将快照永久性存储到Git本地仓库\",\"alt text\"]},\"376\":{\"h\":\"\",\"t\":[\"git常用的命令\",\"add：提交全部文件修改到缓存区\",\"commit：\",\"push\",\"pull\",\"clone\",\"checkout\"]},\"377\":{\"h\":\"配置命令\",\"t\":[\"Git自带一个git config的工具来帮助设置控制Git外观和行为的配置变量，在我们安装完git之后，第一件事就是设置你的用户名和邮件地址。\",\"后续每一个提交都会使用这些信息。他们会写入你的每一次提交中，不可更改。\",\"设置提交代码的用户信息命令如下：\",\"git config [--global] user.name \\\"[name]\\\"\",\"git config [--global] user.email \\\"[email address]\\\"\"]},\"378\":{\"h\":\"启动命令\",\"t\":[\"一个git项目的初始有两个途径，分别是：\",\"git init [project-name]：创建或在当前目录初始化一个git代码库\",\"git init url：下载一个项目和他的整个代码历史\"]},\"379\":{\"h\":\"日常基本操作\",\"t\":[\"git init：初始化仓库，默认为master分支\",\"add：提交全部文件修改到缓存区\",\"add <具体文件路径+全名>：提交某些文件到缓冲区\",\"git diff：查看当前代码add后，会add哪些内容\",\"git diff --staged：查看现在commit提交后，会提交哪些内容\",\"git status：查看当前分支状态\",\"git pull <远程仓库名> <远程分支名>：拉取远程仓库的分支与本地当前分支\",\"git pull <远程仓库名> <远程分支名> <本地分支名>：拉取远程仓库的分支与本地的某个分支合并\",\"git commit --amend [file1] [file2]：重做上一次commit，并包括指定文件的新变化\",\"git commit -v:提交时显示所有的diff信息\",\"git commit -m [message]：提交代码到本地仓库，并写提交信息[message]\",\"关于提交信息的格式，可以遵循以下的规则：\",\"feat：新特性，添加功能\",\"fix：修改bug\",\"refactor：代码重构\",\"docs：文档修改\",\"style：代码格式修改\",\"test：测试用例修改\",\"chore：其他修改，比如构建流程，依赖管理\"]},\"380\":{\"h\":\"分支操作\",\"t\":[\"git branch：查看本地所有分支\",\"git branch -r：查看远程所有的分支\",\"git branch -a：查看本地和远程所有的分支\",\"git merge <分支名>：合并分支\",\"git merge --abort：合并分支出现冲突时，取消合并，一切回到合并前的状态\",\"git branch <新分支名>：基于当前分支，新建一个分支\",\"git checkout --orphan <新分支名>：新建一个空分支，会保留之前分支的所有文件\",\"git branch -D <分支名>：删除本地某个分支\",\"git push <远程库名>:<分支名>：删除某个远程分支\",\"git branch <新分支名><提交ID>：从提交历史恢复某个删除掉的某个分支\",\"git branch -m <原分支名> <新分支名>：分支更名\",\"git checkout <分支名>：切换到本地某个分支\",\"git checkout <远程库名>/<分支名>：切换到线上某个分支\",\"git checkout -b <新分支名>：基于当前分支新建分支，并切换为这个分支\"]},\"381\":{\"c\":[\"版本控制工具\"]},\"382\":{\"c\":[\"Git\"]},\"383\":{\"h\":\"部署到服务器后404\",\"t\":[\"在history模式下的问题，但在hash模式下没有问题 history的路由切换会被当成http请求 配置将任何页面重定向到index.html，把路由交给前端处理\"]},\"384\":{\"c\":[\"JS框架\"]},\"385\":{\"c\":[\"Vue\"]},\"386\":{\"h\":\"组件通信\",\"t\":[\"组件通信主要分为以下几类：\",\"父子组件通信：props、$emit\",\"兄弟组件通信：父组件中转（a触发事件，父组件通过props传递b），全局状态管理。\",\"跨级组件通信：provide/inject\",\"全局组件通信（非关系组件间通信）:全局状态管理、事件总线（vue2）、全局变量 vue中有如下的常规通信方案（8）:\",\"props\",\"$emit\",\"ref实例：通过 ref 属性获取子组件实例，调用其方法或访问属性。\",\"eventBus（vue2）\",\"attrs与$ listeners：属性继承与事件转发,在vue3中被统一为attrs attrs透传：用于存储​​父组件通过 v-bind 传递给当前组件的所有非 props 属性​​的对象。这些属性未被当前组件声明为 props（或未被 inheritAttrs 配置排除），因此不会被当前组件直接使用，但可以被透传给子组件。会自动绑定根元素。\",\"// Wrapper 组件 export default { inheritAttrs: false, // 禁用自动绑定到根元素 // ... }; // 此时，$attrs 仍会存储父组件传递的属性，但不会自动绑定到根元素，需手动通过 v-bind=\\\"$attrs\\\" 传递给子组件。\",\"listeners 是 Vue2 中用于存储​​父组件通过 v-on 绑定到当前组件的所有事件监听器​​的对象。它的键是事件名（如 click、input），值是对应的回调函数。\",\"<!-- 父组件 Parent.vue --> <template> <Wrapper @click=\\\"handleWrapperClick\\\" @input=\\\"handleInputChange\\\" /> </template> <!-- Wrapper 组件 --> <template> <!-- 透传属性和事件到 Input 组件 --> <Input v-bind=\\\"$attrs\\\" v-on=\\\"$listeners\\\" /> </template>\",\"provide/inject\",\"$parent 或$root:通过共同祖辈$parent或者$root搭建通信桥连\",\"// a this.$parent.$emit('foo') // b this.$parent.$on('foo', this.handle)\",\"Vuex特殊：路由传参\"]},\"387\":{\"c\":[\"JS框架\"]},\"388\":{\"c\":[\"Vue\"]},\"389\":{\"h\":\"修饰符\",\"t\":[\"修饰符处理了许多DOM事件的细节 五种修饰符：\",\"表单修饰符 \",\"lazy：change事件之后进行同步\",\"trim：过滤首空格\",\"number：转为数值类型，内部调用parseFloat，如果无法解析，返回原来值\",\"事件修饰符：支持链式调用 \",\"stop：阻止事件冒泡，event.stopPropagation方法\",\"prevent：阻止事件的默认行为，event.preventDefault方法\",\"self：当元素自身时触发处理函数\",\"once：绑定了事件以后只能触发一次\",\"capture：向下捕获事件，向下传递事件\",\"passive：相当于给onscroll事件整了一个.lazy修饰符\",\"native：让组件变得像内置标签那样监听根元素的原生事件，否则只会监听自定义事件\",\"鼠标按键修饰符 \",\"left、right、middle\",\"键盘修饰符\",\"v-bind修饰符 \",\"async：双向绑定\",\"prop：自定义标签属性\",\"camel：将命名变为驼峰命名法\"]},\"390\":{\"c\":[\"JS框架\"]},\"391\":{\"c\":[\"Vue\"]},\"392\":{\"h\":\"vue权限管理\",\"t\":[\"权限控制，确保用户只能访问到被分配的资源 前端权限归根结底是请求的发起权，页面加载触发、按钮点击触发\",\"可以分为四个方面：\",\"接口权限 jwt验证\",\"按钮权限 \",\"v-if\",\"自定义指令\",\"菜单权限 \",\"菜单与路由分离，菜单由后端返回，缺点：菜单与路由做一一对应，全局路由守卫里，每次路由跳转都要做判断\",\"菜单和路由都有后端返回，缺点：全局路由守卫里，每次路由跳转都要做判断；前后端配合要求更高\",\"路由权限 \",\"在路由上标记相应的权限信息，每次路由跳转前做校验\",\"四种缺点： \",\"如果路由很多，对性能会有影响\",\"全局路由守卫里，每次路由跳转都要做权限判断\",\"菜单信息写死在前端，要改个文字或权限信息，都需要重新编译\",\"菜单和路由耦合在一起，定义路由的时候还有添加菜单显示标题，图表之类的信息，而且路由不一定作为菜单显示，还需要更多的字段进行标识\",\"初始化，先挂在不需要权限控制的路由，用户登陆后，获取用户的权限信息，筛选出有权限的路由，在全局路由守卫中调用addRoutes添加路由\",\"缺点： \",\"全局守卫里，每次路由跳转都要做判断\",\"菜单信息写死在前端，要改个文字或权限信息，都需要重新编译\",\"菜单和路由耦合在一起，定义路由的时候还有添加菜单显示标题，图表之类的信息，而且路由不一定作为菜单显示，还需要更多的的字段进行标识\"]},\"393\":{\"c\":[\"JS框架\"]},\"394\":{\"c\":[\"Vue\"]},\"395\":{\"h\":\"SPA\",\"t\":[\"SPA，单页应用SPA是一种网络应用程序或网站的模型，通过动态重写当前页面来与用户交互\"]},\"396\":{\"c\":[\"JS框架\"]},\"397\":{\"c\":[\"Vue\"]},\"398\":{\"h\":\"虚拟dom\",\"t\":[\"虚拟DOM是对一层真实DOM的抽象，以js对象作为基础的树，用对象的属性来描述节点，最终可以通过一系列操作使这棵树映射到真实环境上。 在js对象中，虚拟DOM表现为一个Object对象。并且至少包含签名（tag）、属性（attrs）和子元素对象（children）\"]},\"399\":{\"h\":\"为什么需要\",\"t\":[\"DOM是很慢的，页面的性能问题，大部分是由DOM操作引起的。 一次操作时，需要更新10个dom节点，浏览器会依次执行10次更新操作。 而通过vnode，同样的更新10个dom节点，虚拟dom不会立即操作dom，而是将这10次更新内容保存在本地的一个js对象中，最终将这个js对象一次性attach到dom树上，避免大量的无谓计算。\"]},\"400\":{\"c\":[\"JS框架\"]},\"401\":{\"c\":[\"Vue\"]},\"402\":{\"h\":\"动态添加属性的问题\",\"t\":[\"通过函数运行时的为组件添加属性，页面不会触发更新\"]},\"403\":{\"h\":\"原理\",\"t\":[\"vue2使用object.defineProperty实现的数据响应式，由此可见对定义时存在的属性都进行这样的操作 新增的属性自然不具备响应式\"]},\"404\":{\"h\":\"解决\",\"t\":[\"若想实现数据与视图更新 Vue.set()向一个响应式对象中添加一个property，并确保这个新的property同样是响应式的 defineReactive新增属性的响应式 Object.assign() 创建一个新的对象，合并原对象和混入对象的属性\",\"this.someObject=Object.assign({},this.someObject,{newProperty1:1})\",\"$forceUpdated() 当需要做强制更新，九成的情况是，在某个地方写错了迫使Vue实例重新渲染，只影响实例本身和使用插槽的子组件。\"]},\"405\":{\"c\":[\"JS框架\"]},\"406\":{\"c\":[\"Vue\"]},\"407\":{\"h\":\"组件和插件的区别\",\"t\":[\"组件是把图形、非图形的各种逻辑均抽象为一个统一的概念来实现的开发模式 优势：\",\"降低系统的耦合度，保持接口不变的情况下，替换不同的组件快速完成需求\",\"调试方便，出现问题时可以用排除法直接移除组件、快速定位问题\",\"提高可维护性，由于每个组件的职责单一，并且组件在系统中是被复用的，使用对代码进行优化可获得系统的整体升级\",\"插件用来给Vue添加全局功能：\",\"添加全局方法或属性：vue-custom-element\",\"添加全局资源：指令、过滤器、过渡，vue-touch\",\"全局混入来添加一些组件选项：vue-router\",\"添加Vue实例方法，通过把他们添加到Vue.prototype上实现\",\"一个库，提供自己的api\"]},\"408\":{\"h\":\"区别\",\"t\":[\"组件有vue单文件，插件暴露了一个install函数 组件注册有全局注册和局部注册，插件使用Vue.use进行注册\"]},\"409\":{\"h\":\"场景\",\"t\":[\"组件是业务模块，插件是功能模块\"]},\"410\":{\"c\":[\"JS框架\"]},\"411\":{\"c\":[\"Vue\"]},\"412\":{\"h\":\"跨域问题\",\"t\":[\"跨域是浏览器基于同源策略的安全手段\",\"同源有三个部分：\",\"协议相同\",\"主机相同\",\"端口相同\",\"非同源请求，则发生了跨域\"]},\"413\":{\"h\":\"方法\",\"t\":[\"jsonp\",\"cors 跨域资源共享，一系列的HTTP头组成，决定了是否阻止前端代码获取跨域请求的响应\",\"proxy 代理，网络代理，允许一个通过这个服务与另一个网络终端进行非直接的连接 vue.config.js文件配置，最终发布上线时如果web应用和接口服务器不在一起仍会跨域 通过服务端实现代理请求转发，express、nginx\"]},\"414\":{\"c\":[\"JS框架\"]},\"415\":{\"c\":[\"Vue\"]},\"416\":{\"h\":\"data属性为何是一个函数\",\"t\":[\"在实例中可以定义为对象或函数 如果是为组件只能是一个函数\"]},\"417\":{\"h\":\"区别\",\"t\":[\"定义好组件时，vue最终都会通过vue.extend()构建组件实例 如果采用对象的data，每个组件的实例都会共用一个内存地址 采用函数返回一个全新的data形式\"]},\"418\":{\"h\":\"原理\",\"t\":[\"data初始化时，对象或函数都可以 组件创建时进行选项合并，vm实例为undefined，进入if判断 如果类型不是函数，则发出警告\"]},\"419\":{\"c\":[\"JS框架\"]},\"420\":{\"c\":[\"Vue\"]},\"421\":{\"h\":\"diff算法\",\"t\":[\"一种通过同层的树节点进行比较的高效算法\",\"比较只会再同层级进行,不会跨层级比较\",\"在diff比较的过程中,循环从两边向中间收拢 例子 第一次循环结束后,发现新旧节点D相同,diff后将他作为第一个真实节点,同时endindex移动到c. 第二次循环后,新旧节点c相同,diff后建立c的真实节点,startindex移动到e,endindex移动到b 第三次循环,没有发现e,直接创建新的真实节点E,startindex移动到a 第四次循环,diff创建了a的真实节点,startindex移动到b 第五次循环,创建b的真实节点,startindex已经大于endindex,需要创建newStrtIdx和newEndIdx之间的所有节点,即F startindex已经大于endindex,退出循环,创建newStrtIdx和newEndIdx之间的所有节点,即F\"]},\"422\":{\"h\":\"原理\",\"t\":[\"当数据发生改变时,set方法会调用Dep.notify通知所有的订阅者Watcher,订阅者就会调用pacth给真实DOM打补丁,更新相应的视图\",\"patch方法接受参数,oldVnode和Vnode 主要做了如下判断: 没有新节点,直接触发旧节点的destory钩子 没有旧节点,直接createElm新建节点 新旧节点自身一样,通过sameVnode判断节点是否一样,一样时,直接调用patchVnode去处理这两个节点 新旧节点自身不一样,直接创建新节点,删除旧的节点\",\"patchVnode 主要做了如下判断: 是否是文本节点,如果是,直接更新文本内容 如果存在子节点,则处理比较更新子节点 只有新节点有子节点,旧节点没有,所有的节点都是全新的,直接新建所有的新DOM,并且加入父节点 只有旧节点有子节点,把所有的旧节点删除,直接删除DOM\",\"子节点不完全一致,调用updateChildren 处理了五种情景: 新老节点的start相同,直接patchVnode,新老节点的start索引+1 新老节点的end相同,直接patchVnode,新老节点的end索引-1 老节点的start和新节点的end相同时,patchVnode后,将当前真实DOM移动到oldEndVnode后面,老节点的start索引+1,新节点的end索引-1 老节点的start和新节点的end相同时,patchVnode后,将当前真实DOM移动到oldEndVnode前面,老节点的end索引-1,新节点的start索引+1 如果不满足以上四种情况,则没有节点可以复用，分为以下两种情况 从旧的vnode为key值，对应的index序列为value值的哈希表中寻找到与newStartVnode一致key的旧的vnode节点，在进行patchVnode，同时将这个真实dom移动到oldstartVnode对应的真实dom的前面 调用createElm创建一个新的dom节点放到newStartIdx的位置\"]},\"423\":{\"h\":\"总结\",\"t\":[\"数据发生改变时，订阅者watcher就会调用patch给真实dom打补丁 通过isSameVnode进行判断，相同则调用patchVnode方法 patchVnode方法做了以下操作：\",\"找到对应的真实dom，称为el\",\"如果都有文本节点且不相等，将el文本节点设置为Vnode的文本节点\",\"如果oldVnode有子节点而Vnode没有，则删除el子节点\",\"如果oldVnode没有子节点而Vnode有，则将vnode的子节点真实化后添加到el\",\"如果两者都有子节点，则执行updateChildren函数比较子节点 updateChildren主要做了以下操作\",\"设置新旧Vnode的头尾指针\",\"新旧头尾指针进行比较，向循环中间靠拢，根据情况调用patchVnode进行patch重复流程、调用createElem创建一个新节点，从哈希表寻找key一致的Vnode节点再分情况操作\"]},\"424\":{\"c\":[\"JS框架\"]},\"425\":{\"c\":[\"Vue\"]},\"426\":{\"h\":\"自定义指令\",\"t\":[\"在vue中提供了一套数据驱动视图更为方便的操作，称之为指令\"]},\"427\":{\"h\":\"实现\",\"t\":[\"通过Vue.directive方法进行注册 第一个参数是指令的名字，第二个参数可以是对象数据，也可以是一个指令函数 自定义指令也存在钩子函数：\",\"bind：只调用一次，指令第一次绑定到元素时调用\",\"inserted：被绑定元素插入父节点时调用\",\"update：所在组件的Vnode更新时调用，可能发生在其子Vnode更新之前。\",\"componentUpdated：指令所在的组件Vnode及其子Vnode全部更新后调用\",\"unbind：只调用一次，指令与元素解绑时调用 钩子函数的参数：\",\"el：指令绑定的元素，可以操作dom\",\"binding：包含余下属性的对象 \",\"name\",\"value：绑定值\",\"oldValue：指令绑定的前一个值，只在update、componentUpdated可使用\",\"expression：字符串形式的指令表达式\",\"arg：传给指令的参数，可选\",\"modifiers：一个包含修饰符的对象\",\"vnode：虚拟节点\",\"oldVnode：上一个虚拟节点，只在update、componentUpdated可使用\"]},\"428\":{\"h\":\"场景\",\"t\":[\"防止表单重复提交 图片懒加载 一键copy的功能\"]},\"429\":{\"c\":[\"JS框架\"]},\"430\":{\"c\":[\"Vue\"]},\"431\":{\"h\":\"错误处理\",\"t\":[\"主要的错误来源包括：\",\"后端接口错误\",\"代码中本身逻辑错误 设置全局错误处理函数 生命周期钩子\"]},\"432\":{\"c\":[\"JS框架\"]},\"433\":{\"c\":[\"Vue\"]},\"434\":{\"h\":\"过滤器\",\"t\":[\"自定义过滤器，用于一些常见的文本格式化（vue3中已废弃 他是管道式的\"]},\"435\":{\"h\":\"使用\",\"t\":[\"双花括号插值，v-bind表达式\"]},\"436\":{\"h\":\"定义\",\"t\":[\"在选项filters中定义，过滤器函数总接受表达式的值作为第一个参数\"]},\"437\":{\"h\":\"应用场景\",\"t\":[\"单位转换，数字打点，文本格式化，时间格式化\"]},\"438\":{\"h\":\"原理\",\"t\":[\"模板编译阶段过滤器表达式将会被编译为过滤器函数，\",\"_f函数全名为resolveFilter，这个函数的作用是从this.$options.filters中找出注册的过滤器并返回\",\"_s函数的全称是toString，过滤器处理后的结果会当作当前参数传递给toString函数，执行的结果保存到vnode中的text属性中\"]},\"439\":{\"c\":[\"JS框架\"]},\"440\":{\"c\":[\"Vue\"]},\"441\":{\"h\":\"v-if、v-for、v-show\"},\"442\":{\"h\":\"v-if和v-for的优先级\",\"t\":[\"<div id=\\\"app\\\"> <p v-if=\\\"show\\\" v-for=\\\"item in list\\\"> {{item.title}} </p> </div>\",\"vue模板编译时，会将指令系统转为可执行的render函数，模板指令的代码都会生成在render函数中，通过app.$options.render就可以得到渲染函数\",\"function anoymous() { with(this) { return _c(\\\"div\\\", {attrs: {id: \\\"app\\\"} }, // _l是vue的列表渲染函数 _l((list),function(item) { return (isShow) ? _c(\\\"p\\\", [_v(\\\"\\\\n\\\"+ _s(item.title))]) : _e() }),0)} }\",\"显然v-for优先级比v-if高\"]},\"443\":{\"h\":\"当v-if和v-for置于不同的标签中\",\"t\":[\"<div id=\\\"app\\\"> <template v-if=\\\"isShow\\\"> <p v-for=\\\"item in list\\\">{{item.title}}</p > </template> </div>\",\"对应的渲染函数\",\"function anoymous() { with(this) { return _c(\\\"div\\\", {attrs: {id: \\\"app\\\"} }, [(isShow) ? [_v(\\\"\\\\n\\\"), _l((list),function(item){return _c(\\\"p\\\", [_v(_s(item.title))])})]: _e()], 2 )} }\",\"模板编译器代码，接收一个抽象语法树(AST)节点el和一个状态对象state，然后根据不同的条件返回相应的生成代码字符串。\",\"export function genElement(el:ASTElement,state:CodegenState):string { // 预处理标志 if(el.parent){ el.pre = el.pre || el.parent.pre } // 静态根节点 if(el.staticRoot && !el.staticProcessed){ return genStatic(el,state) } // v-once指令 else if(el.once && !el.onceProcessed){ return genOnce(el,state) } // v-for指令 else if(el.for && !el.forProcessed){ return genFor(el,state) } // v-if指令 else if(el.if && !el.ifProcessed){ return genIf(el,state) } // 模板标签处理 else if(el.tag === 'template' && !el.slotTarget && !state.pre){ return genChildren(el,state) || 'void 0' } // 插槽处理 else if(el.tag === 'slot'){ return genSlot(el,state) } // 组件或普通元素处理 else { // component or element } }\"]},\"444\":{\"h\":\"注意和结论\",\"t\":[\"不同时使用使用在同一个标签上，如果条件出现在循环内部，可以用computed提前过滤那些不需要显示的项。\",\"computed:{ items:function(){ return this.list.filter(item=>{ return item.show }) } }\",\"vue3和vue2的v-for不同\",\"在vue2中v-for优先级高于v-if。 在vue3中v-if优先级高于v-for。\"]},\"445\":{\"h\":\"v-if和v-show\"},\"446\":{\"h\":\"共同点\",\"t\":[\"v-if和v-show都是用于控制元素显示隐藏的指令.\",\"<div v-if=\\\"show\\\">...</div> <div v-show=\\\"show\\\">...</div>\"]},\"447\":{\"h\":\"不同点\",\"t\":[\"控制手段：v-show隐藏是为元素添加css属性display：none，dom元素依然存在。v-if隐藏是将dom元素整个添加或删除。\",\"编译过程：v-if切换有一个局部编译/卸载的过程，切换过程中合适的销毁和重新组件内部的事件监听和子组件。v-show只是简单的改变css属性。\",\"编译条件：v-if是真正的条件渲染，确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建。 v-if的状态更改，会触发组件的生命周期。 v-show是纯样式控制，不会触发组件的生命周期。\"]},\"448\":{\"h\":\"解析原理\",\"t\":[\"解析流程:\",\"将模板template转为ast结构的JS对象\",\"用ast得到的js对象拼装成render和staticRenderFns函数\",\"render和staticRenderFns函数被调用后生成虚拟VNODE节点，该节点包含创建DOM节点所需信息\",\"vm.patch函数通过虚拟DOM算法利用VNODE节点创建真实DOM节点\"]},\"449\":{\"h\":\"v-show原理\",\"t\":[\"源码中v-show指令的实现。\",\"// 对象形式的指令 export const vShow:ObjectDirective<VSowElement> = { // 处理v-show的初始状态。 // 如果使用<Transition>组件，会传入过渡对象 beforeMount(el,{value},{transition}){ // 保存display原始值 el._vod = el.style.display === 'none' ? '' : el.style.display // 如果有过渡效果，执行beforeEnter if(transition && value){ transition.beforeEnter(el) } else { // 设置display setDisplay(el,value) } }, // 元素挂载后处理v-show的过渡动画 mounted(el,{value},{transition}){ if(transition && value){ transition.enter(el) } } updated(el,{value,oldValue},{transition}){ // } // 在元素卸载前确保 v-show 的状态被正确应用。 beforeUnmount(el,{value}){ setDisplay(el,value) } }\"]},\"450\":{\"h\":\"v-if原理\",\"t\":[\"返回一个node节点，render函数通过表达式的值来决定是否生成DOM transformIf结构化指令（createStructuralDirectiveTransform工具函数创建）通常会改变整个 AST 结构，比如 v-if 会影响节点是否被包含在最终的渲染函数中。\",\"export const transformIf = createStructuralDirectiveTransform( // 匹配所有 v-if、v-else-if、v-else 指令。 /^(if|else-if|else)$/, (node,dir,context) => { return processIf(node,dir,context,(ifNode,branch,isRoot)) => { // ... // 返回一个延迟执行的函数（闭包），用于实际构建条件分支的代码节点。 return () => { if(isRoot){ // 为整个 ifNode 设置主分支； ifNode.codegenNode = createCodegenNodeForBranch( branch, key, context ) as IfConditionalExpression; } else { // 找到父级条件节点，并将当前分支作为 alternate（即 else 或 else if）添加进去； const parentCondition = getParentCondition(ifNode.codegenNode!) parentCondition.alternate = createCodegenNodeForBranch( branch, key + ifNode.branches.length - 1, context ) } } } } )\",\"假设流程如下\",\"<div v-if=\\\"a\\\">A</div> <div v-else-if=\\\"b\\\">B</div> <div v-else>C</div>\",\"Vue编译器会将其转换为：\",\"a ? renderA() : b ? renderB() : renderC()\"]},\"451\":{\"c\":[\"JS框架\"]},\"452\":{\"c\":[\"Vue\"]},\"453\":{\"h\":\"keep-alive\",\"t\":[\"能在组件切换过程中将状态保留在内存中，防止重复渲染dom 可以设置以下props属性：\",\"include\",\"exclude\",\"max 设置了缓存的组件会多出来两个生命周期钩子（activated、deactivated）\"]},\"454\":{\"h\":\"场景\",\"t\":[\"首页-列表页-商详页-再返回，列表页应该缓存 首页-列表页-商详页-返回列表页（缓存-返回到首页（缓存-再次进入列表页（不缓存 利用路由元信息，在keep-alive判断是否需要缓存\"]},\"455\":{\"h\":\"获取缓存后组件的数据\",\"t\":[\"每次组件渲染时，都会执行beforeRouteEnter,next方法中可以拿到组件实例，vm.getData\",\"缓存的组件被激活时，都会执行actived钩子，可以从里面拿到\"]},\"456\":{\"c\":[\"JS框架\"]},\"457\":{\"c\":[\"Vue\"]},\"458\":{\"h\":\"key的作用\",\"t\":[\"key是每一个vnode的唯一id，也是diff的一种优化策略，根据key更准确的找到对应的vnode节点 vue就会使用就地复地原则：最小化element的移动，并且最大程度在同适当的地方对同类型的element，做patch或者reuse 如果使用key，根据keys的顺序记录element，曾经拥有key的element如果不再出现的话，会被直接remove或者destoryed\"]},\"459\":{\"h\":\"设置key与不设置key的差异\",\"t\":[\"<body> <div id=\\\"app\\\"> <p v-for=\\\"item in list\\\" :key=\\\"item\\\">{{item}}</p > </div> <script src=\\\"../../dist/vue.js\\\"></script> <script> const app = new Vue({ el: '#app', data: { list: ['a','b','c','d','e'] }, mounted() { setTimeout(() => { this.list.splice(2,0,'f') },2000) } }) </script> </body>\",\"在不使用key的情况，vue会进行这样的操作：\",\"比较A,A,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较B,B,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较C,F,相同类型的节点，进行patch，数据不同，发生dom操作\",\"比较D,C,相同类型的节点，进行patch，数据不同，发生dom操作\",\"比较E,D,相同类型的节点，进行patch，数据不同，发生dom操作\",\"循环结束，将E插入到DOM中 一共发生了3次更新，1次插入操作 在使用key的情况，vue会进行这样的操作：\",\"比较A,A,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较B,B,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较C,F,不同类型的节点 比较E,E,相同类型的节点，进行patch，但数据相同，不发生dom操作 接着从末尾向内收缩比较\",\"比较D,D,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"比较C,C,相同类型的节点，进行patch，但数据相同，不发生dom操作\",\"循环结束，将F插入到C之前 一共发生了0次更新，1次插入操作\",\"重要\",\"对于以上，不使用key会依次比较，数据不同发生dom操作，c与f、d与c、e与d 如果使用key，vue只会更改顺序，将f插入到c之前\"]},\"460\":{\"h\":\"原理\",\"t\":[\"Diff算法中的核心函数：sameVnode，用于判断两个虚拟节点（vnode）是否可以复用。这个函数在 Vue 的 patch 过程中被广泛使用，特别是在 diff 算法进行新旧节点对比时。\",\"function sameVnode(a, b) { // key是否相同 return a.key === b.key && ( ( // 标签名是否一致 a.tag === b.tag && // 是否为注释节点 a.isComment === b.isComment && // 是否定义data isDef(a.data) === isDef(b.data) && // 如果是 <input> 元素，检查类型是否一致（如 text、password） sameInputType(a, b) ) || ( // 如果是如果是异步占位符节点（async component placeholder） isTrue(a.isAsyncPlaceholder) && // 占位符节点的工厂函数是否一致 a.asyncFactory === b.asyncFactory && // 占位符节点是否没有错误 isUndef(b.asyncFactory.error) ) ) }\",\"虚拟 DOM Diff 算法的核心部分，用于高效地更新子节点列表（children），即 updateChildren 函数。它通过比较新旧虚拟节点数组，并尽可能复用和移动现有 DOM 节点，来提升性能。\",\"fucntion updateChildren( // 父级真实dom parentElm, // 旧的子虚拟节点数组 oldCh, // 新的子虚拟节点数组 newCh, // 插入的新的vnode队列 insertedVnodeQueue, // 是否只是删除节点 removeOnly){ // ... // 使用双指针从头尾向中间逼近的方式进行比较。 while(oldStartIdx <= oldEndIdx && newStartIdx <= newEndIdx){ if(isUndef(oldStartVnode)){ // ... } else if(isUndef(oldEndVnode)){ // ... } // 头头匹配 else if(sameVnode(oldStartVnode,newStartVnode)){ // patch更新 // 移动两个指针向前：oldStartIdx++, newStartIdx++ // ... } // 尾尾匹配 else if(sameVnode(oldEndVnode,newEndVnode)){ // patch更新 // 指针向后移动：oldEndIdx--, newEndIdx-- // ... } // 旧头和新尾匹配 else if(sameVnode(oldStartVnode,newEndVnode)){ // patch 并将对应 DOM 移动到末尾； // 指针移动：oldStartIdx++, newEndIdx-- // ... } // 旧尾和新头匹配 else if(sameVnode(oldEndVnode,newStartVnode)){ // patch 并将对应 DOM 移动到开头； // 指针移动：oldEndIdx--, newStartIdx++ // ... } else{ // 使用 createKeyToOldIdx 建立一个 key 到老节点索引的映射表，便于快速查找。 if(isUndef(oldKeyToIdx)) oldKeyToIdx = createKeyToOldIdx(oldCh,oldStartIdx,oldEndIdx) // 新节点在旧节点中的位置 idxInOld = isDef(newStartVnode.key) ? oldKeyToIdx[newStartVnode.key] : findIdxInOld(newStartVnode,oldCh,oldStartIdx,oldEndIdx) if(isUndef(idxInOld)){ // 创建新节点 createElm(newStartVnode,insertedVnodeQueue,parentElm,oldStartVnode.elm,false,newCh,newStartIdx) } else { vnodeToMove = oldCh[idxInOld] if(sameVnode(vnodeToMove,newStartVnode)){ // 更新节点 patchVnode(vnodeToMove,newStartVnode,insertedVnodeQueue,newCh,newStartIdx) // 标记为已处理 oldCh[idxInOld] = undefined // 移动节点 canMove && nodeOps.insertBefore(parentElm,vnodeToMove.elm,oldStartVnode.elm) } // 如果找到key值相同,但类型不同 else { // 不匹配则新建 createElm(newStartVnode,insertedVnodeQueue,parentElm,oldStartVnode.elm,false,newCh,newStartIdx) } } // 如果还有剩余的 newCh 节点未处理，说明这些是新增的，需要创建并插入。 newStartVnode = newCh[++newStartIdx] } } }\"]},\"461\":{\"c\":[\"JS框架\"]},\"462\":{\"c\":[\"Vue\"]},\"463\":{\"h\":\"生命周期理解\",\"t\":[\"vue生命周期即vue组件从创建到销毁的过程，通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力。 大约有四个阶段：创建、挂载、更新和销毁。每个阶段包含多个钩子函数。注意：对于keep-alive缓存的组件，有额外的两个生命周期钩子，activated、deactivated。\",\"创建vue实例对象:new Vue(options)\",\"初始化实例对象:仅包含默认生命周期函数和默认事件\"]},\"464\":{\"h\":\"beforeCreate\",\"t\":[\"无法访问options的任何部分，响应式系统、事件绑定均未生效。可用于插件初始化（全局状态预加载），调试。\",\"初始化data、methods\"]},\"465\":{\"h\":\"created:options\",\"t\":[\"初始化完成，组件未挂载。可用于数据请求、第三方库初始化、验证props。\",\"编译模板：是否存在template标签，否则使用el属性（元素选择器）的元素（中的字符串）作为模板编译成render函数(调用vm.$mounted(el))。 父组件先进行模板编译，子组件后进行模板编译。\"]},\"466\":{\"h\":\"bedoreMounted\",\"t\":[\"可以访问虚拟DOM，但未挂载到页面中。干预模板编译（自定义渲染器），调试虚拟dom结构。\",\"生成虚拟DOM:在render函数中将虚拟DOM渲染成真实DOM\"]},\"467\":{\"h\":\"mounted\",\"t\":[\"可操作真实DOM，可访问子组件（子组件的mounted早于父组件的mounted）。DOM操作，获取真实DOM信息，子组件交互（调用子组件方法）。\",\"挂载完成：当数据变化之时\"]},\"468\":{\"h\":\"beforeUpdate\",\"t\":[\"可访问旧数据和旧dom。记录旧状态，对比数据变化。\",\"虚拟DOM重渲染：在内存中重新渲染虚拟DOM树，调用patch函数完成新旧虚拟DOM的差异计算，将差异应用到真实DOM\"]},\"469\":{\"h\":\"updated\",\"t\":[\"访问更新后DOM，可能因父组件更新而触发。依赖新DOM的操作，重新计算布局、触发副作用（统计日志）。 当调用vm.$destroy之时\"]},\"470\":{\"h\":\"beforeDestroy:\",\"t\":[\"访问完整的组件实例。清理资源，事件监听器、定时器、取消异步请求。解绑副作用，取消vuex的大约、断开websocket的链接。\",\"清理：清理watchers、事件监听器、子组件等\",\"销毁\"]},\"471\":{\"h\":\"destroyed:\",\"t\":[\"实例销毁。日志记录、验证清理。\"]},\"472\":{\"h\":\"activated\",\"t\":[\"被缓存的组件重新进入 DOM（如从其他页面返回） 恢复组件状态（如刷新数据、重新绑定事件）； 触发“激活”后的副作用（如重新加载最新数据）。\"]},\"473\":{\"h\":\"deactivated\",\"t\":[\"被缓存的组件离开 DOM（如切换到其他页面） 暂停组件状态（如停止定时器、暂停视频播放）； 保存当前状态（如滚动位置、表单输入内容）。\"]},\"474\":{\"h\":\"父子组件渲染顺序\",\"t\":[\"同步加载组件时，按模板的顺序来加载。父组件编译完模板后，加载完子组件后，再完成父组件挂载。 异步加载组件时，父组件生命周期完成后，再开始加载子组件。\"]},\"475\":{\"c\":[\"JS框架\"]},\"476\":{\"c\":[\"Vue\"]},\"477\":{\"h\":\"mixin混入\",\"t\":[\"mixin 面向对象程序设计语言中的类，提供了方法的实现。其他的类可以访问mixin类的方法而不必成为子类\"]},\"478\":{\"h\":\"vue中的mixin\",\"t\":[\"一个普通的js对象，包含组件中任意选项功能，将共有的功能以对象的方式传入mixins， 当组件使用mixins对象的选项是所有的mixins对象的选项都将被混入该组件本身的选项中来\"]},\"479\":{\"h\":\"局部混入\",\"t\":[\"定义一个mixin对象,包含组件options的data、methods、computed、watch等选项\",\"var myMixin = { created: function () {}, methods: {}, }\",\"组件通过mixins属性调用mixin对象\",\"Vue.component('my-component', { mixins: [myMixin], })\"]},\"480\":{\"h\":\"全局混入\",\"t\":[\"通过Vue.mixin进行全局混入\",\"Vue.mixin({ created: function () {}, })\",\"重要\",\"全局混用会影响到每一个组件实例,包括第三方组件.\"]},\"481\":{\"h\":\"注意\",\"t\":[\"当组件存在与mixin对象相同的选项时，在递归合并的时候组件的选项会覆盖mixin的选项 如果相同选项为生命周期钩子，会合并为一个数组，先执行mixin的钩子,再执行组建的钩子.\"]},\"482\":{\"h\":\"源码\",\"t\":[\"export function initMixin(Vue:GlobalAPI){ Vue.mixix = function (mixin:Objetc){ this.options = mergeOptions(this.options,mixin) return this } }\",\"mergeOptions 函数，用于合并 Vue 组件的选项（options）。这个函数的主要目的是将父组件和子组件的配置进行合并，以便生成最终的组件配置对象。\",\"export function mergeOptions( parent: Object, child: Object, vm?:Component ):Object { // 如果子组件中有 mixins 配置，则递归地将每个 mixin 合并到父组件的配置中。 if(child.mixins){ for(let i =0, l = child.minins.length; i<l;i++){ parent = mergeOptions(parent, child.mixins[i],vm) } } // 初始化配置对象 const options = {} let key // 遍历父组件的配置项 将父组件的所有配置项通过 mergeField 函数合并到 options 中。 for(key in parent){ mergeField(key) } // 遍历子组件的配置项 对于子组件中存在但父组件不存在的配置项，也通过 mergeField 函数合并到 options 中。 for(key in child){ if(!hasOwn(parent,key)){ mergeField(key) } } // 定义 mergeField 函数 该函数负责具体配置项的合并策略。 // 它根据配置项的类型选择对应的合并策略函数（如生命周期钩子、数据等），然后调用这些策略函数来合并配置。 function mergeField(key){ const strat = strats[key] || defaultStrat options[key] = strat(parent[key], child[key],vm,key) } return options }\"]},\"483\":{\"h\":\"合并策略\",\"t\":[\"替换型：props，methods，computed，inject\",\"// props、methods、inject、computed 这四个配置项使用相同的合并策略函数。 strats.props = strats.methods = strats.inject = strats.computed = function ( parentVal:?Object, childVal:?Object, vm?:Component, key:string ):?Object { if(!parentVal) return childVal const ret = Object.create(null) // 复制parentVal extend(ret,parentVal) // 复制childVal，优先级处理：子组件的配置会覆盖父组件的同名属性。 if(childVal) extend(ret,childVal) return ret } strats.provide = mergeDataOrFn\",\"合并型：data，通过set方法合并、重新赋值\",\"队列型：生命周期函数和watch\",\"叠加型：component、directives、filters\",\"strats.component = strats.directives = strats.filters = function ( parentVal:?Object, childVal:?Object, vm?:Component, key:string ):?Object { var res = Objetc.create(parentVal || null) if(childVal){ for(var key in childVal){ // 如果父组件中存在，则会覆盖 res[key] = childVal[key] } } return res }\"]},\"484\":{\"c\":[\"JS框架\"]},\"485\":{\"c\":[\"Vue\"]},\"486\":{\"h\":\"实例挂载过程\",\"t\":[\"vue的构造函数,options是用户传递的配置项,调用*_init*方法\",\"关于_init方法 初始化生命周期,渲染方法,调用beforeCreate钩子,初始化依赖注入,initState,调用created钩子 使用vm.$mount方法挂载元素\",\"initState方法完成props/data/method/watch/methods的初始化\",\"initData方法\",\"vm.$mount方法 如果没有提供render函数,则解析模板文件. 将html解析成ast树,转为render语法字符串,生成render方法\",\"mountComponent渲染组件 触发beforeCreate钩子,定义updateComponent渲染页面视图的方法.监听组件数据,一旦发生变化,触发beforeCreate钩子.updateComponent主要执行初始化声明的render,update方法\",\"render方法 render用于生成vnode\",\"_update主要功能是调用patch,将vnode转为真实DOM,并更新到页面中\"]},\"487\":{\"h\":\"结论\",\"t\":[\"new Vue调用_init方法 \",\"定义$set,$get,$delete,$watch等方法\",\"定义$on,$off,$emit,$off等事件\",\"定义_update,$forceUpdate,$destroy生命周期\",\"调用$mount方法进行页面的挂载 \",\"主要通过mountComponent方法\",\"定义updateComponent更新函数\",\"_update将虚拟DOM生成真实DOM结构,并且渲染到页面中\"]},\"488\":{\"c\":[\"JS框架\"]},\"489\":{\"c\":[\"Vue\"]},\"490\":{\"h\":\"nextTick\",\"t\":[\"在下次DOM更新循环结束之后执行延迟回调。在修改数据之后立即使用这个方法，获取更新后的DOM. 数据变化后,vue将开启一个异步更新队列,视图需要等待队列中所有的数据变化完成后,再统一进行更新.\"]},\"491\":{\"h\":\"场景\",\"t\":[\"Vue.nextTick(),第一个参数是回调函数,第二个参数为执行函数上下文. 返回一个promise对象,可以使用async和await完成相同作用的事情. callbacks是异步操作队列,将回调函数压入 pending用于标识,同一时间只能执行一次 timerFunc()异步延迟函数,根据当前环境选择合适的方法 无论是宏任务还是微任务,都会放到flushCallbacks\"]},\"492\":{\"c\":[\"JS框架\"]},\"493\":{\"c\":[\"Vue\"]},\"494\":{\"h\":\"slot\",\"t\":[\"在HTML中slot元素，作为webComponents技术套件的一部分，是web组件内的一个占位符，该占位符可以在后期使用自己的标记语言填充\"]},\"495\":{\"h\":\"场景\",\"t\":[\"通过slot插槽向组件内部指定位置传递内容，完成这个复用组件在不同场景的应用 比如布局组件、表格列、下拉选、弹框显示内容等。\"]},\"496\":{\"h\":\"分类\",\"t\":[\"默认插槽\",\"具名插槽\",\"作用域插槽 可获取子组件的信息\"]},\"497\":{\"h\":\"原理\",\"t\":[\"slot本质上是返回vnode的函数，vue组件渲染到页面上需要经过templete=>render=>vnode=>dom过程\",\"_v表示穿插普通文本节点，_t表示渲染插槽的函数\"]},\"498\":{\"c\":[\"JS框架\"]},\"499\":{\"c\":[\"Vue\"]},\"500\":{\"h\":\"Vue\",\"t\":[\"一个用于创建用户界面的开源JS框架，也是一个创建单页应用的web应用框架。\"]},\"501\":{\"h\":\"他的核心特性与技术原理如下：\",\"t\":[\"响应式数据驱动视图（MVVM）数据劫持：通过劫持数据对象的getter/setter(vue2)或proxy对象代理（vue3），收集依赖，并在数据变化时触发依赖更新。依赖收集与触发更新：在组件渲染或计算属性执行时，会“记录”当前使用的数据（创建Watcher实例），数据变化时通知所有相关Watcher重新执行（如重新渲染组件或更新计算属性）。双向绑定的实现​​：通过v-model指令，在表单元素（如input）上绑定数据，将输入事件（如input）与数据更新关联，实现“数据→视图”和“视图→数据”的双向同步。​注意点​​：Vue2对对象新增属性、数组索引修改的响应式支持有限（需通过Vue.set或this.$set解决）；Vue3基于Proxy的响应式系统解决了这一问题，并支持更细粒度的依赖跟踪。\",\"组件化开发（模块化与复用）：通过单文件组件（SFC）将模板、逻辑和样式封装为独立单元\",\"虚拟DOM与性能优化：通过虚拟dom实现高效DOM更新 渲染阶段：将组件模板转换为虚拟DOM（JS对象），通过Diff算法比较新旧虚拟DOM的差异 更新阶段：仅将差异部分应用到真实DOM，减少不必要的重排/重绘。\",\"vue3对虚拟DOM的优化：静态标记：标记动态节点（绑定了变量的文本、属性），Diff时仅扫描动态节点。 ​​Fragments​​：支持组件返回多个根节点（无需额外包裹div），减少DOM层级。 ​​==事件缓存（Event Cache）==​​：缓存高频事件处理函数，避免重复创建 4. 模板语法：声明式模板，通过类似于原生H5的语法描述UI结构，框架会自动处理DOM更新。 ​​指令（Directives）​​：v-if（条件渲染）、v-for（列表渲染）、v-bind（属性绑定）、v-model（双向绑定）、v-on（事件绑定）、v-show（显示隐藏）等，扩展HTML的能力。 ​​计算属性（Computed）​​：基于响应式数据缓存计算结果，仅当依赖变化时重新计算（适合需要缓存的复杂逻辑，如拼接姓名、过滤列表）。 ​​侦听器（Watch）​​：监听数据变化并执行副作用（如异步请求、复杂对象属性监控），适合需要“响应后执行操作”的场景。 ​​模板引用（Ref）​​：通过ref获取DOM元素或子组件的实例，直接操作原生DOM或调用子组件方法（补充声明式模板的灵活性）。\"]},\"502\":{\"h\":\"他的生态体系完善覆盖全开发流程\",\"t\":[\"路由管理：Vue Router，支持动态路由、嵌套路由、导航守卫等。 状态管理：Vuex（基于模块化状态树）、Pinia（更简洁的API，支持TypeScript，无mutation）。 构建工具：Vite（新一代构建工具，基于ES模块，开发环境秒启动，生产环境高效打包）、Vue CLI（基于Webpack，适合传统项目）。 UI框架：Element UI（PC端）、Vant（移动端）、Naive UI（现代风格）等，降低界面开发成本。 类型支持：Vue3全面支持TypeScript，通过defineComponent、ref/reactive的类型推断，提升代码健壮性。\"]},\"503\":{\"h\":\"vue3的关键更新\",\"t\":[\"组合式API（Composition API）​​：替代选项式API（Options API），通过setup函数或<\\\\script setup>语法糖，将逻辑按功能聚合（而非按选项拆分），提升代码可读性和复用性（逻辑抽取更方便）。 ​​TypeScript原生支持​​：Vue3核心代码用TS重写，组件定义、类型推断更友好（如defineProps自动推导类型）。 ​​更小的体积与更快的运行​​：通过Tree-shaking优化，核心库体积更小；响应式系统基于Proxy，性能更优。 ​​自定义渲染器（Renderer）​​：支持扩展渲染目标（如SSR、Canvas、WebGL），扩展了Vue的应用场景（如游戏、可视化）。\"]},\"504\":{\"c\":[\"JS框架\"]},\"505\":{\"c\":[\"Vue\"]},\"506\":{\"h\":\"vue3\",\"t\":[\"速度更快、体积减少、更易维护、更接近原生、更易于使用\",\"比较：\",\"重写了虚拟dom实现\",\"编译模板优化\",\"更高效的组件初始化\",\"undate性能提高\",\"SSR速度提高2~3倍\"]},\"507\":{\"h\":\"新特性\",\"t\":[\"framents 支持多个根节点\",\"teleport 传送，在逻辑位置写模板代码，然后再vue范围之外渲染他 它可以出现在任何地方\",\"组合式api\",\"createRenderer 自定义渲染器，将vue的开发模型扩展到其他平台\"]},\"508\":{\"h\":\"vue3优化\",\"t\":[\"diff算法优化： 对会发生变化的地方增加了flag标记，变化时直接找到该地方进行比较\",\"静态提升： 对不参与更新的元素，会做静态提升，只会被创建一次，渲染时直接复用\",\"事件监听缓存： 默认情况下绑定事件行为会被视为动态绑定，所以每次都会追踪他的变化\",\"SSR优化： 当静态内容大到一定量级时候，会用createStaticVNode方法在客户端去生成一个static node，这些静态node，会被直接innerHtml，就不需要创建对象，然后根据对象渲染\",\"源码体积 移除了一些不常用的API，使用了TreeShanking，不使用的内容都会被摇掉\"]},\"509\":{\"h\":\"响应式系统\",\"t\":[\"vue2使用defineProperty来劫持整个对象，深度遍历为每个属性添加getter和setter实现响应式 vue3采用proxy重写了响应式系统，proxy可以对整个对象进行监听，不需要深度遍历\",\"监听动态属性的添加\",\"监听数组的索引和length属性\",\"监听删除属性\",\"defineproperty和proxy实现的区别： 原理，数据更新后，通知相关的依赖函数 defineproperty无法劫持到对象的删除和添加属性的操作，动态的属性不具备响应式，深层的监听也造成了性能的极大问题 proxy劫持整个对象的基本操作，而不是某个属性，多达13种拦截方法\"]},\"510\":{\"c\":[\"JS框架\"]},\"511\":{\"c\":[\"Vue\"]},\"512\":{\"h\":\"小程序\",\"t\":[\"相比h5，小程序与其的区别有如下：\",\"运行环境：基于浏览器内核重构的内置解析器\",\"系统权限：获得更多的系统权限，如网络通讯状态、数据缓存能力\",\"渲染机制：逻辑层和渲染层分开\"]},\"513\":{\"h\":\"生命周期\"},\"514\":{\"h\":\"应用的生命周期\",\"t\":[\"生命周期\",\"说明\",\"onLaunch\",\"初始化完成时触发，全局只触发一次。\",\"onShow\",\"启动，或从后台进入前台显示时触发。\",\"onHide\",\"从前台进入后台时触发。\",\"onError\",\"发生脚本错误或API调用报错时触发。\",\"onPageNotFound\",\"打开的页面不存在时触发。\",\"onUnhandleRejection\",\"未处理的Promise拒绝时触发。\",\"onThemeChange\",\"系统切换主题时触发。\"]},\"515\":{\"h\":\"页面的生命周期\",\"t\":[\"生命周期\",\"值\",\"作用\",\"onLoad\",\"监听页面加载\",\"发送请求获取数据\",\"onShow\",\"监听页面显示\",\"请求数据\",\"onReady\",\"页面初次渲染完成\",\"获取页面元素\",\"onHdie\",\"页面隐藏\",\"终止任务，如定时器或播放音乐\",\"onUnload\",\"页面卸载\",\"终止任务\"]},\"516\":{\"h\":\"组件的生命周期\",\"t\":[\"生命周期\",\"说明\",\"created\",\"组件创建完成\",\"attached\",\"进入页面节点树\",\"ready\",\"在渲染线程被初始化已经完成\",\"moved\",\"在组件实例被移动到节点树另一个位置时执行\",\"detached\",\"在组件实例被从页面节点树移除时执行\",\"error\",\"组件方法抛出错误\"]},\"517\":{\"h\":\"组件所在页面的生命周期\",\"t\":[\"生命周期\",\"说明\",\"show\",\"组件所在的页面被展示时执行\",\"hide\",\"组件所在的页面被隐藏时执行\"]},\"518\":{\"h\":\"执行过程\",\"t\":[\"应用生命周期\",\"打开小程序，触发onLaunch\",\"初始化完成后，触发onShow\",\"前台进入后台，触发onHide\",\"后台进入前台，触发onShow\",\"后台运行一定时间，或系统资源占用高，会被销毁\",\"页面生命周期\",\"小程序注册完成后，加载页面，触发onLoad\",\"页面载入后触发onShow，显示页面\",\"首次显示页面，会触发onReady方法，渲染页面元素和样式，一个页面只会调用一次\",\"后台运行或跳转到其他页面时，触发onHdie\",\"后台进入前台或重新进入页面时，触发onShow\",\"重定向方法wx.redirectTo()或关闭当前页面返回上一页wx.navigationBack()，触发onUnload\",\"执行顺序如下：\",\"打开小程序：(app)onLaunch=>(app)onShow=>(pages)onLoad=>(pages)onShow=>(pages)onReady\",\"进入下一个页面：(pages)onHdie=>(next)onLoad=>(next)onShow=>(next)onReady\",\"返回上一个页面：(curr)onLaunch=>(pre)onShow\",\"离开小程序：(app)onHdie\",\"再次进入：小程序未销毁=>(app)onShow(执行以上的顺序),小程序销毁，(app)onLaunch重新开始执行\"]},\"519\":{\"h\":\"登录流程\",\"t\":[\"在小程序中，通过微信提供的登录能力，可以轻松的获取微信提供的用户身份标识，快速简历小程序内的用户体系，从而实现登录功能。 涉及到openid和code的概念：\",\"wx.login()方法生成code，将code作为参数传递为微信服务器指定接口，就可以获取用户的openid\",\"对于每个小程序，微信都会将用户的微信ID映射出一个小程序openid，作为用户在这个小程序的唯一标识\",\"通过wx.login()获取到用户的code判断用户是否授权读取用户信息，调用wx.getUserInfo读取用户数据\",\"由于小程序后台授权域名无法授权微信的域名，需要自身后端调用微信服务器获取用户信息\",\"wx.request()方法请求开发者服务器，后端把appid、appsecret、code一起发送到微信服务器。\",\"微信服务器返回openid、以及本次会话密钥session_key\",\"后端从数据库中查找openid，如果没有查到记录，说明该用户没有注册\",\"session_key是对用户数据加密签名的密钥。\",\"生成session并返回给小程序\",\"小程序将session存到storage里面\",\"下次请求时，先从storage里面读取，然后带给服务端\",\"服务端比对session对应的记录，然后校验有效期\"]},\"520\":{\"h\":\"检验登录状态是否过期\",\"t\":[\"通常做法是在登陆状态中保存有效期数据，该数据应该在服务端校验登陆状态和约定时间做对比 这种做法需要将本地的登陆状态发送到服务端，服务端判断无效登陆状态时再返回需重新执行登录过程的消息给小程序\",\"调用wx.checkSession检验微信登陆状态是否过期 如果过期，发起完整的登录流程 不过期，继续使用本地保存的自定义登陆状态\"]},\"521\":{\"h\":\"路由跳转\",\"t\":[\"微信小程序拥有web和application共同的特征，每个页面可以看成一个pageModel，pageModel全部以栈的形式进行管理\"]},\"522\":{\"h\":\"跳转方式\",\"t\":[\"wx.navigateTo(Object) 缓存当前页面，跳转到应用内的某个页面，通过wx.navigateBack(Object)返回，页面之间通过hide、show切换\",\"wx.redirectTo(Object) 微信的页面栈有10层，过多的页面会挤占微信分配给小程序的内存，该方法的跳转不会缓存页面，所以切换时页面需要重新加载。\",\"wx.switchTab(Object) 针对tabr页面的跳转，会关闭其他的非tabar的页面\",\"wx.navigateBack(Object) 关闭当前页面，返回上一级或多级页面，通过getCurrentPages()获取当前的页面栈 页面不断出栈，直到目标返回页\",\"wx.reLaunch(Object) 关闭所有的页面，打开到某个页面，返回的时候跳转到首页\"]},\"523\":{\"h\":\"发布流程\",\"t\":[\"上传代码\",\"提交审核\",\"发布版本\"]},\"524\":{\"h\":\"支付流程\",\"t\":[\"小程序为电商类小程序，提供了非常完善、优秀、安全的支付功能 在小程序中调用微信的API完成支付功能，方便，快捷\"]},\"525\":{\"h\":\"实现原理\",\"t\":[\"网页开发中，渲染线程和脚本是互斥的，长时间的脚本运行会导致页面失去响应，js是单线程的 在小程序中，选择了Hybrid的渲染方式，将逻辑层和视图层分开，双线程同时运行，视图层使用webview进行渲染，逻辑层允许在jscore。\",\"渲染层：界面渲染相关的任务全都在webview线程里执行。一个小程序存在多个界面，所以渲染层存在多个webview线程\",\"逻辑层：jscore线程运行JS脚本，在这个环境下执行的都是有关小程序业务逻辑的代码\"]},\"526\":{\"h\":\"通信\",\"t\":[\"小程序在渲染层，宿主环境会被wxml转为对应的JS对象 在逻辑层发生数据变更的时候，通过宿主环境提供的setData()方法把数据从逻辑层传递到渲染层，再经过对比前后差异，把差异应用在原来的DOM树上，渲染出正确的视图 当视图存在交互时，例如按钮触发，这类反馈应该通知给开发者的逻辑层，需要将对应的处理状态呈现给用户\",\"对于事件的分发处理，微信进行了特殊的处理，将所有的事件拦截后，丢到逻辑层交给js处理\",\" 小程序是基于双线程的，在任何逻辑层和视图层之间的数据传递都是线程间的通信，会有一定的延时，因此在小程序中，页面更新是异步操作 异步会使运行时序变得复杂一些，如果渲染层工作较快完成，就到等待逻辑层的指令才能进行下一步工作。 因此逻辑层和渲染层之间需要有一定的机制保证时序正确，在每个小程序页面的生命周期中，存在着若干次页面数据通信。\"]},\"527\":{\"h\":\"运行机制\",\"t\":[\"小程序启动运行有两种情况：\",\"冷启动：首次打开、主动销毁后再次打开的情况，此时小程序需要重新加载启动，即为冷启动 每次冷启动时，都会检查是否有更新版本，如果有，异步下载新版本的代码包，并同时用客户端本地的包进行启动，即新版本的小程序需要等下一次冷启动才会应用上。\",\"热启动：已经打开过小程序，在一段时间内再次打开，无需重新启动，只需要将后台的小程序切换到前台，这个过程就是热启动\",\"alt text\"]},\"528\":{\"h\":\"优化手段\",\"t\":[\"小程序首次启动前，微信会为小程序准备好通用的运行环境，如运行中线程和基础库的初始化 然后开始进入启动状态，展示一个固定的启动界面，包含小程序的图标、名称和加载提示图标。\",\"下载小程序代码包 经过编译、压缩、打包之后的代码包\",\"加载小程序代码包\",\"初始化小程序手段\"]},\"529\":{\"h\":\"加载\",\"t\":[\"控制小程序包的大小：\",\"压缩代码\",\"清理无用的代码和资源文件\",\"减少资源包中的图片等资源的数量和大小，图片资源压缩率有限 并且可以采用分包加载的操作，将用户访问率高的页面放在主包内，将访问率低的页面放入子包内，按需加载 当用户点击到子包的目录时，还有一个代码包的下载过程，子包也不建议太大。或者使用子包预加载技术，并不需要等到用户点击到子包页面后再下载子包。\"]},\"530\":{\"h\":\"渲染\",\"t\":[\"请求在onLoad就加载，尽量减少不必要的https请求，可u使用getStorageSync()及setStorageSycn()方法将数据存储在本地 可以在前置页面将一些有用的字段带到当前页，进行首次渲染(列表页的某些数据=>详情页)，没有数据的模块可以进行骨架屏的占位 提高页面的多次渲染效率主要在于正确使用setData：\",\"将多次的setData合并为一次setData\",\"数据通信的性能与数据量正相关，因而如果有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串，则不应使用setData来设置这些数据\",\"与界面渲染无关的数据最好不要设置在data中，可u考虑设置在page对象的其他字段下.\"]},\"531\":{\"c\":[\"JS框架\"]},\"532\":{\"c\":[\"小程序\"]},\"533\":{\"h\":\"操作执行优化\",\"t\":[\"操作执行优化，通过防抖、节流来减少操作的重复执行，来提高性能。\"]},\"534\":{\"h\":\"\",\"t\":[\"含义\",\"事件触发时，在n秒内函数只能执行一次。如果事件连续触发，重新计时。\",\"一个防抖函数具有以下要点：\",\"高阶函数：返回一个具有防抖能力的函数。\",\"计时功能：在连续触发时，重新计算延迟时间。\",\"取消执行：在连续触发时，取消上一次的执行。\",\"目的\",\"开发过程中，有一些事件会频繁触发，例如onresize、scroll、mousemove、mousehover等。一秒之内可能执行几十次、几百次，如果函数内部操作了DOM，甚至可以造成浏览器卡死、崩溃。除此之外，短时间内重复的 ajax 调用不仅会造成数据关系的混乱，还会造成网络拥塞，增加服务器压力。\"]},\"535\":{\"h\":\"\",\"t\":[\"function debounce(fn,wait){ var timer=null; return function(){ // 保存事件参数 let arg = arguments; // 函数调用时，清除计时器 if(timer !== null){ clearTimeout(timer); } // 开启计时 timer = setTimeout(()=>{ // 若不改变this指向，则会指向fn定义环境 fn.apply(this,arg) },wait); } }\"]},\"536\":{\"h\":\"\",\"t\":[\"搜索框搜索输入。只需用户最后一次输入完，再发送请求；\",\"用户名、手机号、邮箱输入验证；\",\"浏览器窗口大小改变后，只需窗口调整完后，再执行resize事件中的代码，防止重复渲染。\"]},\"537\":{\"h\":\"\",\"t\":[\"含义\",\"无论触发多少次事件，在一定时间间隔内，只会执行一次。\",\"一个节流函数具有以下要点：\",\"高阶函数：返回一个具有节流能力的函数。\",\"计时功能：在连续触发时，间隔时间是否达到。\",\"间隔执行：在连续触发时，是否执行。\"]},\"538\":{\"h\":\"最佳实践\",\"t\":[\"function throttle(fn, delay) { let timer = null; return function () { // 记录事件参数 let args = arguments; // 如果定时器为空，则上次间隔的函数执行完成 if (!timer) { // 开启定时器 timer = setTimeout(() => { // 执行函数 fn.apply(this, args); // 函数执行完毕后重置定时器 timer = null; }, delay); } } }\"]},\"539\":{\"h\":\"\",\"t\":[\"输入框的联想，可以限定用户在输入时，只在每两秒钟响应一次联想。\",\"搜索框输入查询，如果用户一直在输入中，没有必要不停地调用去请求服务端接口，等用户停止输入的时候，再调用。设置一个合适的时间间隔，有效减轻服务端压力。\",\"表单验证\",\"按钮提交事件。\"]},\"540\":{\"h\":\"事件委托，事件代理：Event Delegation\",\"t\":[\"含义\",\"基于DOM元素的事件冒泡，把多个子元素的响应事件委托给父元素。减少事件，来降低内存的使用。\",\"事件委托的要求：\",\"多个子元素：如果是一个子元素，不需要冒泡。\",\"相同的响应事件：如果子元素之间，相同的响应事件过少，也没有必要。\",\"相同的事件处理：如果子元素之间，相同的响应处理过少，也没有必要。\"]},\"541\":{\"h\":\"最佳实践\",\"t\":[\"<body> <button id=\\\"btn\\\">点击新增li标签</button> <ul id=\\\"list\\\"> <li>列表项</li> <li>列表项</li> <li>列表项</li> <li>列表项</li> <li>列表项</li> <li>列表项</li> </ul> <script> var list = document.getElementById('list'); var btn = document.getElementById('btn'); list.onclick = function(e){ //点击的子元素 e.target.style.color = 'blue'; } btn.onclick = function(){ var new_li = document.createElement('li'); new_li.innerHTML = '新增列表项'; list.appendChild(new_li); } </script> </body>\"]},\"542\":{\"h\":\"应用场景\",\"t\":[\"列表数据、瀑布数据等需要大量绑定相同功能的函数场景。\"]},\"543\":{\"h\":\"\"},\"544\":{\"c\":[\"性能优化\"]},\"545\":{\"c\":[\"防抖\",\"节流\",\"事件委托\"]},\"546\":{\"h\":\"资源加载优化\",\"t\":[\"资源加载优化，通过按需加载、延迟加载资源、缓存资源来减少阻塞和服务器请求。\"]},\"547\":{\"h\":\"\",\"t\":[\"根据用户的需求，动态地加载所需的组件、模块或功能。\"]},\"548\":{\"h\":\"\",\"t\":[\"动态导入是ES6提供的新特性，允许在运行时动态的导入模块。使用**import()**函数。 例如，你可以根据用户的设备类型、网络状况或其他条件来决定是否加载某个模块。\",\"if (navigator.connection.saveData) { // 如果用户开启了数据节省模式，则不加载某些资源 } else { import('./heavy-module.js').then(module => { module.default(); }); }\",\"在工程化环境中还有以下方式：\",\"在框架中，例如vue的componet动态组件指定是一个异步组件时，Vue会在需要时加载该组件。\",\"<template> <component :is=\\\"currentComponent\\\"></component> </template> <script> const AsyncComponent = () => import('./components/AsyncComponent.vue'); export default { data() { return { currentComponent: AsyncComponent }; } }; </script>\",\"2.vue-router配置路由，使用webpack的require.ensure技术，也可以实现按需加载。\",\"// 具有相同chunk名的模块会被打包到一起。 const Province = r => require.ensure([], () => r(require('@/components/Province.vue')), 'chunkname1') const Segment = r => require.ensure([], () => r(require('@/components/Segment.vue')), 'chunkname1') const Loading = r => require.ensure([], () => r(require('@/components/Loading.vue')), 'chunkname3') const User = r => require.ensure([], () => r(require('@/components/User.vue')), 'chunkname3')\"]},\"549\":{\"h\":\"\",\"t\":[\"代码分割是一种将代码拆分为多个小块（chunk）的方法，以便按需加载。Webpack等构建工具提供了代码分割的支持。\",\"// 在webpack中通过require.ensure和import()来定义代码分割点 // 这个新的chunk会被webpack通过jsonp来异步加载 require.ensure(dependencies: String[], callback: function(require), chunkName: String) // 更好的分割方式 import(chunk) .then( res => {}) .catch(err => {});\"]},\"550\":{\"h\":\"\",\"t\":[\"推迟加载非关键内容或资源，直到需要时才进行加载。侧重于图片、视频等媒体资源。\"]},\"551\":{\"h\":\"HTML5的loading属性\",\"t\":[\"H5的新增属性，可以在img标签中直接使用来实现懒加载。\",\"<img src=\\\"image.jpg\\\" alt=\\\"example\\\" loading=\\\"lazy\\\">\"]},\"552\":{\"h\":\"\",\"t\":[\"用于懒加载图片或其他DOM元素。当元素进入视口时才加载相关资源。\",\"const img = document.querySelector('img'); const observer = new IntersectionObserver((entries, observer) => { entries.forEach(entry => { if (entry.isIntersecting) { entry.target.src = entry.target.dataset.src; observer.unobserve(entry.target); } }); }); observer.observe(img);\"]},\"553\":{\"h\":\"\",\"t\":[\"通过缓存资源，减少对服务器的重复请求。根据HTTP响应头内容的不同分两种：\",\"强缓存：当缓存过期时，强制向服务器请求资源。\",\"协商缓存：当缓存过期时，协商服务器是否更新资源。\"]},\"554\":{\"h\":\"\",\"t\":[\"当web应用获取资源时，先从本地获取，如果有就直接用，否则，重新发起请求。控制强缓存的标头分别是Expires和Cache-Control，Cache-Control的优先级高于Expires。\"]},\"555\":{\"h\":\"\",\"t\":[\"在HTTP/1.0中，有效期是通过Expires来指定的。Expires标头使用明确的时间，而不是经过的时间来指定缓存的生命周期。\",\"Expires: Wed, 21 Oct 2015 07:28:00 GMT\",\"由于HTTP/1.1已被广泛使用，无需特地提供 Expires。\"]},\"556\":{\"h\":\"\",\"t\":[\"此字段拥有强大的缓存控制能力。常见的字段有：\",\"max-age：设置缓存的最大有效期，单位s。资源会缓存到本地。\",\"no-cache：不强制缓存，每次都会协商缓存，确定资源是否有变更。资源会缓存到本地。\",\"no-store：不进行强缓存、协商缓存，直接拉取最新的资源。资源不会缓存到本地。\",\"private：私有缓存，针对特定客户端的缓存，例如个性化内容。\",\"public：CDN、客户端、代理服务器都可以缓存。\",\"Cache-Control: max-age=604800\"]},\"557\":{\"h\":\"\",\"t\":[\"又称为对比缓存、弱缓存。当资源到期时，会协商服务器资源是否修改，若无修改过则使用本地资源，并更新资源的有效期。 控制协商缓存的标头分别是Last-Modified/If-Modified-Since和Etag/If-None-Match。\"]},\"558\":{\"h\":\"：上一次的修改时间\",\"t\":[\"当缓存过期时，Last-Modified值放入If-Modified-Since标头发送到服务器。服务器会核对资源的修改时间是否一致，资源未修改返回304 Not Modified。 收到该响应后，客户端将过期缓存恢复为有效的。替代方案是Etag/If-None-Match。\"]},\"559\":{\"h\":\"：文件指纹\",\"t\":[\"Etag标头的值是服务器生成的任意值。当文件被修改后，Etag会得到更新。 当缓存过期时，Etag的值放入If-None-Match标头发送到服务器。服务器会核对资源的Etag与If-None-Match是否一致，资源未修改返回304 Not Modified。\"]},\"560\":{\"h\":\"\",\"t\":[\"当浏览器请求一个网站的时候，会加载各种各样的资源，比如：HTML文档、图片、CSS和JS等文件。 对于一些不经常变的内容，浏览器会将他们保存在本地的文件中，下次访问相同网站的时候，直接加载这些资源，加速访问。 优点：\",\"减少页面加载时间；\",\"减少服务器负载；\"]},\"561\":{\"h\":\"\",\"t\":[\"解析IP地址的方式，就是查询DNS映射表。 DNS查询过程大约消耗20毫秒，在DNS查询过程中，浏览器什么都不会做，保持空白。如果DNS查询很多，网页性能会受到很大影响，因此需要用到DNS缓存。 不同浏览器的缓存机制不同： IE对DNS记录默认的缓存时间为30分钟，Firefox对DNS记录默认的缓存时间为1分钟，Chrome对DNS记录默认的缓存时间为1分钟。\",\"缓存时间长：减少DNS的重复查找，节省时间。\",\"缓存时间短：及时检测服务器的IP变化，保证访问的正确性。\"]},\"562\":{\"h\":\"\"},\"563\":{\"c\":[\"性能优化\"]},\"564\":{\"c\":[\"按需加载\",\"延迟加载\",\"缓存\"]},\"565\":{\"h\":\"性能优化\"},\"566\":{\"h\":\"\"},\"567\":{\"h\":\"\",\"t\":[\"首次内容渲染 (FCP) 是指用户首次导航到网页到网页任何一部分内容呈现在屏幕上的时间。 内容指的是文本、图片、svg元素或非白色的canvas元素。\"]},\"568\":{\"h\":\"在JS中衡量FCP\",\"t\":[\"使用Paint Timing API创建一个 PerformanceObserver，用于监听名称为 first-contentful-paint 的 paint 条目并将其记录到控制台。\",\"new PerformanceObserver((entryList) => { for (const entry of entryList.getEntriesByName('first-contentful-paint')) { // 输出第一个有内容的元素的时间 console.log('FCP candidate:', entry.startTime, entry); } }).observe({type: 'paint', buffered: true});\"]},\"569\":{\"h\":\"\",\"t\":[\"最大内容渲染 (FCP) 是指可见的最大图片、文本块、视频的渲染时间(相对于用户首次导航到网页的时间)。\",\"有关的DOM元素：\",\"img元素（第一帧呈现时间适用于 GIF 或动画 PNG 等动画内容）\",\"svg元素中的image元素\",\"video元素（使用海报图片加载时间或视频的第一帧呈现时间，以时间较短者为准）\",\"使用 url() 函数加载背景图片的元素（而不是 CSS 渐变）\",\"包含文本节点或其他内嵌级文本元素子元素的块级元素。\",\"与FCP的区别\",\"FCP 衡量的是任何内容绘制到屏幕上的时间，LCP 衡量的是主要内容绘制到屏幕上的时间，因此 LCP 旨在更具选择性。\"]},\"570\":{\"h\":\"\",\"t\":[\"web上的说明\",\"CLS 是用于衡量网页的整个生命周期内发生的每一次意外布局偏移。\",\"布局偏移\",\"Layout Instability API会在视口中可见元素在两帧之间更改起始位置时报告layout-shift集合。此类元素被视为不稳定元素。\"]},\"571\":{\"h\":\"\",\"t\":[\"首次互动延迟(FID) 是指衡量从用户首次与网页互动（即点击链接、点按按钮）到浏览器实际能够开始处理事件处理脚本以响应该互动的时间。\",\"即使没有事件监听器也会衡量\",\"FID 用于衡量收到输入事件与主线程下次空闲之间的时间差。这意味着，即使未注册事件监听器，系统也会衡量 FID。原因在于，许多用户互动不需要事件监听器，但需要主线程处于空闲状态才能运行。 例如，以下所有 HTML 元素都需要等待主线程上的进行中任务完成，然后才能响应用户互动：\",\"文本字段、复选框和单选按钮 (input、textarea)\",\"选择下拉菜单 (select)\",\"链接 (a)\"]},\"572\":{\"h\":\"\",\"t\":[\"web上的说明\",\"互动延迟时间(INP) 指的是用户访问网页期间发生的所有互动（点击、点按和键盘互动等）的延迟时间中的最大值。 描述了网页对互动的整体响应能力。\",\"与FID的不同\",\"FID 仅衡量网页上首次互动的输入延迟。INP 通过观察网页上的所有互动（从输入延迟开始，到运行事件处理脚本所需的时间，最后到浏览器绘制下一个帧为止）来改进 FID。\"]},\"573\":{\"h\":\"\",\"t\":[\"web上的说明\",\"首字节到达时间(INP) 指的是请求资源到响应第一个字节开始到达之间的时间。\",\"TTFB 是以下请求阶段的总和：\",\"重定向时间\",\"Service Worker 启动时间（如果适用）\",\"DNS 查找\",\"连接和 TLS 协商\",\"请求，直到响应的第一个字节到达\"]},\"574\":{\"h\":\"在JS中衡量TTFB\",\"t\":[\"用 Navigation Timing API 在浏览器中衡量导航请求的 TTFB。以下示例展示了如何创建一个监听 navigation 条目并将其记录到控制台的 PerformanceObserver：\",\"new PerformanceObserver((entryList) => { const [pageNav] = entryList.getEntriesByType('navigation'); console.log(`TTFB: ${pageNav.responseStart}`); }).observe({ type: 'navigation', buffered: true });\",\"web-vitals JavaScript 库还可以更简洁地在浏览器中衡量 TTFB：\",\"import {onTTFB} from 'web-vitals'; // Measure and log TTFB as soon as it's available. onTTFB(console.log);\"]},\"575\":{\"h\":\"\",\"t\":[\"总阻塞时间 (TBT)指标用于衡量在First Contentful Paint (FCP)之后主线程被阻塞的时间足以阻止输入响应的总时间。\",\"何时视为阻塞\",\"当存在长任务（主线程上运行超过 50 毫秒的任务）时，主线程都会被视为阻塞。 我们之所以说主线程处于“阻塞”状态，是因为浏览器无法中断正在执行的任务。因此，如果用户在长时间运行的任务过程中与网页互动，浏览器必须等待任务完成后才能响应。\",\"给定长任务的阻塞时间是指其超过 50 毫秒的时长。\",\"网页的总阻塞时间是在 FCP 后发生的每项长任务的阻塞时间的总和。\"]},\"576\":{\"h\":\"\",\"t\":[\"警告\",\"Lighthouse 6.0 已弃用首次有效绘制时间 (FMP)。\",\"首次有意义内容绘制(FMP) 用于衡量网页的主要内容何时对用户可见。从用户发起网页加载到网页呈现主要的页首内容之间的时间（以秒为单位）。\",\"与FCP的区别\",\"当网页上渲染的首个内容包含可见区域上的内容时，首次内容渲染 (FCP) 和 FMP 通常相同。 不过，如果 iframe 中包含可见区域上方的内容，这些指标可能会有所不同。FMP 会在用户可见 iframe 中的内容时注册，而 FCP 不包含 iframe 内容。\"]},\"577\":{\"h\":\"性能分析工具\"},\"578\":{\"h\":\"\",\"t\":[\"Edge上的使用 Lighthouse 测试辅助功能\",\"Ligthouse可以对网页的各项性能进行评分，并给出相应的建议。 chrome和edge提供了Ligthouse扩展，可以在DevTool查看。\",\"edge开发者工具\"]},\"579\":{\"h\":\"\"},\"580\":{\"h\":\"web-vitals库\",\"t\":[\"github仓库链接 web-vitals 是一个轻量级的JavaScript库，它专注于测量核心Web Vitals和其他关键性能指标，确保你的网站在真实用户的设备上表现卓越。\",\"web-vitals 库约有1.5KB（压缩后），并以模块化的方式提供了所有Web Vitals的测量功能，包括 Cumulative Layout Shift (CLS)、First Input Delay (FID) 和 Largest Contentful Paint (LCP)，以及其他有用的诊断性性能指标。通过这个库，你可以精确地跟踪这些指标，即使是在库加载之前发生的性能事件也能准确捕获。\"]},\"581\":{\"c\":[\"性能优化\"]},\"582\":{\"h\":\"资源体积优化\",\"t\":[\"资源体积优化，通过压缩，优化图片等手段，提高资源的加载速度。\"]},\"583\":{\"h\":\"\",\"t\":[\"采用一些压缩方案，减少静态文件的体积。这样就可以相对的节约宽带，对这些静态文件的加载速度也会得到提升。\",\"注意\",\"针对工程化项目才可以使用打包工具的gizp算法。\"]},\"584\":{\"h\":\"配置流程\",\"t\":[\"下载打包工具匹配的gzip插件。\",\"配置到打包工具中。\",\"通知后端开启gzip。\"]},\"585\":{\"h\":\"最佳实践\",\"t\":[\"Vue CLI项目\",\"npm install compression-webpack-plugin@6.1.1\",\"// vue.config.js中配置插件 const CompressionPlugin = require('compression-webpack-plugin'); module.exports = { chainWebpack(config) { // ...... }, configureWebpack: config => { // 开发环境不配置 if (process.env.NODE_ENV !== 'production') return // 生产环境才去配置 return { plugins: [ new CompressionPlugin({ //此插件不能使用太高的版本，否则报错：TypeError: Cannot read property 'tapPromise' of undefined // filename: \\\"[path][base].gz\\\", // 这种方式是默认的，多个文件压缩就有多个.gz文件，建议使用下方的写法 filename: '[path].gz[query]', // 使得多个.gz文件合并成一个文件，这种方式压缩后的文件少，建议使用 algorithm: 'gzip', // 匹配要压缩的文件，这里是给html。 test: /\\\\.js$|\\\\.css$|\\\\.html$|\\\\.ttf$|\\\\.eot$|\\\\.woff$/, //需要压缩的最小值 threshold: 10240, minRatio: 0.8, //是否删除原有静态资源文件，即只保留压缩后的.gz文件，建议这个置为false，还保留源文件。以防： // 假如出现访问.gz文件访问不到的时候，还可以访问源文件双重保障 deleteOriginalAssets: false }) ] } }, };\",\"<!-- 后端nginx配置 --> server { listen 80; server_name localhost; location / { try_files $uri $uri/ /index.html; root C:/nginx-1.18.0/html/gzip/dist; index index.html index.htm; } location /api/ { proxy_pass http://localhost:6666/; } gzip on; gzip_min_length 4k; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/x-woff font/ttf; <!--是否在http header中添加Vary: Accept-Encoding，一般情况下建议开启 --> gzip_vary on; }\",\"针对使用vite的vue项目\",\"npm install vite-plugin-compression\",\"// vite.config.js中配置插件 import { defineConfig } from 'vite'; import compression from 'vite-plugin-compression'; export default defineConfig({ plugins: [ compression({ verbose: true, // 输出压缩日志 disable: false, // 是否禁用压缩 threshold: 10240, // 对超过10KB的文件进行压缩 algorithm: 'gzip', // 使用gzip压缩 ext: '.gz', // 压缩后文件的扩展名 }), ], });\",\"<!-- 后端nginx配置 --> server { listen 80; server_name localhost; location / { try_files $uri $uri/ /index.html; root C:/nginx-1.18.0/html/gzip/dist; index index.html index.htm; } location /api/ { proxy_pass http://localhost:6666/; } gzip on; gzip_min_length 4k; gzip_buffers 16 8k; gzip_http_version 1.1; gzip_comp_level 2; gzip_types text/plain application/x-javascript application/javascript text/javascript text/css application/xml application/x-httpd-php image/jpeg image/gif image/png application/vnd.ms-fontobject font/x-woff font/ttf; <!--是否在http header中添加Vary: Accept-Encoding，一般情况下建议开启 --> gzip_vary on; }\"]},\"586\":{\"h\":\"\",\"t\":[\"将png、jpg、gif的图片替换为webp格式的图片。webp比png、jpg、gif哟组合更优秀的算法，图片体积上也更小，加载更快，占用加载资源的时间更短。 webp提供有损压缩和无损压缩两种方案。\"]},\"587\":{\"c\":[\"性能优化\"]},\"588\":{\"c\":[\"压缩\"]},\"589\":{\"h\":\"SSG静态站点生成\"},\"590\":{\"c\":[\"性能优化\"]},\"591\":{\"c\":[\"SSG\"]},\"592\":{\"h\":\"SSR服务端渲染\"},\"593\":{\"c\":[\"性能优化\"]},\"594\":{\"c\":[\"SSR\",\"局部SSR\"]},\"595\":{\"h\":\"用户体验优化\",\"t\":[\"用户体验优化，通过预加载关键资源、骨架屏、预渲染来优化用户体验。\"]},\"596\":{\"h\":\"\",\"t\":[\"预加载关键资源，如字体、图片、CSS和JS文件。\",\"<link rel=\\\"preload\\\" href=\\\"xxx.css\\\" as=\\\"style\\\"> <link rel=\\\"preload\\\" href=\\\"xxx.js\\\" as=\\\"script\\\"> <link rel=\\\"preload\\\" href=\\\"xxx.woff2\\\" as=\\\"font\\\" type=\\\"font/woff2\\\" crossorigin=\\\"anonymous\\\"> <link rel=\\\"preload\\\" href=\\\"xxx.jpg\\\" as=\\\"image\\\">\",\"配置HTTP/2 SERVER Push\",\"location/{ http2_push /styles/main.css; http2_push /script/main.js; }\"]},\"597\":{\"h\":\"构建工具支持\",\"t\":[\"在webpack中配置资源预加载、DNS解析、提前链接。需要使用ResourceHintWebpackPlugin插件。\",\"// 对按需加载( import() )的模块进行预加载 const HtmlWebpackPlugin = require('html-webpack-plugin'); const { ResourceHintWebpackPlugin } = require('resource-hint-webpack-plugin'); module.exports = { plugins: [ new HtmlWebpackPlugin({ template: './public/index.html', filename: 'index.html', chunks: ['index'], inject: 'body' }), new ResourceHintWebpackPlugin([{ rel: 'preload', include: { type: 'asyncChunks', } }]) ] }\"]},\"598\":{\"h\":\"\",\"t\":[\"如果调研服务器端渲染 (SSR) 只是用来改善少数营销页面（例如 /, /about, /contact 等）的 SEO，那么不如使用预渲染。在构建时简单的生成针对特定路由的静态HTML文件。\",\"SSR\",\"预渲染\",\"运行时\",\"构建时\",\"代码侵入性大\",\"几乎没有侵入性\",\"SEO更彻底\",\"有局限性(动态URL的异步请求)\",\"首屏加载更快\",\"首屏加载块\",\"Node环境，耗费CPU\",\"不需要Node\",\"难度大\",\"难度小\",\"动态内容直出HTML\",\"直出有限，客户端会再次加载\"]},\"599\":{\"h\":\"webpack方案\",\"t\":[\"使用prerender-spa-plugin插件，配置webpack。\",\"const path = require('path'); const PrerenderSPAPlugin = require('prerender-spa-plugin') const Renderer = PrerenderSPAPlugin.PuppeteerRenderer module.exports = { entry: './src/index.js', output: { filename: 'bundle.js', path: path.resolve(__dirname, 'dist'), }, module: { rules: [ { test: /\\\\.jsx?$/, exclude: /node_modules/, use: { loader: 'babel-loader', options: { presets: ['@babel/preset-react'], }, }, }, ], }, plugins: [ new PrerenderSPAPlugin({ //代码打包目录和以前配置的目录保持一致 staticDir: path.join(__dirname, '../dist'), indexPath: path.join(__dirname, '../dist', 'index.html'), //routes：要预渲染的页面访问路由 routes: ['/', '/home', '/freeIp', '/buyMeal', '/getIp', '/getLongIp', '/recharge', '/help/check', '/company/check', '/login'], renderer: new Renderer({ inject: { foo: 'bar' }, // headless：渲染时显示浏览器窗口。对调试很有用。 headless: false }) }) ], resolve: { extensions: ['.js', '.jsx'], }, };\"]},\"600\":{\"h\":\"\",\"t\":[\"骨架屏是一种在页面加载过程中，以占位符形式展示页面结构的技术。它通过显示简单的灰色块和线条，让用户在等待内容加载时获得视觉反馈，提高了用户的满意度。\"]},\"601\":{\"h\":\"UI库方案\",\"t\":[\"使用elementPLus的骨架屏.\",\"<!-- 当资源加载完成时，改变loading --> <template> <el-skeleton :loading=\\\"loading\\\" :animated=\\\"true\\\" /> </template> <script>\"]},\"602\":{\"c\":[\"性能优化\"]},\"603\":{\"c\":[\"预渲染\",\"预加载\",\"骨架屏\"]},\"604\":{\"h\":\"数据渲染优化\",\"t\":[\"针对大量数据的渲染优化，通过分页、虚拟列表、虚拟表格，canvas优化性能。\",\"对于大量数据渲染的时候，JS运算并不是性能的瓶颈，性能的瓶颈主要在于渲染阶段\"]},\"605\":{\"h\":\"\",\"t\":[\"对大量的数据分批渲染，避免同时渲染大量DOM引起的页面卡顿。 用于简单DOM，任务的空闲执行。\"]},\"606\":{\"h\":\"\",\"t\":[\"<ul id=\\\"container1\\\"></ul>\",\"let ul = document.getElementById('container1'); let total = 100000; let once = 20; let page = total/once let index = 0; function loop(curTotal,curIndex){ if(curTotal <= 0){ return false; } // 每页多少条 let pageCount = Math.min(curTotal , once); setTimeout(()=>{ for(let i = 0; i < pageCount; i++){ let li = document.createElement('li'); li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) ul.appendChild(li) } // 递归 loop(curTotal - pageCount,curIndex + pageCount) },0) } loop(total,index);\",\"缺点 setTimeout会导致明显的闪屏现象。\",\"setTimeout的执行时间并不是确定的。在JS中，setTimeout任务被放进事件队列中，只有主线程执行完才会去检查事件队列中的任务是否需要执行，因此setTimeout的实际执行时间可能会比其设定的时间晚一些。\",\"刷新频率受屏幕分辨率和屏幕尺寸的影响，因此不同设备的刷新频率可能会不同，而setTimeout只能设置一个固定时间间隔，这个时间不一定和屏幕的刷新时间相同。\"]},\"607\":{\"h\":\"\",\"t\":[\"requestAnimationFrame最大的优势是由系统来决定回调函数的执行时机。 requestAnimationFrame的步伐跟着系统的刷新步伐走。它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次，这样就不会引起丢帧现象。\",\"<ul id=\\\"container\\\"></ul>\",\"let ul = document.getElementById('container'); let total = 100000; let once = 20; let page = total/once let index = 0; function loop(curTotal,curIndex){ if(curTotal <= 0){ return false; } let pageCount = Math.min(curTotal , once); window.requestAnimationFrame(function(){ for(let i = 0; i < pageCount; i++){ let li = document.createElement('li'); li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) ul.appendChild(li) } loop(curTotal - pageCount,curIndex + pageCount) }) } loop(total,index);\"]},\"608\":{\"h\":\"\",\"t\":[\"DocumentFragment是DOM节点，但不是DOM树的一部分，它的变化不会触发DOM树的重新渲染。\",\"<ul id=\\\"container\\\"></ul>\",\"let ul = document.getElementById('container'); let total = 100000; let once = 20; let page = total/once let index = 0; function loop(curTotal,curIndex){ if(curTotal <= 0){ return false; } //每页多少条 let pageCount = Math.min(curTotal , once); window.requestAnimationFrame(function(){ // 创建DocumentFragment let fragment = document.createDocumentFragment(); for(let i = 0; i < pageCount; i++){ let li = document.createElement('li'); li.innerText = curIndex + i + ' : ' + ~~(Math.random() * total) // 加入到DocumentFragment中 fragment.appendChild(li) } // 每页 内容渲染完成以后再加入DOM ul.appendChild(fragment) loop(curTotal - pageCount,curIndex + pageCount) }) } loop(total,index);\"]},\"609\":{\"h\":\"\",\"t\":[\"虚拟列表是按需显示的一种实现，只对可见区域进行渲染，对非可见区域中的数据不渲染或部分渲染的技术。\"]},\"610\":{\"h\":\"\",\"t\":[\"起始索引:可视区域的起始数据索引。\",\"结束索引:可视区域的结束数据索引。\",\"渲染数据:可视区域要渲染的数据。\",\"偏移位置:起始数据在整个列表中的偏移位置。\",\"列表项高度：列表项高不一定是固定的，如何获取合适的高度。\",\"缓冲区域：缓冲区是存在DOM树中，考虑是否渲染的算法。\"]},\"611\":{\"h\":\"\"},\"612\":{\"h\":\"\"},\"613\":{\"c\":[\"性能优化\"]},\"614\":{\"c\":[\"canvas\",\"延迟加载\",\"缓存\"]},\"615\":{\"h\":\"配置文件\",\"t\":[\"webpack 的配置文件是 JavaScript 文件，文件内导出了一个 webpack 配置的对象。 webpack 会根据该配置定义的属性进行处理。\",\"由于 webpack 遵循 CommonJS 模块规范，因此，你可以在配置中使用语法：\",\"通过 require(...) 引入其他文件\",\"通过 require(...) 使用 npm 下载的工具函数\",\"使用 JavaScript 控制流表达式，例如 ?: 操作符\",\"对 value 使用常量或变量赋值\",\"编写并执行函数，生成部分配置\",\"避免如下操作\",\"当使用 webpack CLI 工具时，访问 CLI 参数（应编写自己的 CLI 工具替代，或者使用 --env\",\"导出不确定的结果（两次调用 webpack 应产生相同的输出文件）\",\"编写超长的配置（应将配置文件拆分成多个）\"]},\"616\":{\"h\":\"基本配置\",\"t\":[\"//webpack.config.js const path = require('path'); module.exports = { mode: 'development', entry: './foo.js', output: {path: path.resolve(__dirname, 'dist'),filename: 'foo.bundle.js', }, };\",\"webpack 会假定项目的入口起点为 src/index.js，然后会在 dist/main.js 输出结果，并且在生产环境开启压缩和优化。\",\"重要\",\"createapp.dev创建自定义 webpack 配置的在线工具。\"]},\"617\":{\"h\":\"使用不同的配置文件\",\"t\":[\"如果出于某些原因，需要根据特定情况使用不同的配置文件，则可以通过在命令行中使用 --config 标志修改。\",\"//package.json \\\"scripts\\\": { \\\"build\\\": \\\"webpack --config prod.config.js\\\" }\"]},\"618\":{\"h\":\"设置一个新的 webpack 项目\",\"t\":[\"Webpack 有大量的配置项，利用 webpack-cli 的 init 命令，它可以根据项目需求快速生成 webpack 配置文件，它会在创建配置文件之前询问几个问题。\",\"npx webpack init\",\"如果尚未在项目或全局安装 @webpack-cli/generators，npx 可能会提示你安装。根据你在配置生成过程中的选择，你也可能会安装额外的 package 到你的项目中。\",\"$ npx webpack init [webpack-cli] For using this command you need to install: '@webpack-cli/generators' package. [webpack-cli] Would you like to install '@webpack-cli/generators' package? (That will run 'npm install -D @webpack-cli/generators') (Y/n) devDependencies: + @webpack-cli/generators 2.5.0 ? Which of the following JS solutions do you want to use? ES6 ? Do you want to use webpack-dev-server? Yes ? Do you want to simplify the creation of HTML files for your bundle? Yes ? Do you want to add PWA support? No ? Which of the following CSS solutions do you want to use? CSS only ? Will you be using PostCSS in your project? Yes ? Do you want to extract CSS for every file? Only for Production ? Do you like to install prettier to format generated configuration? Yes ? Pick a package manager: pnpm [webpack-cli] ℹ INFO Initialising project... devDependencies: + @babel/core 7.19.3 + @babel/preset-env 7.19.4 + autoprefixer 10.4.12 + babel-loader 8.2.5 + css-loader 6.7.1 + html-webpack-plugin 5.5.0 + mini-css-extract-plugin 2.6.1 + postcss 8.4.17 + postcss-loader 7.0.1 + prettier 2.7.1 + style-loader 3.3.1 + webpack-dev-server 4.11.1 [webpack-cli] Project has been initialised with webpack!\"]},\"619\":{\"c\":[\"构建工具\"]},\"620\":{\"c\":[\"webpack\"]},\"621\":{\"h\":\"Webpack\",\"t\":[\"本质上，webpack是一个现代JavaScript应用程序的静态模块打包器(module bundler)。 当 webpack 处理应用程序时，它会在内部从一个或多个入口点构建一个 依赖图(dependency graph)，然后将你项目中所需的每一个模块组合成一个或多个 bundle。\",\"通俗的理解，webpack是一个前端项目工程化的具体解决方案。它提供了友好的前端模块化开发支持，以及代码压缩混淆、处理浏览器端JavaScript的兼容性、性能优化等强大的功能。\",\"从 v4.0.0 开始，webpack 可以不用再引入一个配置文件来打包项目，然而，它仍然有着 高度可配置性，可以很好满足你的需求。\"]},\"622\":{\"h\":\"打包过程\",\"t\":[\"Webpack的打包过程是一个复杂但高效的过程，它能够将项目中的多个文件和资源（如JavaScript、CSS、图片等）打包成一个或多个bundle文件，以便于在浏览器中加载和运行。\",\"初始化阶段 \",\"初始化参数——配置文件 \",\"读取配置文件：Webpack首先会读取项目中的webpack.config.js文件（或其他指定的配置文件），解析其中的配置信息。 \",\"这些配置信息包括入口文件（entry points）、输出目录（output）、加载器（loader）和插件（plugin）等。\",\"合并参数：Webpack会将配置文件中的参数与通过命令行传入的参数进行合并，得到最终的打包配置参数。\",\"创建Compiler对象 \",\"创建Compiler：根据配置参数，Webpack会创建一个Compiler对象。\",\"这个对象负责控制整个打包过程，包括读取入口文件、解析模块、加载模块、转换代码、生成代码等。\",\"读取入口文件——entry \",\"找到入口文件：Webpack会根据配置中的入口文件（entry）路径，找到项目的起始点。\",\"入口文件通常是一个或多个JS文件。\",\"解析模块依赖 iii.递归解析：从入口文件开始，Webpack会递归解析项目中的所有依赖模块。这些依赖模块可以是JavaScript文件、CSS文件、图片文件等。 iv.Webpack使用不同的加载器（loader）来解析不同类型的文件。 e.加载模块——loader v.使用Loader：对于解析出的每个模块，Webpack会根据模块的类型和配置中的加载器（loader）规则，使用相应的加载器来加载模块的源代码，并将其转换为Webpack可以处理的形式。 f.转换代码——plugin vi.应用插件：在加载模块之后，Webpack会根据配置中的插件（plugin）规则，对加载的模块进行一系列的转换操作。 vii.这些转换操作可以包括代码压缩、合并、优化等。 g.生成代码 viii.合并模块：Webpack会将所有处理后的模块合并成一个或多个bundle文件。 1.合并的过程中，Webpack会根据配置中的规则来将模块分组打包，以便于在浏览器中加载和运行。 ix.输出文件：最后，Webpack会将生成的bundle文件输出到指定的输出目录中。 1.这些文件就可以在浏览器中通过<\\\\script>标签等方式加载和运行了。 h.触发生命周期事件 x.插件监听：在Webpack打包的过程中，会触发一系列的生命周期事件。 xi.这些事件可以被插件所监听，并在相应的时机执行插件的逻辑。 xii.例如，在打包完成后，可以触发一个插件来输出打包文件的大小。\"]},\"623\":{\"h\":\"浏览器兼容性(browser compatibility)\",\"t\":[\"Webpack 支持所有符合 ES5 标准 的浏览器（不支持 IE8 及以下版本）。webpack 的 import() 和 require.ensure() 需要 Promise。如果你想要支持旧版本浏览器，在使用这些表达式之前，还需要 提前加载 polyfill。\"]},\"624\":{\"h\":\"环境(environment)\",\"t\":[\"Webpack 5 运行于 Node.js v10.13.0+ 的版本。\"]},\"625\":{\"h\":\"模块（Modules、chunk）\",\"t\":[\"在模块化编程中，开发者将程序分解为功能离散的 chunk（项目中每一个模块），并称之为 模块。 每个模块都拥有小于完整程序的体积，使得验证、调试及测试变得轻而易举。 精心编写的 模块 提供了可靠的抽象和封装界限，使得应用程序中每个模块都具备了条理清晰的设计和明确的目的。\"]},\"626\":{\"h\":\"依赖关系\",\"t\":[\"与 Node.js 模块相比，webpack 模块能以各种方式表达它们的依赖关系。 1.ES2015 import 语句 2.CommonJS require() 语句 3.AMD define 和 require 语句 4.css/sass/less 文件中的 @import 语句 5.stylesheet url(...) 或者 HTML <\\\\img src=...> 文件中的图片链接。\"]},\"627\":{\"h\":\"支持的模块类型\",\"t\":[\"webpack原生支持：ECMAScript 模块、CommonJS 模块、AMD 模块、Assets、WebAssembly 模块 对于其他的类型的模块，需要各种loader。 webpack 社区为各种流行的语言和预处理器创建了 loader，通过 loader 可以使 webpack 支持多种语言和预处理器语法编写的模块。loader 向 webpack 描述了如何处理非原生 模块，并将相关依赖引入到你的 bundles中。 通过互相引用，这些模块会形成一个图(ModuleGraph)数据结构。 在打包过程中，模块会被合并成 chunk。 chunk 合并成 chunk 组，并形成一个通过模块互相连接的图(ModuleGraph)。\"]},\"628\":{\"h\":\"打包结果（bundle）\",\"t\":[\"bundle是指Webpack打包后最终生成的文件，包含了项目中所有依赖的模块（modules）以及Webpack在打包过程中对这些模块进行的一系列转换和优化后的结果。 bundle是项目在浏览器中运行所需的所有代码和资源的集合，它们被设计为可以在浏览器中高效地加载和执行。\"]},\"629\":{\"h\":\"打包过程\",\"t\":[\"1.Webpack的打包过程主要就是将项目中所有的资源（源代码、静态资源等）组织、转换、优化，并最终生成这些bundle文件。 2.通常，一个Webpack项目会有一个或多个入口点（entry points），Webpack会从这些入口点开始，递归地解析出所有的依赖模块，并将它们合并成一个或多个bundle文件。 3.这些bundle文件可以配置为按需加载（lazy loading），即只在需要时才加载相应的代码块，以优化页面加载时间和提高应用的性能。\"]},\"630\":{\"h\":\"设置bundle\",\"t\":[\"在Webpack的配置文件中，你可以通过output属性来指定bundle文件的名称、路径等选项。 例如，你可以将bundle文件命名为bundle.js，并将其输出到项目的dist目录下。然后，在HTML文件中，你可以通过<\\\\script>标签来引入这个bundle文件，以便在浏览器中运行你的应用。\"]},\"631\":{\"h\":\"运行时（runtime）\",\"t\":[\"Webpack的runtime（运行时）是指Webpack在打包过程中生成的一段代码，这段代码在浏览器中被用来加载和管理模块。 Webpack在打包过程中会根据项目的配置和模块之间的依赖关系生成runtime代码。这些代码通常会被添加到打包后的bundle文件的顶部或底部，具体取决于Webpack的配置。 Webpack Runtime的主要作用 1.模块加载：Webpack runtime提供了__webpack_require__函数，这个函数是Webpack模块加载机制的核心。 a.当浏览器需要加载某个模块时，会调用这个函数，并传入模块的ID作为参数。 b.__webpack_require__函数会根据模块ID在已安装的模块缓存（installedModules）中查找模块，如果找到则直接返回模块的导出对象，否则会根据模块的路径加载模块并执行，然后将模块的导出对象缓存起来供后续使用。 2.依赖解析：Webpack在打包过程中会分析模块之间的依赖关系，并生成相应的依赖图（Dependency Graph）。 a.Webpack runtime会根据这个依赖图来解析模块的依赖，确保模块能够按照正确的顺序被加载和执行。 3.缓存管理：Webpack runtime还负责模块的缓存管理。 a.当模块被加载并执行后，其导出对象会被缓存起来，以便后续再次需要该模块时能够直接从缓存中获取，而不需要重新加载和执行模块代码。 4.动态加载：Webpack支持代码分割（Code Splitting），允许将代码分割成多个bundle，并在需要时动态加载。 a.Webpack runtime提供了支持动态加载的机制，如import()语法，它允许在运行时动态地加载模块。 优化Webpack Runtime 为了优化Webpack打包结果，可以采取一些措施来减少runtime代码的大小和复杂度，例如： 1.使用optimization.runtimeChunk选项：将runtime代码单独打包成一个或多个chunk，这样可以在不更改业务代码的情况下更新runtime代码，从而提高缓存效率。 2.优化模块ID：使用HashedModuleIdsPlugin等插件来生成稳定的模块ID，避免在每次构建时都生成新的ID，从而减少缓存失效的可能性。 3.减少依赖：优化项目的依赖关系，减少不必要的依赖，可以降低runtime代码的复杂度。\"]},\"632\":{\"h\":\"数据集合（manifest）\",\"t\":[\"Webpack的manifest是一个在Webpack构建过程中生成的数据集合，它记录了关于打包后模块（bundles/chunks）的详细信息。 runtime使用manifest的信息加载和解析模块 Webpack Manifest的主要作用 1.模块解析：manifest包含了模块之间的映射关系，包括模块的ID、路径等信息。 a.这些信息在运行时被用来解析和加载模块。 2.缓存优化：通过manifest，Webpack可以更有效地利用浏览器的缓存机制。 a.当模块内容发生变化时，只有受影响的模块需要重新加载，而其他未变化的模块则可以继续使用缓存中的版本。 3.资源定位：在按需加载（code splitting）的场景下，manifest帮助Webpack的运行时（runtime）定位并加载所需的代码块（chunks）。 Webpack Manifest的生成与使用 1.生成：Webpack在构建过程中会自动生成manifest数据，但这些数据通常不会直接暴露给用户或开发者。 a.然而，通过一些插件（如WebpackManifestPlugin），开发者可以将这些manifest数据导出为文件（如manifest.json），以便在需要时查阅或使用。 2.使用：在浏览器端，Webpack的运行时（runtime）会根据manifest来加载和解析模块。 a.对于开发者来说，了解manifest的内容可以帮助他们更好地理解Webpack的打包结果，以及优化应用的加载性能。 注意事项：Webpack的manifest是构建过程中的一个内部机制，通常不需要开发者直接干预。然而，了解它的工作原理对于深入理解Webpack的打包机制和优化应用性能是非常有帮助的。 不同的Webpack版本和配置可能会生成略有不同的manifest数据。因此，在查阅或分析manifest时，需要注意与当前项目的Webpack版本和配置相匹配。\"]},\"633\":{\"c\":[\"构建工具\"]},\"634\":{\"c\":[\"webpack\"]},\"635\":{\"h\":\"loader(转换器)\",\"t\":[\"由于 webpack 只能理解JavaScript和JSON文件。对于其他文件需要loader将其他的类型的文件转换为有效模块，以供应用程序使用，以及被添加到依赖图中。\",\"允许在 JS 模块中 import CSS 文件！\",\"将文件从不同的语言（如 TypeScript ）转换为 JavaScript\",\"可以将内联图像转换为 data URL。\"]},\"636\":{\"h\":\"特点\",\"t\":[\"loader 支持 链式调用 。 \",\"链中的每个 loader 会将转换应用在已处理过的资源上。一组链式的 loader 将按照从右到左的顺序执行。\",\"链中的第一个 loader 将其结果（也就是应用过转换后的资源）传递给下一个 loader，依此类推。\",\"最后，链中的最后一个 loader，返回 webpack 所期望的 JavaScript。\",\"loader 可以是 同步 的，也可以是 异步 的。\",\"loader 运行在 Node.js 中，并且能够执行任何操作。\",\"loader 可以通过 options 对象配置（仍然支持使用 query 参数来设置选项，但是这种方式已被废弃）。\",\"除了常见的通过 package.json 的 main 来将一个 npm 模块导出为 loader，还可以在 module.rules 中使用 loader 字段直接引用一个模块。\",\"插件(plugin)可以为 loader 带来更多特性。\",\"loader 能够产生额外的任意文件。 可以通过 loader 的预处理函数，为 JavaScript 生态系统提供更多能力。用户现在可以更加灵活地引入细粒度逻辑，例如：压缩、打包、语言转译（或编译） 和 更多其他特性。\",\"重要\",\"webpack 的其中一个强大的特性就是能通过 import 导入任何类型的模块（例如 .css 文件），其他打包程序或任务执行器的可能并不支持。\"]},\"637\":{\"h\":\"使用loader\",\"t\":[\"有两种使用 loader 的方式：\",\"配置方式（推荐）：在 webpack.config.js 文件中指定 loader 。\",\"内联方式：在每个 import 语句中显式指定 loader 。\",\"重要\",\"在 webpack v4 版本可以通过 CLI 使用 loader，但是在 webpack v5 中被弃用。\"]},\"638\":{\"h\":\"配置方式\",\"t\":[\"module.rules 允许你在 webpack 配置中对一个rules指定多个 loader。 loader 从右到左（或从下到上）地取值(evaluate)/执行(execute)。 在下面的示例中，从 sass-loader 开始执行，然后继续执行 css-loader，最后以 style-loader 为结束。\",\"module.exports = { module: { rules: [ { test: /\\\\.css$/, use: [ { loader: 'style-loader' }, {loader: 'css-loader', options: {modules: true,},}, { loader: 'sass-loader' }, ], }, ],},};\",\"重要\",\"警告：请记住，使用正则表达式匹配文件时，你不要为它添加引号。也就是说，/.txt$/ 与 '/.txt$/' 或 \\\"/.txt$/\\\" 不一样。\",\"前者指示 webpack 匹配任何以 .txt 结尾的文件，后者指示 webpack 匹配具有绝对路径 '.txt' 的单个文件; 这可能不符合你的意图。\"]},\"639\":{\"h\":\"内联方式\",\"t\":[\"可以在 import 语句或任何 与 \\\"import\\\" 方法同等的引用方式 中指定 loader。使用 ! （后缀）将资源中的 loader 分开。每个部分都会相对于当前目录解析。\",\"import Styles from 'style-loader!css-loader?modules!./styles.css';\",\"通过为内联 import 语句添加前缀，可以覆盖 配置 中的所有 loader, preLoader 和 postLoader：\",\"使用 ! 前缀，将禁用所有已配置的 normal loader(普通 loader)\",\"import Styles from '!style-loader!css-loader?modules!./styles.css';\",\"使用 !! 前缀，将禁用所有已配置的 loader（preLoader, loader, postLoader）\",\"import Styles from '!!style-loader!css-loader?modules!./styles.css';\",\"使用 -! 前缀，将禁用所有已配置的 preLoader 和 loader，但是不禁用 postLoaders\",\"import Styles from '-!style-loader!css-loader?modules!./styles.css';\",\"选项可以传递查询参数，例如 ?key=value&foo=bar ，或者一个 JSON 对象，例如 ?{\\\"key\\\":\\\"value\\\",\\\"foo\\\":\\\"bar\\\"} 。\",\"重要\",\"尽可能使用 module.rules，因为这样可以减少源码中样板文件的代码量，并且可以在出错时，更快地调试和定位 loader 中的问题。\"]},\"640\":{\"c\":[\"构建工具\"]},\"641\":{\"c\":[\"webpack\"]},\"642\":{\"h\":\"插件(Plugins)\",\"t\":[\"plugins 选项用于以各种方式自定义 webpack 构建过程，他是 Plugin的集合。查看插件页面 获取插件列表和对应文档。\"]},\"643\":{\"h\":\"插件(plugin)\",\"t\":[\"loader 用于转换某些类型的模块，而插件则可以用于执行范围更广的任务。包括：打包优化，资源管理，注入环境变量。 想要使用一个插件，你只需要 require() 它，然后把它添加到 plugins 数组中。多数插件可以通过选项(option)自定义。 你也可以在一个配置文件中因为不同目的而多次使用同一个插件，这时需要通过使用 new 操作符来创建一个插件实例。\",\"// webpack.config.js const HtmlWebpackPlugin = require('html-webpack-plugin'); const webpack = require('webpack'); // 用于访问内置插件 module.exports = { module: { rules: [{ test: /\\\\.txt$/, use: 'raw-loader' }], }, plugins: [ new HtmlWebpackPlugin({ template: './src/index.html' })], };\",\"在上面的示例中，html-webpack-plugin 为应用程序生成一个 HTML 文件，并自动将生成的所有 bundle 注入到此文件中。\"]},\"644\":{\"h\":\"配置方式\",\"t\":[\"//webpack.config.js const HtmlWebpackPlugin = require('html-webpack-plugin'); const webpack = require('webpack'); // 访问内置的插件 const path = require('path'); module.exports = { entry: './path/to/my/entry/file.js', output: { filename: 'my-first-webpack.bundle.js', path: path.resolve(__dirname, 'dist'), }, module: { rules: [{test: /\\\\.(js|jsx)$/, use: 'babel-loader',},], }, plugins: [ new webpack.ProgressPlugin(), new HtmlWebpackPlugin({ template: './src/index.html' }), ], };\",\"ProgressPlugin 用于自定义编译过程中的进度报告，HtmlWebpackPlugin 将生成一个 HTML 文件，并在其中使用 script 引入一个名为 my-first-webpack.bundle.js 的 JS 文件。\"]},\"645\":{\"h\":\"使用Node API 方式配置\",\"t\":[\"在使用 Node API 时，还可以通过配置中的 plugins 属性传入插件。\",\"//some-node-script.js const webpack = require('webpack'); // 访问 webpack 运行时(runtime) const configuration = require('./webpack.config.js'); //配置文件 let compiler = webpack(configuration); new webpack.ProgressPlugin().apply(compiler); compiler.run(function (err, stats) { // ... });\"]},\"646\":{\"h\":\"剖析\",\"t\":[\"webpack 插件是一个具有 apply 方法的 JavaScript 对象。apply 方法会被 webpack compiler 调用，并且在 整个 编译生命周期都可以访问 compiler 对象。\",\"//ConsoleLogOnBuildWebpackPlugin.js const pluginName = 'ConsoleLogOnBuildWebpackPlugin'; class ConsoleLogOnBuildWebpackPlugin { apply(compiler) { compiler.hooks.run.tap(pluginName, (compilation) => {console.log('webpack 构建正在启动！');}); } } module.exports = ConsoleLogOnBuildWebpackPlugin;\",\"compiler.hook.run 的 tap 方法的第一个参数，应该是驼峰式命名的插件名称。建议为此使用一个常量，以便它可以在所有 hook 中重复使用。\"]},\"647\":{\"c\":[\"构建工具\"]},\"648\":{\"c\":[\"webpack\"]},\"649\":{\"h\":\"canvas\"},\"650\":{\"c\":[\"h5\"]},\"651\":{\"h\":\"canvas\"},\"652\":{\"c\":[\"HTNL\",\"canvas\"]},\"653\":{\"h\":\"数据类型\"},\"654\":{\"c\":[\"ECMA标准\"]},\"655\":{\"h\":\"操作(算法)约定\"},\"656\":{\"c\":[\"ECMA标准\"]},\"657\":{\"h\":\"运行时语义：Runtime Semantics\",\"t\":[\"在运行时调用的算法(指定语义)称为运行时语义。运行时语义由抽象操作(abstract operations)或语法导向操作(Syntax-Directed Operations)定义。\",\"以下的是一般运行时语义。\"]},\"658\":{\"h\":\"\",\"t\":[\"抽象操作完成接受参数completionRecord（一个完成记录），并返回一个完成记录(规范类型)。此操作用于强调正在返回一个完成记录。在被调用时，它执行以下步骤：\",\"完成语义的一个雷子\",\"Assert: completionRecord is a Completion Record.\",\"ReturncompletionRecord.\"]},\"659\":{\"h\":\"\",\"t\":[\"步骤中提到抛出异常的，如：\",\"Throw a TypeError exception.\",\"意味着与以下内容相同：\",\"Return ThrowCompletion(a newly created TypeError object). :::\"]},\"660\":{\"h\":\"\",\"t\":[\"ReturnIfAbrupt这是一个简写的步骤。算法步骤中提到或等同于以下内容：\",\"ReturnIfAbrupt(argument)。 意味着\",\"Assert：argument is a Completion Record。\",\"If argument is a abrupt completion，return Completion(argument)。\",\"Else, set argument 设置为 argument.[[Value]]。\",\"重要\",\"他的简短含义是：\",\"如果完成记录(步骤1)一个 硬性完成(步骤2)，返回这个完成记录。\",\"否则，完成记录是一个正常完成(步骤3)，将argument 设置为它真正的值。\"]},\"661\":{\"h\":\"\",\"t\":[\"在抽象操作和语法导向操作调用时，前缀为?表示应用ReturnIfAbrupt。\",\"? OperationName(). 等同于以下步骤：\",\"ReturnIfAbrupt(OperationName())。\"]},\"662\":{\"h\":\"\",\"t\":[\"重要\",\"前缀 ! 用来表示抽象操作或语法导向操作的调用绝不会返回一个abrupt completion，并且结果中的完成记录的[[Value]]字段应当代替操作的返回值使用。\",\"Let val be ! OperationName(). 等同于以下步骤：\",\"Let val be OperationName().\",\"Assert: val is a normal completion.\",\"Set val to val.[[Value]].\"]},\"663\":{\"h\":\"\",\"t\":[\"在标准中声明的返回完成记录的抽象操作和所有内置函数中，返回的值传递给NormalCompletion，并使用其结果。 在以下情况不适用：\",\"直接返回应用Completion、NormalCompletion或ThrowCompletion的结果时。\",\"直接返回构建一个完成记录的结果时。\",\"重要\",\"言外之意，一般情况下只要不是 abrupt completion,都是NormalCompletion。\"]},\"664\":{\"c\":[\"ECMA标准\"]},\"665\":{\"h\":\"术语\"},\"666\":{\"h\":\"\"},\"667\":{\"h\":\"\",\"t\":[\"语法导向操作是一系列算法的总和，与产生式绑定。在标准中文法定义了语句的结构，其语义通过语法导向操作进行表达。一条产生式可以绑定多条语法导向操作。 每条产生式的目标符实例都可以通过调用自身的语法导向操作，执行这些逻辑，完成语句语义的表达。\",\"重要\",\"语法导向操作和抽象操作有两种类型：\",\"静态语义。\",\"运行时语义。\",\"脚本的语法导向操作，这里是求值语义。\",\"重要\",\"Runtime Semantics:EvaluationScript:[empty] 1.Return undefined.\",\"可以看出，对于脚本内容的情况返回undefined。\"]},\"668\":{\"h\":\"\",\"t\":[\"ECMA通过算法或描述性要求来表达的额外规则，这些规则与语法的产生式相关联，并称为产生式的静态语义。 还有一种特殊类型的静态语义是先觉错误(Early Error),定义了特定语法产生错误的条件。\",\"语句列表的静态语义(顶层作用域声明)\",\"StatementList:StatementList StatementListItem\",\"Let declarations1 be TopLevelLexicallyScopedDeclarations of StatementList.\",\"Let declarations2 be TopLevelLexicallyScopedDeclarations of StatementListItem.\",\"Return the list-concatenation of declarations1 and declarations2.\"]},\"669\":{\"h\":\"\"},\"670\":{\"h\":\"\",\"t\":[\"在标准中，ECMA语言值以粗体显示。例如null、true。\"]},\"671\":{\"h\":\"\",\"t\":[\"在标准上查看 标准中有两类值，ECMA规范类型值、ECMA语言值。 在比较相等性时，按是否具备标识分为两类：\",\"不具有标识的值：比较时，值或特征相同意味着相等。\",\"具有标识的值：唯一的，只等于它本身。\",\"语言值使用SameValue抽象操作及其传递调用的抽象操作进行相等性比较。这些比较的算法操作决定了ECMAScript 语言值的语言标识。\"]},\"672\":{\"c\":[\"ECMA标准\"]},\"673\":{\"h\":\"文法参数\",\"t\":[\"文法参数(Grammatical Parameters)指在ECMA的产生式中的以 [] 包括的一系列参数。 语法参数是由前缀参数(?,~等)和文法参数(In,Return等)的组合。\",\"参数化的产生式\",\"VariableDeclaration[In] :BindingIdentifier Initializer[?In]\"]},\"674\":{\"h\":\"文法参数的含义\",\"t\":[\"seq:表示是否可以使用数字分隔符；\",\"await:表示是否可以使用await语句；\",\"yield:表示是否可以使用yield语句；\",\"in:表示in是in操作符还是for...in...语句中的「in」；\",\"default:表示是否可以使用无名函数/类；\",\"return:表示是否可以使用return语句；\"]},\"675\":{\"h\":\"文法前缀参数的含义\",\"t\":[\"”+“：表示非终结符可以带有该参数\",\"”~“：表示非终结符不可以带有该参数\",\"”？“：如果目标符有该参数，那么非终结符中也有，否则没有。\",\"当文法参数放在代换式左侧时，文法前缀参数的含义是不一样的\",\"+：表示如果目标符带有该参数，那么这条代换式就存在，否则不存在；\",\"~：表示如果目标符不带有该参数，那么这条代换式存在，否则不存在；\"]},\"676\":{\"h\":\"\",\"t\":[\"ECMA对普通脚本的定义，脚本可以为空。语句列表中不允许使用await、yield、return语句。此时await，yield会被当作普通标识符使用：\",\"脚本产生式\",\"Script:SciptBodyopt\",\"SciptBody:StatementList[~Yield,~Await,~Return]\",\"可以看出，模块也可以为空。模块内容条目中的其中一个代换式，可以使用await语句，不能使用yeild、return。这意味着，await作为关键字使用，而yeild和return可以作为标识符使用。\",\"模块产生式\",\"Module:ModuleBodyopt\",\"ModuleItem:StatementListItem[~Yield,+Await,~Return]\",\"可以看出，如果存在return则存在 return_语句。\",\"重要\",\"StatementList[Return]: [+Return] ReturnStatementExpressionStatement\"]},\"677\":{\"c\":[\"ECMA标准\"]},\"678\":{\"h\":\"句法和词法约定\"},\"679\":{\"c\":[\"ECMA标准\"]},\"680\":{\"h\":\"文法符号\"},\"681\":{\"h\":\"\",\"t\":[\"表示没有产生式的元素，无法继续展开，在ECMA中使用黑色粗体表示。\",\"十六进制字面量产生式\",\"HexIntegerLiteral::0xHexDigits\",\"0x和::为非终结符\"]},\"682\":{\"h\":\"\",\"t\":[\"非终结符号为斜体类型。非终结(也称为产生式)的定义从被定义非终结名称(也称为目标符号，产生式的目标结果)开始，后面跟着一个或多个冒号。然后产生式的一个或多个代换式在后续行跟随。 冒号的数量表示产生式所属的语法。\",\"单个冒号表示句法(语句)的定义。\",\"两个冒号便是此法(词语)的定义。\",\"while语句的产生式(定义)\",\"WhileStatement:while(Expression)Statement\"]},\"683\":{\"h\":\"\",\"t\":[\"下标后缀“opt”，可出现在终结符或非终结符之后，表示一个可选符号。包含可选符号的替代项实际上指定了两个代换式，一个省略可选元素，一个包含它。\",\"while语句的产生式(定义)\",\"VariableDeclaration:BindingIdentifier Initializeropt 是以下的缩写VariableDeclaration:BindingIdentifierBindingIdentifier Initializer\"]},\"684\":{\"h\":\"\",\"t\":[\"当文法定义中的冒号后面跟着“one of”短语时，它们表示其中之一。\",\"NonZeroDigit\",\"NonZeroDigit::one of1 2 3 4 5 6 7 8 9\",\"是以下的缩写\",\"NonZeroDigit::one of123456789\"]},\"685\":{\"h\":\"\",\"t\":[\"生成式的右侧可以使用短语“but not”并指示要排除的扩展来指定不允许某些扩展。\",\"Identifier词法的产生式(定义)\",\"Identifier:IdentifierNamebut notReservedWord\",\"以上表示，标识符的名字不能为保留字。\"]},\"686\":{\"h\":\"\",\"t\":[\"如果产生式的右侧出现“[empty]”这一短语，它表示该产生式的右侧不包含任何终结符号或非终结符号。\",\"参数的产生式\",\"FormalParameters[Yield,Await]:[empty]\",\"以上表示，参数可以为空。\"]},\"687\":{\"h\":\"\",\"t\":[\"短语“[lookahead = seq]”出现在代换式某个位置的右侧，对该位置后面紧跟的内容进行限制。 标准中有如下：\",\"[lookahead = x]:该位置后面必须是 x。\",\"[lookahead ≠ x]:该位置后面不能是 x。\",\"[lookahead ∈ set]：该位置后面跟着的内容必须属于 set。\",\"[lookahead ∉ set]:该位置后面跟着的内容必须不属于 set。\"]},\"688\":{\"h\":\"\",\"t\":[\"如果在句法的生成式的部分右侧出现短语“[no LineTerminator here]”，则表示该生成式是受限生成式。如果在指示位置的输入流中出现 行终结符(LineTerminator)，则不允许使用该生成式。\",\"thorw的代换式\",\"ThrowStatement::throw [no LineTerminator here] Expression;\",\"可以看出throw语句不可以换行。\"]},\"689\":{\"h\":\"\",\"t\":[\"在一些列出所有替代方案不切实际的情况下，使用描述性短语来描述少数非终结符号：\",\"重要\",\"SourceCharacter:: 任意 Unicode 代码点\"]},\"690\":{\"c\":[\"ECMA标准\"]},\"691\":{\"c\":[\"ECMA\"]},\"692\":{\"h\":\"ES语言类型\"},\"693\":{\"c\":[\"ECMA标准\"]},\"694\":{\"h\":\"ES规范类型\"},\"695\":{\"c\":[\"ECMA标准\"]},\"696\":{\"h\":\"String类型\"},\"697\":{\"c\":[\"ECMA标准\"]},\"698\":{\"h\":\"String字面量\",\"t\":[\"字符串文本是 0 个或多个 Unicode 码位，用单引号或双引号括起来。\",\"Unicode 码位也可以由转义序列表示。除右引号代码点 U+005C （REVERSE SOLIDUS）、U+000D （回车） 和 U+000A （换行） 之外，所有代码点都可以直接出现在字符串文本中。\",\"任何码位都可以以转义序列的形式出现。String 文本的计算结果为 ECMAScript String 值。生成这些 String 值时，Unicode 码位将按照 11.1.1 中的定义进行 UTF-16 编码。\",\"属于基本多语言平面的码位编码为字符串的单个代码单元元素。所有其他码位都编码为字符串的两个码位元素。\"]},\"699\":{\"h\":\"\",\"t\":[\"有单引号，双引号的写法\",\"不能包含以下之一，单引号、反斜杠、行终结符\",\"\\\\ 与转义序列、行终结符的组合\"]},\"700\":{\"h\":\"\",\"t\":[\"单转义字符( ‘，“，\\\\，b，f，n，r，t，v)\",\"0~9\",\"x\",\"u\"]},\"701\":{\"h\":\"\",\"t\":[\"单转义字符、非转义字符（非转义、非行终结符）\",\"0，不能跟八进制数\",\"旧式八进制转义 \",\"0，不能跟8，9\",\"1~7和八进制数的组合，不能跟八进制数\",\"0~3和八进制数的组合\",\"4~7和八进制数的组合\",\"非八进制十进制转义：8，9\",\"十六进制转义： \",\"x和两个十六进制数的组合\",\"Unicode转义： \",\"u 四个十六进制的组合\",\"u\"]},\"702\":{\"h\":\"先觉错误\",\"t\":[\"在 严格模式(strict mode) 下，转义序列不能使用 旧式八进制转义、非八进制十进制转义。\"]},\"703\":{\"h\":\"在代码块内使用严格模式\",\"t\":[\"字符串文本位于指令” Use Strict“之前，该指令将整个代码块至于严格模式，并强制实施上述规则。\",\"// 使用了旧式八进制转义，出错 function invalid() {\\\"/7\\\";\\\"use strict\\\"}\"]},\"704\":{\"c\":[\"ECMA标准\"]},\"705\":{\"h\":\"\",\"t\":[\"404 Not Found\"]},\"706\":{\"h\":\"Posts\"},\"707\":{\"h\":\"PHP\"},\"708\":{\"h\":\"Version Control\"},\"709\":{\"h\":\"Vue\"}},\"dirtCount\":0,\"index\":[[\"四个十六进制的组合\",{\"1\":{\"701\":1}}],[\"四种缺点\",{\"1\":{\"392\":1}}],[\"码位将按照\",{\"1\":{\"698\":1}}],[\"码位也可以由转义序列表示\",{\"1\":{\"698\":1}}],[\"码位\",{\"1\":{\"698\":1}}],[\"行终结符的组合\",{\"1\":{\"699\":1}}],[\"行终结符\",{\"1\":{\"688\":1,\"699\":1}}],[\"∉\",{\"1\":{\"687\":1}}],[\"∈\",{\"1\":{\"687\":1}}],[\"≠\",{\"1\":{\"687\":1}}],[\"9\",{\"1\":{\"684\":1,\"701\":2}}],[\"9和a\",{\"1\":{\"375\":1}}],[\"词语\",{\"1\":{\"682\":1}}],[\"词法环境是作用域链的起点\",{\"1\":{\"7\":1}}],[\"冒号的数量表示产生式所属的语法\",{\"1\":{\"682\":1}}],[\"句法和词法约定\",{\"0\":{\"678\":1}}],[\"句号\",{\"1\":{\"149\":1}}],[\"唯一的\",{\"1\":{\"671\":1}}],[\"顶层作用域声明\",{\"1\":{\"668\":1}}],[\"术语\",{\"0\":{\"665\":1}}],[\"言外之意\",{\"1\":{\"663\":1}}],[\"硬性完成\",{\"1\":{\"660\":1}}],[\"步骤3\",{\"1\":{\"660\":1}}],[\"步骤2\",{\"1\":{\"660\":1}}],[\"步骤1\",{\"1\":{\"660\":1}}],[\"步骤中提到抛出异常的\",{\"1\":{\"659\":1}}],[\"意味着\",{\"1\":{\"660\":1}}],[\"意味着与以下内容相同\",{\"1\":{\"659\":1}}],[\"意思为文档对象模型\",{\"1\":{\"162\":1}}],[\"抽象操作完成接受参数completionrecord\",{\"1\":{\"658\":1}}],[\"抽象类不能被实例化\",{\"1\":{\"343\":1}}],[\"抽象类可以包含成员的实现细节\",{\"1\":{\"343\":1}}],[\"抽象类作为其他派生类的基类使用\",{\"1\":{\"343\":1}}],[\"抽象类\",{\"0\":{\"343\":1}}],[\"约定\",{\"0\":{\"655\":1}}],[\"剖析\",{\"0\":{\"646\":1}}],[\"想要使用一个插件\",{\"1\":{\"643\":1}}],[\"选项用于以各种方式自定义\",{\"1\":{\"642\":1}}],[\"选项可以传递查询参数\",{\"1\":{\"639\":1}}],[\"选择下拉菜单\",{\"1\":{\"571\":1}}],[\"选择了hybrid的渲染方式\",{\"1\":{\"525\":1}}],[\"普通\",{\"1\":{\"639\":1}}],[\"普通参数\",{\"1\":{\"38\":1}}],[\"链中的最后一个\",{\"1\":{\"636\":1}}],[\"链中的第一个\",{\"1\":{\"636\":1}}],[\"链中的每个\",{\"1\":{\"636\":1}}],[\"链式调用\",{\"1\":{\"636\":1}}],[\"链接\",{\"1\":{\"571\":1}}],[\"了解它的工作原理对于深入理解webpack的打包机制和优化应用性能是非常有帮助的\",{\"1\":{\"632\":1}}],[\"了解manifest的内容可以帮助他们更好地理解webpack的打包结果\",{\"1\":{\"632\":1}}],[\"描述了如何处理非原生\",{\"1\":{\"627\":1}}],[\"描述了网页对互动的整体响应能力\",{\"1\":{\"572\":1}}],[\"社区为各种流行的语言和预处理器创建了\",{\"1\":{\"627\":1}}],[\"精心编写的\",{\"1\":{\"625\":1}}],[\"入口文件通常是一个或多个js文件\",{\"1\":{\"622\":1}}],[\"路径等信息\",{\"1\":{\"632\":1}}],[\"路径等选项\",{\"1\":{\"630\":1}}],[\"路径\",{\"1\":{\"622\":1}}],[\"路由跳转\",{\"0\":{\"521\":1}}],[\"路由管理\",{\"1\":{\"502\":1}}],[\"路由权限\",{\"1\":{\"392\":1}}],[\"路由传参\",{\"1\":{\"386\":1}}],[\"读取入口文件\",{\"1\":{\"622\":1}}],[\"读取配置文件\",{\"1\":{\"622\":1}}],[\"得到最终的打包配置参数\",{\"1\":{\"622\":1}}],[\"ℹ\",{\"1\":{\"618\":1}}],[\"利用\",{\"1\":{\"618\":1}}],[\"利用路由元信息\",{\"1\":{\"454\":1}}],[\"工具替代\",{\"1\":{\"615\":1}}],[\"工具时\",{\"1\":{\"615\":1}}],[\"工作区\",{\"1\":{\"375\":1}}],[\"考虑是否渲染的算法\",{\"1\":{\"610\":1}}],[\"考虑先在值上使用\",{\"1\":{\"148\":1}}],[\"偏移位置\",{\"1\":{\"610\":1}}],[\"刷新频率受屏幕分辨率和屏幕尺寸的影响\",{\"1\":{\"606\":1}}],[\"递归地解析出所有的依赖模块\",{\"1\":{\"629\":1}}],[\"递归解析\",{\"1\":{\"622\":1}}],[\"递归\",{\"1\":{\"606\":1}}],[\"任意\",{\"1\":{\"689\":1}}],[\"任务的空闲执行\",{\"1\":{\"605\":1}}],[\"任何码位都可以以转义序列的形式出现\",{\"1\":{\"698\":1}}],[\"任何一处协调工作用的服务器发生故障\",{\"1\":{\"374\":1}}],[\"任何包含顶级import或者export文件都被视为一个模块\",{\"1\":{\"354\":1}}],[\"任何拿此值与其它任何值\",{\"1\":{\"118\":1}}],[\"任何此类变量都应该用\",{\"1\":{\"67\":1}}],[\"难度小\",{\"1\":{\"598\":1}}],[\"难度大\",{\"1\":{\"598\":1}}],[\"难以重用和共享组件中的与状态相关的逻辑\",{\"1\":{\"253\":1}}],[\"耗费cpu\",{\"1\":{\"598\":1}}],[\"几乎没有侵入性\",{\"1\":{\"598\":1}}],[\"几百次\",{\"1\":{\"534\":1}}],[\"骨架屏是一种在页面加载过程中\",{\"1\":{\"600\":1}}],[\"骨架屏\",{\"1\":{\"595\":1},\"2\":{\"603\":1}}],[\"局部ssr\",{\"2\":{\"594\":1}}],[\"局部混入\",{\"0\":{\"479\":1}}],[\"警告\",{\"1\":{\"576\":1,\"638\":1}}],[\"毫秒的时长\",{\"1\":{\"575\":1}}],[\"毫秒的任务\",{\"1\":{\"575\":1}}],[\"阻塞\",{\"1\":{\"575\":1}}],[\"阻止事件的默认行为\",{\"1\":{\"389\":1}}],[\"阻止事件冒泡\",{\"1\":{\"389\":1}}],[\"阻止合成事件与除最外层document上的原生事件上的冒泡\",{\"1\":{\"241\":1}}],[\"阻止合成事件与最外层\",{\"1\":{\"241\":1}}],[\"阻止合成事件间的冒泡\",{\"1\":{\"241\":1}}],[\"何时视为阻塞\",{\"1\":{\"575\":1}}],[\"互动延迟时间\",{\"1\":{\"572\":1}}],[\"许多用户互动不需要事件监听器\",{\"1\":{\"571\":1}}],[\"点按和键盘互动等\",{\"1\":{\"572\":1}}],[\"点按按钮\",{\"1\":{\"571\":1}}],[\"点击\",{\"1\":{\"572\":1}}],[\"点击的子元素\",{\"1\":{\"541\":1}}],[\"点击按钮触发事件\",{\"1\":{\"306\":1}}],[\"点击按钮\",{\"1\":{\"244\":1,\"298\":1}}],[\"布局偏移\",{\"1\":{\"570\":1}}],[\"旨在更具选择性\",{\"1\":{\"569\":1}}],[\"旨在快速高效地处理从小型到大型项目的所以事务特性\",{\"1\":{\"372\":1}}],[\"衡量的是主要内容绘制到屏幕上的时间\",{\"1\":{\"569\":1}}],[\"衡量的是任何内容绘制到屏幕上的时间\",{\"1\":{\"569\":1}}],[\"渐变\",{\"1\":{\"569\":1}}],[\"延迟加载\",{\"2\":{\"564\":1,\"614\":1}}],[\"延迟加载资源\",{\"1\":{\"546\":1}}],[\"弱缓存\",{\"1\":{\"557\":1}}],[\"又称为对比缓存\",{\"1\":{\"557\":1}}],[\"客户端会再次加载\",{\"1\":{\"598\":1}}],[\"客户端将过期缓存恢复为有效的\",{\"1\":{\"558\":1}}],[\"客户端\",{\"1\":{\"556\":1}}],[\"私有缓存\",{\"1\":{\"556\":1}}],[\"协商\",{\"1\":{\"573\":1}}],[\"协商服务器是否更新资源\",{\"1\":{\"553\":1}}],[\"协商缓存\",{\"1\":{\"553\":1,\"556\":1}}],[\"协议相同\",{\"1\":{\"412\":1}}],[\"强缓存\",{\"1\":{\"553\":1}}],[\"强制向服务器请求资源\",{\"1\":{\"553\":1}}],[\"强制输入格式\",{\"1\":{\"203\":1}}],[\"强制转换为\",{\"1\":{\"115\":1}}],[\"强制类型约束\",{\"1\":{\"109\":1}}],[\"强制参数可以改为可选参数\",{\"1\":{\"82\":1}}],[\"侧重于图片\",{\"1\":{\"550\":1}}],[\"推荐\",{\"1\":{\"637\":1}}],[\"推荐给setstate一个参数传入一个function\",{\"1\":{\"306\":1}}],[\"推迟加载非关键内容或资源\",{\"1\":{\"550\":1}}],[\"防抖\",{\"2\":{\"545\":1}}],[\"防止重复渲染\",{\"1\":{\"536\":1}}],[\"防止重复渲染dom\",{\"1\":{\"453\":1}}],[\"防止表单重复提交\",{\"1\":{\"428\":1}}],[\"防止无用的state更新\",{\"1\":{\"177\":1}}],[\"防止初始化后修改属性\",{\"1\":{\"88\":1}}],[\"瀑布数据等需要大量绑定相同功能的函数场景\",{\"1\":{\"542\":1}}],[\"搜索框输入查询\",{\"1\":{\"539\":1}}],[\"搜索框搜索输入\",{\"1\":{\"536\":1}}],[\"间隔执行\",{\"1\":{\"537\":1}}],[\"间隔时间是否达到\",{\"1\":{\"537\":1}}],[\"邮箱输入验证\",{\"1\":{\"536\":1}}],[\"手机号\",{\"1\":{\"536\":1}}],[\"清除计时器\",{\"1\":{\"535\":1}}],[\"清理无用的代码和资源文件\",{\"1\":{\"529\":1}}],[\"清理watchers\",{\"1\":{\"470\":1}}],[\"清理\",{\"1\":{\"470\":1}}],[\"清理资源\",{\"1\":{\"470\":1}}],[\"清理一些注册是监听事件\",{\"1\":{\"185\":1}}],[\"短语\",{\"1\":{\"687\":1}}],[\"短语时\",{\"1\":{\"684\":1}}],[\"短时间内重复的\",{\"1\":{\"534\":1}}],[\"短标记是被默认开启的\",{\"1\":{\"71\":1}}],[\"短标记\",{\"1\":{\"71\":1}}],[\"崩溃\",{\"1\":{\"534\":1}}],[\"甚至可以造成浏览器卡死\",{\"1\":{\"534\":1}}],[\"计时功能\",{\"1\":{\"534\":1,\"537\":1}}],[\"计算属性可以被声明为类的属性访问器\",{\"1\":{\"357\":1}}],[\"节省时间\",{\"1\":{\"561\":1}}],[\"节流\",{\"2\":{\"545\":1}}],[\"节流来减少操作的重复执行\",{\"1\":{\"533\":1}}],[\"节点未处理\",{\"1\":{\"460\":1}}],[\"节点el和一个状态对象state\",{\"1\":{\"443\":1}}],[\"节点或在\",{\"1\":{\"288\":1}}],[\"节点不会发生变化\",{\"1\":{\"273\":1}}],[\"节点大致可以分成四个类别\",{\"1\":{\"269\":1}}],[\"节点4移动至下标为4的位置\",{\"1\":{\"233\":1}}],[\"节点2移动至下标为2的位置\",{\"1\":{\"233\":2}}],[\"节点c\",{\"1\":{\"232\":1}}],[\"节点d\",{\"1\":{\"232\":1}}],[\"节点a\",{\"1\":{\"232\":1}}],[\"节点b\",{\"1\":{\"232\":1}}],[\"节点根据如下三个属性构建一颗树\",{\"1\":{\"170\":1}}],[\"节点有个对应的\",{\"1\":{\"170\":1}}],[\"节点保存了本次更新中该组件改变的状态\",{\"1\":{\"170\":1}}],[\"节点等信息\",{\"1\":{\"170\":1}}],[\"节点对应一个\",{\"1\":{\"170\":1}}],[\"节点实现\",{\"1\":{\"170\":1}}],[\"节点\",{\"1\":{\"170\":1,\"460\":1}}],[\"及以下版本\",{\"1\":{\"623\":1}}],[\"及时检测服务器的ip变化\",{\"1\":{\"561\":1}}],[\"及setstoragesycn\",{\"1\":{\"530\":1}}],[\"及早求值\",{\"1\":{\"61\":1}}],[\"尽可能使用\",{\"1\":{\"639\":1}}],[\"尽量减少不必要的https请求\",{\"1\":{\"530\":1}}],[\"尽管\",{\"1\":{\"148\":1}}],[\"压缩后文件的扩展名\",{\"1\":{\"585\":1}}],[\"压缩后\",{\"1\":{\"580\":1}}],[\"压缩代码\",{\"1\":{\"529\":1}}],[\"压缩\",{\"1\":{\"528\":1,\"636\":1},\"2\":{\"588\":1}}],[\"经过编译\",{\"1\":{\"528\":1}}],[\"经常用于一些类型不确定的情况\",{\"1\":{\"337\":1}}],[\"展示一个固定的启动界面\",{\"1\":{\"528\":1}}],[\"热启动\",{\"1\":{\"527\":1}}],[\"冷启动\",{\"1\":{\"527\":1}}],[\"丢到逻辑层交给js处理\",{\"1\":{\"526\":1}}],[\"界面渲染相关的任务全都在webview线程里执行\",{\"1\":{\"525\":1}}],[\"界面长时间不更新\",{\"1\":{\"168\":1}}],[\"长时间的脚本运行会导致页面失去响应\",{\"1\":{\"525\":1}}],[\"长度不相等直接返回false\",{\"1\":{\"280\":1}}],[\"网页的总阻塞时间是在\",{\"1\":{\"575\":1}}],[\"网页性能会受到很大影响\",{\"1\":{\"561\":1}}],[\"网页开发中\",{\"1\":{\"525\":1}}],[\"网络状况或其他条件来决定是否加载某个模块\",{\"1\":{\"548\":1}}],[\"网络代理\",{\"1\":{\"413\":1}}],[\"快捷\",{\"1\":{\"524\":1}}],[\"快速简历小程序内的用户体系\",{\"1\":{\"519\":1}}],[\"快速定位问题\",{\"1\":{\"407\":1}}],[\"快速确定子树中是否有不在等待的变化\",{\"1\":{\"169\":1}}],[\"安全的支付功能\",{\"1\":{\"524\":1}}],[\"支付流程\",{\"0\":{\"524\":1}}],[\"支持的模块类型\",{\"0\":{\"627\":1}}],[\"支持所有符合\",{\"1\":{\"623\":1}}],[\"支持所有的css特性\",{\"1\":{\"219\":1}}],[\"支持扩展渲染目标\",{\"1\":{\"503\":1}}],[\"支持typescript\",{\"1\":{\"502\":1}}],[\"支持动态路由\",{\"1\":{\"502\":1}}],[\"支持组件返回多个根节点\",{\"1\":{\"501\":1}}],[\"支持链式调用\",{\"1\":{\"389\":1}}],[\"支持多种语言和预处理器语法编写的模块\",{\"1\":{\"627\":1}}],[\"支持多个根节点\",{\"1\":{\"507\":1}}],[\"支持多人协作开发的版本管理系统将事半功倍\",{\"1\":{\"365\":1}}],[\"支持多功能并行开发\",{\"1\":{\"365\":1}}],[\"支持两种类型别名\",{\"1\":{\"110\":1}}],[\"支持一个执行运算符\",{\"1\":{\"101\":1}}],[\"支持一个错误控制运算符\",{\"1\":{\"100\":1}}],[\"支持\",{\"1\":{\"74\":1,\"636\":1}}],[\"跳转到应用内的某个页面\",{\"1\":{\"522\":1}}],[\"跳转方式\",{\"0\":{\"522\":1}}],[\"跳出了\",{\"1\":{\"74\":1}}],[\"跳出\",{\"1\":{\"72\":1}}],[\"继续使用本地保存的自定义登陆状态\",{\"1\":{\"520\":1}}],[\"继承一个或多个类型\",{\"1\":{\"335\":1}}],[\"继承react\",{\"1\":{\"317\":1}}],[\"继承\",{\"0\":{\"81\":1,\"210\":1,\"340\":1},\"1\":{\"67\":1,\"80\":1,\"207\":1}}],[\"检验登录状态是否过期\",{\"0\":{\"520\":1}}],[\"检查类型是否一致\",{\"1\":{\"460\":1}}],[\"微信会为小程序准备好通用的运行环境\",{\"1\":{\"528\":1}}],[\"微信进行了特殊的处理\",{\"1\":{\"526\":1}}],[\"微信的页面栈有10层\",{\"1\":{\"522\":1}}],[\"微信小程序拥有web和application共同的特征\",{\"1\":{\"521\":1}}],[\"微信服务器返回openid\",{\"1\":{\"519\":1}}],[\"微信都会将用户的微信id映射出一个小程序openid\",{\"1\":{\"519\":1}}],[\"涉及到openid和code的概念\",{\"1\":{\"519\":1}}],[\"登录流程\",{\"0\":{\"519\":1}}],[\"离开小程序\",{\"1\":{\"518\":1}}],[\"终止任务\",{\"1\":{\"515\":2}}],[\"请记住\",{\"1\":{\"638\":1}}],[\"请求\",{\"1\":{\"573\":1}}],[\"请求在onload就加载\",{\"1\":{\"530\":1}}],[\"请求数据\",{\"1\":{\"515\":1}}],[\"请使用\",{\"1\":{\"47\":1,\"236\":1}}],[\"系统也会衡量\",{\"1\":{\"571\":1}}],[\"系统切换主题时触发\",{\"1\":{\"514\":1}}],[\"系统权限\",{\"1\":{\"512\":1}}],[\"打包优化\",{\"1\":{\"643\":1}}],[\"打包\",{\"1\":{\"636\":1}}],[\"打包结果\",{\"0\":{\"628\":1}}],[\"打包成一个或多个bundle文件\",{\"1\":{\"622\":1}}],[\"打包过程\",{\"0\":{\"622\":1,\"629\":1}}],[\"打包之后的代码包\",{\"1\":{\"528\":1}}],[\"打开到某个页面\",{\"1\":{\"522\":1}}],[\"打开小程序\",{\"1\":{\"518\":2}}],[\"打开的页面不存在时触发\",{\"1\":{\"514\":1}}],[\"打印的都是\",{\"1\":{\"306\":1}}],[\"打印错误信息\",{\"1\":{\"236\":1}}],[\"打印\",{\"1\":{\"66\":1,\"126\":8}}],[\"启动时间\",{\"1\":{\"573\":1}}],[\"启动\",{\"1\":{\"514\":1}}],[\"启动命令\",{\"0\":{\"378\":1}}],[\"小程序首次启动前\",{\"1\":{\"528\":1}}],[\"小程序启动运行有两种情况\",{\"1\":{\"527\":1}}],[\"小程序是基于双线程的\",{\"1\":{\"526\":1}}],[\"小程序在渲染层\",{\"1\":{\"526\":1}}],[\"小程序为电商类小程序\",{\"1\":{\"524\":1}}],[\"小程序将session存到storage里面\",{\"1\":{\"519\":1}}],[\"小程序销毁\",{\"1\":{\"518\":1}}],[\"小程序未销毁=>\",{\"1\":{\"518\":1}}],[\"小程序注册完成后\",{\"1\":{\"518\":1}}],[\"小程序与其的区别有如下\",{\"1\":{\"512\":1}}],[\"小程序\",{\"0\":{\"512\":1},\"2\":{\"532\":1}}],[\"小于或者等于\",{\"1\":{\"97\":1}}],[\"小于等于\",{\"1\":{\"97\":1}}],[\"小于\",{\"1\":{\"97\":1}}],[\"深层的监听也造成了性能的极大问题\",{\"1\":{\"509\":1}}],[\"深度遍历为每个属性添加getter和setter实现响应式\",{\"1\":{\"509\":1}}],[\"体积减少\",{\"1\":{\"506\":1}}],[\"核心库体积更小\",{\"1\":{\"503\":1}}],[\"核心算法\",{\"1\":{\"169\":1}}],[\"核心算法的一次重新实现\",{\"1\":{\"169\":1}}],[\"降低界面开发成本\",{\"1\":{\"502\":1}}],[\"降低系统的耦合度\",{\"1\":{\"407\":1}}],[\"现代风格\",{\"1\":{\"502\":1}}],[\"现在的函数组件也可以是有状态的组件\",{\"1\":{\"253\":1}}],[\"现在删除其中的所有元素\",{\"1\":{\"125\":1}}],[\"开启定时器\",{\"1\":{\"538\":1}}],[\"开启计时\",{\"1\":{\"535\":1}}],[\"开发者可以将这些manifest数据导出为文件\",{\"1\":{\"632\":1}}],[\"开发者将程序分解为功能离散的\",{\"1\":{\"625\":1}}],[\"开发环境不配置\",{\"1\":{\"585\":1}}],[\"开发环境秒启动\",{\"1\":{\"502\":1}}],[\"开发过程中\",{\"1\":{\"534\":1}}],[\"开始执行\",{\"1\":{\"638\":1}}],[\"开始支持\",{\"1\":{\"116\":1}}],[\"开始\",{\"1\":{\"87\":1,\"126\":1,\"621\":1,\"682\":1}}],[\"开始和结束标记之外\",{\"1\":{\"72\":1}}],[\"开始和停止解析二者之间的代码\",{\"1\":{\"71\":1}}],[\"开始输出这些空白\",{\"1\":{\"71\":1}}],[\"开始引入了命名参数作为现有位置参数的扩展\",{\"1\":{\"65\":1}}],[\"导入任何类型的模块\",{\"1\":{\"636\":1}}],[\"导出不确定的结果\",{\"1\":{\"615\":1}}],[\"导航守卫等\",{\"1\":{\"502\":1}}],[\"导致卡顿的情况\",{\"1\":{\"168\":1}}],[\"补充声明式模板的灵活性\",{\"1\":{\"501\":1}}],[\"响应后执行操作\",{\"1\":{\"501\":1}}],[\"响应式数据驱动视图\",{\"1\":{\"501\":1}}],[\"响应式系统基于proxy\",{\"1\":{\"503\":1}}],[\"响应式系统\",{\"0\":{\"509\":1},\"1\":{\"464\":1}}],[\"扩展了vue的应用场景\",{\"1\":{\"503\":1}}],[\"扩展html的能力\",{\"1\":{\"501\":1}}],[\"扩展性强\",{\"1\":{\"373\":1}}],[\"显示页面\",{\"1\":{\"518\":1}}],[\"显示隐藏\",{\"1\":{\"501\":1}}],[\"显然v\",{\"1\":{\"442\":1}}],[\"显然他是语法参数\",{\"1\":{\"44\":1}}],[\"框架会自动处理dom更新\",{\"1\":{\"501\":1}}],[\"​​自定义渲染器\",{\"1\":{\"503\":1}}],[\"​​更小的体积与更快的运行​​\",{\"1\":{\"503\":1}}],[\"​​typescript原生支持​​\",{\"1\":{\"503\":1}}],[\"​​模板引用\",{\"1\":{\"501\":1}}],[\"​​侦听器\",{\"1\":{\"501\":1}}],[\"​​计算属性\",{\"1\":{\"501\":1}}],[\"​​\",{\"1\":{\"501\":4,\"503\":2}}],[\"​​指令\",{\"1\":{\"501\":1}}],[\"​​==事件缓存\",{\"1\":{\"501\":1}}],[\"​​fragments​​\",{\"1\":{\"501\":1}}],[\"​注意点​​\",{\"1\":{\"501\":1}}],[\"逻辑层\",{\"1\":{\"525\":1}}],[\"逻辑层允许在jscore\",{\"1\":{\"525\":1}}],[\"逻辑层和渲染层分开\",{\"1\":{\"512\":1}}],[\"逻辑抽取更方便\",{\"1\":{\"503\":1}}],[\"逻辑和样式封装为独立单元\",{\"1\":{\"501\":1}}],[\"逻辑复杂的组件难以开发与维护\",{\"1\":{\"253\":1}}],[\"弹框显示内容等\",{\"1\":{\"495\":1}}],[\"视频的渲染时间\",{\"1\":{\"569\":1}}],[\"视频等媒体资源\",{\"1\":{\"550\":1}}],[\"视图层使用webview进行渲染\",{\"1\":{\"525\":1}}],[\"视图→数据\",{\"1\":{\"501\":1}}],[\"视图需要等待队列中所有的数据变化完成后\",{\"1\":{\"490\":1}}],[\"视乎哪个首先出现\",{\"1\":{\"74\":1}}],[\"叠加型\",{\"1\":{\"483\":1}}],[\"队列型\",{\"1\":{\"483\":1}}],[\"遍历子组件的配置项\",{\"1\":{\"482\":1}}],[\"遍历父组件的配置项\",{\"1\":{\"482\":1}}],[\"遍历下子vnode\",{\"1\":{\"269\":1}}],[\"面向对象程序设计语言中的类\",{\"1\":{\"477\":1}}],[\"激活\",{\"1\":{\"472\":1}}],[\"验证清理\",{\"1\":{\"471\":1}}],[\"验证props\",{\"1\":{\"465\":1}}],[\"销毁\",{\"1\":{\"470\":1}}],[\"断开websocket的链接\",{\"1\":{\"470\":1}}],[\"定位并加载所需的代码块\",{\"1\":{\"632\":1}}],[\"定时器\",{\"1\":{\"470\":1}}],[\"定义了特定语法产生错误的条件\",{\"1\":{\"668\":1}}],[\"定义updatecomponent更新函数\",{\"1\":{\"487\":1}}],[\"定义updatecomponent渲染页面视图的方法\",{\"1\":{\"486\":1}}],[\"定义$on\",{\"1\":{\"487\":1}}],[\"定义$set\",{\"1\":{\"487\":1}}],[\"定义一个mixin对象\",{\"1\":{\"479\":1}}],[\"定义好组件时\",{\"1\":{\"417\":1}}],[\"定义路由的时候还有添加菜单显示标题\",{\"1\":{\"392\":2}}],[\"定义的源码如下\",{\"1\":{\"302\":1}}],[\"定义的常量可能不区分大小写且可以包含保留字或非常规名称的常量\",{\"1\":{\"47\":1}}],[\"定义阶段使用箭头函数绑定\",{\"0\":{\"249\":1},\"1\":{\"245\":1}}],[\"定义\",{\"0\":{\"339\":1,\"436\":1},\"1\":{\"225\":1,\"482\":1,\"487\":1,\"657\":1,\"682\":1,\"683\":1,\"685\":1}}],[\"定义包含可能值的封闭集合类型\",{\"1\":{\"130\":1}}],[\"定义类\",{\"1\":{\"129\":1}}],[\"定义时\",{\"1\":{\"127\":1}}],[\"定义属性\",{\"1\":{\"109\":1}}],[\"定义两个接口\",{\"1\":{\"109\":1}}],[\"统计日志\",{\"1\":{\"469\":1}}],[\"统计上报等\",{\"1\":{\"216\":1}}],[\"干预模板编译\",{\"1\":{\"466\":1}}],[\"便于快速查找\",{\"1\":{\"460\":1}}],[\"便于恢复\",{\"1\":{\"169\":1}}],[\"建立一个\",{\"1\":{\"460\":1}}],[\"建议为此使用一个常量\",{\"1\":{\"646\":1}}],[\"建议这个置为false\",{\"1\":{\"585\":1}}],[\"建议使用\",{\"1\":{\"585\":1}}],[\"建议使用下方的写法\",{\"1\":{\"585\":1}}],[\"建议使用函数式创建的方式\",{\"1\":{\"211\":1}}],[\"建议将页面进行更小的颗粒化\",{\"1\":{\"282\":1}}],[\"建议将数据进行一个全局资源管理\",{\"1\":{\"158\":1}}],[\"建议更改为属性声明\",{\"1\":{\"89\":1}}],[\"尾尾匹配\",{\"1\":{\"460\":1}}],[\"头头匹配\",{\"1\":{\"460\":1}}],[\"占用加载资源的时间更短\",{\"1\":{\"586\":1}}],[\"占用内存小\",{\"1\":{\"372\":1}}],[\"占位符节点是否没有错误\",{\"1\":{\"460\":1}}],[\"占位符节点的工厂函数是否一致\",{\"1\":{\"460\":1}}],[\"算法步骤中提到或等同于以下内容\",{\"1\":{\"660\":1}}],[\"算法\",{\"0\":{\"655\":1}}],[\"算法的核心部分\",{\"1\":{\"460\":1}}],[\"算法的完美配合\",{\"1\":{\"277\":1}}],[\"算法进行新旧节点对比时\",{\"1\":{\"460\":1}}],[\"曾经拥有key的element如果不再出现的话\",{\"1\":{\"458\":1}}],[\"缓冲区是存在dom树中\",{\"1\":{\"610\":1}}],[\"缓冲区域\",{\"1\":{\"610\":1}}],[\"缓冲区构造器属性globalthis\",{\"1\":{\"16\":1}}],[\"缓存优化\",{\"1\":{\"632\":1}}],[\"缓存管理\",{\"1\":{\"631\":1}}],[\"缓存时间短\",{\"1\":{\"561\":1}}],[\"缓存时间长\",{\"1\":{\"561\":1}}],[\"缓存资源来减少阻塞和服务器请求\",{\"1\":{\"546\":1}}],[\"缓存当前页面\",{\"1\":{\"522\":1}}],[\"缓存高频事件处理函数\",{\"1\":{\"501\":1}}],[\"缓存的组件被激活时\",{\"1\":{\"455\":1}}],[\"缓存\",{\"1\":{\"454\":2},\"2\":{\"564\":1,\"614\":1}}],[\"商详页\",{\"1\":{\"454\":2}}],[\"假如出现访问\",{\"1\":{\"585\":1}}],[\"假如没有被定义为\",{\"1\":{\"80\":1}}],[\"假设流程如下\",{\"1\":{\"450\":1}}],[\"匹配具有绝对路径\",{\"1\":{\"638\":1}}],[\"匹配任何以\",{\"1\":{\"638\":1}}],[\"匹配要压缩的文件\",{\"1\":{\"585\":1}}],[\"匹配所有\",{\"1\":{\"450\":1}}],[\"匹配分支\",{\"1\":{\"54\":1}}],[\"切换过程中合适的销毁和重新组件内部的事件监听和子组件\",{\"1\":{\"447\":1}}],[\"切换到线上某个分支\",{\"1\":{\"380\":1}}],[\"切换到本地某个分支\",{\"1\":{\"380\":1}}],[\"共同点\",{\"0\":{\"446\":1}}],[\"预加载\",{\"2\":{\"603\":1}}],[\"预加载关键资源\",{\"1\":{\"596\":1}}],[\"预渲染\",{\"1\":{\"598\":1},\"2\":{\"603\":1}}],[\"预渲染来优化用户体验\",{\"1\":{\"595\":1}}],[\"预处理标志\",{\"1\":{\"443\":1}}],[\"预定义变量\",{\"0\":{\"141\":1},\"1\":{\"141\":1,\"147\":1}}],[\"预定义常量\",{\"0\":{\"48\":1}}],[\"虚拟表格\",{\"1\":{\"604\":1}}],[\"虚拟列表是按需显示的一种实现\",{\"1\":{\"609\":1}}],[\"虚拟列表\",{\"1\":{\"604\":1}}],[\"虚拟\",{\"1\":{\"460\":1}}],[\"虚拟节点\",{\"1\":{\"427\":1}}],[\"虚拟dom与性能优化\",{\"1\":{\"501\":1}}],[\"虚拟dom重渲染\",{\"1\":{\"468\":1}}],[\"虚拟dom表现为一个object对象\",{\"1\":{\"398\":1}}],[\"虚拟dom是对一层真实dom的抽象\",{\"1\":{\"398\":1}}],[\"虚拟dom转化成真实dom整体流程如下所示\",{\"1\":{\"270\":1}}],[\"虚拟dom对象\",{\"1\":{\"269\":1}}],[\"虚拟dom对象的节点与真实dom的属性一一照应\",{\"1\":{\"162\":1}}],[\"虚拟dom会通过reactdom\",{\"1\":{\"269\":1}}],[\"虚拟dom\",{\"0\":{\"398\":1},\"1\":{\"169\":1,\"262\":1}}],[\"虚拟dom不会立即操作dom\",{\"1\":{\"163\":1,\"399\":1}}],[\"虚拟dom不会进行排版与重绘操作\",{\"1\":{\"163\":1}}],[\"虚拟dom增删改+真实dom差异增删改+排版与重绘\",{\"1\":{\"163\":1}}],[\"虚拟dom的总损耗是\",{\"1\":{\"163\":1}}],[\"钩子函数的参数\",{\"1\":{\"427\":1}}],[\"钩子可用于类型化和非类型化属性\",{\"1\":{\"90\":1}}],[\"称之为指令\",{\"1\":{\"426\":1}}],[\"称为运行时语义\",{\"1\":{\"657\":1}}],[\"称为el\",{\"1\":{\"423\":1}}],[\"称为\",{\"1\":{\"77\":2}}],[\"订阅者watcher就会调用patch给真实dom打补丁\",{\"1\":{\"423\":1}}],[\"订阅者就会调用pacth给真实dom打补丁\",{\"1\":{\"422\":1}}],[\"老节点的end索引\",{\"1\":{\"422\":1}}],[\"老节点的start索引+1\",{\"1\":{\"422\":1}}],[\"老节点的start和新节点的end相同时\",{\"1\":{\"422\":2}}],[\"老牌的版本控制系统\",{\"1\":{\"370\":1}}],[\"退出循环\",{\"1\":{\"421\":1}}],[\"采用一些压缩方案\",{\"1\":{\"583\":1}}],[\"采用函数返回一个全新的data形式\",{\"1\":{\"417\":1}}],[\"采用python语言实现\",{\"1\":{\"373\":1}}],[\"决定了是否阻止前端代码获取跨域请求的响应\",{\"1\":{\"413\":1}}],[\"端口相同\",{\"1\":{\"412\":1}}],[\"主线程都会被视为阻塞\",{\"1\":{\"575\":1}}],[\"主线程上运行超过\",{\"1\":{\"575\":1}}],[\"主动销毁后再次打开的情况\",{\"1\":{\"527\":1}}],[\"主机相同\",{\"1\":{\"412\":1}}],[\"主要通过mountcomponent方法\",{\"1\":{\"487\":1}}],[\"主要的错误来源包括\",{\"1\":{\"431\":1}}],[\"主要的功能如下\",{\"1\":{\"357\":1}}],[\"主要做了如下判断\",{\"1\":{\"422\":2}}],[\"主要做了以下的操作\",{\"1\":{\"169\":1}}],[\"主要分成了四个部分\",{\"1\":{\"375\":1}}],[\"主要是因为不写key是将所有的文本内容替换一下\",{\"1\":{\"273\":1}}],[\"主要表示当前fiber代表的组件类型如functioncomponent\",{\"1\":{\"169\":1}}],[\"主要思想是组件不会改变接收的数据\",{\"1\":{\"159\":1}}],[\"场景\",{\"0\":{\"409\":1,\"428\":1,\"454\":1,\"491\":1,\"495\":1}}],[\"插槽处理\",{\"1\":{\"443\":1}}],[\"插件是一个具有\",{\"1\":{\"646\":1}}],[\"插件是功能模块\",{\"1\":{\"409\":1}}],[\"插件\",{\"0\":{\"642\":1,\"643\":1},\"1\":{\"636\":1}}],[\"插件监听\",{\"1\":{\"622\":1}}],[\"插件使用vue\",{\"1\":{\"408\":1}}],[\"插件暴露了一个install函数\",{\"1\":{\"408\":1}}],[\"插件用来给vue添加全局功能\",{\"1\":{\"407\":1}}],[\"插入的新的vnode队列\",{\"1\":{\"460\":1}}],[\"插入的节点\",{\"1\":{\"325\":1}}],[\"插入\",{\"1\":{\"232\":1}}],[\"调试及测试变得轻而易举\",{\"1\":{\"625\":1}}],[\"调试虚拟dom结构\",{\"1\":{\"466\":1}}],[\"调试\",{\"1\":{\"464\":1}}],[\"调试方便\",{\"1\":{\"407\":1}}],[\"调用不仅会造成数据关系的混乱\",{\"1\":{\"534\":1}}],[\"调用wx\",{\"1\":{\"519\":1,\"520\":1}}],[\"调用$mount方法进行页面的挂载\",{\"1\":{\"487\":1}}],[\"调用beforecreate钩子\",{\"1\":{\"486\":1}}],[\"调用patch函数完成新旧虚拟dom的差异计算\",{\"1\":{\"468\":1}}],[\"调用子组件方法\",{\"1\":{\"467\":1}}],[\"调用vm\",{\"1\":{\"465\":1}}],[\"调用varscopeddeclarations语义收集变量声明语句vardeclarations\",{\"1\":{\"22\":1}}],[\"调用created钩子\",{\"1\":{\"486\":1}}],[\"调用createelem创建一个新节点\",{\"1\":{\"423\":1}}],[\"调用createelm创建一个新的dom节点放到newstartidx的位置\",{\"1\":{\"422\":1}}],[\"调用createperiterationenvironment语义\",{\"1\":{\"37\":1}}],[\"调用updatechildren\",{\"1\":{\"422\":1}}],[\"调用其方法或访问属性\",{\"1\":{\"386\":1}}],[\"调用this\",{\"1\":{\"317\":1}}],[\"调用则是执行函数即可\",{\"1\":{\"196\":1}}],[\"调用方式\",{\"0\":{\"196\":1},\"1\":{\"192\":1}}],[\"调用`createelement`的第一个参数\",{\"1\":{\"169\":1}}],[\"调用requestidlecallback\",{\"1\":{\"169\":1}}],[\"调用\",{\"1\":{\"66\":3,\"486\":1,\"646\":1}}],[\"调用栈\",{\"1\":{\"37\":1}}],[\"调用栈上有几个ecmascript代码执行上下文\",{\"1\":{\"26\":1}}],[\"调用forbodyevaluation\",{\"1\":{\"37\":1}}],[\"调用lexicallyscopeddeclarations收集词法声明declarations\",{\"1\":{\"35\":1}}],[\"调用lexicallyscopeddeclarations\",{\"1\":{\"22\":1}}],[\"调用lexicallydeclarednames\",{\"1\":{\"22\":1}}],[\"替代方案是etag\",{\"1\":{\"558\":1}}],[\"替代选项式api\",{\"1\":{\"503\":1}}],[\"替代语法同样可以用在\",{\"1\":{\"53\":1}}],[\"替代语法的基本形式是把左花括号\",{\"1\":{\"53\":1}}],[\"替代语法\",{\"0\":{\"53\":1}}],[\"替换型\",{\"1\":{\"483\":1}}],[\"替换不同的组件快速完成需求\",{\"1\":{\"407\":1}}],[\"九成的情况是\",{\"1\":{\"404\":1}}],[\"筛选出有权限的路由\",{\"1\":{\"392\":1}}],[\"菜单和路由耦合在一起\",{\"1\":{\"392\":2}}],[\"菜单和路由都有后端返回\",{\"1\":{\"392\":1}}],[\"菜单信息写死在前端\",{\"1\":{\"392\":2}}],[\"菜单与路由做一一对应\",{\"1\":{\"392\":1}}],[\"菜单与路由分离\",{\"1\":{\"392\":1}}],[\"菜单由后端返回\",{\"1\":{\"392\":1}}],[\"菜单权限\",{\"1\":{\"392\":1}}],[\"权限控制\",{\"1\":{\"392\":1}}],[\"鼠标按键修饰符\",{\"1\":{\"389\":1}}],[\"转义序列不能使用\",{\"1\":{\"702\":1}}],[\"转换为\",{\"1\":{\"635\":1}}],[\"转换器\",{\"0\":{\"635\":1}}],[\"转换\",{\"1\":{\"629\":1}}],[\"转换代码\",{\"1\":{\"622\":2}}],[\"转为render语法字符串\",{\"1\":{\"486\":1}}],[\"转为数值类型\",{\"1\":{\"389\":1}}],[\"转化成createelement这种形式\",{\"1\":{\"299\":1}}],[\"转化成如下\",{\"1\":{\"209\":1}}],[\"五种修饰符\",{\"1\":{\"389\":1}}],[\"透传属性和事件到\",{\"1\":{\"386\":1}}],[\"透传不相关\",{\"1\":{\"215\":1}}],[\"需通过vue\",{\"1\":{\"501\":1}}],[\"需手动通过\",{\"1\":{\"386\":1}}],[\"需要注意与当前项目的webpack版本和配置相匹配\",{\"1\":{\"632\":1}}],[\"需要各种loader\",{\"1\":{\"627\":1}}],[\"需要\",{\"1\":{\"623\":1}}],[\"需要根据特定情况使用不同的配置文件\",{\"1\":{\"617\":1}}],[\"需要压缩的最小值\",{\"1\":{\"585\":1}}],[\"需要将对应的处理状态呈现给用户\",{\"1\":{\"526\":1}}],[\"需要自身后端调用微信服务器获取用户信息\",{\"1\":{\"519\":1}}],[\"需要放在装饰器中\",{\"1\":{\"357\":1}}],[\"需要创建并插入\",{\"1\":{\"460\":1}}],[\"需要创建newstrtidx和newendidx之间的所有节点\",{\"1\":{\"421\":1}}],[\"需要创建子类去实现\",{\"1\":{\"343\":1}}],[\"需要创建环境记录器\",{\"1\":{\"33\":1}}],[\"需要使用resourcehintwebpackplugin插件\",{\"1\":{\"597\":1}}],[\"需要使用内联的方式进行样式的编写\",{\"1\":{\"225\":1}}],[\"需要使用括号括起来\",{\"1\":{\"109\":1}}],[\"需要从缓存中获取数据\",{\"1\":{\"216\":1}}],[\"需要更新10个dom节点\",{\"1\":{\"163\":1,\"399\":1}}],[\"需要在子类的构造函数中调用\",{\"1\":{\"80\":1}}],[\"需要在每个语句后用分号结束指令\",{\"1\":{\"73\":1}}],[\"需要先解析脚本\",{\"1\":{\"20\":1}}],[\"仍然支持使用\",{\"1\":{\"636\":1}}],[\"仍然可以在内部修改\",{\"1\":{\"88\":1}}],[\"仍会存储父组件传递的属性\",{\"1\":{\"386\":1}}],[\"禁用自动绑定到根元素\",{\"1\":{\"386\":1}}],[\"跨域资源共享\",{\"1\":{\"413\":1}}],[\"跨域是浏览器基于同源策略的安全手段\",{\"1\":{\"412\":1}}],[\"跨域问题\",{\"0\":{\"412\":1}}],[\"跨级组件通信\",{\"1\":{\"386\":1}}],[\"跨平台\",{\"1\":{\"164\":1}}],[\"配置中对一个rules指定多个\",{\"1\":{\"638\":1}}],[\"配置方式\",{\"0\":{\"638\":1,\"644\":1},\"1\":{\"637\":1}}],[\"配置的在线工具\",{\"1\":{\"616\":1}}],[\"配置的对象\",{\"1\":{\"615\":1}}],[\"配置文件\",{\"0\":{\"615\":1},\"1\":{\"618\":1,\"622\":1,\"645\":1}}],[\"配置webpack\",{\"1\":{\"599\":1}}],[\"配置http\",{\"1\":{\"596\":1}}],[\"配置到打包工具中\",{\"1\":{\"584\":1}}],[\"配置流程\",{\"0\":{\"584\":1}}],[\"配置\",{\"1\":{\"482\":1,\"639\":1}}],[\"配置排除\",{\"1\":{\"386\":1}}],[\"配置将任何页面重定向到index\",{\"1\":{\"383\":1}}],[\"配置命令\",{\"0\":{\"377\":1}}],[\"部署到服务器后404\",{\"0\":{\"383\":1}}],[\"部分用\",{\"1\":{\"56\":1}}],[\"部分允许设定\",{\"1\":{\"55\":1}}],[\"依此类推\",{\"1\":{\"636\":1}}],[\"依赖解析\",{\"1\":{\"631\":1}}],[\"依赖关系\",{\"0\":{\"626\":1}}],[\"依赖图\",{\"1\":{\"621\":1}}],[\"依赖收集与触发更新\",{\"1\":{\"501\":1}}],[\"依赖新dom的操作\",{\"1\":{\"469\":1}}],[\"依赖管理\",{\"1\":{\"379\":1}}],[\"依然需要使用内联样式的方式\",{\"1\":{\"223\":1}}],[\"拉取远程仓库的分支与本地的某个分支合并\",{\"1\":{\"379\":1}}],[\"拉取远程仓库的分支与本地当前分支\",{\"1\":{\"379\":1}}],[\"查找\",{\"1\":{\"573\":1}}],[\"查看插件页面\",{\"1\":{\"642\":1}}],[\"查看本地和远程所有的分支\",{\"1\":{\"380\":1}}],[\"查看本地所有分支\",{\"1\":{\"380\":1}}],[\"查看远程所有的分支\",{\"1\":{\"380\":1}}],[\"查看当前分支状态\",{\"1\":{\"379\":1}}],[\"查看当前代码add后\",{\"1\":{\"379\":1}}],[\"查看现在commit提交后\",{\"1\":{\"379\":1}}],[\"查询\",{\"1\":{\"202\":1}}],[\"日常基本操作\",{\"0\":{\"379\":1}}],[\"日志记录\",{\"1\":{\"216\":1,\"471\":1}}],[\"下\",{\"1\":{\"702\":1}}],[\"下标后缀\",{\"1\":{\"683\":1}}],[\"下次访问相同网站的时候\",{\"1\":{\"560\":1}}],[\"下次请求时\",{\"1\":{\"519\":1}}],[\"下载的工具函数\",{\"1\":{\"615\":1}}],[\"下载打包工具匹配的gzip插件\",{\"1\":{\"584\":1}}],[\"下载小程序代码包\",{\"1\":{\"528\":1}}],[\"下载一个项目和他的整个代码历史\",{\"1\":{\"378\":1}}],[\"下拉选\",{\"1\":{\"495\":1}}],[\"下面给出一个按钮入场和出场的示例\",{\"1\":{\"324\":1}}],[\"下面再来看看在前面插入数据时\",{\"1\":{\"273\":1}}],[\"下面这些情况无法捕获到异常\",{\"1\":{\"236\":1}}],[\"下面主要看看styled\",{\"1\":{\"224\":1}}],[\"下面就可以通过高价组件来进行改写\",{\"1\":{\"216\":1}}],[\"下面是与上面等价的语句\",{\"1\":{\"98\":1}}],[\"下面是一个包括\",{\"1\":{\"53\":1}}],[\"找到项目的起始点\",{\"1\":{\"622\":1}}],[\"找到入口文件\",{\"1\":{\"622\":1}}],[\"找到父级条件节点\",{\"1\":{\"450\":1}}],[\"找到对应的真实dom\",{\"1\":{\"423\":1}}],[\"找到暂存区域的文件\",{\"1\":{\"375\":1}}],[\"找到<div\",{\"1\":{\"162\":1}}],[\"暂存区是一个文件\",{\"1\":{\"375\":1}}],[\"暂存区\",{\"1\":{\"375\":1}}],[\"暂停视频播放\",{\"1\":{\"473\":1}}],[\"暂停组件状态\",{\"1\":{\"473\":1}}],[\"暂停\",{\"1\":{\"10\":1}}],[\"已弃用首次有效绘制时间\",{\"1\":{\"576\":1}}],[\"已经打开过小程序\",{\"1\":{\"527\":1}}],[\"已提交\",{\"1\":{\"375\":1}}],[\"已暂存\",{\"1\":{\"375\":1}}],[\"已修改\",{\"1\":{\"375\":1}}],[\"状态\",{\"1\":{\"575\":1}}],[\"状态情况如下\",{\"1\":{\"375\":1}}],[\"状态管理\",{\"0\":{\"194\":1},\"1\":{\"192\":1,\"502\":1}}],[\"哈希\",{\"1\":{\"375\":1}}],[\"散列\",{\"1\":{\"375\":1}}],[\"项目中每一个模块\",{\"1\":{\"625\":1}}],[\"项目\",{\"0\":{\"618\":1}}],[\"项目目录会隐藏一个==\",{\"1\":{\"375\":1}}],[\"项目开始\",{\"1\":{\"374\":1}}],[\"既可以让别人参与你的开源项目\",{\"1\":{\"374\":1}}],[\"仓库clone一份到自己的电脑上\",{\"1\":{\"374\":1}}],[\"别的机器可以clone这个原始版本库\",{\"1\":{\"374\":1}}],[\"您可以记录源文件和文档的历史记录\",{\"1\":{\"370\":1}}],[\"适合传统项目\",{\"1\":{\"502\":1}}],[\"适合需要\",{\"1\":{\"501\":1}}],[\"适合需要缓存的复杂逻辑\",{\"1\":{\"501\":1}}],[\"适合多人团队协作开发\",{\"1\":{\"368\":1,\"371\":1}}],[\"适合管理文本\",{\"1\":{\"367\":1}}],[\"集中式版本控制系统\",{\"1\":{\"366\":1}}],[\"集成第三方\",{\"1\":{\"294\":1}}],[\"历史记录功能使我们不怕改错代码了\",{\"1\":{\"365\":1}}],[\"借此能在软件开发的过程中\",{\"1\":{\"365\":1}}],[\"版本可以通过\",{\"1\":{\"637\":1}}],[\"版本可能废除\",{\"1\":{\"186\":1}}],[\"版本等级改为\",{\"1\":{\"365\":1}}],[\"版本控制工具\",{\"2\":{\"381\":1}}],[\"版本控制系统根据类别可以分成\",{\"1\":{\"366\":1}}],[\"版本控制系统就像一台时光机器\",{\"1\":{\"365\":1}}],[\"版本控制能提供项目的设计者\",{\"1\":{\"365\":1}}],[\"版本控制也是一种软件工程技巧\",{\"1\":{\"365\":1}}],[\"版本控制\",{\"1\":{\"365\":1}}],[\"版本管理\",{\"0\":{\"365\":1}}],[\"触发生命周期事件\",{\"1\":{\"622\":1}}],[\"触发onunload\",{\"1\":{\"518\":1}}],[\"触发onhdie\",{\"1\":{\"518\":1}}],[\"触发onhide\",{\"1\":{\"518\":1}}],[\"触发onload\",{\"1\":{\"518\":1}}],[\"触发onlaunch\",{\"1\":{\"518\":1}}],[\"触发onshow\",{\"1\":{\"518\":3}}],[\"触发beforecreate钩子\",{\"1\":{\"486\":2}}],[\"触发\",{\"1\":{\"472\":1}}],[\"触发副作用\",{\"1\":{\"469\":1}}],[\"触发事件\",{\"1\":{\"362\":1}}],[\"触发时机\",{\"0\":{\"298\":1}}],[\"监听页面显示\",{\"1\":{\"515\":1}}],[\"监听页面加载\",{\"1\":{\"515\":1}}],[\"监听删除属性\",{\"1\":{\"509\":1}}],[\"监听数组的索引和length属性\",{\"1\":{\"509\":1}}],[\"监听数据变化并执行副作用\",{\"1\":{\"501\":1}}],[\"监听动态属性的添加\",{\"1\":{\"509\":1}}],[\"监听组件数据\",{\"1\":{\"486\":1}}],[\"监听事件\",{\"1\":{\"362\":1}}],[\"监听器\",{\"1\":{\"361\":1}}],[\"求职的结果会被当作函数\",{\"1\":{\"353\":1}}],[\"求值为\",{\"1\":{\"98\":1}}],[\"求值for块中的语句为result\",{\"1\":{\"37\":1}}],[\"装饰器工厂\",{\"1\":{\"352\":1}}],[\"装饰器\",{\"0\":{\"351\":1}}],[\"剩余参数\",{\"0\":{\"348\":1}}],[\"剩余链条会直接跳过\",{\"1\":{\"85\":1}}],[\"混合数字枚举和字符串枚举\",{\"1\":{\"344\":1}}],[\"混合html\",{\"1\":{\"72\":1}}],[\"属于基本多语言平面的码位编码为字符串的单个代码单元元素\",{\"1\":{\"698\":1}}],[\"属于类本身\",{\"1\":{\"342\":1}}],[\"属性传入插件\",{\"1\":{\"645\":1}}],[\"属性绑定\",{\"1\":{\"501\":1}}],[\"属性​​的对象\",{\"1\":{\"386\":1}}],[\"属性继承与事件转发\",{\"1\":{\"386\":1}}],[\"属性获取子组件实例\",{\"1\":{\"386\":1}}],[\"属性中访问\",{\"1\":{\"291\":1}}],[\"属性中的变量可以初始化\",{\"1\":{\"86\":1}}],[\"属性就是对应的元素\",{\"1\":{\"289\":2}}],[\"属性设置预处理器\",{\"1\":{\"219\":1}}],[\"属性决定编写的样式是否局部有效\",{\"1\":{\"219\":1}}],[\"属性给被包裹的组件\",{\"1\":{\"215\":1}}],[\"属性不兼容\",{\"1\":{\"90\":1}}],[\"属性挂钩与\",{\"1\":{\"90\":1}}],[\"属性挂钩是在php\",{\"1\":{\"90\":1}}],[\"属性钩子是拦截和覆盖属性的读写行为的一种方法\",{\"1\":{\"90\":1}}],[\"属性钩子\",{\"0\":{\"90\":1}}],[\"属性定义可以包含类型声明\",{\"1\":{\"87\":1}}],[\"属性之外都是可选的\",{\"1\":{\"86\":1}}],[\"属性开头至少使用一个修饰符\",{\"1\":{\"86\":1}}],[\"属性和方法\",{\"0\":{\"79\":1}}],[\"属性\",{\"0\":{\"86\":1},\"1\":{\"77\":1,\"215\":1,\"294\":1,\"352\":1,\"398\":1,\"501\":1}}],[\"外部可以自由访问\",{\"1\":{\"341\":1}}],[\"虽然本质上是构造函数\",{\"1\":{\"338\":1}}],[\"虽然onclick看似绑定到dom元素上\",{\"1\":{\"240\":1}}],[\"挑选一组属性并组成一个新的类型\",{\"1\":{\"336\":1}}],[\"映射类型\",{\"0\":{\"336\":1}}],[\"映射是一种把\",{\"1\":{\"124\":1}}],[\"报错\",{\"1\":{\"335\":1}}],[\"报错的原因是\",{\"1\":{\"316\":1}}],[\"获得更多的系统权限\",{\"1\":{\"512\":1}}],[\"获得属性\",{\"1\":{\"335\":1}}],[\"获取插件列表和对应文档\",{\"1\":{\"642\":1}}],[\"获取当前的页面栈\",{\"1\":{\"522\":1}}],[\"获取到用户的code判断用户是否授权读取用户信息\",{\"1\":{\"519\":1}}],[\"获取页面元素\",{\"1\":{\"515\":1}}],[\"获取更新后的dom\",{\"1\":{\"490\":1}}],[\"获取真实dom信息\",{\"1\":{\"467\":1}}],[\"获取缓存后组件的数据\",{\"0\":{\"455\":1}}],[\"获取用户的权限信息\",{\"1\":{\"392\":1}}],[\"获取某个属性的类型\",{\"1\":{\"335\":1}}],[\"获取类型所有键\",{\"1\":{\"335\":1}}],[\"获取ref属性也是通过hook对象的current属性\",{\"1\":{\"293\":1}}],[\"获取ref对象只需要通过先前存储的对象即可\",{\"1\":{\"292\":1}}],[\"获取渲染的值\",{\"0\":{\"197\":1},\"1\":{\"192\":1}}],[\"索引访问\",{\"1\":{\"335\":1}}],[\"索引查询\",{\"1\":{\"335\":1}}],[\"交叉类型\",{\"0\":{\"332\":1}}],[\"交集类型\",{\"1\":{\"109\":1}}],[\"他是\",{\"1\":{\"642\":1}}],[\"他是管道式的\",{\"1\":{\"434\":1}}],[\"他的简短含义是\",{\"1\":{\"660\":1}}],[\"他的生态体系完善覆盖全开发流程\",{\"0\":{\"502\":1}}],[\"他的核心特性与技术原理如下\",{\"0\":{\"501\":1}}],[\"他们会写入你的每一次提交中\",{\"1\":{\"377\":1}}],[\"他们的版本库其实都是一样的\",{\"1\":{\"374\":1}}],[\"他在不同的命名空间中的含义互不相干\",{\"1\":{\"355\":1}}],[\"他还有以下类型\",{\"1\":{\"330\":1}}],[\"他只提供抽象定义\",{\"1\":{\"42\":1}}],[\"元组以及其他需要手写的类型\",{\"1\":{\"334\":1}}],[\"元组合并了不同类型的对象\",{\"1\":{\"329\":1}}],[\"元组\",{\"1\":{\"329\":1}}],[\"元素都需要等待主线程上的进行中任务完成\",{\"1\":{\"571\":1}}],[\"元素都会被替换\",{\"1\":{\"269\":1}}],[\"元素选择器\",{\"1\":{\"465\":1}}],[\"元素挂载后处理v\",{\"1\":{\"449\":1}}],[\"元素对象\",{\"1\":{\"289\":1}}],[\"元素\",{\"1\":{\"288\":1,\"460\":1}}],[\"元素有无key属性意义并不大\",{\"1\":{\"273\":1}}],[\"元素一个onclick属性\",{\"1\":{\"246\":1}}],[\"元素触发事件\",{\"1\":{\"241\":1}}],[\"元素储存了表达式产生的任意错误信息\",{\"1\":{\"100\":1}}],[\"写代码时使用一些以后才指定的类型\",{\"1\":{\"329\":1}}],[\"写法上都需要使用驼峰标识\",{\"1\":{\"221\":1}}],[\"泛型通过<>的形式进行表述\",{\"1\":{\"350\":1}}],[\"泛型\",{\"0\":{\"350\":1}}],[\"泛型约束\",{\"1\":{\"335\":1}}],[\"泛型编程\",{\"1\":{\"329\":1}}],[\"泛型或类型约束来实现\",{\"1\":{\"109\":1}}],[\"取消上一次的执行\",{\"1\":{\"534\":1}}],[\"取消执行\",{\"1\":{\"534\":1}}],[\"取消vuex的大约\",{\"1\":{\"470\":1}}],[\"取消异步请求\",{\"1\":{\"470\":1}}],[\"取消合并\",{\"1\":{\"380\":1}}],[\"取消了组件的data和methods属性\",{\"1\":{\"359\":1}}],[\"取而代之的是key属性\",{\"1\":{\"324\":1}}],[\"取最后一次的执行结果\",{\"1\":{\"306\":1}}],[\"旧式八进制转义\",{\"1\":{\"701\":1,\"702\":1}}],[\"旧尾和新头匹配\",{\"1\":{\"460\":1}}],[\"旧头和新尾匹配\",{\"1\":{\"460\":1}}],[\"旧的子虚拟节点数组\",{\"1\":{\"460\":1}}],[\"旧的生命周期流程图如下\",{\"1\":{\"186\":1}}],[\"旧节点没有\",{\"1\":{\"422\":1}}],[\"旧组件再移除\",{\"1\":{\"324\":1}}],[\"移除了一些不常用的api\",{\"1\":{\"508\":1}}],[\"移除两个class\",{\"1\":{\"323\":1}}],[\"移动端\",{\"1\":{\"502\":1}}],[\"移动节点\",{\"1\":{\"460\":1}}],[\"移动到开头\",{\"1\":{\"460\":1}}],[\"移动到末尾\",{\"1\":{\"460\":1}}],[\"移动两个指针向前\",{\"1\":{\"460\":1}}],[\"移动\",{\"1\":{\"232\":1}}],[\"没传入\",{\"1\":{\"317\":2}}],[\"没有必要不停地调用去请求服务端接口\",{\"1\":{\"539\":1}}],[\"没有数据的模块可以进行骨架屏的占位\",{\"1\":{\"530\":1}}],[\"没有旧节点\",{\"1\":{\"422\":1}}],[\"没有新节点\",{\"1\":{\"422\":1}}],[\"没有发现e\",{\"1\":{\"421\":1}}],[\"没有super\",{\"1\":{\"316\":1}}],[\"没有key的情况下要比有key的性能更好\",{\"1\":{\"233\":1}}],[\"没有移动操作\",{\"1\":{\"230\":1}}],[\"没有声明访问控制\",{\"1\":{\"86\":1}}],[\"没有\",{\"1\":{\"67\":1,\"71\":1,\"115\":1}}],[\"必须联网\",{\"1\":{\"368\":1}}],[\"必须先代用super才能引用this\",{\"1\":{\"316\":1}}],[\"必须通过setstate方法来告知react组件state已经发生了改变\",{\"1\":{\"302\":1}}],[\"必须通过引用传递\",{\"1\":{\"62\":1}}],[\"页面更新是异步操作\",{\"1\":{\"526\":1}}],[\"页面不断出栈\",{\"1\":{\"522\":1}}],[\"页面不会触发更新\",{\"1\":{\"402\":1}}],[\"页面之间通过hide\",{\"1\":{\"522\":1}}],[\"页面载入后触发onshow\",{\"1\":{\"518\":1}}],[\"页面生命周期\",{\"1\":{\"518\":1}}],[\"页面卸载\",{\"1\":{\"515\":1}}],[\"页面隐藏\",{\"1\":{\"515\":1}}],[\"页面初次渲染完成\",{\"1\":{\"515\":1}}],[\"页面的生命周期\",{\"0\":{\"515\":1}}],[\"页面的性能问题\",{\"1\":{\"399\":1}}],[\"页面加载触发\",{\"1\":{\"392\":1}}],[\"页面会被切分成一些独立的\",{\"1\":{\"311\":1}}],[\"页面显示\",{\"1\":{\"306\":1}}],[\"批量更新\",{\"0\":{\"306\":1}}],[\"批处理\",{\"1\":{\"270\":1}}],[\"先觉错误\",{\"0\":{\"702\":1}}],[\"先从本地获取\",{\"1\":{\"554\":1}}],[\"先从storage里面读取\",{\"1\":{\"519\":1}}],[\"先执行mixin的钩子\",{\"1\":{\"481\":1}}],[\"先挂在不需要权限控制的路由\",{\"1\":{\"392\":1}}],[\"先做动画\",{\"1\":{\"325\":1}}],[\"先渲染dom\",{\"1\":{\"325\":1}}],[\"先保存移除的节点\",{\"1\":{\"325\":1}}],[\"先举出一个例子\",{\"1\":{\"304\":1}}],[\"先实例化\",{\"1\":{\"269\":1}}],[\"李银河\",{\"1\":{\"302\":1,\"305\":2}}],[\"发布版本\",{\"1\":{\"523\":1}}],[\"发布流程\",{\"0\":{\"523\":1}}],[\"发起完整的登录流程\",{\"1\":{\"520\":1}}],[\"发送请求获取数据\",{\"1\":{\"515\":1}}],[\"发生脚本错误或api调用报错时触发\",{\"1\":{\"514\":1}}],[\"发生dom操作\",{\"1\":{\"459\":3}}],[\"发生了改变\",{\"1\":{\"299\":1}}],[\"发现新旧节点d相同\",{\"1\":{\"421\":1}}],[\"发现旧key不存在了\",{\"1\":{\"273\":1}}],[\"改变loading\",{\"1\":{\"601\":1}}],[\"改变了\",{\"1\":{\"299\":1}}],[\"改动新的变量将影响到原始变量\",{\"1\":{\"140\":1}}],[\"按是否具备标识分为两类\",{\"1\":{\"671\":1}}],[\"按需加载\",{\"1\":{\"529\":1},\"2\":{\"564\":1}}],[\"按模板的顺序来加载\",{\"1\":{\"474\":1}}],[\"按钮提交事件\",{\"1\":{\"539\":1}}],[\"按钮权限\",{\"1\":{\"392\":1}}],[\"按钮点击触发\",{\"1\":{\"392\":1}}],[\"按钮\",{\"1\":{\"298\":1}}],[\"按位取反\",{\"1\":{\"96\":1}}],[\"按位异或\",{\"1\":{\"96\":1}}],[\"按位或\",{\"1\":{\"96\":1}}],[\"按位与\",{\"1\":{\"96\":1}}],[\"证明render执行了\",{\"1\":{\"298\":1}}],[\"树\",{\"1\":{\"297\":1}}],[\"树结构的节点单位\",{\"1\":{\"169\":1}}],[\"若无修改过则使用本地资源\",{\"1\":{\"557\":1}}],[\"若无则为null\",{\"1\":{\"297\":1}}],[\"若不改变this指向\",{\"1\":{\"535\":1}}],[\"若想实现数据与视图更新\",{\"1\":{\"404\":1}}],[\"若该函数作为属性值传给子组件的时候\",{\"1\":{\"250\":1}}],[\"控制流表达式\",{\"1\":{\"615\":1}}],[\"控制协商缓存的标头分别是last\",{\"1\":{\"557\":1}}],[\"控制强缓存的标头分别是expires和cache\",{\"1\":{\"554\":1}}],[\"控制小程序包的大小\",{\"1\":{\"529\":1}}],[\"控制手段\",{\"1\":{\"447\":1}}],[\"控制台都会输出foo\",{\"1\":{\"298\":1}}],[\"控制\",{\"1\":{\"294\":1}}],[\"控制能力较弱\",{\"1\":{\"203\":1}}],[\"违反组件封装的原则\",{\"1\":{\"294\":1}}],[\"过多的页面会挤占微信分配给小程序的内存\",{\"1\":{\"522\":1}}],[\"过多使用refs\",{\"1\":{\"294\":1}}],[\"过渡\",{\"1\":{\"407\":1}}],[\"过渡动画\",{\"0\":{\"321\":1}}],[\"过滤列表\",{\"1\":{\"501\":1}}],[\"过滤器处理后的结果会当作当前参数传递给tostring函数\",{\"1\":{\"438\":1}}],[\"过滤器函数总接受表达式的值作为第一个参数\",{\"1\":{\"436\":1}}],[\"过滤器\",{\"0\":{\"434\":1},\"1\":{\"407\":1}}],[\"过滤首空格\",{\"1\":{\"389\":1}}],[\"过程中被广泛使用\",{\"1\":{\"460\":1}}],[\"过程\",{\"0\":{\"269\":1}}],[\"粒度变小了\",{\"1\":{\"282\":1}}],[\"遇到性能问题的概率也在增高\",{\"1\":{\"282\":1}}],[\"随时恢复到任意时间点\",{\"1\":{\"365\":1}}],[\"随着业务的复杂\",{\"1\":{\"282\":1}}],[\"随机数在下一次\",{\"1\":{\"274\":1}}],[\"避免如下操作\",{\"1\":{\"615\":1}}],[\"避免同时渲染大量dom引起的页面卡顿\",{\"1\":{\"605\":1}}],[\"避免重复创建\",{\"1\":{\"501\":1}}],[\"避免在每次构建时都生成新的id\",{\"1\":{\"631\":1}}],[\"避免在\",{\"1\":{\"294\":1}}],[\"避免不必要的更新\",{\"1\":{\"281\":1}}],[\"避免不必要的渲染\",{\"0\":{\"278\":1}}],[\"避免不必要的渲染则是业务中常见的优化手段之一\",{\"1\":{\"277\":1}}],[\"避免使用\",{\"1\":{\"274\":1}}],[\"避免大量的无谓计算\",{\"1\":{\"163\":1,\"399\":1}}],[\"良好使用key属性是性能优化的非常关键的一步\",{\"1\":{\"274\":1}}],[\"事后都可以用任何一个镜像出来的本地仓库恢复\",{\"1\":{\"374\":1}}],[\"事务等机制并且对特定浏览器进行了性能优化\",{\"1\":{\"270\":1}}],[\"事物调用\",{\"1\":{\"270\":1}}],[\"事件代理\",{\"0\":{\"540\":1}}],[\"事件委托的要求\",{\"1\":{\"540\":1}}],[\"事件委托\",{\"0\":{\"540\":1},\"2\":{\"545\":1}}],[\"事件触发时\",{\"1\":{\"534\":1}}],[\"事件修饰符\",{\"1\":{\"389\":1}}],[\"事件总线\",{\"1\":{\"386\":1}}],[\"事件名都是用小驼峰格式进行书写\",{\"1\":{\"244\":1}}],[\"事件名称命名方式不同\",{\"1\":{\"240\":1}}],[\"事件绑定均未生效\",{\"1\":{\"464\":1}}],[\"事件绑定的方法需要使用\",{\"1\":{\"244\":1}}],[\"事件绑定\",{\"0\":{\"244\":1},\"1\":{\"501\":1}}],[\"事件监听缓存\",{\"1\":{\"508\":1}}],[\"事件监听器\",{\"1\":{\"470\":2}}],[\"事件监听\",{\"1\":{\"241\":6}}],[\"事件监听等操作\",{\"1\":{\"179\":1}}],[\"事件所有能力的一个事件对象\",{\"1\":{\"240\":1}}],[\"事件派发等\",{\"1\":{\"239\":1}}],[\"事件冒泡\",{\"1\":{\"239\":1}}],[\"事件的合成\",{\"1\":{\"239\":1}}],[\"事件机制\",{\"0\":{\"239\":1}}],[\"事件处理函数写法\",{\"1\":{\"240\":2}}],[\"事件处理函数书写不同\",{\"1\":{\"240\":1}}],[\"事件处理\",{\"1\":{\"236\":1}}],[\"事件\",{\"1\":{\"56\":4,\"241\":6}}],[\"事件都会调用该函数\",{\"1\":{\"56\":1}}],[\"keep\",{\"0\":{\"453\":1}}],[\"key是对用户数据加密签名的密钥\",{\"1\":{\"519\":1}}],[\"key是否相同\",{\"1\":{\"460\":1}}],[\"key是每一个vnode的唯一id\",{\"1\":{\"458\":1}}],[\"key的作用\",{\"0\":{\"458\":1}}],[\"keyof\",{\"1\":{\"335\":1}}],[\"key相等的情况下\",{\"1\":{\"280\":1}}],[\"key不要使用随机值\",{\"1\":{\"274\":1}}],[\"key作用并不大\",{\"1\":{\"273\":1}}],[\"key=value\",{\"1\":{\"639\":1}}],[\"key=\",{\"1\":{\"233\":20,\"324\":1,\"325\":1,\"459\":1}}],[\"key\",{\"0\":{\"273\":1},\"1\":{\"124\":2,\"127\":2,\"169\":1,\"274\":2,\"450\":2,\"460\":5,\"482\":12,\"483\":5,\"519\":1,\"639\":1}}],[\"keysb\",{\"1\":{\"280\":2}}],[\"keysa\",{\"1\":{\"280\":6}}],[\"keys\",{\"1\":{\"124\":1,\"269\":1,\"280\":2,\"335\":1}}],[\"k\",{\"1\":{\"269\":8,\"335\":1}}],[\"容器节点里的所有\",{\"1\":{\"269\":1}}],[\"容易能够根据状态修改样式属性\",{\"1\":{\"225\":1}}],[\"⽐如过滤掉key\",{\"1\":{\"269\":1}}],[\"源代码\",{\"1\":{\"629\":1}}],[\"源代码控制软件\",{\"1\":{\"369\":1}}],[\"源码体积\",{\"1\":{\"508\":1}}],[\"源码\",{\"0\":{\"482\":1}}],[\"源码中v\",{\"1\":{\"449\":1}}],[\"源码中做了详细处理\",{\"1\":{\"269\":1}}],[\"源码大致如下\",{\"1\":{\"280\":1}}],[\"源文本解析结果\",{\"1\":{\"10\":1}}],[\"文法符号\",{\"0\":{\"680\":1}}],[\"文法前缀参数的含义是不一样的\",{\"1\":{\"675\":1}}],[\"文法前缀参数的含义\",{\"0\":{\"675\":1}}],[\"文法参数的含义\",{\"0\":{\"674\":1}}],[\"文法参数\",{\"0\":{\"673\":1},\"1\":{\"673\":1}}],[\"文本的计算结果为\",{\"1\":{\"698\":1}}],[\"文本字段\",{\"1\":{\"571\":1}}],[\"文本块\",{\"1\":{\"569\":1}}],[\"文本格式化\",{\"1\":{\"437\":1}}],[\"文本节点\",{\"1\":{\"269\":1}}],[\"文档修改\",{\"1\":{\"379\":1}}],[\"文件中指定\",{\"1\":{\"637\":1}}],[\"文件中的图片链接\",{\"1\":{\"626\":1}}],[\"文件中的\",{\"1\":{\"626\":1}}],[\"文件中的当前行号\",{\"1\":{\"49\":1}}],[\"文件内导出了一个\",{\"1\":{\"615\":1}}],[\"文件指纹\",{\"0\":{\"559\":1}}],[\"文件状态对应的\",{\"1\":{\"375\":1}}],[\"文件能够解决局部作用域问题\",{\"1\":{\"225\":1}}],[\"文件符合我们日常的编写习惯\",{\"1\":{\"225\":1}}],[\"文件末尾的\",{\"1\":{\"73\":1}}],[\"文件\",{\"0\":{\"223\":1},\"1\":{\"70\":1,\"142\":1,\"220\":2,\"615\":1,\"635\":1,\"636\":1,\"643\":1,\"644\":2}}],[\"文件所在的目录\",{\"1\":{\"49\":1}}],[\"文件的完整路径和文件名\",{\"1\":{\"49\":1}}],[\"速度更快\",{\"1\":{\"265\":1,\"506\":1}}],[\"速度比正常稍慢\",{\"1\":{\"164\":1}}],[\"高度可配置性\",{\"1\":{\"621\":1}}],[\"高级类型\",{\"0\":{\"331\":1}}],[\"高效灵活\",{\"1\":{\"265\":1}}],[\"高阶函数\",{\"1\":{\"214\":1,\"534\":1,\"537\":1}}],[\"高阶组件能够提高代码的复用性和灵活性\",{\"1\":{\"216\":1}}],[\"高阶组件可以传递所有的props\",{\"1\":{\"215\":1}}],[\"高阶组件的主要功能是封装并分离组件的通用逻辑\",{\"1\":{\"215\":1}}],[\"高阶组件的这种实现方式\",{\"1\":{\"214\":1}}],[\"高阶组件即接受一个或多个组件作为参数并且返回一个组件\",{\"1\":{\"214\":1}}],[\"高阶组件\",{\"0\":{\"214\":1}}],[\"个或多个\",{\"1\":{\"698\":1}}],[\"个组件易于和其它组件一起使用\",{\"1\":{\"264\":1}}],[\"个常量一旦被定义\",{\"1\":{\"47\":1}}],[\"处理浏览器端javascript的兼容性\",{\"1\":{\"621\":1}}],[\"处理应用程序时\",{\"1\":{\"621\":1}}],[\"处理v\",{\"1\":{\"449\":1}}],[\"处理了五种情景\",{\"1\":{\"422\":1}}],[\"处理它并返回在ui中呈现的react元素\",{\"1\":{\"264\":1}}],[\"处的元素分配给变量\",{\"1\":{\"126\":2}}],[\"地取值\",{\"1\":{\"638\":1}}],[\"地图上添加标记\",{\"1\":{\"263\":1}}],[\"地址\",{\"0\":{\"88\":1}}],[\"被缓存的组件离开\",{\"1\":{\"473\":1}}],[\"被缓存的组件重新进入\",{\"1\":{\"472\":1}}],[\"被绑定元素插入父节点时调用\",{\"1\":{\"427\":1}}],[\"被传递给\",{\"1\":{\"291\":1}}],[\"被传入的数据可在组件中通过\",{\"1\":{\"261\":1}}],[\"被挂载时进行回调\",{\"1\":{\"289\":1}}],[\"被继承的方法和属性可以通过用同样的名字重新声明被覆盖\",{\"1\":{\"81\":1}}],[\"嵌套路由\",{\"1\":{\"502\":1}}],[\"嵌套\",{\"1\":{\"261\":1}}],[\"嵌入到\",{\"1\":{\"72\":1}}],[\"帮助我们将界面成了各个独立的小块\",{\"1\":{\"261\":1}}],[\"遵循\",{\"1\":{\"615\":1}}],[\"遵循从高阶组件到低阶组件的单向数据流\",{\"1\":{\"261\":1}}],[\"遵循组件设计模式\",{\"1\":{\"261\":1}}],[\"层面的解决方案\",{\"1\":{\"261\":1}}],[\"层级\",{\"1\":{\"229\":2}}],[\"库约有1\",{\"1\":{\"580\":1}}],[\"库还可以更简洁地在浏览器中衡量\",{\"1\":{\"574\":1}}],[\"库\",{\"1\":{\"261\":1,\"294\":1}}],[\"减少不必要的依赖\",{\"1\":{\"631\":1}}],[\"减少不必要的重排\",{\"1\":{\"501\":1}}],[\"减少依赖\",{\"1\":{\"631\":1}}],[\"减少静态文件的体积\",{\"1\":{\"583\":1}}],[\"减少dns的重复查找\",{\"1\":{\"561\":1}}],[\"减少dom层级\",{\"1\":{\"501\":1}}],[\"减少服务器负载\",{\"1\":{\"560\":1}}],[\"减少页面加载时间\",{\"1\":{\"560\":1}}],[\"减少对服务器的重复请求\",{\"1\":{\"553\":1}}],[\"减少事件\",{\"1\":{\"540\":1}}],[\"减少资源包中的图片等资源的数量和大小\",{\"1\":{\"529\":1}}],[\"减少了this指向不明确的情况\",{\"1\":{\"255\":1}}],[\"减少多次引起重绘与回流\",{\"1\":{\"164\":1}}],[\"官方给出的动机是解决长时间使用和维护react过程中常遇到的问题\",{\"1\":{\"253\":1}}],[\"综合上述\",{\"1\":{\"250\":1}}],[\"跟shouldcomponentupdate\",{\"1\":{\"280\":1}}],[\"跟vue一样\",{\"1\":{\"273\":1}}],[\"跟vue一致\",{\"1\":{\"228\":1}}],[\"跟上述方式三一样\",{\"1\":{\"249\":1}}],[\"影响性能\",{\"1\":{\"246\":1,\"247\":1}}],[\"效率也有很大提升\",{\"1\":{\"240\":1}}],[\"效率低\",{\"1\":{\"164\":1}}],[\"拥有了类组件相似的功能\",{\"1\":{\"258\":1}}],[\"拥有与浏览器原生事件相同的接口\",{\"1\":{\"240\":1}}],[\"拥有此realm的agent代理\",{\"1\":{\"11\":1}}],[\"兼容所有浏览器\",{\"1\":{\"240\":1}}],[\"规范类型\",{\"1\":{\"658\":1}}],[\"规范来定义合成事件\",{\"1\":{\"240\":1}}],[\"规则\",{\"1\":{\"622\":2}}],[\"规则如下\",{\"1\":{\"232\":1}}],[\"合并成\",{\"1\":{\"627\":1}}],[\"合并的过程中\",{\"1\":{\"622\":1}}],[\"合并模块\",{\"1\":{\"622\":1}}],[\"合并\",{\"1\":{\"622\":1}}],[\"合并参数\",{\"1\":{\"622\":1}}],[\"合并型\",{\"1\":{\"483\":1}}],[\"合并策略\",{\"0\":{\"483\":1}}],[\"合并到父组件的配置中\",{\"1\":{\"482\":1}}],[\"合并原对象和混入对象的属性\",{\"1\":{\"404\":1}}],[\"合并分支出现冲突时\",{\"1\":{\"380\":1}}],[\"合并分支\",{\"1\":{\"380\":1}}],[\"合并运算符的例子\",{\"1\":{\"99\":1}}],[\"合成事件与原生事件执行顺序\",{\"1\":{\"241\":1}}],[\"合成事件绑定方式\",{\"1\":{\"240\":1}}],[\"合成事件是\",{\"1\":{\"240\":1}}],[\"合成事件\",{\"0\":{\"240\":1},\"1\":{\"240\":1}}],[\"栈外\",{\"1\":{\"236\":1}}],[\"异构枚举\",{\"1\":{\"344\":1}}],[\"异步\",{\"1\":{\"636\":1}}],[\"异步下载新版本的代码包\",{\"1\":{\"527\":1}}],[\"异步会使运行时序变得复杂一些\",{\"1\":{\"526\":1}}],[\"异步延迟函数\",{\"1\":{\"491\":1}}],[\"异步加载组件时\",{\"1\":{\"474\":1}}],[\"异步更新\",{\"0\":{\"304\":1},\"1\":{\"303\":1}}],[\"异步代码\",{\"1\":{\"236\":1}}],[\"异常处理\",{\"1\":{\"216\":1}}],[\"异常\",{\"1\":{\"22\":1}}],[\"渲染数据\",{\"1\":{\"610\":1}}],[\"渲染时显示浏览器窗口\",{\"1\":{\"599\":1}}],[\"渲染时直接复用\",{\"1\":{\"508\":1}}],[\"渲染\",{\"0\":{\"530\":1}}],[\"渲染出正确的视图\",{\"1\":{\"526\":1}}],[\"渲染层\",{\"1\":{\"525\":1}}],[\"渲染线程和脚本是互斥的\",{\"1\":{\"525\":1}}],[\"渲染页面元素和样式\",{\"1\":{\"518\":1}}],[\"渲染机制\",{\"1\":{\"512\":1}}],[\"渲染阶段\",{\"1\":{\"501\":1}}],[\"渲染方法\",{\"1\":{\"486\":1}}],[\"渲染优化\",{\"0\":{\"277\":1}}],[\"渲染html\",{\"1\":{\"270\":1}}],[\"渲染备用\",{\"1\":{\"236\":1}}],[\"渲染成如下的样子\",{\"1\":{\"233\":1}}],[\"形成错误边界组件的两个条件\",{\"1\":{\"236\":1}}],[\"形参\",{\"1\":{\"61\":1}}],[\"错误边界在渲染期间\",{\"1\":{\"236\":1}}],[\"错误边界是一种\",{\"1\":{\"236\":1}}],[\"错误\",{\"1\":{\"236\":1}}],[\"错误处理\",{\"0\":{\"236\":1,\"431\":1}}],[\"错误控制\",{\"0\":{\"100\":1}}],[\"加入到documentfragment中\",{\"1\":{\"608\":1}}],[\"加速访问\",{\"1\":{\"560\":1}}],[\"加载模块\",{\"1\":{\"622\":2}}],[\"加载器\",{\"1\":{\"622\":1}}],[\"加载更快\",{\"1\":{\"586\":1}}],[\"加载\",{\"0\":{\"529\":1}}],[\"加载小程序代码包\",{\"1\":{\"528\":1}}],[\"加载页面\",{\"1\":{\"518\":1}}],[\"加载完子组件后\",{\"1\":{\"474\":1}}],[\"加key\",{\"1\":{\"233\":2}}],[\"加密数据和发送电子邮件\",{\"1\":{\"70\":1}}],[\"看有没有没用到的节点\",{\"1\":{\"232\":1}}],[\"满足maxindex<\",{\"1\":{\"232\":1}}],[\"满足\",{\"1\":{\"232\":1}}],[\"操作执行优化\",{\"0\":{\"533\":1},\"1\":{\"533\":1}}],[\"操作符来创建一个插件实例\",{\"1\":{\"643\":1}}],[\"操作符\",{\"1\":{\"349\":1,\"615\":1}}],[\"操作符访问\",{\"1\":{\"85\":1}}],[\"操作\",{\"0\":{\"655\":1},\"1\":{\"233\":4}}],[\"操作过程中只比较oldindex和maxindex\",{\"1\":{\"232\":1}}],[\"删除旧的节点\",{\"1\":{\"422\":1}}],[\"删除某个远程分支\",{\"1\":{\"380\":1}}],[\"删除本地某个分支\",{\"1\":{\"380\":1}}],[\"删除的节点\",{\"1\":{\"325\":1}}],[\"删除节点4\",{\"1\":{\"233\":1}}],[\"删除\",{\"1\":{\"232\":1}}],[\"种节点操作\",{\"1\":{\"232\":1}}],[\"种方式表达\",{\"1\":{\"119\":1}}],[\"后缀\",{\"1\":{\"639\":1}}],[\"后者指示\",{\"1\":{\"638\":1}}],[\"后发生的每项长任务的阻塞时间的总和\",{\"1\":{\"575\":1}}],[\"后端nginx配置\",{\"1\":{\"585\":2}}],[\"后端从数据库中查找openid\",{\"1\":{\"519\":1}}],[\"后端把appid\",{\"1\":{\"519\":1}}],[\"后端接口错误\",{\"1\":{\"431\":1}}],[\"后台运行或跳转到其他页面时\",{\"1\":{\"518\":1}}],[\"后台运行一定时间\",{\"1\":{\"518\":1}}],[\"后台进入前台或重新进入页面时\",{\"1\":{\"518\":1}}],[\"后台进入前台\",{\"1\":{\"518\":1}}],[\"后的副作用\",{\"1\":{\"472\":1}}],[\"后续每一个提交都会使用这些信息\",{\"1\":{\"377\":1}}],[\"后续的调用则会使用\",{\"1\":{\"269\":1}}],[\"后续更改成\",{\"1\":{\"233\":1}}],[\"后\",{\"1\":{\"231\":1}}],[\"后面并不会导致foo\",{\"1\":{\"298\":1}}],[\"后面跟着一个或多个冒号\",{\"1\":{\"682\":1}}],[\"后面跟着一个裸字符串\",{\"1\":{\"149\":1}}],[\"后面跟着一个字符串连接运算符\",{\"1\":{\"149\":1}}],[\"后面跟上任意数量的字母\",{\"1\":{\"139\":1}}],[\"后面的字符键会覆盖之前的字符键\",{\"1\":{\"127\":1}}],[\"后面\",{\"1\":{\"67\":1}}],[\"极大地避免无效的dom操作\",{\"1\":{\"228\":1}}],[\"至于为什么引入hook\",{\"1\":{\"253\":1}}],[\"至于使用react用哪种方案引入css\",{\"1\":{\"225\":1}}],[\"至少满足下列一个条件的函数\",{\"1\":{\"214\":1}}],[\"基本配置\",{\"0\":{\"616\":1}}],[\"基本上都能找回\",{\"1\":{\"365\":1}}],[\"基本使用如下\",{\"1\":{\"224\":1}}],[\"基于dom元素的事件冒泡\",{\"1\":{\"540\":1}}],[\"基于浏览器内核重构的内置解析器\",{\"1\":{\"512\":1}}],[\"基于webpack\",{\"1\":{\"502\":1}}],[\"基于es模块\",{\"1\":{\"502\":1}}],[\"基于模块化状态树\",{\"1\":{\"502\":1}}],[\"基于响应式数据缓存计算结果\",{\"1\":{\"501\":1}}],[\"基于当前分支新建分支\",{\"1\":{\"380\":1}}],[\"基于当前分支\",{\"1\":{\"380\":1}}],[\"基于\",{\"1\":{\"375\":1}}],[\"基于虚拟\",{\"1\":{\"277\":1}}],[\"基于这个值进行渲染工作\",{\"1\":{\"157\":1}}],[\"生态系统提供更多能力\",{\"1\":{\"636\":1}}],[\"生产环境才去配置\",{\"1\":{\"585\":1}}],[\"生产环境高效打包\",{\"1\":{\"502\":1}}],[\"生成这些\",{\"1\":{\"698\":1}}],[\"生成式的右侧可以使用短语\",{\"1\":{\"685\":1}}],[\"生成代码\",{\"1\":{\"622\":1}}],[\"生成代码等\",{\"1\":{\"622\":1}}],[\"生成部分配置\",{\"1\":{\"615\":1}}],[\"生成session并返回给小程序\",{\"1\":{\"519\":1}}],[\"生成render方法\",{\"1\":{\"486\":1}}],[\"生成虚拟dom\",{\"1\":{\"466\":1}}],[\"生成\",{\"1\":{\"270\":1,\"632\":1}}],[\"生成而不是在外部文件中定义\",{\"1\":{\"224\":1}}],[\"生命周期函数和watch\",{\"1\":{\"483\":1}}],[\"生命周期理解\",{\"0\":{\"463\":1}}],[\"生命周期钩子\",{\"1\":{\"431\":1}}],[\"生命周期方法和整个组件树的构造函数中捕获错误\",{\"1\":{\"236\":1}}],[\"生命周期\",{\"0\":{\"173\":1,\"195\":1,\"513\":1},\"1\":{\"192\":1,\"514\":1,\"515\":1,\"516\":1,\"517\":1}}],[\"样式之间会层叠\",{\"1\":{\"225\":1}}],[\"样式之间会互相影响\",{\"1\":{\"222\":1}}],[\"样式之间不会有冲突\",{\"1\":{\"221\":1}}],[\"样式注释\",{\"1\":{\"74\":1}}],[\"驼峰法\",{\"1\":{\"221\":1}}],[\"方便\",{\"1\":{\"524\":1}}],[\"方式配置\",{\"0\":{\"645\":1}}],[\"方式如下\",{\"1\":{\"316\":1}}],[\"方式创建\",{\"1\":{\"289\":1}}],[\"方式创建出来\",{\"1\":{\"289\":1}}],[\"方式四是最优的事件绑定方式\",{\"1\":{\"250\":1}}],[\"方式四只会生成一个方法实例\",{\"1\":{\"250\":1}}],[\"方式三的编写过于冗杂\",{\"1\":{\"250\":1}}],[\"方式二写法简单\",{\"1\":{\"250\":1}}],[\"方式一和方式二在每次组件render的时候都会生成新的方法实例\",{\"1\":{\"250\":1}}],[\"方式一\",{\"1\":{\"250\":1}}],[\"方式\",{\"0\":{\"220\":1}}],[\"方法会被\",{\"1\":{\"646\":1}}],[\"方法会传入\",{\"1\":{\"215\":1}}],[\"方法的第一个参数\",{\"1\":{\"646\":1}}],[\"方法的\",{\"1\":{\"646\":1}}],[\"方法的类的名字\",{\"1\":{\"49\":1}}],[\"方法同等的引用方式\",{\"1\":{\"639\":1}}],[\"方法将数据存储在本地\",{\"1\":{\"530\":1}}],[\"方法将在浏览器的空闲时段内调用的函数排队\",{\"1\":{\"170\":1}}],[\"方法把数据从逻辑层传递到渲染层\",{\"1\":{\"526\":1}}],[\"方法请求开发者服务器\",{\"1\":{\"519\":1}}],[\"方法生成code\",{\"1\":{\"519\":1}}],[\"方法进行挂载\",{\"1\":{\"268\":1}}],[\"方法进行重新渲染\",{\"1\":{\"210\":1}}],[\"方法没有绑定\",{\"1\":{\"244\":1}}],[\"方法中创建的\",{\"1\":{\"288\":1}}],[\"方法中使用高阶组件\",{\"1\":{\"215\":1}}],[\"方法中时\",{\"1\":{\"49\":1}}],[\"方法创建\",{\"0\":{\"209\":1},\"1\":{\"207\":1}}],[\"方法从\",{\"1\":{\"197\":1}}],[\"方法时\",{\"1\":{\"82\":1}}],[\"方法\",{\"0\":{\"413\":1},\"1\":{\"38\":1,\"66\":1,\"77\":1,\"109\":1,\"162\":1,\"294\":1,\"299\":1,\"339\":1,\"352\":1,\"486\":1}}],[\"各有利弊\",{\"1\":{\"219\":1}}],[\"媒体查询等\",{\"1\":{\"219\":1}}],[\"伪元素\",{\"1\":{\"221\":1}}],[\"伪类\",{\"1\":{\"219\":1}}],[\"伪代码\",{\"1\":{\"42\":1}}],[\"我们之所以说主线程处于\",{\"1\":{\"575\":1}}],[\"我们希望看到on先从左侧退出\",{\"1\":{\"324\":1}}],[\"我们一般都需要传入props作为参数\",{\"1\":{\"317\":1}}],[\"我们会发现页面并不会有任何反应\",{\"1\":{\"302\":1}}],[\"我们会编写jsx\",{\"1\":{\"297\":1}}],[\"我们会通过使用refs来更新组件\",{\"1\":{\"294\":1}}],[\"我们会如下编写\",{\"1\":{\"216\":1}}],[\"我们将每个单独的部分称为组件\",{\"1\":{\"264\":1}}],[\"我们可以获得input内的值为\",{\"1\":{\"202\":1}}],[\"两次调用\",{\"1\":{\"615\":1}}],[\"两个冒号便是此法\",{\"1\":{\"682\":1}}],[\"两个组件显示和隐藏切换时\",{\"1\":{\"322\":1}}],[\"两个参数给其回调函数\",{\"1\":{\"215\":1}}],[\"两者都是用于保存信息\",{\"1\":{\"312\":1}}],[\"两者都是\",{\"1\":{\"312\":1}}],[\"两者看起来实现功能是一致的\",{\"1\":{\"197\":1}}],[\"两者最明显的区别在于编写形式的不同\",{\"1\":{\"193\":1}}],[\"两者的区别如下\",{\"1\":{\"163\":1}}],[\"保证访问的正确性\",{\"1\":{\"561\":1}}],[\"保证了并行开发的可行\",{\"1\":{\"365\":1}}],[\"保持空白\",{\"1\":{\"561\":1}}],[\"保持接口不变的情况下\",{\"1\":{\"407\":1}}],[\"保持一致\",{\"1\":{\"215\":1}}],[\"保存事件参数\",{\"1\":{\"535\":1}}],[\"保存display原始值\",{\"1\":{\"449\":1}}],[\"保存了下次将提交的文件列表信息\",{\"1\":{\"375\":1}}],[\"保存了该组件的类型\",{\"1\":{\"170\":1}}],[\"保存了到外部资源的一个引用\",{\"1\":{\"131\":1}}],[\"保存当前状态\",{\"1\":{\"473\":1}}],[\"保存当前上下文的词法环境oldenv\",{\"1\":{\"37\":1}}],[\"保存当前指向上下文的词法环境oldenv\",{\"1\":{\"34\":1}}],[\"让用户在等待内容加载时获得视觉反馈\",{\"1\":{\"600\":1}}],[\"让组件变得像内置标签那样监听根元素的原生事件\",{\"1\":{\"389\":1}}],[\"让元素在两个状态之间平滑过渡\",{\"1\":{\"323\":1}}],[\"让通用逻辑在组件间更好地被复用\",{\"1\":{\"215\":1}}],[\"让浏览器有时间再进行页面的渲染\",{\"1\":{\"170\":1}}],[\"给定长任务的阻塞时间是指其超过\",{\"1\":{\"575\":1}}],[\"给原始组件包裹其他元素等\",{\"1\":{\"215\":1}}],[\"给自己并在提交时显示数据\",{\"1\":{\"147\":1}}],[\"做patch或者reuse\",{\"1\":{\"458\":1}}],[\"做一些你想要的操作\",{\"1\":{\"215\":1}}],[\"做完看是否还有剩余时间\",{\"1\":{\"170\":1}}],[\"能在组件切换过程中将状态保留在内存中\",{\"1\":{\"453\":1}}],[\"能记录任何工程项目内各个模块的改动历程\",{\"1\":{\"365\":1}}],[\"能追踪工程蓝图从诞生一直到定案的过程\",{\"1\":{\"365\":1}}],[\"能够产生额外的任意文件\",{\"1\":{\"636\":1}}],[\"能够避免在render操作中重复绑定\",{\"1\":{\"249\":1}}],[\"能够有效避免真实dom数频繁更新\",{\"1\":{\"164\":1}}],[\"能用无状态组件则用无状态组件\",{\"1\":{\"211\":1}}],[\"再调用\",{\"1\":{\"539\":1}}],[\"再发送请求\",{\"1\":{\"536\":1}}],[\"再经过对比前后差异\",{\"1\":{\"526\":1}}],[\"再次进入\",{\"1\":{\"518\":1}}],[\"再次进入列表页\",{\"1\":{\"454\":1}}],[\"再统一进行更新\",{\"1\":{\"490\":1}}],[\"再执行resize事件中的代码\",{\"1\":{\"536\":1}}],[\"再执行render函数\",{\"1\":{\"269\":1}}],[\"再执行组建的钩子\",{\"1\":{\"481\":1}}],[\"再开始加载子组件\",{\"1\":{\"474\":1}}],[\"再完成父组件挂载\",{\"1\":{\"474\":1}}],[\"再返回\",{\"1\":{\"454\":1}}],[\"再初始化super\",{\"1\":{\"316\":1}}],[\"再来举一个原生dom事件的例子\",{\"1\":{\"305\":1}}],[\"再去循环比较\",{\"1\":{\"280\":1}}],[\"再插入父node中\",{\"1\":{\"269\":1}}],[\"再处理\",{\"1\":{\"241\":1}}],[\"再比如组件渲染性能监控\",{\"1\":{\"216\":1}}],[\"再加上目前推崇函数式编程\",{\"1\":{\"211\":1}}],[\"再继续之前\",{\"1\":{\"170\":1}}],[\"构成网络也很方便\",{\"1\":{\"370\":1}}],[\"构成整体页面\",{\"1\":{\"261\":1}}],[\"构建正在启动\",{\"1\":{\"646\":1}}],[\"构建过程\",{\"1\":{\"642\":1}}],[\"构建时\",{\"1\":{\"598\":1}}],[\"构建工具支持\",{\"0\":{\"597\":1}}],[\"构建工具\",{\"1\":{\"502\":1},\"2\":{\"619\":1,\"633\":1,\"640\":1,\"647\":1}}],[\"构建组件实例\",{\"1\":{\"417\":1}}],[\"构建组件的方式\",{\"0\":{\"206\":1}}],[\"构建方式\",{\"0\":{\"207\":1}}],[\"构造函数中设置\",{\"1\":{\"255\":1}}],[\"构造函数\",{\"0\":{\"80\":1},\"1\":{\"109\":1,\"339\":1}}],[\"受控\",{\"1\":{\"203\":1}}],[\"受控组件我们一般需要初始状态和一个状态更新事件函数\",{\"1\":{\"201\":1}}],[\"受控组件\",{\"0\":{\"201\":1},\"1\":{\"201\":1}}],[\"受控组件和非受控组件\",{\"0\":{\"200\":1}}],[\"特点\",{\"0\":{\"636\":1}}],[\"特别是在\",{\"1\":{\"460\":1}}],[\"特别是程序的源代码\",{\"1\":{\"370\":1}}],[\"特性\",{\"0\":{\"262\":1,\"329\":1},\"1\":{\"253\":1}}],[\"特征\",{\"1\":{\"203\":1}}],[\"特殊字符\",{\"1\":{\"120\":1}}],[\"输入框的联想\",{\"1\":{\"539\":1}}],[\"输入的时候触发事件函数\",{\"1\":{\"201\":1}}],[\"输出文件\",{\"1\":{\"622\":1}}],[\"输出目录\",{\"1\":{\"622\":1}}],[\"输出结果\",{\"1\":{\"616\":1}}],[\"输出压缩日志\",{\"1\":{\"585\":1}}],[\"输出第一个有内容的元素的时间\",{\"1\":{\"568\":1}}],[\"输出顺序为\",{\"1\":{\"241\":1}}],[\"输出一个函数\",{\"1\":{\"214\":1}}],[\"输出this\",{\"1\":{\"197\":1}}],[\"输出更有效率\",{\"1\":{\"72\":1}}],[\"输出\",{\"1\":{\"47\":2,\"54\":1,\"62\":1,\"109\":3,\"120\":3,\"122\":1,\"316\":2}}],[\"举个例子\",{\"1\":{\"216\":1}}],[\"举个简单的例子\",{\"1\":{\"201\":1}}],[\"举例说\",{\"1\":{\"147\":1}}],[\"你也可以在一个配置文件中因为不同目的而多次使用同一个插件\",{\"1\":{\"643\":1}}],[\"你也可能会安装额外的\",{\"1\":{\"618\":1}}],[\"你只需要\",{\"1\":{\"643\":1}}],[\"你不要为它添加引号\",{\"1\":{\"638\":1}}],[\"你不能在函数式\",{\"1\":{\"215\":1}}],[\"你好啊\",{\"1\":{\"302\":1,\"304\":3,\"305\":4}}],[\"你可以通过<\",{\"1\":{\"630\":1}}],[\"你可以通过output属性来指定bundle文件的名称\",{\"1\":{\"630\":1}}],[\"你可以将bundle文件命名为bundle\",{\"1\":{\"630\":1}}],[\"你可以在配置中使用语法\",{\"1\":{\"615\":1}}],[\"你可以精确地跟踪这些指标\",{\"1\":{\"580\":1}}],[\"你可以根据用户的设备类型\",{\"1\":{\"548\":1}}],[\"你可以跳过对\",{\"1\":{\"256\":1}}],[\"你可以自定义降级后的\",{\"1\":{\"236\":1}}],[\"你同样可以将错误日志上报给服务器\",{\"1\":{\"236\":1}}],[\"你的代码\",{\"1\":{\"196\":2}}],[\"你将无法直接调用它\",{\"1\":{\"79\":1}}],[\"编码\",{\"1\":{\"698\":1}}],[\"编译生命周期都可以访问\",{\"1\":{\"646\":1}}],[\"编译条件\",{\"1\":{\"447\":1}}],[\"编译过程\",{\"1\":{\"447\":1}}],[\"编译过程中批准的内容\",{\"1\":{\"329\":1}}],[\"编译模板优化\",{\"1\":{\"506\":1}}],[\"编译模板\",{\"1\":{\"173\":1,\"465\":1}}],[\"编写超长的配置\",{\"1\":{\"615\":1}}],[\"编写并执行函数\",{\"1\":{\"615\":1}}],[\"编写hooks为函数式编程\",{\"1\":{\"258\":1}}],[\"编写方面\",{\"1\":{\"250\":1}}],[\"编写方式\",{\"0\":{\"215\":1}}],[\"编写起来简洁方便\",{\"1\":{\"219\":1}}],[\"编写形式\",{\"0\":{\"193\":1},\"1\":{\"192\":1}}],[\"针对大量数据的渲染优化\",{\"1\":{\"604\":1}}],[\"针对使用vite的vue项目\",{\"1\":{\"585\":1}}],[\"针对工程化项目才可以使用打包工具的gizp算法\",{\"1\":{\"583\":1}}],[\"针对特定客户端的缓存\",{\"1\":{\"556\":1}}],[\"针对tabr页面的跳转\",{\"1\":{\"522\":1}}],[\"针对两者的区别\",{\"1\":{\"203\":1}}],[\"针对两种react组件\",{\"1\":{\"192\":1}}],[\"针对相关的realm\",{\"1\":{\"32\":1}}],[\"顾名思义\",{\"1\":{\"190\":1,\"191\":1}}],[\"里面的csstransition组件不再像以前那样接受in属性来判断元素是何种状态\",{\"1\":{\"324\":1}}],[\"里面\",{\"1\":{\"178\":1}}],[\"里面存着标签的一些属性\",{\"1\":{\"162\":1}}],[\"卸载的过程\",{\"1\":{\"447\":1}}],[\"卸载阶段\",{\"0\":{\"184\":1},\"1\":{\"174\":1}}],[\"卸载等一系列过程\",{\"1\":{\"173\":1}}],[\"流程\",{\"0\":{\"174\":1}}],[\"流程控制\",{\"0\":{\"52\":1}}],[\"更快地调试和定位\",{\"1\":{\"639\":1}}],[\"更好的分割方式\",{\"1\":{\"549\":1}}],[\"更高效的组件初始化\",{\"1\":{\"506\":1}}],[\"更易于使用\",{\"1\":{\"506\":1}}],[\"更易维护\",{\"1\":{\"506\":1}}],[\"更接近原生\",{\"1\":{\"506\":1}}],[\"更简洁的api\",{\"1\":{\"502\":1}}],[\"更符合逻辑\",{\"1\":{\"317\":1}}],[\"更多其他特性\",{\"1\":{\"636\":1}}],[\"更多情况我们是通过props与state的方式进行去重新渲染子元素\",{\"1\":{\"294\":1}}],[\"更多代码\",{\"1\":{\"71\":1}}],[\"更容易被理解和维护\",{\"1\":{\"264\":1}}],[\"更优雅\",{\"1\":{\"258\":1}}],[\"更改时更新\",{\"1\":{\"256\":1}}],[\"更新和销毁\",{\"1\":{\"463\":1}}],[\"更新节点\",{\"1\":{\"460\":1}}],[\"更新相应的视图\",{\"1\":{\"422\":1}}],[\"更新类型\",{\"0\":{\"303\":1}}],[\"更新到屏幕上\",{\"1\":{\"268\":1}}],[\"更新\",{\"1\":{\"236\":1,\"255\":1,\"269\":1,\"297\":1}}],[\"更新为新集合中节点的位置\",{\"1\":{\"232\":1}}],[\"更新阶段\",{\"0\":{\"180\":1},\"1\":{\"174\":1,\"501\":1}}],[\"更新→渲染\",{\"1\":{\"173\":1}}],[\"挂载\",{\"1\":{\"463\":1}}],[\"挂载完成\",{\"1\":{\"216\":1,\"467\":1}}],[\"挂载dom→渲染\",{\"1\":{\"173\":1}}],[\"挂起当前任务\",{\"1\":{\"170\":1}}],[\"初始化参数\",{\"1\":{\"622\":1}}],[\"初始化阶段\",{\"1\":{\"622\":1}}],[\"初始化小程序手段\",{\"1\":{\"528\":1}}],[\"初始化依赖注入\",{\"1\":{\"486\":1}}],[\"初始化生命周期\",{\"1\":{\"486\":1}}],[\"初始化配置对象\",{\"1\":{\"482\":1}}],[\"初始化完成后\",{\"1\":{\"518\":1}}],[\"初始化完成时触发\",{\"1\":{\"514\":1}}],[\"初始化完成\",{\"1\":{\"465\":1}}],[\"初始化data\",{\"1\":{\"464\":1}}],[\"初始化实例对象\",{\"1\":{\"463\":1}}],[\"初始化\",{\"1\":{\"392\":1}}],[\"初始化仓库\",{\"1\":{\"379\":1}}],[\"初始化的data可以被声明为类属性\",{\"1\":{\"357\":1}}],[\"初始化数据\",{\"1\":{\"173\":1}}],[\"初始化绑定\",{\"1\":{\"35\":1}}],[\"多数插件可以通过选项\",{\"1\":{\"643\":1}}],[\"多达13种拦截方法\",{\"1\":{\"509\":1}}],[\"多人协作并行开发\",{\"1\":{\"365\":1}}],[\"多个文件压缩就有多个\",{\"1\":{\"585\":1}}],[\"多个子元素\",{\"1\":{\"540\":1}}],[\"多个\",{\"1\":{\"170\":1}}],[\"多维数组\",{\"1\":{\"126\":1}}],[\"原因在于\",{\"1\":{\"571\":1}}],[\"原生标签节点\",{\"1\":{\"269\":1}}],[\"原生事件\",{\"1\":{\"240\":1,\"241\":7}}],[\"原生事件绑定方式\",{\"1\":{\"240\":1}}],[\"原生组件等等\",{\"1\":{\"170\":1}}],[\"原理基本一致\",{\"1\":{\"280\":1}}],[\"原理\",{\"0\":{\"229\":1,\"345\":1,\"403\":1,\"418\":1,\"422\":1,\"438\":1,\"460\":1,\"497\":1},\"1\":{\"509\":1}}],[\"原子类型\",{\"0\":{\"108\":1}}],[\"首屏加载块\",{\"1\":{\"598\":1}}],[\"首屏加载更快\",{\"1\":{\"598\":1}}],[\"首字节到达时间\",{\"1\":{\"573\":1}}],[\"首次有意义内容绘制\",{\"1\":{\"576\":1}}],[\"首次互动延迟\",{\"1\":{\"571\":1}}],[\"首次内容渲染\",{\"1\":{\"567\":1,\"576\":1}}],[\"首次打开\",{\"1\":{\"527\":1}}],[\"首次显示页面\",{\"1\":{\"518\":1}}],[\"首次渲染大量dom时\",{\"1\":{\"164\":1}}],[\"首页\",{\"1\":{\"454\":2}}],[\"首先对基本类型进行比较\",{\"1\":{\"280\":1}}],[\"首先给出一个例子\",{\"1\":{\"255\":1}}],[\"首先给出一个示例\",{\"1\":{\"197\":1}}],[\"首先被这个统一的事件监听器处理\",{\"1\":{\"240\":1}}],[\"首先\",{\"1\":{\"170\":1}}],[\"兄弟组件通信\",{\"1\":{\"386\":1}}],[\"兄弟组件之间的通信\",{\"0\":{\"156\":1},\"1\":{\"153\":1}}],[\"兄弟节点的return指向同一个父节点\",{\"1\":{\"169\":1}}],[\"新一代构建工具\",{\"1\":{\"502\":1}}],[\"新节点在旧节点中的位置\",{\"1\":{\"460\":1}}],[\"新节点的start索引+1\",{\"1\":{\"422\":1}}],[\"新节点的end索引\",{\"1\":{\"422\":1}}],[\"新的子虚拟节点数组\",{\"1\":{\"460\":1}}],[\"新的变量简单的引用了原始变量\",{\"1\":{\"140\":1}}],[\"新旧头尾指针进行比较\",{\"1\":{\"423\":1}}],[\"新旧节点自身不一样\",{\"1\":{\"422\":1}}],[\"新旧节点自身一样\",{\"1\":{\"422\":1}}],[\"新旧节点c相同\",{\"1\":{\"421\":1}}],[\"新老节点的end索引\",{\"1\":{\"422\":1}}],[\"新老节点的end相同\",{\"1\":{\"422\":1}}],[\"新老节点的start索引+1\",{\"1\":{\"422\":1}}],[\"新老节点的start相同\",{\"1\":{\"422\":1}}],[\"新增列表项\",{\"1\":{\"541\":1}}],[\"新增的属性自然不具备响应式\",{\"1\":{\"403\":1}}],[\"新增节点6至下标为4的位置\",{\"1\":{\"233\":1}}],[\"新建一个空分支\",{\"1\":{\"380\":1}}],[\"新建一个分支\",{\"1\":{\"380\":1}}],[\"新特性\",{\"0\":{\"507\":1},\"1\":{\"379\":1}}],[\"新组件再进入\",{\"1\":{\"324\":1}}],[\"新key在之前没有\",{\"1\":{\"273\":1}}],[\"新集合的遍历下标\",{\"1\":{\"232\":1}}],[\"新版生命周期整体流程如下图所示\",{\"1\":{\"186\":1}}],[\"新架构下的\",{\"1\":{\"169\":1}}],[\"优化项目的依赖关系\",{\"1\":{\"631\":1}}],[\"优化模块id\",{\"1\":{\"631\":1}}],[\"优化webpack\",{\"1\":{\"631\":1}}],[\"优化\",{\"1\":{\"629\":1}}],[\"优化等\",{\"1\":{\"622\":1}}],[\"优化图片等手段\",{\"1\":{\"582\":1}}],[\"优化手段\",{\"0\":{\"528\":1}}],[\"优秀\",{\"1\":{\"524\":1}}],[\"优先级处理\",{\"1\":{\"483\":1}}],[\"优先级高的任务可以中断低优先级的任务\",{\"1\":{\"169\":1}}],[\"优点\",{\"1\":{\"365\":1,\"367\":1,\"368\":1,\"371\":1,\"560\":1}}],[\"优势\",{\"0\":{\"265\":1},\"1\":{\"407\":1}}],[\"优缺点\",{\"0\":{\"164\":1}}],[\"动画\",{\"1\":{\"219\":1}}],[\"动画等任务无法立即得到处理\",{\"1\":{\"168\":1}}],[\"动态加载\",{\"1\":{\"631\":1}}],[\"动态内容直出html\",{\"1\":{\"598\":1}}],[\"动态url的异步请求\",{\"1\":{\"598\":1}}],[\"动态导入是es6提供的新特性\",{\"1\":{\"548\":1}}],[\"动态地加载所需的组件\",{\"1\":{\"547\":1}}],[\"动态地扩展对象功能\",{\"1\":{\"351\":1}}],[\"动态的属性不具备响应式\",{\"1\":{\"509\":1}}],[\"动态添加属性的问题\",{\"0\":{\"402\":1}}],[\"动态输入\",{\"1\":{\"203\":1}}],[\"动态创建的属性将仅能在此类实例上使用\",{\"1\":{\"89\":1}}],[\"动态属性\",{\"0\":{\"89\":1}}],[\"才指明确切的类型\",{\"1\":{\"350\":1}}],[\"才初始化this\",{\"1\":{\"317\":1}}],[\"才会交给渲染的线程\",{\"1\":{\"168\":1}}],[\"才能知道确切的值\",{\"1\":{\"22\":1}}],[\"线程长时间地占用了主线程\",{\"1\":{\"168\":1}}],[\"背景\",{\"0\":{\"168\":1}}],[\"带来更多特性\",{\"1\":{\"636\":1}}],[\"带来了跨平台的能力\",{\"1\":{\"164\":1}}],[\"带有\",{\"1\":{\"127\":1}}],[\"提前加载\",{\"1\":{\"623\":1}}],[\"提前链接\",{\"1\":{\"597\":1}}],[\"提升代码可读性和复用性\",{\"1\":{\"503\":1}}],[\"提升代码健壮性\",{\"1\":{\"502\":1}}],[\"提高了用户的满意度\",{\"1\":{\"600\":1}}],[\"提高资源的加载速度\",{\"1\":{\"582\":1}}],[\"提高页面的多次渲染效率主要在于正确使用setdata\",{\"1\":{\"530\":1}}],[\"提高可维护性\",{\"1\":{\"407\":1}}],[\"提高代码复用率\",{\"1\":{\"265\":1}}],[\"提高性能\",{\"1\":{\"164\":1}}],[\"提供自己的api\",{\"1\":{\"407\":1}}],[\"提供git仓库托管服务\",{\"1\":{\"374\":1}}],[\"提供的\",{\"1\":{\"215\":1}}],[\"提供了可靠的抽象和封装界限\",{\"1\":{\"625\":1}}],[\"提供了非常完善\",{\"1\":{\"524\":1}}],[\"提供了方法的实现\",{\"1\":{\"477\":1}}],[\"提供了\",{\"1\":{\"232\":1}}],[\"提供了一套附加的预定数组\",{\"1\":{\"141\":1}}],[\"提供了一些流程控制的替代语法\",{\"1\":{\"53\":1}}],[\"提供了许多\",{\"1\":{\"141\":1}}],[\"提取\",{\"1\":{\"215\":1}}],[\"提交审核\",{\"1\":{\"523\":1}}],[\"提交代码到本地仓库\",{\"1\":{\"379\":1}}],[\"提交时显示所有的diff信息\",{\"1\":{\"379\":1}}],[\"提交时验证\",{\"1\":{\"203\":1}}],[\"提交某些文件到缓冲区\",{\"1\":{\"379\":1}}],[\"提交全部文件修改到缓存区\",{\"1\":{\"376\":1,\"379\":1}}],[\"提交更新\",{\"1\":{\"375\":1}}],[\"提交\",{\"1\":{\"202\":1,\"203\":1}}],[\"性能的瓶颈主要在于渲染阶段\",{\"1\":{\"604\":1}}],[\"性能分析工具\",{\"0\":{\"577\":1}}],[\"性能更优\",{\"1\":{\"503\":1}}],[\"性能优化等强大的功能\",{\"1\":{\"621\":1}}],[\"性能优化\",{\"0\":{\"285\":1,\"565\":1},\"2\":{\"544\":1,\"563\":1,\"581\":1,\"587\":1,\"590\":1,\"593\":1,\"602\":1,\"613\":1}}],[\"性能问题依然会困扰我们\",{\"1\":{\"277\":1}}],[\"性能问题欠缺\",{\"1\":{\"250\":1}}],[\"性能方面\",{\"1\":{\"164\":1,\"250\":1}}],[\"性能差\",{\"1\":{\"164\":1}}],[\"繁琐又容易出错\",{\"1\":{\"164\":1}}],[\"易于学习和使用\",{\"1\":{\"373\":1}}],[\"易于学习\",{\"1\":{\"372\":1}}],[\"易于导致重绘与回流\",{\"1\":{\"164\":1}}],[\"易用\",{\"1\":{\"164\":1}}],[\"频繁操作真实dom\",{\"1\":{\"164\":1}}],[\"缺点\",{\"1\":{\"164\":2,\"221\":1,\"367\":1,\"368\":1,\"371\":1,\"392\":3,\"606\":1}}],[\"收到该响应后\",{\"1\":{\"558\":1}}],[\"收到第一个更新dom请求后\",{\"1\":{\"163\":1}}],[\"收集依赖\",{\"1\":{\"501\":1}}],[\"收集标识符\",{\"1\":{\"35\":1}}],[\"收集可见var声明\",{\"1\":{\"22\":1}}],[\"传送\",{\"1\":{\"507\":1}}],[\"传给指令的参数\",{\"1\":{\"427\":1}}],[\"传递给下一个\",{\"1\":{\"636\":1}}],[\"传递给子组件\",{\"1\":{\"386\":1}}],[\"传递给当前组件的所有非\",{\"1\":{\"386\":1}}],[\"传递到指定变量中\",{\"1\":{\"64\":1}}],[\"传入hook\",{\"0\":{\"293\":1},\"1\":{\"289\":1}}],[\"传入函数\",{\"0\":{\"292\":1},\"1\":{\"289\":1}}],[\"传入对象\",{\"0\":{\"291\":1},\"1\":{\"289\":1}}],[\"传入的字符串的格式获取对应的元素\",{\"1\":{\"289\":1}}],[\"传入字符串\",{\"0\":{\"290\":1},\"1\":{\"289\":1}}],[\"传统的原生api或jquery去操作dom时\",{\"1\":{\"163\":1}}],[\"增加服务器压力\",{\"1\":{\"534\":1}}],[\"增加了异步任务\",{\"1\":{\"169\":1}}],[\"增加环境中的内置对象\",{\"1\":{\"14\":1}}],[\"增删改+排版与重绘\",{\"1\":{\"163\":1}}],[\"完成语句语义的表达\",{\"1\":{\"667\":1}}],[\"完成语义的一个雷子\",{\"1\":{\"658\":1}}],[\"完成记录是一个正常完成\",{\"1\":{\"660\":1}}],[\"完成这个复用组件在不同场景的应用\",{\"1\":{\"495\":1}}],[\"完全\",{\"1\":{\"163\":1}}],[\"完整的类名\",{\"1\":{\"49\":1}}],[\"区别主要如下\",{\"1\":{\"250\":1}}],[\"区别\",{\"0\":{\"163\":1,\"192\":1,\"211\":1,\"225\":1,\"250\":1,\"312\":1,\"356\":1,\"408\":1,\"417\":1},\"1\":{\"312\":1}}],[\"第五次循环\",{\"1\":{\"421\":1}}],[\"第四次循环\",{\"1\":{\"421\":1}}],[\"第三方库初始化\",{\"1\":{\"465\":1}}],[\"第三次循环\",{\"1\":{\"421\":1}}],[\"第三个参数是节点中的文本\",{\"1\":{\"162\":1}}],[\"第二次循环后\",{\"1\":{\"421\":1}}],[\"第二个值为更新state的函数\",{\"1\":{\"255\":1}}],[\"第二个参数为执行函数上下文\",{\"1\":{\"491\":1}}],[\"第二个参数为上一个状态的state\",{\"1\":{\"177\":1}}],[\"第二个参数可以是对象数据\",{\"1\":{\"427\":1}}],[\"第二个参数是个对象\",{\"1\":{\"162\":1}}],[\"第一帧呈现时间适用于\",{\"1\":{\"569\":1}}],[\"第一次循环结束后\",{\"1\":{\"421\":1}}],[\"第一件事就是设置你的用户名和邮件地址\",{\"1\":{\"377\":1}}],[\"第一个值为当前的state\",{\"1\":{\"255\":1}}],[\"第一个参数是回调函数\",{\"1\":{\"491\":1}}],[\"第一个参数是指令的名字\",{\"1\":{\"427\":1}}],[\"第一个参数是标签名\",{\"1\":{\"162\":1}}],[\"第一个参数为即将更新的props\",{\"1\":{\"177\":1}}],[\"右边千万不能加引号\",{\"1\":{\"162\":1}}],[\"右移\",{\"1\":{\"96\":1}}],[\"真实dom的优势\",{\"1\":{\"164\":1}}],[\"真实dom的总损耗是\",{\"1\":{\"163\":1}}],[\"真实dom\",{\"1\":{\"162\":1,\"163\":1}}],[\"真实dom和虚拟dom\",{\"0\":{\"162\":1}}],[\"总阻塞时间\",{\"1\":{\"575\":1}}],[\"总的来讲\",{\"1\":{\"255\":1}}],[\"总是可变的\",{\"1\":{\"197\":1}}],[\"总结\",{\"0\":{\"159\":1,\"186\":1,\"270\":1,\"274\":1,\"282\":1,\"299\":1,\"318\":1,\"423\":1}}],[\"总来来说\",{\"1\":{\"37\":1}}],[\"向\",{\"1\":{\"627\":1}}],[\"向循环中间靠拢\",{\"1\":{\"423\":1}}],[\"向一个响应式对象中添加一个property\",{\"1\":{\"404\":1}}],[\"向下传递事件\",{\"1\":{\"389\":1}}],[\"向下捕获事件\",{\"1\":{\"389\":1}}],[\"向子组件中传入一个函数\",{\"1\":{\"155\":1}}],[\"向它运行的任何脚本提供了大量的预定义常量\",{\"1\":{\"48\":1}}],[\"拿到子组件传过来的值\",{\"1\":{\"155\":1}}],[\"子包也不建议太大\",{\"1\":{\"529\":1}}],[\"子节点不完全一致\",{\"1\":{\"422\":1}}],[\"子类和类的内部可以访问\",{\"1\":{\"341\":1}}],[\"子类可以对父类的方法重新定义\",{\"1\":{\"340\":1}}],[\"子类就得不到this对象\",{\"1\":{\"316\":1}}],[\"子类是没有自己的this对象的\",{\"1\":{\"316\":1}}],[\"子元素事件监听\",{\"1\":{\"241\":2}}],[\"子元素\",{\"1\":{\"241\":2}}],[\"子树中最后一个side\",{\"1\":{\"169\":1}}],[\"子树中第一个side\",{\"1\":{\"169\":1}}],[\"子组件的配置会覆盖父组件的同名属性\",{\"1\":{\"483\":1}}],[\"子组件的mounted早于父组件的mounted\",{\"1\":{\"467\":1}}],[\"子组件等\",{\"1\":{\"470\":1}}],[\"子组件交互\",{\"1\":{\"467\":1}}],[\"子组件后进行模板编译\",{\"1\":{\"465\":1}}],[\"子组件也会渲染\",{\"1\":{\"299\":1}}],[\"子组件并没有发生任何改变\",{\"1\":{\"278\":1}}],[\"子组件一定也会执行render渲染\",{\"1\":{\"278\":1}}],[\"子组件对应代码如下\",{\"1\":{\"155\":1}}],[\"子组件向父组件通信的基本思路是\",{\"1\":{\"155\":1}}],[\"子组件向父组件传递\",{\"0\":{\"155\":1},\"1\":{\"153\":1}}],[\"子组件通过props属性就能接收父组件传递过来的参数\",{\"1\":{\"154\":1}}],[\"子句的后面\",{\"1\":{\"67\":1}}],[\"子句的\",{\"1\":{\"67\":1}}],[\"父子组件渲染顺序\",{\"0\":{\"474\":1}}],[\"父子组件通信\",{\"1\":{\"386\":1}}],[\"父级真实dom\",{\"1\":{\"460\":1}}],[\"父级作用域改变的值反映在函数调用中\",{\"1\":{\"67\":1}}],[\"父元素事件监听\",{\"1\":{\"241\":2}}],[\"父元素\",{\"1\":{\"241\":2}}],[\"父组件生命周期完成后\",{\"1\":{\"474\":1}}],[\"父组件编译完模板后\",{\"1\":{\"474\":1}}],[\"父组件先进行模板编译\",{\"1\":{\"465\":1}}],[\"父组件\",{\"1\":{\"386\":1}}],[\"父组件通过props传递b\",{\"1\":{\"386\":1}}],[\"父组件中转\",{\"1\":{\"386\":1}}],[\"父组件或者祖先组件的\",{\"1\":{\"299\":1}}],[\"父组件变化不会渲染子组件\",{\"1\":{\"298\":1}}],[\"父组件渲染导致子组件渲染\",{\"1\":{\"278\":1}}],[\"父组件一旦发生render渲染\",{\"1\":{\"278\":1}}],[\"父组件对应代码如下\",{\"1\":{\"155\":1}}],[\"父组件在调用子组件的时候\",{\"1\":{\"154\":1}}],[\"父组件向子组件传一个函数\",{\"1\":{\"155\":1}}],[\"父组件向子组件传递是最常见的方式\",{\"1\":{\"154\":1}}],[\"父组件向子组件传递\",{\"0\":{\"154\":1},\"1\":{\"153\":1}}],[\"父组件向后代组件传递数据是一件最普通的事情\",{\"1\":{\"157\":1}}],[\"父组件向后代组件传递\",{\"0\":{\"157\":1},\"1\":{\"153\":1}}],[\"超全局数组中的内容\",{\"1\":{\"150\":1}}],[\"确保模块能够按照正确的顺序被加载和执行\",{\"1\":{\"631\":1}}],[\"确保你的网站在真实用户的设备上表现卓越\",{\"1\":{\"580\":1}}],[\"确保在切换过程中条件块内的事件监听器和子组件适当地被销毁和重建\",{\"1\":{\"447\":1}}],[\"确保用户只能访问到被分配的资源\",{\"1\":{\"392\":1}}],[\"确保由不同人所编辑的同一程序文件都得到同步\",{\"1\":{\"365\":1}}],[\"确保了\",{\"1\":{\"317\":1}}],[\"确保后面对$color\",{\"1\":{\"128\":1}}],[\"确定资源是否有变更\",{\"1\":{\"556\":1}}],[\"确定是否要重新渲染\",{\"1\":{\"279\":1}}],[\"确定变量类型\",{\"0\":{\"150\":1}}],[\"出错\",{\"1\":{\"703\":1}}],[\"出错失败前有了最后一个机会加载所需的类\",{\"1\":{\"92\":1}}],[\"出现在代换式某个位置的右侧\",{\"1\":{\"687\":1}}],[\"出现问题时可以用排除法直接移除组件\",{\"1\":{\"407\":1}}],[\"出于此原因\",{\"1\":{\"149\":1}}],[\"很多系统中都有内置\",{\"1\":{\"367\":1}}],[\"很明显这不是想要的结果\",{\"1\":{\"149\":1}}],[\"很自然的就组成了一个作用域链\",{\"1\":{\"33\":1}}],[\"信息头中的一部分\",{\"1\":{\"148\":1}}],[\"变化时直接找到该地方进行比较\",{\"1\":{\"508\":1}}],[\"变化\",{\"1\":{\"268\":1}}],[\"变为\",{\"1\":{\"147\":1}}],[\"变成了\",{\"1\":{\"147\":1}}],[\"变量名中的合法字符\",{\"1\":{\"149\":1}}],[\"变量名中的点\",{\"0\":{\"149\":1}}],[\"变量名中的点和空格被转换成下划线\",{\"1\":{\"147\":1}}],[\"变量名\",{\"1\":{\"147\":1}}],[\"变量名是区分大小写的\",{\"1\":{\"139\":1}}],[\"变量作用域的另一个重要特性是\",{\"1\":{\"144\":1}}],[\"变量用一个美元符号后面跟变量名来表示\",{\"1\":{\"139\":1}}],[\"变量将被替换\",{\"1\":{\"122\":1}}],[\"变量是否属于某一类\",{\"1\":{\"103\":1}}],[\"变量\",{\"0\":{\"139\":1},\"1\":{\"77\":1,\"120\":1,\"140\":1,\"142\":1,\"144\":1,\"148\":1,\"255\":1}}],[\"变量声明绑定\",{\"1\":{\"32\":1}}],[\"变量环境指向全局环境记录器等\",{\"1\":{\"21\":1}}],[\"queryselector\",{\"1\":{\"552\":1}}],[\"query\",{\"1\":{\"147\":1,\"585\":1,\"636\":1}}],[\"quotes\",{\"1\":{\"65\":1}}],[\"正常的的ts项目开发过程中不建议使用命名空间\",{\"1\":{\"356\":1}}],[\"正如componentwillunmount\",{\"1\":{\"195\":1}}],[\"正确\",{\"1\":{\"144\":2}}],[\"正在运行的执行上下文始终是该栈顶部元素\",{\"1\":{\"9\":1}}],[\"还需要\",{\"1\":{\"623\":1}}],[\"还需要更多的的字段进行标识\",{\"1\":{\"392\":1}}],[\"还需要更多的字段进行标识\",{\"1\":{\"392\":1}}],[\"还保留源文件\",{\"1\":{\"585\":1}}],[\"还会造成网络拥塞\",{\"1\":{\"534\":1}}],[\"还会整体遍历老集合中节点\",{\"1\":{\"232\":1}}],[\"还有一种特殊类型的静态语义是先觉错误\",{\"1\":{\"668\":1}}],[\"还有一个代码包的下载过程\",{\"1\":{\"529\":1}}],[\"还有很多额外的hooks\",{\"1\":{\"257\":1}}],[\"还是等于\",{\"1\":{\"256\":1}}],[\"还是1\",{\"1\":{\"232\":1}}],[\"还提供了组件栈追踪\",{\"1\":{\"236\":1}}],[\"还允许使用动态表达式\",{\"1\":{\"144\":1}}],[\"还可以通过配置中的\",{\"1\":{\"645\":1}}],[\"还可以在\",{\"1\":{\"636\":1}}],[\"还可以访问源文件双重保障\",{\"1\":{\"585\":1}}],[\"还可以传递对象\",{\"1\":{\"311\":1}}],[\"还可以是对象的方法\",{\"1\":{\"132\":1}}],[\"还可以轻松输出任何文本\",{\"1\":{\"70\":1}}],[\"那么这条代换式存在\",{\"1\":{\"675\":1}}],[\"那么这条代换式就存在\",{\"1\":{\"675\":1}}],[\"那么非终结符中也有\",{\"1\":{\"675\":1}}],[\"那么不如使用预渲染\",{\"1\":{\"598\":1}}],[\"那么所有的clone的机器\",{\"1\":{\"374\":1}}],[\"那么this\",{\"1\":{\"318\":1}}],[\"那么直接删除这个组件下的所有子节点\",{\"1\":{\"231\":1}}],[\"那么直接删除b\",{\"1\":{\"230\":1}}],[\"那么ref\",{\"1\":{\"215\":1}}],[\"那么js线程会一直执行\",{\"1\":{\"168\":1}}],[\"那么渲染层面的更新就不得不长时间地等待\",{\"1\":{\"168\":1}}],[\"那么包含文件中的变量将如同在调用函数内部定义一样可用\",{\"1\":{\"142\":1}}],[\"那他很有可能是这样的\",{\"1\":{\"37\":1}}],[\"箭头函数会绑定父级作用域中的变量\",{\"1\":{\"142\":1}}],[\"服务器会核对资源的etag与if\",{\"1\":{\"559\":1}}],[\"服务器会核对资源的修改时间是否一致\",{\"1\":{\"558\":1}}],[\"服务器的行为使其可以容纳多用户\",{\"1\":{\"370\":1}}],[\"服务器\",{\"1\":{\"141\":1,\"374\":1}}],[\"服务端判断无效登陆状态时再返回需重新执行登录过程的消息给小程序\",{\"1\":{\"520\":1}}],[\"服务端比对session对应的记录\",{\"1\":{\"519\":1}}],[\"服务端渲染\",{\"1\":{\"236\":1}}],[\"服务端\",{\"1\":{\"15\":1}}],[\"修改bug\",{\"1\":{\"379\":1}}],[\"修改只要提交到版本控制系统\",{\"1\":{\"365\":1}}],[\"修改状态\",{\"1\":{\"298\":1}}],[\"修改状态等\",{\"1\":{\"225\":1}}],[\"修改第1个到第5个节点的innertext\",{\"1\":{\"233\":2}}],[\"修改dom样式等\",{\"1\":{\"183\":1}}],[\"修改\",{\"1\":{\"140\":1}}],[\"修饰符处理了许多dom事件的细节\",{\"1\":{\"389\":1}}],[\"修饰符声明属性\",{\"1\":{\"88\":1}}],[\"修饰符的属性将默认声明为public\",{\"1\":{\"86\":1}}],[\"修饰符\",{\"0\":{\"341\":1,\"389\":1},\"1\":{\"83\":1}}],[\"修饰符并禁止创建动态属性\",{\"1\":{\"83\":1}}],[\"修饰符来标记类\",{\"1\":{\"83\":1}}],[\"赋值给\",{\"1\":{\"215\":1}}],[\"赋值异常\",{\"1\":{\"88\":1}}],[\"赋给图的初版一个版本等级\",{\"1\":{\"365\":1}}],[\"赋给\",{\"1\":{\"140\":1}}],[\"zoom=\",{\"1\":{\"263\":1}}],[\"zoom\",{\"1\":{\"263\":1}}],[\"z\",{\"1\":{\"139\":2}}],[\"充当上述类型别名\",{\"1\":{\"136\":1}}],[\"到你的项目中\",{\"1\":{\"618\":1}}],[\"到运行事件处理脚本所需的时间\",{\"1\":{\"572\":1}}],[\"到浏览器实际能够开始处理事件处理脚本以响应该互动的时间\",{\"1\":{\"571\":1}}],[\"到老节点索引的映射表\",{\"1\":{\"460\":1}}],[\"到新的props或者state时都会调用\",{\"1\":{\"181\":1}}],[\"到\",{\"1\":{\"136\":1,\"139\":1}}],[\"回调函数参数会传入一个元素对象\",{\"1\":{\"292\":1}}],[\"回调函数中可以返回一个清除函数\",{\"1\":{\"256\":1}}],[\"回调函数不止可以是简单函数\",{\"1\":{\"132\":1}}],[\"回调可以通过\",{\"1\":{\"132\":1}}],[\"回车\",{\"1\":{\"121\":1,\"698\":1}}],[\"图片文件等\",{\"1\":{\"622\":1}}],[\"图片等\",{\"1\":{\"622\":1}}],[\"图片体积上也更小\",{\"1\":{\"586\":1}}],[\"图片\",{\"1\":{\"560\":1,\"567\":1,\"596\":1}}],[\"图片资源压缩率有限\",{\"1\":{\"529\":1}}],[\"图片懒加载\",{\"1\":{\"428\":1}}],[\"图表之类的信息\",{\"1\":{\"392\":2}}],[\"图形画布区域等的特殊句柄\",{\"1\":{\"131\":1}}],[\"图示\",{\"1\":{\"19\":1}}],[\"数据集合\",{\"0\":{\"632\":1}}],[\"数据结构\",{\"1\":{\"627\":1}}],[\"数据渲染优化\",{\"0\":{\"604\":1}}],[\"数据通信的性能与数据量正相关\",{\"1\":{\"530\":1}}],[\"数据缓存能力\",{\"1\":{\"512\":1}}],[\"数据更新后\",{\"1\":{\"509\":1}}],[\"数据→视图\",{\"1\":{\"501\":1}}],[\"数据变化时通知所有相关watcher重新执行\",{\"1\":{\"501\":1}}],[\"数据变化后\",{\"1\":{\"490\":1}}],[\"数据劫持\",{\"1\":{\"501\":1}}],[\"数据等\",{\"1\":{\"482\":1}}],[\"数据不同发生dom操作\",{\"1\":{\"459\":1}}],[\"数据不同\",{\"1\":{\"459\":3}}],[\"数据发生改变时\",{\"1\":{\"423\":1}}],[\"数据类型\",{\"0\":{\"330\":1,\"653\":1}}],[\"数据校验\",{\"1\":{\"216\":1}}],[\"数据的存储位置都是存放在上级位置中\",{\"1\":{\"159\":1}}],[\"数据数组中可用\",{\"1\":{\"148\":1}}],[\"数据会在相应的\",{\"1\":{\"148\":1}}],[\"数据\",{\"1\":{\"147\":1}}],[\"数据库连接\",{\"1\":{\"131\":1}}],[\"数字打点\",{\"1\":{\"437\":1}}],[\"数字枚举\",{\"1\":{\"344\":1}}],[\"数字\",{\"1\":{\"139\":1,\"311\":1}}],[\"数组中\",{\"1\":{\"643\":1}}],[\"数组索引修改的响应式支持有限\",{\"1\":{\"501\":1}}],[\"数组甚至是回调函数\",{\"1\":{\"311\":1}}],[\"数组\",{\"1\":{\"143\":1}}],[\"数组展开\",{\"0\":{\"127\":1}}],[\"数组解包可以方便的用于两个变量交换\",{\"1\":{\"126\":1}}],[\"数组解包始终从索引\",{\"1\":{\"126\":1}}],[\"数组解构\",{\"0\":{\"126\":1}}],[\"数组元素将会被忽略\",{\"1\":{\"126\":1}}],[\"数组运算符\",{\"0\":{\"102\":1}}],[\"资源管理\",{\"1\":{\"643\":1}}],[\"资源定位\",{\"1\":{\"632\":1}}],[\"资源体积优化\",{\"0\":{\"582\":1},\"1\":{\"582\":1}}],[\"资源未修改返回304\",{\"1\":{\"558\":1,\"559\":1}}],[\"资源不会缓存到本地\",{\"1\":{\"556\":1}}],[\"资源会缓存到本地\",{\"1\":{\"556\":2}}],[\"资源加载优化\",{\"0\":{\"546\":1},\"1\":{\"546\":1}}],[\"资源是通过专门的函数来建立和使用的\",{\"1\":{\"131\":1}}],[\"资源\",{\"1\":{\"131\":1}}],[\"资源类型变量保存有为打开文件\",{\"1\":{\"131\":1}}],[\"资源类型\",{\"0\":{\"131\":1}}],[\"目的\",{\"1\":{\"534\":1}}],[\"目前这种创建方式已经不怎么用了\",{\"1\":{\"209\":1}}],[\"目前只认识三个指令\",{\"1\":{\"55\":1}}],[\"目标是提供一种能力\",{\"1\":{\"130\":1}}],[\"拷贝\",{\"0\":{\"128\":1}}],[\"键盘修饰符\",{\"1\":{\"389\":1}}],[\"键名对应变量名\",{\"1\":{\"143\":1}}],[\"键的\",{\"1\":{\"127\":1}}],[\"键值只支持int和string\",{\"1\":{\"124\":1}}],[\"亦可用于\",{\"1\":{\"127\":1}}],[\"前者指示\",{\"1\":{\"638\":1}}],[\"前台进入后台\",{\"1\":{\"518\":1}}],[\"前后端配合要求更高\",{\"1\":{\"392\":1}}],[\"前端权限归根结底是请求的发起权\",{\"1\":{\"392\":1}}],[\"前端性能问题是一个必须考虑的问题\",{\"1\":{\"282\":1}}],[\"前面的元素由于是完全相同的\",{\"1\":{\"273\":1}}],[\"前面的元素在diff算法中\",{\"1\":{\"273\":1}}],[\"前面可以加上可选的符号\",{\"1\":{\"113\":1}}],[\"前缀为\",{\"1\":{\"661\":1}}],[\"前缀\",{\"1\":{\"186\":1,\"639\":3,\"662\":1}}],[\"前缀的一个\",{\"1\":{\"127\":1}}],[\"添加进去\",{\"1\":{\"450\":1}}],[\"添加vue实例方法\",{\"1\":{\"407\":1}}],[\"添加全局资源\",{\"1\":{\"407\":1}}],[\"添加全局方法或属性\",{\"1\":{\"407\":1}}],[\"添加功能\",{\"1\":{\"379\":1}}],[\"添加一个单元\",{\"1\":{\"125\":1}}],[\"添加\",{\"1\":{\"125\":2}}],[\"添加的新参数只能是可选\",{\"1\":{\"82\":1}}],[\"访问内置的插件\",{\"1\":{\"644\":1}}],[\"访问完整的组件实例\",{\"1\":{\"470\":1}}],[\"访问更新后dom\",{\"1\":{\"469\":1}}],[\"访问器\",{\"1\":{\"352\":1}}],[\"访问当前节点的方式如下\",{\"1\":{\"290\":1}}],[\"访问变量的第二个办法\",{\"1\":{\"143\":1}}],[\"访问\",{\"0\":{\"125\":1},\"1\":{\"261\":1,\"615\":1,\"645\":1}}],[\"访问控制\",{\"1\":{\"86\":1}}],[\"分开\",{\"1\":{\"639\":1}}],[\"分类\",{\"0\":{\"496\":1}}],[\"分为以下两种情况\",{\"1\":{\"422\":1}}],[\"分支更名\",{\"1\":{\"380\":1}}],[\"分支操作\",{\"0\":{\"380\":1}}],[\"分布式版本管理系统每个计算机都有一个完整仓库\",{\"1\":{\"371\":1}}],[\"分布式版本控制系统的客户端并不只是提取最新版本的文件快照\",{\"1\":{\"374\":1}}],[\"分布式版本控制系统\",{\"1\":{\"366\":1}}],[\"分析事件执行顺序\",{\"1\":{\"241\":1}}],[\"分批完成\",{\"1\":{\"170\":1}}],[\"分配给\",{\"1\":{\"124\":1}}],[\"分配负整数\",{\"1\":{\"124\":1}}],[\"分别是\",{\"1\":{\"378\":1}}],[\"分别为\",{\"1\":{\"232\":1}}],[\"分别对应\",{\"1\":{\"110\":1}}],[\"分别返回一个小于\",{\"1\":{\"97\":1}}],[\"分别换成\",{\"1\":{\"53\":1}}],[\"未处理的promise拒绝时触发\",{\"1\":{\"514\":1}}],[\"未批准变量自动推断类型\",{\"1\":{\"329\":1}}],[\"未完成的任务\",{\"1\":{\"170\":1}}],[\"未提供键值\",{\"1\":{\"124\":1}}],[\"未定义和\",{\"1\":{\"111\":1}}],[\"未定义的常量\",{\"1\":{\"47\":1}}],[\"由此可见对定义时存在的属性都进行这样的操作\",{\"1\":{\"403\":1}}],[\"由上到下依次调用\",{\"1\":{\"353\":1}}],[\"由\",{\"1\":{\"122\":1}}],[\"由于http\",{\"1\":{\"555\":1}}],[\"由于小程序后台授权域名无法授权微信的域名\",{\"1\":{\"519\":1}}],[\"由于每个组件的职责单一\",{\"1\":{\"407\":1}}],[\"由于是同步的操作\",{\"1\":{\"306\":1}}],[\"由于后面的数据会覆盖前面的更改\",{\"1\":{\"306\":1}}],[\"由于业务变动\",{\"1\":{\"253\":1}}],[\"由于dom节点的移动操作开销是比较昂贵的\",{\"1\":{\"233\":1}}],[\"由于多了一层虚拟dom的计算\",{\"1\":{\"164\":1}}],[\"由于react\",{\"1\":{\"211\":2}}],[\"由于react是单向数据流\",{\"1\":{\"159\":1}}],[\"由于react的数据流动为单向的\",{\"1\":{\"154\":1}}],[\"由于内部表达方式的原因\",{\"1\":{\"117\":1}}],[\"由于\",{\"1\":{\"72\":1,\"118\":1,\"615\":1,\"635\":1}}],[\"美元标记\",{\"1\":{\"121\":1}}],[\"垂直制表符\",{\"1\":{\"121\":1}}],[\"水平制表符\",{\"1\":{\"121\":1}}],[\"换成了component\",{\"1\":{\"231\":1}}],[\"换成冒号\",{\"1\":{\"53\":1}}],[\"换页\",{\"1\":{\"121\":1}}],[\"换行\",{\"1\":{\"121\":1,\"698\":1}}],[\"序列\",{\"1\":{\"121\":1}}],[\"双线程同时运行\",{\"1\":{\"525\":1}}],[\"双花括号插值\",{\"1\":{\"435\":1}}],[\"双向绑定的实现​​\",{\"1\":{\"501\":1}}],[\"双向绑定\",{\"1\":{\"389\":1,\"501\":1}}],[\"双引号的写法\",{\"1\":{\"699\":1}}],[\"双引号\",{\"0\":{\"121\":1},\"1\":{\"119\":1,\"121\":1}}],[\"双精度数\",{\"1\":{\"116\":1}}],[\"应将配置文件拆分成多个\",{\"1\":{\"615\":1}}],[\"应产生相同的输出文件\",{\"1\":{\"615\":1}}],[\"应编写自己的\",{\"1\":{\"615\":1}}],[\"应该是驼峰式命名的插件名称\",{\"1\":{\"646\":1}}],[\"应该是唯一的\",{\"1\":{\"274\":1}}],[\"应该叫类型表达式\",{\"1\":{\"331\":1}}],[\"应该用\",{\"1\":{\"118\":1}}],[\"应用插件\",{\"1\":{\"622\":1}}],[\"应用生命周期\",{\"1\":{\"518\":1}}],[\"应用的生命周期\",{\"0\":{\"514\":1}}],[\"应用场景\",{\"0\":{\"203\":1,\"216\":1,\"294\":1,\"437\":1,\"542\":1}}],[\"应用for\",{\"1\":{\"36\":2}}],[\"去和其它值进行比较\",{\"1\":{\"118\":1}}],[\"某些样式无法编写\",{\"1\":{\"221\":1}}],[\"某些样式没有提示\",{\"1\":{\"221\":1}}],[\"某些数学运算会产生一个由常量\",{\"1\":{\"118\":1}}],[\"某些语言构造调用\",{\"1\":{\"100\":1}}],[\"浮点型\",{\"1\":{\"116\":1}}],[\"产生出\",{\"1\":{\"115\":1}}],[\"产生式的目标结果\",{\"1\":{\"682\":1}}],[\"产生式的下标如果是\",{\"1\":{\"44\":1}}],[\"产生式的上下标\",{\"1\":{\"42\":1}}],[\"产生式用于说明或定义句子的组成结构\",{\"1\":{\"43\":1}}],[\"整个\",{\"1\":{\"646\":1}}],[\"整体使用方式与react\",{\"1\":{\"293\":1}}],[\"整体风格更清爽\",{\"1\":{\"258\":1}}],[\"整数除法\",{\"0\":{\"115\":1}}],[\"整型数值\",{\"1\":{\"113\":1}}],[\"范围\",{\"1\":{\"114\":1}}],[\"范围的全局环境\",{\"1\":{\"11\":1}}],[\"溢出\",{\"0\":{\"114\":1}}],[\"二进制数字\",{\"1\":{\"113\":1}}],[\"八进制\",{\"1\":{\"121\":1}}],[\"八进制数\",{\"1\":{\"113\":2}}],[\"八进制或二进制表示\",{\"1\":{\"113\":1}}],[\"十分类似\",{\"1\":{\"281\":1}}],[\"十进制数\",{\"1\":{\"113\":1}}],[\"十六进制转义\",{\"1\":{\"701\":1}}],[\"十六进制字面量产生式\",{\"1\":{\"681\":1}}],[\"十六进制数\",{\"1\":{\"113\":1}}],[\"十六进制\",{\"1\":{\"113\":1,\"121\":1}}],[\"根据配置参数\",{\"1\":{\"622\":1}}],[\"根据你在配置生成过程中的选择\",{\"1\":{\"618\":1}}],[\"根据http响应头内容的不同分两种\",{\"1\":{\"553\":1}}],[\"根据用户的需求\",{\"1\":{\"547\":1}}],[\"根据当前环境选择合适的方法\",{\"1\":{\"491\":1}}],[\"根据keys的顺序记录element\",{\"1\":{\"458\":1}}],[\"根据key更准确的找到对应的vnode节点\",{\"1\":{\"458\":1}}],[\"根据情况调用patchvnode进行patch重复流程\",{\"1\":{\"423\":1}}],[\"根据状态的变化生成不同的css样式\",{\"1\":{\"219\":1}}],[\"根据传送者和接收者可以分为如下\",{\"1\":{\"153\":1}}],[\"根据\",{\"1\":{\"109\":1,\"240\":1}}],[\"根据标识符的类型进行绑定\",{\"1\":{\"22\":1}}],[\"连接和\",{\"1\":{\"573\":1}}],[\"连接\",{\"1\":{\"109\":1}}],[\"符号\",{\"1\":{\"109\":1}}],[\"测试辅助功能\",{\"1\":{\"578\":1}}],[\"测试用例修改\",{\"1\":{\"379\":1}}],[\"测试\",{\"1\":{\"109\":1}}],[\"复选框和单选按钮\",{\"1\":{\"571\":1}}],[\"复杂对象属性监控\",{\"1\":{\"501\":1}}],[\"复杂业务场景下\",{\"1\":{\"277\":1}}],[\"复制childval\",{\"1\":{\"483\":1}}],[\"复制parentval\",{\"1\":{\"483\":1}}],[\"复制上一个记录器中的绑定和值\",{\"1\":{\"37\":1}}],[\"复合类型\",{\"0\":{\"109\":1}}],[\"枚举是在类\",{\"1\":{\"130\":1}}],[\"枚举\",{\"0\":{\"130\":1,\"344\":1},\"1\":{\"108\":1,\"329\":1}}],[\"枚举定义的自定义类型\",{\"1\":{\"108\":1}}],[\"单转义字符\",{\"1\":{\"700\":1,\"701\":1}}],[\"单个冒号表示句法\",{\"1\":{\"682\":1}}],[\"单位s\",{\"1\":{\"556\":1}}],[\"单位转换\",{\"1\":{\"437\":1}}],[\"单页应用spa是一种网络应用程序或网站的模型\",{\"1\":{\"395\":1}}],[\"单点故障\",{\"1\":{\"368\":1}}],[\"单向响应的数据流会比双向绑定的更安全\",{\"1\":{\"265\":1}}],[\"单向数据绑定\",{\"1\":{\"262\":1}}],[\"单链表用来快速查找下一个side\",{\"1\":{\"169\":1}}],[\"单引号\",{\"0\":{\"120\":1},\"1\":{\"119\":1,\"699\":1}}],[\"单值类型\",{\"1\":{\"108\":1}}],[\"单例类型\",{\"1\":{\"108\":1}}],[\"单行注释仅仅注释到行末或者当前的\",{\"1\":{\"74\":1}}],[\"内联方式\",{\"0\":{\"639\":1},\"1\":{\"637\":1}}],[\"内联样式\",{\"1\":{\"221\":1}}],[\"内联样式风格的方式来根据最新状态设置和改变css\",{\"1\":{\"219\":1}}],[\"内存占用量过高\",{\"1\":{\"164\":1}}],[\"内可用\",{\"1\":{\"142\":1}}],[\"内容渲染完成以后再加入dom\",{\"1\":{\"608\":1}}],[\"内容指的是文本\",{\"1\":{\"567\":1}}],[\"内容选择\",{\"1\":{\"294\":1}}],[\"内容\",{\"1\":{\"122\":1,\"576\":1}}],[\"内置类型\",{\"1\":{\"108\":1}}],[\"内部调用parsefloat\",{\"1\":{\"389\":1}}],[\"内部\",{\"1\":{\"317\":1}}],[\"内部也可以维护自身的状态以及做一些逻辑方面的处理\",{\"1\":{\"253\":1}}],[\"内部所定义的一种数据结构\",{\"1\":{\"169\":1}}],[\"内部可变正常\",{\"1\":{\"88\":1}}],[\"内部方法创建的\",{\"1\":{\"29\":1}}],[\"即只在需要时才加载相应的代码块\",{\"1\":{\"629\":1}}],[\"即只保留压缩后的\",{\"1\":{\"585\":1}}],[\"即点击链接\",{\"1\":{\"571\":1}}],[\"即新版本的小程序需要等下一次冷启动才会应用上\",{\"1\":{\"527\":1}}],[\"即为冷启动\",{\"1\":{\"527\":1}}],[\"即f\",{\"1\":{\"421\":2}}],[\"即浏览器原生事件的跨浏览器包装器\",{\"1\":{\"240\":1}}],[\"即可\",{\"1\":{\"223\":1,\"279\":1}}],[\"即可以中断与恢复\",{\"1\":{\"170\":1}}],[\"即时现场验证\",{\"1\":{\"203\":1}}],[\"即记录fiber更新过程\",{\"1\":{\"169\":1}}],[\"即调和过程\",{\"1\":{\"169\":1}}],[\"即没有加引号的字符串\",{\"1\":{\"149\":1}}],[\"即\",{\"1\":{\"147\":1,\"148\":1,\"450\":1,\"460\":1}}],[\"即对象\",{\"1\":{\"103\":1}}],[\"即使是在库加载之前发生的性能事件也能准确捕获\",{\"1\":{\"580\":1}}],[\"即使未注册事件监听器\",{\"1\":{\"571\":1}}],[\"即使没有事件监听器也会衡量\",{\"1\":{\"571\":1}}],[\"即使两者的结构非常类似\",{\"1\":{\"231\":1}}],[\"即使诊断信息被抑制\",{\"1\":{\"100\":1}}],[\"即使不使用钩子\",{\"1\":{\"90\":1}}],[\"即使该段落位于\",{\"1\":{\"72\":1}}],[\"相对于用户首次导航到网页的时间\",{\"1\":{\"569\":1}}],[\"相对类的类型\",{\"1\":{\"108\":1}}],[\"相比h5\",{\"1\":{\"512\":1}}],[\"相当于给onscroll事件整了一个\",{\"1\":{\"389\":1}}],[\"相当于本地克隆了远程仓库项目的一个副本\",{\"1\":{\"375\":1}}],[\"相当于本地写代码的区域\",{\"1\":{\"375\":1}}],[\"相当于一个可以装不同类型数据的数组\",{\"1\":{\"329\":1}}],[\"相当于调用sup\",{\"1\":{\"316\":1}}],[\"相当于类组件中componentwillunmount生命周期函数\",{\"1\":{\"256\":1}}],[\"相当于在componentdidmount和componentdidupdate两个生命周期函数中执行回调\",{\"1\":{\"256\":1}}],[\"相应的表单会被传送到服务器\",{\"1\":{\"147\":1}}],[\"相等\",{\"1\":{\"102\":1}}],[\"相同的响应处理过少\",{\"1\":{\"540\":1}}],[\"相同的响应事件过少\",{\"1\":{\"540\":1}}],[\"相同的响应事件\",{\"1\":{\"540\":1}}],[\"相同的事件处理\",{\"1\":{\"540\":1}}],[\"相同类型的节点\",{\"1\":{\"459\":10}}],[\"相同则调用patchvnode方法\",{\"1\":{\"423\":1}}],[\"相同点\",{\"1\":{\"312\":1}}],[\"相同\",{\"1\":{\"101\":1}}],[\"联合类型\",{\"0\":{\"333\":1},\"1\":{\"109\":1,\"110\":1,\"334\":1}}],[\"联合\",{\"1\":{\"102\":1}}],[\"`ttfb\",{\"1\":{\"574\":1}}],[\"`hello\",{\"1\":{\"352\":1}}],[\"`you\",{\"1\":{\"256\":4}}],[\"`$\",{\"1\":{\"216\":1}}],[\"`ls\",{\"1\":{\"101\":1}}],[\"`\",{\"1\":{\"101\":1,\"224\":2,\"352\":1,\"574\":1}}],[\"``\",{\"1\":{\"101\":1}}],[\"命令\",{\"1\":{\"618\":1}}],[\"命令来执行\",{\"1\":{\"101\":1}}],[\"命名空间不能识别组件之间的依赖关系\",{\"1\":{\"356\":1}}],[\"命名空间定义了标识符的可见范围\",{\"1\":{\"355\":1}}],[\"命名空间和模块\",{\"0\":{\"354\":1}}],[\"命名空间\",{\"0\":{\"355\":1},\"1\":{\"79\":1,\"84\":1}}],[\"命名参数不能覆盖已解包的参数\",{\"1\":{\"65\":1}}],[\"命名参数必须在位置参数之后\",{\"1\":{\"65\":1}}],[\"命名参数也可以与位置参数相结合使用\",{\"1\":{\"65\":1}}],[\"命名参数通过在参数名前加上冒号来传递\",{\"1\":{\"65\":1}}],[\"命名参数允许根据参数名而不是参数位置向函数传参\",{\"1\":{\"65\":1}}],[\"命名参数\",{\"0\":{\"65\":1},\"1\":{\"65\":1}}],[\"反斜杠\",{\"1\":{\"699\":1}}],[\"反斜杠转义\",{\"1\":{\"120\":1}}],[\"反斜线\",{\"1\":{\"121\":1}}],[\"反引号\",{\"1\":{\"101\":1}}],[\"反之亦然\",{\"1\":{\"96\":1,\"140\":1}}],[\"故意文件错误\",{\"1\":{\"100\":1}}],[\"设定多个值\",{\"1\":{\"148\":1}}],[\"设定了自定义的错误处理函数\",{\"1\":{\"100\":1}}],[\"设置bundle\",{\"0\":{\"630\":1}}],[\"设置一个新的\",{\"0\":{\"618\":1}}],[\"设置一个合适的时间间隔\",{\"1\":{\"539\":1}}],[\"设置缓存的最大有效期\",{\"1\":{\"556\":1}}],[\"设置key与不设置key的差异\",{\"0\":{\"459\":1}}],[\"设置了缓存的组件会多出来两个生命周期钩子\",{\"1\":{\"453\":1}}],[\"设置主分支\",{\"1\":{\"450\":1}}],[\"设置display\",{\"1\":{\"449\":1}}],[\"设置全局错误处理函数\",{\"1\":{\"431\":1}}],[\"设置新旧vnode的头尾指针\",{\"1\":{\"423\":1}}],[\"设置提交代码的用户信息命令如下\",{\"1\":{\"377\":1}}],[\"设置\",{\"1\":{\"112\":1}}],[\"设置为它真正的值\",{\"1\":{\"660\":1}}],[\"设置为\",{\"1\":{\"38\":1,\"660\":1}}],[\"设置当前上下文的词法环境为loopenv\",{\"1\":{\"37\":1}}],[\"设置当前上下文的词法环境为blockenv\",{\"1\":{\"34\":1}}],[\"设置scriptcontext的词法环境\",{\"1\":{\"21\":1}}],[\"乍看起来下面的输出是\",{\"1\":{\"98\":1}}],[\"弃用依靠左联\",{\"1\":{\"98\":1}}],[\"弃用使用单个下划线\",{\"1\":{\"77\":1}}],[\"三元运算符是非关联的\",{\"1\":{\"98\":1}}],[\"三元运算符是从左到右执行的\",{\"1\":{\"98\":1}}],[\"三元运算符的例子\",{\"1\":{\"98\":1}}],[\"三元表达式\",{\"0\":{\"98\":1}}],[\"三种php标记\",{\"1\":{\"71\":1,\"127\":1}}],[\"组织\",{\"1\":{\"629\":1}}],[\"组\",{\"1\":{\"627\":1}}],[\"组成字符串\",{\"1\":{\"375\":1}}],[\"组合式api\",{\"1\":{\"503\":1,\"507\":1}}],[\"组合高阶组件\",{\"1\":{\"215\":1}}],[\"组合比较符\",{\"1\":{\"97\":1}}],[\"组价会再次会调用render\",{\"1\":{\"210\":1}}],[\"组件所在的页面被隐藏时执行\",{\"1\":{\"517\":1}}],[\"组件所在的页面被展示时执行\",{\"1\":{\"517\":1}}],[\"组件所在页面的生命周期\",{\"0\":{\"517\":1}}],[\"组件方法抛出错误\",{\"1\":{\"516\":1}}],[\"组件定义\",{\"1\":{\"503\":1}}],[\"组件化开发\",{\"1\":{\"501\":1}}],[\"组件通过mixins属性调用mixin对象\",{\"1\":{\"479\":1}}],[\"组件通信主要分为以下几类\",{\"1\":{\"386\":1}}],[\"组件通信\",{\"0\":{\"153\":1,\"386\":1}}],[\"组件未挂载\",{\"1\":{\"465\":1}}],[\"组件或普通元素处理\",{\"1\":{\"443\":1}}],[\"组件创建完成\",{\"1\":{\"516\":1}}],[\"组件创建时进行选项合并\",{\"1\":{\"418\":1}}],[\"组件创建和更新阶段\",{\"1\":{\"177\":1}}],[\"组件是业务模块\",{\"1\":{\"409\":1}}],[\"组件是把图形\",{\"1\":{\"407\":1}}],[\"组件注册有全局注册和局部注册\",{\"1\":{\"408\":1}}],[\"组件有vue单文件\",{\"1\":{\"408\":1}}],[\"组件和插件的区别\",{\"0\":{\"407\":1}}],[\"组件接受属性的装饰器\",{\"1\":{\"360\":1}}],[\"组件从概念上看就是一个函数\",{\"1\":{\"311\":1}}],[\"组件内的\",{\"1\":{\"298\":1}}],[\"组件里暴露\",{\"1\":{\"294\":1}}],[\"组件式开发\",{\"1\":{\"265\":1}}],[\"组件式开发选择合适的css解决方案尤为重要\",{\"1\":{\"219\":1}}],[\"组件可以是一个函数或者是一个类\",{\"1\":{\"264\":1}}],[\"组件在加载和更新阶段都执行同样操作\",{\"1\":{\"256\":1}}],[\"组件中引入css文件\",{\"0\":{\"222\":1}}],[\"组件中引入\",{\"0\":{\"223\":1},\"1\":{\"220\":2,\"222\":1,\"225\":1}}],[\"组件渲染时间为\",{\"1\":{\"216\":1}}],[\"组件上使用\",{\"1\":{\"215\":1}}],[\"组件的生命周期\",{\"0\":{\"516\":1}}],[\"组件的选项\",{\"1\":{\"482\":1}}],[\"组件的\",{\"1\":{\"299\":1}}],[\"组件的创建主要分成了三种方式\",{\"1\":{\"207\":1}}],[\"组件的状态全程响应外部数据\",{\"1\":{\"201\":1}}],[\"组件就是把图形\",{\"1\":{\"206\":1}}],[\"组件更新结束后触发\",{\"1\":{\"183\":1}}],[\"组件挂载到真实dom节点后执行\",{\"1\":{\"179\":1}}],[\"组件传递的方式有很多种\",{\"1\":{\"153\":1}}],[\"组件\",{\"1\":{\"10\":2,\"206\":1,\"236\":1,\"386\":3}}],[\"太空船运算符\",{\"1\":{\"97\":1}}],[\"大约有四个阶段\",{\"1\":{\"463\":1}}],[\"大部分是由dom操作引起的\",{\"1\":{\"399\":1}}],[\"大部分时候推荐使用受控组件来实现表单\",{\"1\":{\"203\":1}}],[\"大量的样式\",{\"1\":{\"221\":1}}],[\"大量的概念横跨整个文档\",{\"1\":{\"42\":1}}],[\"大多数情况下\",{\"1\":{\"277\":1}}],[\"大多数组件可以写为无状态组件\",{\"1\":{\"208\":1}}],[\"大多数\",{\"1\":{\"150\":1}}],[\"大于0的\",{\"1\":{\"97\":1}}],[\"大于或者等于\",{\"1\":{\"97\":1}}],[\"大于等于\",{\"1\":{\"97\":1}}],[\"大于\",{\"1\":{\"97\":2}}],[\"严格模式\",{\"1\":{\"702\":1}}],[\"严格模式下函数不会被实例化\",{\"1\":{\"22\":1}}],[\"严格来说\",{\"1\":{\"331\":1}}],[\"严格大于\",{\"1\":{\"97\":1}}],[\"严格小于\",{\"1\":{\"97\":1}}],[\"全等\",{\"1\":{\"97\":1,\"102\":1}}],[\"全局只触发一次\",{\"1\":{\"514\":1}}],[\"全局混用会影响到每一个组件实例\",{\"1\":{\"480\":1}}],[\"全局混入\",{\"0\":{\"480\":1}}],[\"全局混入来添加一些组件选项\",{\"1\":{\"407\":1}}],[\"全局状态预加载\",{\"1\":{\"464\":1}}],[\"全局状态管理\",{\"1\":{\"386\":2}}],[\"全局守卫里\",{\"1\":{\"392\":1}}],[\"全局路由守卫里\",{\"1\":{\"392\":3}}],[\"全局变量\",{\"1\":{\"386\":1}}],[\"全局组件通信\",{\"1\":{\"386\":1}}],[\"全局声明实例化\",{\"1\":{\"33\":1}}],[\"全局声明实例化以后的调用栈\",{\"1\":{\"21\":1,\"22\":1}}],[\"全局作用域中this返回的值\",{\"1\":{\"32\":1}}],[\"全局环境记录用于表示所有在同一个realm中处理的ecmascript\",{\"1\":{\"32\":1}}],[\"全局环境记录器\",{\"1\":{\"11\":1,\"19\":1,\"27\":1}}],[\"全局代码中的函数声明\",{\"1\":{\"32\":1}}],[\"全局代码\",{\"1\":{\"18\":1,\"38\":1}}],[\"全局对象\",{\"1\":{\"11\":1,\"32\":1}}],[\"比较时\",{\"1\":{\"671\":1}}],[\"比较e\",{\"1\":{\"459\":2}}],[\"比较d\",{\"1\":{\"459\":2}}],[\"比较c\",{\"1\":{\"459\":3}}],[\"比较b\",{\"1\":{\"459\":2}}],[\"比较a\",{\"1\":{\"459\":2}}],[\"比较只会再同层级进行\",{\"1\":{\"421\":1}}],[\"比较两个浮点数是否相等是有问题的\",{\"1\":{\"117\":1}}],[\"比较\",{\"0\":{\"117\":1},\"1\":{\"297\":1,\"506\":1}}],[\"比较运算\",{\"0\":{\"97\":1}}],[\"比如布局组件\",{\"1\":{\"495\":1}}],[\"比如构建流程\",{\"1\":{\"379\":1}}],[\"比如修饰符和抽象类\",{\"1\":{\"338\":1}}],[\"比如有一个按钮需要在on和off之间切换\",{\"1\":{\"324\":1}}],[\"比如伪类\",{\"1\":{\"221\":1}}],[\"比如操作\",{\"1\":{\"215\":1}}],[\"比如组件的滚动位置之类的\",{\"1\":{\"182\":1}}],[\"比如\",{\"1\":{\"86\":1,\"450\":1,\"560\":1}}],[\"乘以\",{\"1\":{\"96\":1}}],[\"次\",{\"1\":{\"96\":2}}],[\"左移\",{\"1\":{\"96\":1}}],[\"~return\",{\"1\":{\"676\":2}}],[\"~await\",{\"1\":{\"676\":1}}],[\"~yield\",{\"1\":{\"676\":2}}],[\"~等\",{\"1\":{\"673\":1}}],[\"~~\",{\"1\":{\"606\":1,\"607\":1,\"608\":1}}],[\"~\",{\"1\":{\"96\":1,\"675\":2}}],[\"另一个线程只能挂起等待\",{\"1\":{\"168\":1}}],[\"另一个为\",{\"1\":{\"96\":1}}],[\"另一行也是注释\",{\"1\":{\"74\":1}}],[\"^\",{\"1\":{\"96\":1,\"450\":1}}],[\"位运算\",{\"0\":{\"96\":1}}],[\"位于块内的声明语句\",{\"1\":{\"18\":1}}],[\"位于函数体内声明语句\",{\"1\":{\"18\":1}}],[\"运行在\",{\"1\":{\"636\":1}}],[\"运行于\",{\"1\":{\"624\":1}}],[\"运行时语义由抽象操作\",{\"1\":{\"657\":1}}],[\"运行时语义\",{\"0\":{\"657\":1},\"1\":{\"667\":1}}],[\"运行时\",{\"0\":{\"631\":1},\"1\":{\"598\":1,\"631\":1,\"645\":1}}],[\"运行机制\",{\"0\":{\"527\":1}}],[\"运行环境\",{\"1\":{\"141\":1,\"512\":1}}],[\"运行环境中就有几条作用域链\",{\"1\":{\"26\":1}}],[\"运算符只对\",{\"1\":{\"100\":1}}],[\"运算符\",{\"0\":{\"95\":1},\"1\":{\"98\":1,\"100\":1}}],[\"接收一个抽象语法树\",{\"1\":{\"443\":1}}],[\"接收三个参数\",{\"1\":{\"297\":1}}],[\"接收输入的数据并返回需要展示的内容\",{\"1\":{\"261\":1}}],[\"接受数据输入\",{\"1\":{\"264\":1}}],[\"接受一个或多个函数作为输入\",{\"1\":{\"214\":1}}],[\"接受多个不同类型的值\",{\"1\":{\"109\":1}}],[\"接口权限\",{\"1\":{\"392\":1}}],[\"接口\",{\"1\":{\"92\":1,\"108\":1,\"329\":1,\"350\":1}}],[\"接着从末尾向内收缩比较\",{\"1\":{\"459\":1}}],[\"接着对for块不断创建环境\",{\"1\":{\"37\":1}}],[\"接着推送到执行上下文栈\",{\"1\":{\"21\":1}}],[\"像上述情况只需要将000元素插入到最前面位置\",{\"1\":{\"273\":1}}],[\"像上述通过函数式创建的组件的方式\",{\"1\":{\"209\":1}}],[\"像\",{\"1\":{\"92\":1}}],[\"直出有限\",{\"1\":{\"598\":1}}],[\"直接返回构建一个完成记录的结果时\",{\"1\":{\"663\":1}}],[\"直接返回应用completion\",{\"1\":{\"663\":1}}],[\"直接加载这些资源\",{\"1\":{\"560\":1}}],[\"直接拉取最新的资源\",{\"1\":{\"556\":1}}],[\"直接操作原生dom或调用子组件方法\",{\"1\":{\"501\":1}}],[\"直接patchvnode\",{\"1\":{\"422\":2}}],[\"直接删除dom\",{\"1\":{\"422\":1}}],[\"直接新建所有的新dom\",{\"1\":{\"422\":1}}],[\"直接更新文本内容\",{\"1\":{\"422\":1}}],[\"直接创建新节点\",{\"1\":{\"422\":1}}],[\"直接创建新的真实节点e\",{\"1\":{\"421\":1}}],[\"直接调用patchvnode去处理这两个节点\",{\"1\":{\"422\":1}}],[\"直接createelm新建节点\",{\"1\":{\"422\":1}}],[\"直接触发旧节点的destory钩子\",{\"1\":{\"422\":1}}],[\"直接拿到之前保存的元素对象即可\",{\"1\":{\"289\":1}}],[\"直接获取\",{\"1\":{\"255\":1}}],[\"直接在组件中书写css样式\",{\"1\":{\"221\":1}}],[\"直接一个值\",{\"1\":{\"90\":1}}],[\"直到响应的第一个字节到达\",{\"1\":{\"573\":1}}],[\"直到需要时才进行加载\",{\"1\":{\"550\":1}}],[\"直到目标返回页\",{\"1\":{\"522\":1}}],[\"直到碰到下一个开始标记\",{\"1\":{\"72\":1}}],[\"直到条件达成或循环终止条件\",{\"1\":{\"37\":1}}],[\"代替super\",{\"1\":{\"317\":1}}],[\"代表工具为git\",{\"1\":{\"371\":1}}],[\"代表工具有svn\",{\"1\":{\"368\":1}}],[\"代表任务在未来的哪个时间点应该被完成\",{\"1\":{\"169\":1}}],[\"代表着任何不同值\",{\"1\":{\"118\":1}}],[\"代理服务器都可以缓存\",{\"1\":{\"556\":1}}],[\"代理\",{\"0\":{\"90\":1},\"1\":{\"413\":1}}],[\"代码点\",{\"1\":{\"689\":1}}],[\"代码打包目录和以前配置的目录保持一致\",{\"1\":{\"599\":1}}],[\"代码侵入性大\",{\"1\":{\"598\":1}}],[\"代码分割是一种将代码拆分为多个小块\",{\"1\":{\"549\":1}}],[\"代码中本身逻辑错误\",{\"1\":{\"431\":1}}],[\"代码中的结束标记隐含表示了一个分号\",{\"1\":{\"73\":1}}],[\"代码格式修改\",{\"1\":{\"379\":1}}],[\"代码重构\",{\"1\":{\"379\":1}}],[\"代码集中化管理\",{\"1\":{\"368\":1,\"371\":1}}],[\"代码最后都会转换成react\",{\"1\":{\"270\":1}}],[\"代码混乱\",{\"1\":{\"221\":1}}],[\"代码量少\",{\"1\":{\"203\":1}}],[\"代码将被显示出来\",{\"1\":{\"74\":1}}],[\"代码块\",{\"1\":{\"74\":1}}],[\"代码\",{\"1\":{\"71\":1}}],[\"代码段结束标记可以不要\",{\"1\":{\"73\":1}}],[\"代码段中的最后一行可以不用分号结束\",{\"1\":{\"73\":1}}],[\"代码段中解释器每执行\",{\"1\":{\"56\":1}}],[\"代码段的行为\",{\"1\":{\"55\":1}}],[\"代码创建的执行上下文还有一个词法环境\",{\"1\":{\"7\":1}}],[\"拦截器\",{\"0\":{\"90\":1}}],[\"存在着若干次页面数据通信\",{\"1\":{\"526\":1}}],[\"存在一个组件\",{\"1\":{\"216\":1}}],[\"存放这个fiber依赖的context\",{\"1\":{\"169\":1}}],[\"存放在私有环境记录\",{\"1\":{\"10\":1}}],[\"存放在环境记录器\",{\"1\":{\"10\":2}}],[\"存储在只读属性中的对象\",{\"1\":{\"88\":1}}],[\"然而应该注意到点\",{\"1\":{\"149\":1}}],[\"然而\",{\"1\":{\"88\":1,\"92\":1,\"142\":1,\"621\":1,\"632\":2}}],[\"然后产生式的一个或多个代换式在后续行跟随\",{\"1\":{\"682\":1}}],[\"然后把它添加到\",{\"1\":{\"643\":1}}],[\"然后把子vnode\",{\"1\":{\"269\":1}}],[\"然后继续执行\",{\"1\":{\"638\":1}}],[\"然后\",{\"1\":{\"630\":1}}],[\"然后将模块的导出对象缓存起来供后续使用\",{\"1\":{\"631\":1}}],[\"然后将你项目中所需的每一个模块组合成一个或多个\",{\"1\":{\"621\":1}}],[\"然后将ref属性添加到react元素中\",{\"1\":{\"291\":1}}],[\"然后会在\",{\"1\":{\"616\":1}}],[\"然后才能响应用户互动\",{\"1\":{\"571\":1}}],[\"然后开始进入启动状态\",{\"1\":{\"528\":1}}],[\"然后开始执行动画\",{\"1\":{\"323\":1}}],[\"然后校验有效期\",{\"1\":{\"519\":1}}],[\"然后带给服务端\",{\"1\":{\"519\":1}}],[\"然后根据对象渲染\",{\"1\":{\"508\":1}}],[\"然后根据不同的条件返回相应的生成代码字符串\",{\"1\":{\"443\":1}}],[\"然后调用这些策略函数来合并配置\",{\"1\":{\"482\":1}}],[\"然后调用实例对象的render方法\",{\"1\":{\"196\":1}}],[\"然后以校验和来引用\",{\"1\":{\"375\":1}}],[\"然后再vue范围之外渲染他\",{\"1\":{\"507\":1}}],[\"然后再删除dom\",{\"1\":{\"325\":1}}],[\"然后再做动画\",{\"1\":{\"325\":1}}],[\"然后再重新执行优先级低的任务\",{\"1\":{\"169\":1}}],[\"然后添加\",{\"1\":{\"323\":1}}],[\"然后对其进行加工\",{\"1\":{\"316\":1}}],[\"然后重新执行render函数\",{\"1\":{\"302\":1}}],[\"然后处理\",{\"1\":{\"241\":1}}],[\"然后在映射里找到真正的事件处理函数并调用\",{\"1\":{\"240\":1}}],[\"然后在组件中直接引入\",{\"1\":{\"222\":1}}],[\"然后就可以把自身组件的作为错误边界的子组件\",{\"1\":{\"236\":1}}],[\"然后渲染\",{\"1\":{\"216\":1}}],[\"然后通过实例将对象进行保存\",{\"1\":{\"292\":1}}],[\"然后通过props对象传递到子组件\",{\"1\":{\"194\":1}}],[\"然后通过这个函数的回调\",{\"1\":{\"155\":1}}],[\"然后等到整棵vdom树计算完成后\",{\"1\":{\"168\":1}}],[\"然后跟一个普通的变量声明来组成\",{\"1\":{\"86\":1}}],[\"然后自己在内部存储其自身状态\",{\"1\":{\"202\":1}}],[\"然后自\",{\"1\":{\"86\":1}}],[\"然后递增\",{\"1\":{\"37\":1}}],[\"然后进行\",{\"1\":{\"297\":1}}],[\"然后进行声明实例化\",{\"1\":{\"33\":1}}],[\"然后进行全局声明实例化\",{\"1\":{\"21\":1}}],[\"且仍然有一些特性还没有加入\",{\"1\":{\"338\":1}}],[\"且不匹配任何已知的健名或保留字\",{\"1\":{\"149\":1}}],[\"且转换后的键值后者覆盖前者\",{\"1\":{\"124\":1}}],[\"且必须在他的声明作用域内初始化\",{\"1\":{\"88\":1}}],[\"且他的比较是严格比较\",{\"1\":{\"54\":1}}],[\"但这些数据通常不会直接暴露给用户或开发者\",{\"1\":{\"632\":1}}],[\"但这种方式并不推荐\",{\"1\":{\"294\":1}}],[\"但需要主线程处于空闲状态才能运行\",{\"1\":{\"571\":1}}],[\"但未挂载到页面中\",{\"1\":{\"466\":1}}],[\"但类型不同\",{\"1\":{\"460\":1}}],[\"但数据相同\",{\"1\":{\"459\":7}}],[\"但不是dom树的一部分\",{\"1\":{\"608\":1}}],[\"但不会自动绑定到根元素\",{\"1\":{\"386\":1}}],[\"但不同的是\",{\"1\":{\"281\":1}}],[\"但可以被透传给子组件\",{\"1\":{\"386\":1}}],[\"但还没保存到数据库中\",{\"1\":{\"375\":1}}],[\"但通常在通过d\",{\"1\":{\"356\":1}}],[\"但下面的场景使用refs非常有用\",{\"1\":{\"294\":1}}],[\"但实际并不会把事件代理函数直接绑定到真实的节点上\",{\"1\":{\"240\":1}}],[\"但也有一定的区别\",{\"1\":{\"240\":1}}],[\"但也有一定的缺陷\",{\"1\":{\"223\":1}}],[\"但更加方便快捷\",{\"1\":{\"203\":1}}],[\"但更清晰\",{\"1\":{\"98\":1}}],[\"但生命周期极长\",{\"1\":{\"144\":1}}],[\"但当程序执行离开此作用域时\",{\"1\":{\"144\":1}}],[\"但该函数仍可能会终止\",{\"1\":{\"134\":1}}],[\"但保持数组本身不变\",{\"1\":{\"125\":1}}],[\"但在hash模式下没有问题\",{\"1\":{\"383\":1}}],[\"但在使用高阶组件的同时\",{\"1\":{\"215\":1}}],[\"但在\",{\"1\":{\"122\":1}}],[\"但\",{\"1\":{\"87\":1,\"147\":1,\"312\":1}}],[\"但是在\",{\"1\":{\"637\":1}}],[\"但是在类组件中\",{\"1\":{\"197\":1}}],[\"但是这种方式已被废弃\",{\"1\":{\"636\":1}}],[\"但是也不建议使用super\",{\"1\":{\"317\":1}}],[\"但是也可以通过\",{\"1\":{\"71\":1}}],[\"但是state的状态是已经发生了改变\",{\"1\":{\"302\":1}}],[\"但是当将处理函数输出代码换成console\",{\"1\":{\"244\":1}}],[\"但是不禁用\",{\"1\":{\"639\":1}}],[\"但是不方便动态修改样式\",{\"1\":{\"225\":1}}],[\"但是不能传递ref\",{\"1\":{\"215\":1}}],[\"但是作用域是全局的\",{\"1\":{\"225\":1}}],[\"但是大量的演示编写容易导致代码混乱\",{\"1\":{\"225\":1}}],[\"但是如果\",{\"1\":{\"299\":1}}],[\"但是如果还有其他组件也有类似功能的时候\",{\"1\":{\"216\":1}}],[\"但是如果父类定义方法或者常量时使用了\",{\"1\":{\"81\":1}}],[\"但是\",{\"1\":{\"197\":1}}],[\"但是函数组件使用useeffect也能够完成替代生命周期的作用\",{\"1\":{\"195\":1}}],[\"但是上文中列出的转义序列还可以使用\",{\"1\":{\"122\":1}}],[\"但是初始化的值必须是\",{\"1\":{\"86\":1}}],[\"但是非常不推荐这种用法\",{\"1\":{\"47\":1}}],[\"其语义通过语法导向操作进行表达\",{\"1\":{\"667\":1}}],[\"其导出对象会被缓存起来\",{\"1\":{\"631\":1}}],[\"其作用是用来跟踪管理版本的\",{\"1\":{\"375\":1}}],[\"其是一个开源协作社区\",{\"1\":{\"374\":1}}],[\"其不支持远程操作\",{\"1\":{\"367\":1}}],[\"其不会被再次挂载\",{\"1\":{\"185\":1}}],[\"其处理方式如下\",{\"1\":{\"325\":1}}],[\"其主要提供了三个主要的组件\",{\"1\":{\"322\":1}}],[\"其为元素添加enter\",{\"1\":{\"322\":1}}],[\"其实现动画的原理在于\",{\"1\":{\"323\":1}}],[\"其实也是一个高阶组件\",{\"1\":{\"281\":1}}],[\"其实这三个方法仍然存在\",{\"1\":{\"186\":1}}],[\"其渲染流程如下所示\",{\"1\":{\"270\":1}}],[\"其被认定为自定义组件\",{\"1\":{\"268\":1}}],[\"其被认定为原生\",{\"1\":{\"268\":1}}],[\"其它\",{\"0\":{\"257\":1}}],[\"其他打包程序或任务执行器的可能并不支持\",{\"1\":{\"636\":1}}],[\"其他的类可以访问mixin类的方法而不必成为子类\",{\"1\":{\"477\":1}}],[\"其他修改\",{\"1\":{\"379\":1}}],[\"其他每个人都从这个\",{\"1\":{\"374\":1}}],[\"其他所有的属性\",{\"1\":{\"357\":1}}],[\"其他区域可重复使用该名字而不冲突\",{\"1\":{\"329\":1}}],[\"其他浏览器一次渲染\",{\"1\":{\"270\":1}}],[\"其他类型\",{\"1\":{\"269\":1}}],[\"其他\",{\"1\":{\"254\":1}}],[\"其他数据都能读取对应的数据\",{\"1\":{\"157\":1}}],[\"其在老集合的最大下标\",{\"1\":{\"232\":1}}],[\"其在render方法之后执行\",{\"1\":{\"179\":1}}],[\"其引入css的方式有很多种\",{\"1\":{\"219\":1}}],[\"其应用场景如下图所示\",{\"1\":{\"203\":1}}],[\"其区别主要分成以下几大方向\",{\"1\":{\"192\":1}}],[\"其数据结构如下\",{\"1\":{\"169\":1}}],[\"其下存在provider组件用于创建数据源\",{\"1\":{\"157\":1}}],[\"其值并不丢失\",{\"1\":{\"144\":1}}],[\"其值为undefined\",{\"1\":{\"29\":1}}],[\"其中采用了批处理\",{\"1\":{\"270\":1}}],[\"其中css由\",{\"1\":{\"224\":1}}],[\"其中每个任务更新单元为\",{\"1\":{\"170\":1}}],[\"其中每个字符等同于一个字节\",{\"1\":{\"119\":1}}],[\"其中一些类型可以写成类型声明\",{\"1\":{\"107\":1}}],[\"其中\",{\"1\":{\"86\":1}}],[\"静态语义\",{\"1\":{\"667\":1}}],[\"静态资源等\",{\"1\":{\"629\":1}}],[\"静态提升\",{\"1\":{\"508\":1}}],[\"静态标记\",{\"1\":{\"501\":1}}],[\"静态根节点\",{\"1\":{\"443\":1}}],[\"静态属性\",{\"0\":{\"342\":1}}],[\"静态属性则是用\",{\"1\":{\"86\":1}}],[\"静态变量只能使用常量表达式进行初始化\",{\"1\":{\"144\":1}}],[\"静态变量仅在局部函数作用域中存在\",{\"1\":{\"144\":1}}],[\"静态\",{\"1\":{\"86\":1}}],[\"上传代码\",{\"1\":{\"523\":1}}],[\"上绑定数据\",{\"1\":{\"501\":1}}],[\"上一次的修改时间\",{\"0\":{\"558\":1}}],[\"上一次渲染的时候的state\",{\"1\":{\"169\":1}}],[\"上一次渲染完成之后的props\",{\"1\":{\"169\":1}}],[\"上一个虚拟节点\",{\"1\":{\"427\":1}}],[\"上面的例子中\",{\"1\":{\"305\":1}}],[\"上面可以看到\",{\"1\":{\"221\":1}}],[\"上的事件间的冒泡\",{\"1\":{\"241\":1}}],[\"上挂载的事件\",{\"1\":{\"241\":1}}],[\"上述name属性与onnamechanged方法都能在子组件的props变量中访问\",{\"1\":{\"311\":1}}],[\"上述的例子\",{\"1\":{\"306\":1}}],[\"上述的代码看似没有问题\",{\"1\":{\"244\":1}}],[\"上述三种情况都是ref属性用于原生html元素上\",{\"1\":{\"293\":1}}],[\"上述这种类似\",{\"1\":{\"261\":1}}],[\"上述传入第二个参数后\",{\"1\":{\"256\":1}}],[\"上述四种方法的方式\",{\"1\":{\"250\":1}}],[\"上述操作中\",{\"1\":{\"230\":1}}],[\"上述代码当然可以实现该功能\",{\"1\":{\"216\":1}}],[\"上述代码中\",{\"1\":{\"214\":1}}],[\"上述简单的例子对应类组件中的componentdidmount生命周期\",{\"1\":{\"195\":1}}],[\"上述vdom转化为如下\",{\"1\":{\"162\":1}}],[\"上述中\",{\"1\":{\"162\":1}}],[\"上赋值不存在的属性\",{\"1\":{\"89\":1}}],[\"上边那行代码等价于以下代码\",{\"1\":{\"85\":1}}],[\"上例中\",{\"1\":{\"72\":1}}],[\"无需特地提供\",{\"1\":{\"555\":1}}],[\"无需重新启动\",{\"1\":{\"527\":1}}],[\"无需额外包裹div\",{\"1\":{\"501\":1}}],[\"无mutation\",{\"1\":{\"502\":1}}],[\"无论触发多少次事件\",{\"1\":{\"537\":1}}],[\"无论是宏任务还是微任务\",{\"1\":{\"491\":1}}],[\"无论是否传入props\",{\"1\":{\"318\":1}}],[\"无论count发生变化辩护\",{\"1\":{\"298\":1}}],[\"无状态\",{\"1\":{\"215\":1}}],[\"无法继续展开\",{\"1\":{\"681\":1}}],[\"无法访问options的任何部分\",{\"1\":{\"464\":1}}],[\"无法单机工作\",{\"1\":{\"368\":1}}],[\"无法中断\",{\"1\":{\"168\":1}}],[\"无法进行针对性的极致优化\",{\"1\":{\"164\":1}}],[\"无法解包\",{\"1\":{\"127\":1}}],[\"无法使用变量和常量\",{\"1\":{\"55\":1}}],[\"无类型的属性和静态属性不能用\",{\"1\":{\"83\":1}}],[\"放宽可见性而不是继续限制\",{\"1\":{\"82\":1}}],[\"签名必须兼容父类方法\",{\"1\":{\"82\":1}}],[\"签名覆盖规则\",{\"0\":{\"82\":1}}],[\"具名插槽\",{\"1\":{\"496\":1}}],[\"具备模板字符串的能力\",{\"1\":{\"121\":1}}],[\"具有标识的值\",{\"1\":{\"671\":1}}],[\"具有相同chunk名的模块会被打包到一起\",{\"1\":{\"548\":1}}],[\"具有相同的键\",{\"1\":{\"102\":2}}],[\"具有闪电般快速的性能\",{\"1\":{\"372\":1}}],[\"具有构造函数的类会在每次创建新对象时先调用此方法\",{\"1\":{\"80\":1}}],[\"具体取决于webpack的配置\",{\"1\":{\"631\":1}}],[\"具体逻辑还需要是西安\",{\"1\":{\"349\":1}}],[\"具体实现是什么\",{\"1\":{\"298\":1}}],[\"具体实现的方式有如下\",{\"1\":{\"278\":1}}],[\"具体实现取决于实际环境\",{\"1\":{\"42\":1}}],[\"具体需要看术语部分\",{\"1\":{\"42\":1}}],[\"本地仓库\",{\"1\":{\"375\":1}}],[\"本地版本控制系统\",{\"1\":{\"366\":1}}],[\"本质为reactdom\",{\"1\":{\"288\":1}}],[\"本质是通过函数的调用\",{\"1\":{\"224\":1}}],[\"本质也就是一个函数\",{\"1\":{\"214\":1}}],[\"本质上\",{\"1\":{\"621\":1}}],[\"本质上是一个对象\",{\"1\":{\"355\":1}}],[\"本质上是一个函数\",{\"1\":{\"351\":1}}],[\"本质上是一个装饰者设计模式\",{\"1\":{\"214\":1}}],[\"本质上是对象\",{\"1\":{\"345\":1}}],[\"本质上是以\",{\"1\":{\"162\":1}}],[\"本质上他只是个普通函数\",{\"1\":{\"80\":1}}],[\"本身就不存在this\",{\"1\":{\"197\":1}}],[\"本文只对ecma的内容进行简单的介绍\",{\"1\":{\"42\":1}}],[\"作为用户在这个小程序的唯一标识\",{\"1\":{\"519\":1}}],[\"作为webcomponents技术套件的一部分\",{\"1\":{\"494\":1}}],[\"作为模板编译成render函数\",{\"1\":{\"465\":1}}],[\"作为\",{\"1\":{\"274\":1}}],[\"作为componentdidupdate第三个参数传入\",{\"1\":{\"182\":1}}],[\"作为动态的工作单元来说\",{\"1\":{\"170\":1}}],[\"作为静态的数据结构来说\",{\"1\":{\"170\":1}}],[\"作为类名\",{\"1\":{\"77\":1}}],[\"作用是生成一个虚拟dom对象\",{\"1\":{\"269\":1}}],[\"作用域插槽\",{\"1\":{\"496\":1}}],[\"作用域\",{\"0\":{\"142\":1},\"2\":{\"41\":1}}],[\"作用域的分析\",{\"0\":{\"33\":1}}],[\"作用域链例子\",{\"1\":{\"26\":1}}],[\"作用域分析\",{\"0\":{\"26\":1}}],[\"作用\",{\"1\":{\"10\":2,\"515\":1}}],[\"试图注释掉一大块代码时很容易出现该错误\",{\"1\":{\"74\":1}}],[\"要预渲染的页面访问路由\",{\"1\":{\"599\":1}}],[\"要改个文字或权限信息\",{\"1\":{\"392\":2}}],[\"要执行的工作\",{\"1\":{\"170\":1}}],[\"要执行父类的构造函数\",{\"1\":{\"80\":1}}],[\"要注意\",{\"1\":{\"149\":1}}],[\"要么无限循环\",{\"1\":{\"135\":1}}],[\"要么抛出异常\",{\"1\":{\"135\":1}}],[\"要测试浮点数是否相等\",{\"1\":{\"117\":1}}],[\"要使用一个仅比该数值大一丁点的最小误差值\",{\"1\":{\"117\":1}}],[\"要使用\",{\"1\":{\"115\":1}}],[\"要处理任意属性名称\",{\"1\":{\"89\":1}}],[\"要确保不要嵌套\",{\"1\":{\"74\":1}}],[\"要输出大段文本时\",{\"1\":{\"72\":1}}],[\"模板语法\",{\"1\":{\"501\":1}}],[\"模板标签处理\",{\"1\":{\"443\":1}}],[\"模板编译器代码\",{\"1\":{\"443\":1}}],[\"模板编译阶段过滤器表达式将会被编译为过滤器函数\",{\"1\":{\"438\":1}}],[\"模板指令的代码都会生成在render函数中\",{\"1\":{\"442\":1}}],[\"模拟原生\",{\"1\":{\"240\":1}}],[\"模式\",{\"1\":{\"74\":1}}],[\"模式并返回了\",{\"1\":{\"74\":1}}],[\"模块产生式\",{\"1\":{\"676\":1}}],[\"模块内容条目中的其中一个代换式\",{\"1\":{\"676\":1}}],[\"模块也可以为空\",{\"1\":{\"676\":1}}],[\"模块导出为\",{\"1\":{\"636\":1}}],[\"模块中\",{\"1\":{\"635\":1}}],[\"模块解析\",{\"1\":{\"632\":1}}],[\"模块加载\",{\"1\":{\"631\":1}}],[\"模块会被合并成\",{\"1\":{\"627\":1}}],[\"模块能以各种方式表达它们的依赖关系\",{\"1\":{\"626\":1}}],[\"模块相比\",{\"1\":{\"626\":1}}],[\"模块规范\",{\"1\":{\"615\":1}}],[\"模块或功能\",{\"1\":{\"547\":1}}],[\"模块化与复用\",{\"1\":{\"501\":1}}],[\"模块声明实例化\",{\"1\":{\"33\":1}}],[\"模块环境记录器\",{\"1\":{\"27\":1}}],[\"模块环境初始化\",{\"1\":{\"9\":2}}],[\"模块\",{\"0\":{\"625\":1},\"1\":{\"10\":1,\"28\":1,\"30\":1,\"625\":2,\"627\":5}}],[\"模块执行\",{\"1\":{\"9\":2}}],[\"yes\",{\"1\":{\"618\":4}}],[\"yellow\",{\"1\":{\"224\":1}}],[\"yet\",{\"1\":{\"74\":1}}],[\"yield会被当作普通标识符使用\",{\"1\":{\"676\":1}}],[\"yield\",{\"1\":{\"136\":1,\"674\":1,\"676\":1,\"686\":1}}],[\"y\",{\"1\":{\"109\":1,\"147\":2,\"280\":6,\"337\":1,\"618\":1}}],[\"yourcompoent\",{\"1\":{\"358\":1}}],[\"yourcomponent\",{\"1\":{\"317\":1,\"360\":1,\"361\":1}}],[\"your\",{\"1\":{\"281\":1,\"618\":2}}],[\"you\",{\"1\":{\"71\":2,\"120\":4,\"317\":1,\"618\":10}}],[\"young\",{\"1\":{\"54\":1}}],[\"yogurt\",{\"1\":{\"63\":1}}],[\"风格的注释在碰到第一个\",{\"1\":{\"74\":1}}],[\"风格的注释\",{\"1\":{\"74\":2}}],[\"风格\",{\"1\":{\"74\":2}}],[\"注入到此文件中\",{\"1\":{\"643\":1}}],[\"注入环境变量\",{\"1\":{\"643\":1}}],[\"注册事件\",{\"1\":{\"362\":1}}],[\"注解标记此类\",{\"1\":{\"89\":1}}],[\"注释\",{\"0\":{\"74\":1}}],[\"注意和结论\",{\"0\":{\"444\":1}}],[\"注意的是\",{\"1\":{\"293\":1}}],[\"注意事项为\",{\"1\":{\"274\":1}}],[\"注意事项\",{\"0\":{\"233\":1},\"1\":{\"632\":1}}],[\"注意新的键名是\",{\"1\":{\"125\":1}}],[\"注意\",{\"0\":{\"481\":1},\"1\":{\"72\":1,\"73\":1,\"110\":1,\"148\":1,\"463\":1,\"583\":1}}],[\"注意传递null不会分配默认值\",{\"1\":{\"63\":1}}],[\"时间格式化\",{\"1\":{\"437\":1}}],[\"时的首选\",{\"1\":{\"370\":1}}],[\"时则会重新编号\",{\"1\":{\"127\":1}}],[\"时反引号运算符是无效的\",{\"1\":{\"101\":1}}],[\"时返回\",{\"1\":{\"98\":1}}],[\"时自动去加载\",{\"1\":{\"92\":1}}],[\"时不抛出异常\",{\"1\":{\"85\":1}}],[\"时\",{\"1\":{\"78\":1,\"253\":1,\"274\":1,\"575\":1,\"645\":1}}],[\"时结束\",{\"1\":{\"74\":1}}],[\"时省略掉会更好些\",{\"1\":{\"73\":1}}],[\"时钟周期\",{\"1\":{\"56\":1}}],[\"进入下一个页面\",{\"1\":{\"518\":1}}],[\"进入页面节点树\",{\"1\":{\"516\":1}}],[\"进入if判断\",{\"1\":{\"418\":1}}],[\"进入和退出\",{\"1\":{\"73\":1}}],[\"进行首次渲染\",{\"1\":{\"530\":1}}],[\"进行patch\",{\"1\":{\"459\":10}}],[\"进行比较\",{\"1\":{\"256\":1}}],[\"进行的松散或严格比较的结果都是\",{\"1\":{\"118\":1}}],[\"进行相应的绑定\",{\"1\":{\"35\":1}}],[\"示例\",{\"1\":{\"73\":1}}],[\"同一时间只能执行一次\",{\"1\":{\"491\":1}}],[\"同一种功能的实现可以分别对应类组件和函数组件的编写形式\",{\"1\":{\"193\":1}}],[\"同步\",{\"1\":{\"636\":1}}],[\"同步加载组件时\",{\"1\":{\"474\":1}}],[\"同步更新\",{\"0\":{\"305\":1},\"1\":{\"303\":1}}],[\"同源有三个部分\",{\"1\":{\"412\":1}}],[\"同样的更新10个dom节点\",{\"1\":{\"399\":1}}],[\"同样的不区分大小写\",{\"1\":{\"112\":1}}],[\"同样csstransition里面没有in属性\",{\"1\":{\"325\":1}}],[\"同样是禁止的行为\",{\"1\":{\"316\":1}}],[\"同样先给出一个例子\",{\"1\":{\"306\":1}}],[\"同样先给出一个在settimeout中更新的例子\",{\"1\":{\"305\":1}}],[\"同样\",{\"1\":{\"273\":1}}],[\"同样给出一个计时器示例\",{\"1\":{\"256\":1}}],[\"同样再每一次render的时候都会生成新的方法\",{\"1\":{\"247\":1}}],[\"同样在react\",{\"1\":{\"210\":1}}],[\"同样更新10个dom节点\",{\"1\":{\"163\":1}}],[\"同样如果执行的运算结果超出了\",{\"1\":{\"114\":1}}],[\"同样名称的方法\",{\"1\":{\"81\":1}}],[\"同时将这个真实dom移动到oldstartvnode对应的真实dom的前面\",{\"1\":{\"422\":1}}],[\"同时endindex移动到c\",{\"1\":{\"421\":1}}],[\"同时展示降级\",{\"1\":{\"236\":1}}],[\"同时也新增了两个生命周期函数\",{\"1\":{\"186\":1}}],[\"同时也不能调用setstate\",{\"1\":{\"181\":1}}],[\"同时实现两个接口\",{\"1\":{\"109\":1}}],[\"同时为将来添加其他行为留有余地\",{\"1\":{\"90\":1}}],[\"同\",{\"1\":{\"73\":1}}],[\"标志修改\",{\"1\":{\"617\":1}}],[\"标记动态节点\",{\"1\":{\"501\":1}}],[\"标记为已处理\",{\"1\":{\"460\":1}}],[\"标记以保持符合标准\",{\"1\":{\"72\":1}}],[\"标签名是否一致\",{\"1\":{\"460\":1}}],[\"标签的子节点\",{\"1\":{\"297\":1}}],[\"标签属性\",{\"1\":{\"297\":1}}],[\"标签属性props及若干子元素children\",{\"1\":{\"269\":1}}],[\"标签\",{\"1\":{\"268\":1,\"297\":1}}],[\"标签编写样式\",{\"1\":{\"219\":1}}],[\"标识符的名字不能为保留字\",{\"1\":{\"685\":1}}],[\"标识符包裹的内容\",{\"1\":{\"122\":1}}],[\"标识符\",{\"1\":{\"122\":1}}],[\"标量类型\",{\"1\":{\"108\":1}}],[\"标准中有如下\",{\"1\":{\"687\":1}}],[\"标准中有两类值\",{\"1\":{\"671\":1}}],[\"标准中有五种环境记录器\",{\"1\":{\"27\":1}}],[\"标准中的调用链是这样的\",{\"1\":{\"36\":1}}],[\"标准中宿主可以提高的内容\",{\"1\":{\"14\":1}}],[\"标准使用\",{\"1\":{\"26\":1}}],[\"标准\",{\"1\":{\"19\":1,\"20\":1,\"21\":1,\"71\":1,\"623\":1}}],[\"标准关于全局对象的定义\",{\"1\":{\"16\":1}}],[\"哪些跳过\",{\"1\":{\"72\":1}}],[\"例子\",{\"1\":{\"96\":1,\"97\":1,\"102\":1,\"421\":1}}],[\"例外是处于条件语句中间时\",{\"1\":{\"72\":1}}],[\"例如null\",{\"1\":{\"670\":1}}],[\"例如node和浏览器环境就有不同的全局对象\",{\"1\":{\"42\":1}}],[\"例如个性化内容\",{\"1\":{\"556\":1}}],[\"例如vue的componet动态组件指定是一个异步组件时\",{\"1\":{\"548\":1}}],[\"例如onresize\",{\"1\":{\"534\":1}}],[\"例如onclick要改写成onclick\",{\"1\":{\"244\":1}}],[\"例如按钮触发\",{\"1\":{\"526\":1}}],[\"例如全局对象或者\",{\"1\":{\"244\":1}}],[\"例如id\",{\"1\":{\"162\":1}}],[\"例如h1\",{\"1\":{\"162\":1}}],[\"例如redux\",{\"1\":{\"158\":1}}],[\"例如可以将相关的变量编成组\",{\"1\":{\"147\":1}}],[\"例如函数调用\",{\"1\":{\"144\":1}}],[\"例如图像或\",{\"1\":{\"70\":1}}],[\"例如\",{\"1\":{\"49\":3,\"70\":1,\"74\":1,\"100\":2,\"147\":4,\"148\":2,\"150\":1,\"224\":1,\"233\":1,\"240\":1,\"253\":1,\"268\":1,\"294\":1,\"336\":1,\"548\":1,\"571\":1,\"598\":1,\"615\":1,\"622\":1,\"630\":1,\"631\":1,\"636\":2,\"639\":2}}],[\"见下例\",{\"1\":{\"72\":1}}],[\"见\",{\"1\":{\"72\":1}}],[\"解绑副作用\",{\"1\":{\"470\":1}}],[\"解决什么\",{\"0\":{\"258\":1}}],[\"解决这个问题的方法是在事件函数后使用\",{\"1\":{\"246\":1}}],[\"解决\",{\"0\":{\"170\":1,\"404\":1}}],[\"解析模块依赖\",{\"1\":{\"622\":1}}],[\"解析模块\",{\"1\":{\"622\":1}}],[\"解析模式通常比将文本通过\",{\"1\":{\"72\":1}}],[\"解析其中的配置信息\",{\"1\":{\"622\":1}}],[\"解析ip地址的方式\",{\"1\":{\"561\":1}}],[\"解析流程\",{\"1\":{\"448\":1}}],[\"解析原理\",{\"0\":{\"448\":1}}],[\"解析速度慢\",{\"1\":{\"164\":1}}],[\"解析器看到是一个名为\",{\"1\":{\"149\":1}}],[\"解析器忽略\",{\"1\":{\"71\":1}}],[\"解析的例子\",{\"1\":{\"73\":1}}],[\"解释器会在条件未达成时直接跳过该段条件语句块\",{\"1\":{\"72\":1}}],[\"解释器会根据条件判断来决定哪些输出\",{\"1\":{\"72\":1}}],[\"解释器碰到\",{\"1\":{\"72\":1}}],[\"结尾的文件\",{\"1\":{\"638\":1}}],[\"结束索引\",{\"1\":{\"610\":1}}],[\"结束标记时就简单地将其后内容原样输出\",{\"1\":{\"72\":1}}],[\"结束标记之后万一意外加入了空格或者换行符\",{\"1\":{\"71\":1}}],[\"结束标记\",{\"1\":{\"71\":2}}],[\"结论\",{\"0\":{\"487\":1}}],[\"结合\",{\"1\":{\"322\":1}}],[\"结构\",{\"1\":{\"450\":1}}],[\"结构如下图所示\",{\"1\":{\"367\":1,\"368\":1,\"371\":1}}],[\"结构中含有复杂的变量时要像\",{\"1\":{\"122\":1}}],[\"结构中单引号不用被转义\",{\"1\":{\"122\":1}}],[\"结构用来设定一段代码的执行指令\",{\"1\":{\"55\":1}}],[\"结构用替代语法格式写的例子\",{\"1\":{\"53\":1}}],[\"结果\",{\"1\":{\"96\":1,\"97\":1,\"102\":1}}],[\"x和两个十六进制数的组合\",{\"1\":{\"701\":1}}],[\"xii\",{\"1\":{\"622\":1}}],[\"xi\",{\"1\":{\"622\":1}}],[\"xx\",{\"1\":{\"223\":1}}],[\"xxx\",{\"1\":{\"223\":1,\"323\":1,\"596\":4}}],[\"x41\",{\"1\":{\"122\":1}}],[\"x\",{\"1\":{\"109\":1,\"121\":1,\"125\":1,\"147\":2,\"280\":6,\"337\":1,\"585\":6,\"622\":1,\"687\":4,\"700\":1}}],[\"xor\",{\"1\":{\"96\":1}}],[\"xhtml\",{\"1\":{\"71\":1,\"72\":1}}],[\"xml形式就是\",{\"1\":{\"261\":1}}],[\"xml\",{\"1\":{\"70\":1,\"71\":1,\"72\":1,\"585\":2}}],[\"最佳实践\",{\"0\":{\"538\":1,\"541\":1,\"585\":1}}],[\"最初是为了更好地管理linux内核开发而设计\",{\"1\":{\"374\":1}}],[\"最小化element的移动\",{\"1\":{\"458\":1}}],[\"最小粒度的更新\",{\"1\":{\"277\":1}}],[\"最小值可以用常量\",{\"1\":{\"113\":1}}],[\"最常见的hooks有如下\",{\"1\":{\"254\":1}}],[\"最简单的事件绑定如下\",{\"1\":{\"244\":1}}],[\"最好传递\",{\"1\":{\"294\":1}}],[\"最好符合一贯的css风格特点\",{\"1\":{\"219\":1}}],[\"最好在文件末尾删除\",{\"1\":{\"71\":1}}],[\"最基本的高阶组件的编写模板如下\",{\"1\":{\"215\":1}}],[\"最新\",{\"1\":{\"197\":1}}],[\"最终发布上线时如果web应用和接口服务器不在一起仍会跨域\",{\"1\":{\"413\":1}}],[\"最终可以通过一系列操作使这棵树映射到真实环境上\",{\"1\":{\"398\":1}}],[\"最终打印结果为hello\",{\"1\":{\"304\":1}}],[\"最终转化成真实dom\",{\"1\":{\"299\":1}}],[\"最终转换为真实dom\",{\"1\":{\"270\":1}}],[\"最终构造成一个虚拟dom对象\",{\"1\":{\"270\":1}}],[\"最终都会通过renderdom\",{\"1\":{\"268\":1}}],[\"最终的代码简单易于维护\",{\"1\":{\"263\":1}}],[\"最终会被babel编译为合法的js语句调用\",{\"1\":{\"261\":1}}],[\"最终会通过babel转化成react\",{\"1\":{\"209\":1}}],[\"最终创建出一个组件\",{\"1\":{\"224\":1}}],[\"最终将这个js对象一次性attach到dom树上\",{\"1\":{\"163\":1,\"399\":1}}],[\"最终执行10次流程\",{\"1\":{\"163\":1}}],[\"最大内容渲染\",{\"1\":{\"569\":1}}],[\"最大整数键名目前不需要存在于\",{\"1\":{\"125\":1}}],[\"最大值可以用常量\",{\"1\":{\"113\":1}}],[\"最经常用作回调函数\",{\"1\":{\"67\":1}}],[\"最后以\",{\"1\":{\"638\":1}}],[\"最后\",{\"1\":{\"622\":1,\"636\":1}}],[\"最后到浏览器绘制下一个帧为止\",{\"1\":{\"572\":1}}],[\"最后真正执行\",{\"1\":{\"241\":1}}],[\"最后可以使用\",{\"1\":{\"89\":1}}],[\"最后得到三个列表\",{\"1\":{\"22\":1}}],[\"最后对脚本语句求值\",{\"1\":{\"21\":1}}],[\"临时创建一个没有指定名称的函数\",{\"1\":{\"67\":1}}],[\"允许你在\",{\"1\":{\"638\":1}}],[\"允许在\",{\"1\":{\"635\":1}}],[\"允许在运行时动态的导入模块\",{\"1\":{\"548\":1}}],[\"允许将代码分割成多个bundle\",{\"1\":{\"631\":1}}],[\"允许一个通过这个服务与另一个网络终端进行非直接的连接\",{\"1\":{\"413\":1}}],[\"允许我们访问\",{\"1\":{\"288\":1}}],[\"允许开发者在一个类中定义一个方法作为构造函数\",{\"1\":{\"80\":1}}],[\"允许\",{\"1\":{\"67\":1}}],[\"允许使用保留关键字作为参数名\",{\"1\":{\"65\":1}}],[\"匿名函数\",{\"0\":{\"67\":1},\"1\":{\"67\":1,\"79\":1}}],[\"匿名函数则为\",{\"1\":{\"49\":1}}],[\"覆盖之前的参数\",{\"1\":{\"65\":1}}],[\"起始数据在整个列表中的偏移位置\",{\"1\":{\"610\":1}}],[\"起始索引\",{\"1\":{\"610\":1}}],[\"起正确\",{\"1\":{\"144\":1}}],[\"起移除\",{\"1\":{\"92\":1}}],[\"起弃用\",{\"1\":{\"92\":1}}],[\"起弃用动态属性\",{\"1\":{\"89\":1}}],[\"起可以跟一个类型声明\",{\"1\":{\"86\":1}}],[\"起可用\",{\"1\":{\"85\":1,\"134\":1,\"135\":1}}],[\"起支持的\",{\"1\":{\"86\":1}}],[\"起\",{\"1\":{\"65\":1,\"67\":1,\"77\":1,\"81\":1,\"83\":1,\"84\":1,\"85\":1,\"88\":1,\"91\":2,\"98\":2,\"113\":1,\"126\":1,\"144\":1}}],[\"起码要有一个满足的\",{\"1\":{\"54\":1}}],[\"自身抛出来的错误\",{\"1\":{\"236\":1}}],[\"自动将点转换成了下划线\",{\"1\":{\"147\":1}}],[\"自动加载类和接口\",{\"1\":{\"92\":1}}],[\"自定义渲染器\",{\"1\":{\"466\":1,\"507\":1}}],[\"自定义过滤器\",{\"1\":{\"434\":1}}],[\"自定义指令也存在钩子函数\",{\"1\":{\"427\":1}}],[\"自定义指令\",{\"0\":{\"426\":1},\"1\":{\"392\":1}}],[\"自定义标签属性\",{\"1\":{\"389\":1}}],[\"自定义\",{\"1\":{\"143\":1,\"643\":1}}],[\"自\",{\"1\":{\"65\":1,\"77\":1,\"83\":1,\"84\":1,\"85\":2,\"88\":1,\"89\":1,\"91\":1,\"98\":1,\"126\":1,\"134\":1,\"135\":1,\"144\":2}}],[\"u+000a\",{\"1\":{\"698\":1}}],[\"u+000d\",{\"1\":{\"698\":1}}],[\"u+005c\",{\"1\":{\"698\":1}}],[\"ul\",{\"1\":{\"606\":2,\"607\":2,\"608\":2}}],[\"ul>\",{\"1\":{\"273\":1,\"541\":1,\"606\":1,\"607\":1,\"608\":1}}],[\"up\",{\"1\":{\"344\":1,\"345\":2}}],[\"update将虚拟dom生成真实dom结构\",{\"1\":{\"487\":1}}],[\"update主要功能是调用patch\",{\"1\":{\"486\":1}}],[\"update方法\",{\"1\":{\"486\":1}}],[\"updated\",{\"0\":{\"469\":1},\"1\":{\"449\":1}}],[\"updatecomponent主要执行初始化声明的render\",{\"1\":{\"486\":1}}],[\"updatecount\",{\"1\":{\"310\":2}}],[\"updatechildren\",{\"1\":{\"460\":2}}],[\"updatechildren主要做了以下操作\",{\"1\":{\"423\":1}}],[\"updateclasscomponent\",{\"1\":{\"269\":2}}],[\"updater\",{\"1\":{\"302\":1}}],[\"update\",{\"1\":{\"302\":1,\"427\":1,\"487\":1}}],[\"updatenode\",{\"1\":{\"269\":2}}],[\"updatefunctioncomponent\",{\"1\":{\"269\":2}}],[\"updatequeue<any>\",{\"1\":{\"169\":1}}],[\"updatequeue\",{\"1\":{\"169\":1}}],[\"ui库方案\",{\"0\":{\"601\":1}}],[\"ui框架\",{\"1\":{\"502\":1}}],[\"ui\",{\"1\":{\"236\":4,\"261\":1,\"502\":2}}],[\"url\",{\"1\":{\"147\":1,\"224\":1,\"378\":1,\"569\":1,\"626\":1,\"635\":1}}],[\"usort\",{\"1\":{\"132\":1}}],[\"using\",{\"1\":{\"123\":2,\"618\":2}}],[\"use进行注册\",{\"1\":{\"408\":1}}],[\"usememo\",{\"1\":{\"257\":1}}],[\"usecallback\",{\"1\":{\"257\":1}}],[\"useeffect相当于componentdidmount\",{\"1\":{\"256\":1}}],[\"useeffect会在第一次渲染和更新之后都会执行\",{\"1\":{\"256\":1}}],[\"useeffect第一个参数接受一个回调函数\",{\"1\":{\"256\":1}}],[\"useeffect可以让我们在函数组件中进行一些带有副作用的操作\",{\"1\":{\"256\":1}}],[\"useeffect\",{\"0\":{\"256\":1},\"1\":{\"195\":2,\"254\":1,\"256\":4}}],[\"usestate\",{\"0\":{\"255\":1},\"1\":{\"194\":1,\"254\":1,\"255\":4,\"256\":2,\"298\":2,\"299\":1}}],[\"useref\",{\"1\":{\"257\":1,\"289\":1,\"293\":1}}],[\"usereducer\",{\"1\":{\"257\":1}}],[\"username并不会自动更新\",{\"1\":{\"201\":1}}],[\"username所控制住\",{\"1\":{\"201\":1}}],[\"username\",{\"1\":{\"147\":3,\"201\":3}}],[\"user\",{\"1\":{\"87\":2,\"109\":5,\"132\":1,\"197\":4,\"377\":2,\"548\":2}}],[\"use\",{\"1\":{\"67\":8,\"71\":2,\"599\":1,\"618\":3,\"638\":1,\"643\":1,\"644\":1,\"703\":2}}],[\"u\",{\"1\":{\"121\":1,\"337\":1,\"700\":1,\"701\":2}}],[\"utf\",{\"1\":{\"65\":1,\"698\":1}}],[\"unobserve\",{\"1\":{\"552\":1}}],[\"undate性能提高\",{\"1\":{\"506\":1}}],[\"underline\",{\"1\":{\"222\":1}}],[\"undefined\",{\"1\":{\"29\":1,\"45\":1,\"67\":1,\"244\":1,\"317\":1,\"460\":1,\"585\":1,\"667\":1}}],[\"unbind\",{\"1\":{\"427\":1}}],[\"unmountonexit=\",{\"1\":{\"323\":1}}],[\"unsubscribefromfriendstatus\",{\"1\":{\"256\":1}}],[\"unset\",{\"1\":{\"111\":1,\"125\":3,\"128\":1}}],[\"uncontroll\",{\"1\":{\"202\":1}}],[\"unction\",{\"1\":{\"63\":1}}],[\"unicode转义\",{\"1\":{\"701\":1}}],[\"unicode\",{\"1\":{\"119\":1,\"121\":1,\"689\":1,\"698\":3}}],[\"unix\",{\"1\":{\"74\":1}}],[\"uninitialized\",{\"1\":{\"29\":1}}],[\"unhandledmatcherror\",{\"1\":{\"54\":1}}],[\"||\",{\"1\":{\"280\":7,\"302\":2,\"443\":2,\"460\":1,\"482\":1,\"483\":1}}],[\"|\",{\"1\":{\"65\":2,\"96\":1,\"109\":3,\"169\":12,\"333\":1,\"336\":4,\"349\":2}}],[\"而yeild和return可以作为标识符使用\",{\"1\":{\"676\":1}}],[\"而插件则可以用于执行范围更广的任务\",{\"1\":{\"643\":1}}],[\"而其他未变化的模块则可以继续使用缓存中的版本\",{\"1\":{\"632\":1}}],[\"而settimeout只能设置一个固定时间间隔\",{\"1\":{\"606\":1}}],[\"而super\",{\"1\":{\"316\":1}}],[\"而非按选项拆分\",{\"1\":{\"503\":1}}],[\"而且路由不一定作为菜单显示\",{\"1\":{\"392\":2}}],[\"而且我们的组件重渲染的时候\",{\"1\":{\"256\":1}}],[\"而传入props的则都能正常访问\",{\"1\":{\"317\":1}}],[\"而在settimeout或者原生dom事件中\",{\"1\":{\"306\":1}}],[\"而在react中\",{\"1\":{\"219\":1}}],[\"而第二个参数是一个回调函数\",{\"1\":{\"302\":1}}],[\"而数据状态就是state\",{\"1\":{\"302\":1,\"310\":1}}],[\"而对组件进行拆分后\",{\"1\":{\"282\":1}}],[\"而写key则涉及到了节点的增和删\",{\"1\":{\"273\":1}}],[\"而元素key属性的作用是用于判断元素是新创建的还是被移动的元素\",{\"1\":{\"273\":1}}],[\"而用react实现上述功能则如下\",{\"1\":{\"263\":1}}],[\"而如果使用useeffect后\",{\"1\":{\"256\":1}}],[\"而方式三\",{\"1\":{\"250\":1}}],[\"而并不会渲染那些发生崩溃的子组件树\",{\"1\":{\"236\":1}}],[\"而diff算法就是更高效地通过对比新旧virtual\",{\"1\":{\"228\":1}}],[\"而像函数式创建和类组件创建的区别主要在于需要创建的组件是否需要为有状态组件\",{\"1\":{\"211\":1}}],[\"而函数组件\",{\"1\":{\"197\":1}}],[\"而只可能是被重新创建\",{\"1\":{\"185\":1}}],[\"而这也正是\",{\"1\":{\"168\":1}}],[\"而是将这10次更新内容保存在本地的一个js对象中\",{\"1\":{\"399\":1}}],[\"而是将这10次更新的diff内容保存到本地的一个js对象中\",{\"1\":{\"163\":1}}],[\"而是把代码仓库完整地镜像下来\",{\"1\":{\"374\":1}}],[\"而是把所有的事件绑定到结构的最外层\",{\"1\":{\"240\":1}}],[\"而是指向其他对象\",{\"1\":{\"244\":1}}],[\"而是由第三方库提供\",{\"1\":{\"224\":1}}],[\"而是表示这些生命周期的代码可能在未来的\",{\"1\":{\"186\":1}}],[\"而是返回\",{\"1\":{\"85\":1}}],[\"而通过vnode\",{\"1\":{\"163\":1,\"399\":1}}],[\"而真实dom会频繁重排与重绘\",{\"1\":{\"163\":1}}],[\"而\",{\"1\":{\"150\":1,\"312\":1,\"576\":1}}],[\"而大多数其他编程语言是从右到左的\",{\"1\":{\"98\":1}}],[\"而脚本中此时并无输出的意图\",{\"1\":{\"71\":1}}],[\"而任何起始和结束标记之外的部分都会被\",{\"1\":{\"71\":1}}],[\"而不需要重新加载和执行模块代码\",{\"1\":{\"631\":1}}],[\"而不需要get和set方法\",{\"1\":{\"90\":1}}],[\"而不会影响延迟关键事件\",{\"1\":{\"170\":1}}],[\"而不是\",{\"1\":{\"569\":1}}],[\"而不是经过的时间来指定缓存的生命周期\",{\"1\":{\"555\":1}}],[\"而不是某个属性\",{\"1\":{\"509\":1}}],[\"而不是类的实例\",{\"1\":{\"342\":1}}],[\"而不是被包裹的组件\",{\"1\":{\"215\":1}}],[\"而不是去修改已有的值\",{\"1\":{\"159\":1}}],[\"而不是你可能以为的\",{\"1\":{\"125\":1}}],[\"而不是将其打印出来\",{\"1\":{\"70\":1}}],[\"而不仅仅是函数\",{\"1\":{\"100\":1}}],[\"而不考虑它们的顺序\",{\"1\":{\"65\":1}}],[\"而常规常量则在运行时解析\",{\"1\":{\"49\":1}}],[\"记录事件参数\",{\"1\":{\"538\":1}}],[\"记录\",{\"1\":{\"501\":1}}],[\"记录旧状态\",{\"1\":{\"468\":1}}],[\"记录文件所有的历史变化\",{\"1\":{\"365\":1}}],[\"记录器\",{\"1\":{\"11\":1,\"37\":1}}],[\"记号\",{\"1\":{\"64\":1}}],[\"可出现在终结符或非终结符之后\",{\"1\":{\"683\":1}}],[\"可视区域要渲染的数据\",{\"1\":{\"610\":1}}],[\"可视区域的结束数据索引\",{\"1\":{\"610\":1}}],[\"可视区域的起始数据索引\",{\"1\":{\"610\":1}}],[\"可视化\",{\"1\":{\"503\":1}}],[\"可u考虑设置在page对象的其他字段下\",{\"1\":{\"530\":1}}],[\"可u使用getstoragesync\",{\"1\":{\"530\":1}}],[\"可获取子组件的信息\",{\"1\":{\"496\":1}}],[\"可访问旧数据和旧dom\",{\"1\":{\"468\":1}}],[\"可访问子组件\",{\"1\":{\"467\":1}}],[\"可操作真实dom\",{\"1\":{\"467\":1}}],[\"可用于数据请求\",{\"1\":{\"465\":1}}],[\"可用于插件初始化\",{\"1\":{\"464\":1}}],[\"可选\",{\"1\":{\"427\":1}}],[\"可选参数\",{\"0\":{\"347\":1}}],[\"可能会提示你安装\",{\"1\":{\"618\":1}}],[\"可能因父组件更新而触发\",{\"1\":{\"469\":1}}],[\"可能发生在其子vnode更新之前\",{\"1\":{\"427\":1}}],[\"可能不是全部\",{\"1\":{\"150\":1}}],[\"可做到离线工作\",{\"1\":{\"371\":1}}],[\"可做一些清除副作用的操作\",{\"1\":{\"256\":1}}],[\"可本地提交\",{\"1\":{\"371\":1}}],[\"可接受参数的装饰器\",{\"1\":{\"352\":1}}],[\"可接受的类型之间使用\",{\"1\":{\"109\":1}}],[\"可定义私有属性\",{\"1\":{\"341\":1}}],[\"可复用的组件\",{\"1\":{\"311\":1}}],[\"可维护\",{\"1\":{\"264\":1}}],[\"可重用\",{\"1\":{\"264\":1}}],[\"可组合\",{\"1\":{\"264\":1}}],[\"可通过this\",{\"1\":{\"190\":1}}],[\"可迭代c\",{\"0\":{\"136\":1}}],[\"可见性\",{\"1\":{\"86\":2}}],[\"可变变量名\",{\"0\":{\"145\":1}}],[\"可变函数可以用来实现包括回调函数\",{\"1\":{\"66\":1}}],[\"可变函数\",{\"0\":{\"66\":1}}],[\"可变数量的参数值列表\",{\"0\":{\"64\":1}}],[\"可以覆盖\",{\"1\":{\"639\":1}}],[\"可以为\",{\"1\":{\"636\":1}}],[\"可以为input标签设置onchange事件\",{\"1\":{\"201\":1}}],[\"可以是\",{\"1\":{\"636\":1}}],[\"可以是整数或浮点数\",{\"1\":{\"109\":1}}],[\"可以降低runtime代码的复杂度\",{\"1\":{\"631\":1}}],[\"可以采取一些措施来减少runtime代码的大小和复杂度\",{\"1\":{\"631\":1}}],[\"可以使\",{\"1\":{\"627\":1}}],[\"可以使用await语句\",{\"1\":{\"676\":1}}],[\"可以使用async和await完成相同作用的事情\",{\"1\":{\"491\":1}}],[\"可以使用类型别名在属性里引用自己\",{\"1\":{\"334\":1}}],[\"可以使用ref\",{\"1\":{\"202\":1}}],[\"可以使用usestate\",{\"1\":{\"194\":1}}],[\"可以使用十进制\",{\"1\":{\"113\":1}}],[\"可以使用变量动态获取类常量\",{\"1\":{\"91\":1}}],[\"可以使用\",{\"1\":{\"47\":1,\"83\":1,\"88\":1,\"92\":1}}],[\"可以触发一个插件来输出打包文件的大小\",{\"1\":{\"622\":1}}],[\"可以很好满足你的需求\",{\"1\":{\"621\":1}}],[\"可以不用再引入一个配置文件来打包项目\",{\"1\":{\"621\":1}}],[\"可以限定用户在输入时\",{\"1\":{\"539\":1}}],[\"可以轻松的获取微信提供的用户身份标识\",{\"1\":{\"519\":1}}],[\"可以访问虚拟dom\",{\"1\":{\"466\":1}}],[\"可以访问组件state与prop属性\",{\"1\":{\"178\":1}}],[\"可以从里面拿到\",{\"1\":{\"455\":1}}],[\"可以设置以下props属性\",{\"1\":{\"453\":1}}],[\"可以操作dom\",{\"1\":{\"427\":1}}],[\"可以分为四个方面\",{\"1\":{\"392\":1}}],[\"可以分成三个阶段\",{\"1\":{\"174\":1}}],[\"可以遵循以下的规则\",{\"1\":{\"379\":1}}],[\"可以离线工作\",{\"1\":{\"371\":1}}],[\"可以让你回到任何一个时间点\",{\"1\":{\"365\":1}}],[\"可以让你在js中通过使用xml的方式去直接声明界面的dom结构\",{\"1\":{\"162\":1}}],[\"可以装饰\",{\"1\":{\"352\":1}}],[\"可以声明\",{\"1\":{\"350\":1}}],[\"可以将内联图像转换为\",{\"1\":{\"635\":1}}],[\"可以将他定义为枚举类型\",{\"1\":{\"344\":1}}],[\"可以将其赋成数组\",{\"1\":{\"148\":1}}],[\"可以作用于原始值\",{\"1\":{\"334\":1}}],[\"可以帮助我们方便的实现组件的入场和离场动画\",{\"1\":{\"322\":1}}],[\"可以修改\",{\"1\":{\"312\":1}}],[\"可以接受任意类型的值\",{\"1\":{\"329\":1}}],[\"可以接受一个参数作为输入值\",{\"1\":{\"311\":1}}],[\"可以接受用户自定义的回调函数作为参数\",{\"1\":{\"132\":1}}],[\"可以发现\",{\"1\":{\"298\":1}}],[\"可以发现新版的生命周期减少了以下三种方法\",{\"1\":{\"186\":1}}],[\"可以自己保存\",{\"1\":{\"289\":1}}],[\"可以自动生成这些文件\",{\"1\":{\"70\":1}}],[\"可以感受到react存在的优势\",{\"1\":{\"265\":1}}],[\"可以避免在render操作中重复绑定\",{\"1\":{\"248\":1}}],[\"可以得出以下结论\",{\"1\":{\"241\":1}}],[\"可以根据各自情况选择合适的方案\",{\"1\":{\"225\":1}}],[\"可以根据前后的props和state的变化做相应的操作\",{\"1\":{\"183\":1}}],[\"可以类似于预处理器一样样式嵌套\",{\"1\":{\"225\":1}}],[\"可以满足大部分场景的应用\",{\"1\":{\"225\":1}}],[\"可以动态获取当前state中的状态\",{\"1\":{\"221\":1}}],[\"可以编写动态的css\",{\"1\":{\"219\":1}}],[\"可以编写局部css\",{\"1\":{\"219\":1}}],[\"可以比较props\",{\"1\":{\"177\":1}}],[\"可以看看下面一个例子\",{\"1\":{\"241\":1}}],[\"可以看到通过super关键字实现调用父类\",{\"1\":{\"316\":1}}],[\"可以看到通信过程中\",{\"1\":{\"159\":1}}],[\"可以看到更新是同步\",{\"1\":{\"305\":1}}],[\"可以看到hooks能够更容易解决状态相关的重用的问题\",{\"1\":{\"258\":1}}],[\"可以看到\",{\"1\":{\"162\":1,\"225\":1}}],[\"可以看出throw语句不可以换行\",{\"1\":{\"688\":1}}],[\"可以看出两者区别\",{\"1\":{\"255\":1}}],[\"可以看出\",{\"1\":{\"44\":1,\"667\":1,\"676\":2}}],[\"可以看出分歧为forinofloopevaluation\",{\"1\":{\"36\":1}}],[\"可以共享数据\",{\"1\":{\"157\":1}}],[\"可以保留一个计数器并一起传递\",{\"1\":{\"148\":1}}],[\"可以被展开到当前位置\",{\"1\":{\"127\":1}}],[\"可以被嵌入到各种不同的文档中去\",{\"1\":{\"71\":1}}],[\"可以断行\",{\"1\":{\"120\":1}}],[\"可以用computed提前过滤那些不需要显示的项\",{\"1\":{\"444\":1}}],[\"可以用来监听渲染是否完成\",{\"1\":{\"310\":1}}],[\"可以用\",{\"1\":{\"148\":1}}],[\"可以用一幅图像代替标准的提交按钮\",{\"1\":{\"147\":1}}],[\"可以用以下任一语法定义\",{\"1\":{\"116\":1}}],[\"可以用负运算符\",{\"1\":{\"113\":1}}],[\"可以组合在一起创建更加复杂的类型\",{\"1\":{\"107\":1}}],[\"可以把它放在变量\",{\"1\":{\"100\":1}}],[\"可以获取当前组件的一些状态\",{\"1\":{\"219\":1}}],[\"可以获取包含类\",{\"1\":{\"84\":1}}],[\"可以获得所有已定义的常量列表\",{\"1\":{\"47\":1}}],[\"可以通过git\",{\"1\":{\"375\":1}}],[\"可以通过e\",{\"1\":{\"240\":1}}],[\"可以通过consumer组件或者或者使用contexttype属性接收\",{\"1\":{\"157\":1}}],[\"可以通过引用传递\",{\"1\":{\"128\":1}}],[\"可以通过\",{\"1\":{\"81\":1,\"636\":2}}],[\"可以在\",{\"1\":{\"639\":1}}],[\"可以在devtool查看\",{\"1\":{\"578\":1}}],[\"可以在img标签中直接使用来实现懒加载\",{\"1\":{\"551\":1}}],[\"可以在前置页面将一些有用的字段带到当前页\",{\"1\":{\"530\":1}}],[\"可以在解包参数后面使用命名参数\",{\"1\":{\"65\":1}}],[\"可以在函数定义中该参数的前面加上符号\",{\"1\":{\"62\":1}}],[\"可以和多个可选项进行比较\",{\"1\":{\"54\":1}}],[\"可以表达为一个参数表达式\",{\"1\":{\"43\":1}}],[\"runtime使用manifest的信息加载和解析模块\",{\"1\":{\"632\":1}}],[\"runtimechunk选项\",{\"1\":{\"631\":1}}],[\"runtime还负责模块的缓存管理\",{\"1\":{\"631\":1}}],[\"runtime会根据这个依赖图来解析模块的依赖\",{\"1\":{\"631\":1}}],[\"runtime提供了支持动态加载的机制\",{\"1\":{\"631\":1}}],[\"runtime提供了\",{\"1\":{\"631\":1}}],[\"runtime的主要作用\",{\"1\":{\"631\":1}}],[\"runtime\",{\"0\":{\"631\":1,\"657\":1},\"1\":{\"631\":1,\"632\":2,\"645\":1,\"667\":1}}],[\"run\",{\"1\":{\"618\":1,\"645\":1,\"646\":2}}],[\"rules\",{\"1\":{\"599\":1,\"636\":1,\"638\":2,\"639\":1,\"643\":1,\"644\":1}}],[\"raw\",{\"1\":{\"643\":1}}],[\"random\",{\"1\":{\"606\":1,\"607\":1,\"608\":1}}],[\"raspberry\",{\"1\":{\"63\":2}}],[\"routes\",{\"1\":{\"599\":2}}],[\"router配置路由\",{\"1\":{\"548\":1}}],[\"router\",{\"1\":{\"407\":1,\"502\":1}}],[\"round\",{\"1\":{\"115\":2}}],[\"root\",{\"1\":{\"162\":4,\"268\":1,\"585\":2}}],[\"right\",{\"1\":{\"96\":1,\"297\":2,\"389\":1}}],[\"r\",{\"1\":{\"67\":1,\"121\":1,\"125\":4,\"128\":1,\"147\":1,\"380\":1,\"548\":8,\"700\":1}}],[\"reverse\",{\"1\":{\"698\":1}}],[\"recharge\",{\"1\":{\"599\":1}}],[\"reconcilechildren\",{\"1\":{\"269\":2}}],[\"reconciler\",{\"1\":{\"168\":1}}],[\"record<one\",{\"1\":{\"336\":1}}],[\"record\",{\"1\":{\"26\":1,\"336\":1,\"658\":1,\"660\":1}}],[\"rel\",{\"1\":{\"597\":1}}],[\"rel=\",{\"1\":{\"596\":4}}],[\"relaunch\",{\"1\":{\"522\":1}}],[\"ret\",{\"1\":{\"483\":4}}],[\"return语句\",{\"1\":{\"676\":1}}],[\"return等\",{\"1\":{\"673\":1}}],[\"returnifabrupt\",{\"1\":{\"660\":1,\"661\":1}}],[\"returnifabrupt这是一个简写的步骤\",{\"1\":{\"660\":1}}],[\"returncompletionrecord\",{\"1\":{\"658\":1}}],[\"returns\",{\"1\":{\"302\":1}}],[\"returnstatementexpressionstatement\",{\"1\":{\"44\":5,\"676\":1}}],[\"return\",{\"1\":{\"44\":3,\"45\":3,\"54\":2,\"63\":1,\"64\":1,\"65\":1,\"67\":1,\"79\":1,\"90\":2,\"127\":1,\"154\":1,\"155\":2,\"156\":1,\"169\":1,\"170\":1,\"182\":1,\"190\":1,\"191\":1,\"193\":2,\"194\":1,\"195\":3,\"196\":2,\"197\":2,\"201\":1,\"202\":1,\"208\":1,\"209\":1,\"210\":1,\"215\":5,\"216\":7,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"236\":5,\"241\":2,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"255\":2,\"256\":3,\"261\":2,\"264\":2,\"269\":7,\"273\":1,\"280\":7,\"281\":1,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"297\":4,\"298\":6,\"302\":1,\"306\":2,\"310\":2,\"311\":1,\"317\":1,\"323\":1,\"324\":1,\"325\":2,\"349\":2,\"352\":4,\"353\":2,\"359\":1,\"360\":1,\"442\":2,\"443\":8,\"444\":2,\"450\":2,\"460\":1,\"482\":2,\"483\":3,\"535\":1,\"538\":1,\"548\":1,\"585\":2,\"606\":1,\"607\":1,\"608\":1,\"659\":1,\"660\":1,\"667\":1,\"668\":1,\"674\":1,\"676\":3}}],[\"removeonly\",{\"1\":{\"460\":1}}],[\"remove\",{\"1\":{\"232\":1}}],[\"republic\",{\"1\":{\"224\":1}}],[\"replaced\",{\"1\":{\"45\":1}}],[\"redirectto\",{\"1\":{\"518\":1,\"522\":1}}],[\"reduce\",{\"1\":{\"348\":1}}],[\"red\",{\"1\":{\"221\":1,\"222\":1,\"224\":1,\"269\":1}}],[\"responsestart\",{\"1\":{\"574\":1}}],[\"res\",{\"1\":{\"483\":3,\"549\":1}}],[\"reserve\",{\"1\":{\"297\":2}}],[\"rest\",{\"1\":{\"215\":2,\"348\":1}}],[\"result\",{\"1\":{\"196\":2}}],[\"resolve\",{\"1\":{\"599\":2,\"616\":1,\"644\":1}}],[\"resolved\",{\"1\":{\"169\":1}}],[\"resourcehintwebpackplugin\",{\"1\":{\"597\":2}}],[\"resource\",{\"0\":{\"131\":1},\"1\":{\"131\":1,\"597\":1}}],[\"resource类型\",{\"1\":{\"108\":1}}],[\"ref实例\",{\"1\":{\"386\":1}}],[\"refactor\",{\"1\":{\"379\":1}}],[\"ref对象接收到的是组件的挂载实例\",{\"1\":{\"293\":1}}],[\"refs通过react\",{\"1\":{\"291\":1}}],[\"refs提供了一种方式\",{\"1\":{\"288\":1}}],[\"refs\",{\"0\":{\"288\":1},\"1\":{\"289\":1,\"290\":1}}],[\"ref等\",{\"1\":{\"269\":1}}],[\"ref=\",{\"1\":{\"202\":1,\"215\":1,\"241\":2,\"290\":1,\"291\":1,\"292\":1,\"293\":1}}],[\"refobject\",{\"1\":{\"169\":1}}],[\"ref\",{\"1\":{\"169\":1,\"215\":6,\"291\":2,\"386\":1,\"501\":1,\"502\":1}}],[\"renderer\",{\"1\":{\"503\":1,\"599\":3}}],[\"render用于生成vnode\",{\"1\":{\"486\":1}}],[\"render方法\",{\"1\":{\"486\":1}}],[\"render方法中使用箭头函数\",{\"0\":{\"247\":1},\"1\":{\"245\":1}}],[\"render方法中使用bind\",{\"0\":{\"246\":1},\"1\":{\"245\":1}}],[\"renderc\",{\"1\":{\"450\":1}}],[\"renderb\",{\"1\":{\"450\":1}}],[\"rendera\",{\"1\":{\"450\":1}}],[\"render和staticrenderfns函数被调用后生成虚拟vnode节点\",{\"1\":{\"448\":1}}],[\"render就可以得到渲染函数\",{\"1\":{\"442\":1}}],[\"render以及所有的vue生命周期钩子能够直接作为类的成员方法\",{\"1\":{\"357\":1}}],[\"render函数通过表达式的值来决定是否生成dom\",{\"1\":{\"450\":1}}],[\"render函数里面可以编写jsx\",{\"1\":{\"299\":1}}],[\"render函数在react中有两种形式\",{\"1\":{\"297\":1}}],[\"render的执行时机主要分成了两部分\",{\"1\":{\"298\":1}}],[\"render的触发时机\",{\"1\":{\"278\":1}}],[\"render将生成好的虚拟dom渲染到指定容器上\",{\"1\":{\"270\":1}}],[\"render大致实现方法如下\",{\"1\":{\"269\":1}}],[\"render进行渲染成真实dom\",{\"1\":{\"269\":1}}],[\"render\",{\"0\":{\"178\":1,\"297\":1},\"1\":{\"155\":2,\"156\":1,\"157\":1,\"162\":2,\"175\":1,\"178\":1,\"180\":1,\"190\":1,\"193\":1,\"196\":2,\"197\":2,\"201\":1,\"202\":1,\"210\":1,\"215\":3,\"216\":6,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"236\":2,\"241\":1,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"255\":1,\"256\":1,\"261\":4,\"264\":1,\"268\":2,\"269\":7,\"274\":1,\"280\":1,\"288\":2,\"290\":1,\"291\":2,\"292\":1,\"297\":2,\"298\":9,\"299\":2,\"302\":1,\"310\":1,\"311\":1,\"317\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"requestanimationframe\",{\"1\":{\"607\":1,\"608\":1}}],[\"requestanimationframe的步伐跟着系统的刷新步伐走\",{\"1\":{\"607\":1}}],[\"requestanimationframe最大的优势是由系统来决定回调函数的执行时机\",{\"1\":{\"607\":1}}],[\"requestidlecallback\",{\"1\":{\"170\":1}}],[\"request\",{\"1\":{\"147\":3,\"148\":1,\"519\":1}}],[\"required\",{\"1\":{\"360\":1}}],[\"require\",{\"1\":{\"73\":1,\"92\":1,\"548\":8,\"549\":2,\"585\":1,\"597\":2,\"599\":2,\"615\":2,\"616\":1,\"623\":1,\"626\":2,\"631\":2,\"643\":3,\"644\":3,\"645\":2}}],[\"read\",{\"1\":{\"585\":1}}],[\"ready\",{\"1\":{\"516\":1}}],[\"readonly<iperson>\",{\"1\":{\"336\":1}}],[\"readonly\",{\"0\":{\"83\":1},\"1\":{\"83\":4,\"86\":2,\"88\":2,\"90\":1,\"341\":1}}],[\"reactive的类型推断\",{\"1\":{\"502\":1}}],[\"react具有单向数据流的特性\",{\"1\":{\"311\":1}}],[\"react的核心思想就是组件化思想\",{\"1\":{\"311\":1}}],[\"react判断key的流程具体如下图\",{\"1\":{\"274\":1}}],[\"react根据key属性匹配原有树上的子元素以及最新树上的子元素\",{\"1\":{\"273\":1}}],[\"react会将这些\",{\"1\":{\"268\":1}}],[\"react通过将组件编写的jsx映射到屏幕\",{\"1\":{\"268\":1}}],[\"react通过引入virtual\",{\"1\":{\"228\":1}}],[\"react特性有很多\",{\"1\":{\"262\":1}}],[\"react事件\",{\"1\":{\"241\":1}}],[\"react基于浏览器的事件机制自身实现了一套事件机制\",{\"1\":{\"239\":1}}],[\"react发现新树中\",{\"1\":{\"230\":1}}],[\"react中diff算法主要遵循三个层级的策略\",{\"1\":{\"229\":1}}],[\"react内部都会将porps赋值给组件实例porps属性中\",{\"1\":{\"318\":1}}],[\"react内部也会将其定义在组件实例中\",{\"1\":{\"317\":1}}],[\"react内部\",{\"1\":{\"196\":2}}],[\"react<\",{\"1\":{\"196\":4}}],[\"react16引用了错误边界新的概念\",{\"1\":{\"236\":1}}],[\"react16\",{\"1\":{\"174\":1}}],[\"react整个组件生命周期包括从创建\",{\"1\":{\"173\":1}}],[\"reactelement\",{\"1\":{\"169\":1}}],[\"reactelement里面的key\",{\"1\":{\"169\":1}}],[\"react借助虚拟dom\",{\"1\":{\"164\":1}}],[\"reactdom\",{\"1\":{\"162\":2,\"261\":1,\"268\":1,\"269\":1,\"270\":1}}],[\"react\",{\"0\":{\"167\":1,\"209\":1,\"210\":1,\"253\":1,\"261\":1,\"281\":1},\"1\":{\"156\":1,\"157\":2,\"162\":1,\"168\":2,\"169\":5,\"170\":5,\"186\":1,\"190\":1,\"193\":1,\"194\":1,\"195\":1,\"196\":1,\"197\":2,\"201\":1,\"202\":3,\"207\":2,\"209\":3,\"210\":1,\"215\":5,\"216\":5,\"221\":2,\"222\":2,\"223\":2,\"224\":3,\"236\":4,\"240\":3,\"241\":13,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"253\":2,\"255\":3,\"256\":4,\"261\":3,\"264\":1,\"268\":3,\"269\":2,\"273\":1,\"277\":2,\"278\":1,\"281\":3,\"288\":2,\"289\":1,\"290\":2,\"291\":2,\"292\":2,\"297\":5,\"298\":2,\"299\":1,\"302\":2,\"310\":1,\"311\":1,\"317\":4,\"321\":1,\"322\":1,\"323\":1,\"324\":1,\"325\":3,\"599\":1},\"2\":{\"160\":1,\"161\":1,\"165\":1,\"166\":1,\"171\":1,\"172\":1,\"187\":1,\"188\":1,\"198\":1,\"199\":1,\"204\":1,\"205\":1,\"212\":1,\"213\":1,\"217\":1,\"218\":1,\"226\":1,\"227\":1,\"234\":1,\"235\":1,\"237\":1,\"238\":1,\"242\":1,\"243\":1,\"251\":1,\"252\":1,\"259\":1,\"260\":1,\"266\":1,\"267\":1,\"271\":1,\"272\":1,\"275\":1,\"276\":1,\"283\":1,\"284\":1,\"286\":1,\"287\":1,\"295\":1,\"296\":1,\"300\":1,\"301\":1,\"307\":1,\"308\":1,\"313\":1,\"314\":1,\"319\":1,\"320\":1,\"326\":1,\"327\":1}}],[\"real\",{\"1\":{\"116\":1,\"162\":1}}],[\"realm记录器包含全局对象\",{\"1\":{\"19\":1}}],[\"realm记录器\",{\"1\":{\"19\":1}}],[\"realm包含了代码需要执行的最小资源\",{\"1\":{\"11\":1}}],[\"realm\",{\"1\":{\"10\":1}}],[\"realm提供了代码执行需要的基础资源\",{\"1\":{\"7\":1}}],[\"register\",{\"1\":{\"56\":2,\"92\":3}}],[\"仅衡量网页上首次互动的输入延迟\",{\"1\":{\"572\":1}}],[\"仅当依赖变化时重新计算\",{\"1\":{\"501\":1}}],[\"仅当参数未传递值时才使用默认值\",{\"1\":{\"63\":1}}],[\"仅将差异部分应用到真实dom\",{\"1\":{\"501\":1}}],[\"仅包含默认生命周期函数和默认事件\",{\"1\":{\"463\":1}}],[\"仅在\",{\"1\":{\"256\":1}}],[\"仅在属性挂钩内有效\",{\"1\":{\"49\":1}}],[\"仅有两个值\",{\"1\":{\"112\":1}}],[\"因而如果有一些数据字段不在界面中展示且数据结构比较复杂或包含长字符串\",{\"1\":{\"530\":1}}],[\"因而即使在函数内部改变参数值\",{\"1\":{\"62\":1}}],[\"因此settimeout的实际执行时间可能会比其设定的时间晚一些\",{\"1\":{\"606\":1}}],[\"因此需要用到dns缓存\",{\"1\":{\"561\":1}}],[\"因此逻辑层和渲染层之间需要有一定的机制保证时序正确\",{\"1\":{\"526\":1}}],[\"因此在小程序中\",{\"1\":{\"526\":1}}],[\"因此在某一时刻给定的变量是何种类型并不明显\",{\"1\":{\"150\":1}}],[\"因此并不适合多人版本开发\",{\"1\":{\"367\":1}}],[\"因此即使没有设置选项也不能忽略\",{\"1\":{\"358\":1}}],[\"因此如果用到constructor就必须写super\",{\"1\":{\"317\":1}}],[\"因此key的值需要为每一个元素赋予一个确定的标识\",{\"1\":{\"273\":1}}],[\"因此优先考虑hooks\",{\"1\":{\"258\":1}}],[\"因此c节点进行移动操作\",{\"1\":{\"232\":1}}],[\"因此d节点不动\",{\"1\":{\"232\":1}}],[\"因此a节点进行移动操作\",{\"1\":{\"232\":1}}],[\"因此b节点不动\",{\"1\":{\"232\":1}}],[\"因此无需进行节点删除和创建\",{\"1\":{\"232\":1}}],[\"因此同样是点击\",{\"1\":{\"197\":1}}],[\"因此不同设备的刷新频率可能会不同\",{\"1\":{\"606\":1}}],[\"因此不会被当前组件直接使用\",{\"1\":{\"386\":1}}],[\"因此不能访问到组件的实例\",{\"1\":{\"177\":1}}],[\"因此不支持\",{\"1\":{\"119\":1}}],[\"因此会马上执行流程\",{\"1\":{\"163\":1}}],[\"因此对于购物车程序\",{\"1\":{\"148\":1}}],[\"因此通常被称为自动全局变量\",{\"1\":{\"141\":1}}],[\"因此\",{\"1\":{\"72\":1,\"134\":1,\"135\":1,\"147\":1,\"148\":1,\"159\":1,\"197\":1,\"201\":1,\"253\":1,\"273\":1,\"569\":1,\"575\":1,\"615\":1,\"632\":1}}],[\"因为这样可以减少源码中样板文件的代码量\",{\"1\":{\"639\":1}}],[\"因为他们并没有实例\",{\"1\":{\"293\":1}}],[\"因为它没有实例\",{\"1\":{\"215\":1}}],[\"因为\",{\"1\":{\"150\":1}}],[\"因为可以显式指定索引\",{\"1\":{\"126\":1}}],[\"因为在react会在类组件构造函数生成实例后再给this\",{\"1\":{\"317\":1}}],[\"因为在受控组件中\",{\"1\":{\"203\":1}}],[\"因为在\",{\"1\":{\"98\":1}}],[\"因为访问类属性的优先级要更高\",{\"1\":{\"79\":1}}],[\"因为当\",{\"1\":{\"72\":1}}],[\"因为本指令是在文件编译时处理的\",{\"1\":{\"55\":1}}],[\"因为用此方法是在编译时定义的\",{\"1\":{\"47\":1}}],[\"默认插槽\",{\"1\":{\"496\":1}}],[\"默认为master分支\",{\"1\":{\"379\":1}}],[\"默认0\",{\"1\":{\"344\":1}}],[\"默认从0开始累加\",{\"1\":{\"344\":1}}],[\"默认情况返回true\",{\"1\":{\"181\":1}}],[\"默认情况下绑定事件行为会被视为动态绑定\",{\"1\":{\"508\":1}}],[\"默认情况下返回true表示重新渲染\",{\"1\":{\"279\":1}}],[\"默认情况下\",{\"1\":{\"62\":1,\"256\":1}}],[\"默认参数\",{\"0\":{\"63\":1}}],[\"默认值为undefined\",{\"1\":{\"11\":1}}],[\"引入一个名为\",{\"1\":{\"644\":1}}],[\"引入其他文件\",{\"1\":{\"615\":1}}],[\"引入vue\",{\"1\":{\"357\":1}}],[\"引入\",{\"1\":{\"225\":1}}],[\"引入样式组件也很简单\",{\"1\":{\"224\":1}}],[\"引入css就不如vue方便简洁\",{\"1\":{\"219\":1}}],[\"引擎和页面渲染引擎两个线程是互斥的\",{\"1\":{\"168\":1}}],[\"引用的类名\",{\"1\":{\"223\":1}}],[\"引用\",{\"1\":{\"140\":1}}],[\"引用赋值\",{\"0\":{\"140\":1}}],[\"引用类型\",{\"1\":{\"108\":1}}],[\"引用传递\",{\"0\":{\"62\":1}}],[\"引起\",{\"1\":{\"56\":4}}],[\"v5\",{\"1\":{\"637\":1}}],[\"v10\",{\"1\":{\"624\":1}}],[\"v4\",{\"1\":{\"621\":1,\"637\":1}}],[\"vnd\",{\"1\":{\"585\":2}}],[\"vnodetomove\",{\"1\":{\"460\":4}}],[\"vnode\",{\"1\":{\"269\":13,\"427\":1,\"460\":1}}],[\"viii\",{\"1\":{\"622\":1}}],[\"vii\",{\"1\":{\"622\":1}}],[\"vi\",{\"1\":{\"622\":1}}],[\"vitals的测量功能\",{\"1\":{\"580\":1}}],[\"vitals和其他关键性能指标\",{\"1\":{\"580\":1}}],[\"vitals库\",{\"0\":{\"580\":1}}],[\"vitals\",{\"1\":{\"574\":2,\"580\":2}}],[\"vite\",{\"1\":{\"502\":1,\"585\":4}}],[\"video元素\",{\"1\":{\"569\":1}}],[\"virtual\",{\"1\":{\"162\":1}}],[\"v表示穿插普通文本节点\",{\"1\":{\"497\":1}}],[\"vod\",{\"1\":{\"449\":1}}],[\"void\",{\"0\":{\"134\":1},\"1\":{\"109\":6,\"134\":1,\"169\":1,\"330\":1,\"340\":2,\"343\":2,\"359\":1,\"443\":1}}],[\"void类型\",{\"1\":{\"108\":1}}],[\"vshow\",{\"1\":{\"449\":1}}],[\"vm\",{\"1\":{\"448\":1,\"455\":1,\"482\":3,\"483\":2,\"486\":1}}],[\"vm实例为undefined\",{\"1\":{\"418\":1}}],[\"verbose\",{\"1\":{\"585\":1}}],[\"version\",{\"0\":{\"708\":1},\"1\":{\"365\":1,\"585\":2}}],[\"very\",{\"1\":{\"61\":1}}],[\"vue会在需要时加载该组件\",{\"1\":{\"548\":1}}],[\"vue会进行这样的操作\",{\"1\":{\"459\":2}}],[\"vuex\",{\"1\":{\"502\":1}}],[\"vuex特殊\",{\"1\":{\"386\":1}}],[\"vue组件渲染到页面上需要经过templete=>render=>vnode=>dom过程\",{\"1\":{\"497\":1}}],[\"vue将开启一个异步更新队列\",{\"1\":{\"490\":1}}],[\"vue调用\",{\"1\":{\"487\":1}}],[\"vue的构造函数\",{\"1\":{\"486\":1}}],[\"vue中的mixin\",{\"0\":{\"478\":1}}],[\"vue中有如下的常规通信方案\",{\"1\":{\"386\":1}}],[\"vue生命周期即vue组件从创建到销毁的过程\",{\"1\":{\"463\":1}}],[\"vue只会更改顺序\",{\"1\":{\"459\":1}}],[\"vue就会使用就地复地原则\",{\"1\":{\"458\":1}}],[\"vue编译器会将其转换为\",{\"1\":{\"450\":1}}],[\"vue3采用proxy重写了响应式系统\",{\"1\":{\"509\":1}}],[\"vue3优化\",{\"0\":{\"508\":1}}],[\"vue3核心代码用ts重写\",{\"1\":{\"503\":1}}],[\"vue3的关键更新\",{\"0\":{\"503\":1}}],[\"vue3全面支持typescript\",{\"1\":{\"502\":1}}],[\"vue3对虚拟dom的优化\",{\"1\":{\"501\":1}}],[\"vue3基于proxy的响应式系统解决了这一问题\",{\"1\":{\"501\":1}}],[\"vue3\",{\"0\":{\"506\":1},\"1\":{\"501\":1}}],[\"vue3和vue2的v\",{\"1\":{\"444\":1}}],[\"vue3中已废弃\",{\"1\":{\"434\":1}}],[\"vue模板编译时\",{\"1\":{\"442\":1}}],[\"vue最终都会通过vue\",{\"1\":{\"417\":1}}],[\"vue权限管理\",{\"0\":{\"392\":1}}],[\"vue2使用defineproperty来劫持整个对象\",{\"1\":{\"509\":1}}],[\"vue2使用object\",{\"1\":{\"403\":1}}],[\"vue2对对象新增属性\",{\"1\":{\"501\":1}}],[\"vue2\",{\"1\":{\"386\":3,\"501\":1}}],[\"vue\",{\"0\":{\"500\":1,\"709\":1},\"1\":{\"358\":3,\"359\":1,\"360\":3,\"361\":3,\"362\":3,\"386\":1,\"404\":1,\"407\":3,\"413\":1,\"459\":2,\"460\":1,\"463\":1,\"479\":1,\"480\":1,\"482\":3,\"491\":1,\"502\":2,\"548\":6,\"585\":2},\"2\":{\"385\":1,\"388\":1,\"391\":1,\"394\":1,\"397\":1,\"401\":1,\"406\":1,\"411\":1,\"415\":1,\"420\":1,\"425\":1,\"430\":1,\"433\":1,\"440\":1,\"452\":1,\"457\":1,\"462\":1,\"476\":1,\"485\":1,\"489\":1,\"493\":1,\"499\":1,\"505\":1,\"511\":1}}],[\"vue使用css起来更为简洁\",{\"1\":{\"219\":1}}],[\"vvnode\",{\"1\":{\"269\":4}}],[\"vdom\",{\"1\":{\"162\":4}}],[\"v\",{\"0\":{\"441\":3,\"442\":1,\"445\":1,\"449\":1,\"450\":1},\"1\":{\"121\":1,\"379\":1,\"386\":5,\"389\":1,\"392\":1,\"435\":1,\"442\":3,\"443\":7,\"446\":3,\"447\":7,\"449\":1,\"450\":7,\"459\":1,\"501\":6,\"622\":1,\"700\":1}}],[\"vant\",{\"1\":{\"502\":1}}],[\"val\",{\"1\":{\"361\":3,\"662\":5}}],[\"validator\",{\"1\":{\"360\":1}}],[\"valid\",{\"1\":{\"109\":1}}],[\"value=\",{\"1\":{\"147\":5,\"154\":1,\"157\":1,\"201\":1,\"202\":1}}],[\"values\",{\"1\":{\"124\":1,\"125\":1}}],[\"value\",{\"1\":{\"54\":1,\"55\":2,\"77\":1,\"90\":1,\"91\":1,\"202\":1,\"334\":1,\"360\":3,\"427\":1,\"449\":8,\"615\":1,\"639\":1,\"660\":1,\"662\":2}}],[\"vary\",{\"1\":{\"585\":2}}],[\"var2=123\",{\"1\":{\"150\":1}}],[\"var2\",{\"1\":{\"150\":1}}],[\"var1=null\",{\"1\":{\"150\":1}}],[\"var1\",{\"1\":{\"150\":1}}],[\"variabledeclaration\",{\"1\":{\"673\":1,\"683\":1}}],[\"variables\",{\"1\":{\"120\":2,\"302\":2}}],[\"variable\",{\"1\":{\"66\":5,\"67\":1}}],[\"variableenvironment\",{\"1\":{\"10\":1}}],[\"varnames\",{\"1\":{\"32\":1}}],[\"vardeclarations\",{\"1\":{\"22\":1}}],[\"vardeclarednames对语句递归的调用\",{\"1\":{\"22\":1}}],[\"vardeclarednames语义收集标识符\",{\"1\":{\"22\":1}}],[\"var\",{\"1\":{\"18\":6,\"26\":1,\"38\":2,\"54\":1,\"65\":3,\"67\":5,\"87\":2,\"103\":6,\"115\":3,\"345\":1,\"355\":1,\"479\":1,\"483\":2,\"535\":1,\"541\":3}}],[\"指在ecma的产生式中的以\",{\"1\":{\"673\":1}}],[\"指定语义\",{\"1\":{\"657\":1}}],[\"指标用于衡量在first\",{\"1\":{\"575\":1}}],[\"指针移动\",{\"1\":{\"460\":2}}],[\"指针向后移动\",{\"1\":{\"460\":1}}],[\"指的是请求资源到响应第一个字节开始到达之间的时间\",{\"1\":{\"573\":1}}],[\"指的是用户访问网页期间发生的所有互动\",{\"1\":{\"572\":1}}],[\"指的是函数组件本身\",{\"1\":{\"297\":1}}],[\"指的是render方法\",{\"1\":{\"297\":1}}],[\"指令绑定的前一个值\",{\"1\":{\"427\":1}}],[\"指令绑定的元素\",{\"1\":{\"427\":1}}],[\"指令与元素解绑时调用\",{\"1\":{\"427\":1}}],[\"指令所在的组件vnode及其子vnode全部更新后调用\",{\"1\":{\"427\":1}}],[\"指令第一次绑定到元素时调用\",{\"1\":{\"427\":1}}],[\"指令\",{\"1\":{\"407\":1,\"450\":1}}],[\"指令分隔符\",{\"0\":{\"73\":1},\"1\":{\"72\":1}}],[\"指令来对每段脚本指定其编码方式\",{\"1\":{\"57\":1}}],[\"指向的是最外层容器组件实例的\",{\"1\":{\"215\":1}}],[\"指向右边第一个兄弟fiber节点\",{\"1\":{\"170\":1}}],[\"指向子fiber节点\",{\"1\":{\"170\":1}}],[\"指向父级fiber节点\",{\"1\":{\"170\":1}}],[\"指向自己的兄弟结构\",{\"1\":{\"169\":1}}],[\"指向自己的第一个子节点\",{\"1\":{\"169\":1}}],[\"指向他在fiber节点树中的`parent`\",{\"1\":{\"169\":1}}],[\"指向包含类中的类元素创建的私有名称\",{\"1\":{\"10\":1}}],[\"指向代码中创建的变量声明\",{\"1\":{\"10\":1}}],[\"指向代码中创建的标识符引用\",{\"1\":{\"10\":1}}],[\"+return\",{\"1\":{\"676\":1}}],[\"+await\",{\"1\":{\"676\":1}}],[\"++newstartidx\",{\"1\":{\"460\":1}}],[\"+3600\",{\"1\":{\"148\":4}}],[\"+\",{\"1\":{\"65\":3,\"102\":1,\"113\":1,\"143\":2,\"148\":1,\"156\":1,\"194\":1,\"197\":2,\"210\":1,\"255\":2,\"256\":2,\"298\":2,\"302\":1,\"306\":5,\"310\":1,\"349\":3,\"352\":3,\"359\":2,\"442\":1,\"450\":1,\"606\":4,\"607\":4,\"608\":4,\"618\":13,\"675\":2}}],[\"+=\",{\"1\":{\"56\":1,\"64\":1}}],[\"+0𝔽\",{\"1\":{\"45\":1}}],[\"通俗的理解\",{\"1\":{\"621\":1}}],[\"通知后端开启gzip\",{\"1\":{\"584\":1}}],[\"通知相关的依赖函数\",{\"1\":{\"509\":1}}],[\"通信\",{\"0\":{\"526\":1}}],[\"通常不需要开发者直接干预\",{\"1\":{\"632\":1}}],[\"通常相同\",{\"1\":{\"576\":1}}],[\"通常做法是在登陆状态中保存有效期数据\",{\"1\":{\"520\":1}}],[\"通常会改变整个\",{\"1\":{\"450\":1}}],[\"通常会遵循以下规则\",{\"1\":{\"219\":1}}],[\"通常版本控制系统都支持分支\",{\"1\":{\"365\":1}}],[\"通常将应用程序的整个逻辑分解为小的单个部分\",{\"1\":{\"264\":1}}],[\"通常的操作为初始化state状态或者在this上挂载方法\",{\"1\":{\"176\":1}}],[\"通常情况下\",{\"1\":{\"150\":1}}],[\"通常\",{\"1\":{\"149\":1,\"629\":1}}],[\"通常条件表达式和参数表达式都不可计时\",{\"1\":{\"56\":1}}],[\"通过为内联\",{\"1\":{\"639\":1}}],[\"通过一些插件\",{\"1\":{\"632\":1}}],[\"通过一系列生命周期钩子函数为开发者提供了在特定阶段插入自定义逻辑的能力\",{\"1\":{\"463\":1}}],[\"通过manifest\",{\"1\":{\"632\":1}}],[\"通过互相引用\",{\"1\":{\"627\":1}}],[\"通过分页\",{\"1\":{\"604\":1}}],[\"通过预加载关键资源\",{\"1\":{\"595\":1}}],[\"通过压缩\",{\"1\":{\"582\":1}}],[\"通过这个库\",{\"1\":{\"580\":1}}],[\"通过这些属性就能找到下一个执行目标\",{\"1\":{\"170\":1}}],[\"通过观察网页上的所有互动\",{\"1\":{\"572\":1}}],[\"通过缓存资源\",{\"1\":{\"553\":1}}],[\"通过按需加载\",{\"1\":{\"546\":1}}],[\"通过防抖\",{\"1\":{\"533\":1}}],[\"通过宿主环境提供的setdata\",{\"1\":{\"526\":1}}],[\"通过getcurrentpages\",{\"1\":{\"522\":1}}],[\"通过wx\",{\"1\":{\"519\":1,\"522\":1}}],[\"通过微信提供的登录能力\",{\"1\":{\"519\":1}}],[\"通过tree\",{\"1\":{\"503\":1}}],[\"通过definecomponent\",{\"1\":{\"502\":1}}],[\"通过diff算法比较新旧虚拟dom的差异\",{\"1\":{\"501\":1}}],[\"通过ref获取dom元素或子组件的实例\",{\"1\":{\"501\":1}}],[\"通过类似于原生h5的语法描述ui结构\",{\"1\":{\"501\":1}}],[\"通过类型检查\",{\"1\":{\"109\":1}}],[\"通过虚拟dom实现高效dom更新\",{\"1\":{\"501\":1}}],[\"通过单文件组件\",{\"1\":{\"501\":1}}],[\"通过v\",{\"1\":{\"501\":1}}],[\"通过vue\",{\"1\":{\"427\":1,\"480\":1}}],[\"通过劫持数据对象的getter\",{\"1\":{\"501\":1}}],[\"通过app\",{\"1\":{\"442\":1}}],[\"通过issamevnode进行判断\",{\"1\":{\"423\":1}}],[\"通过服务端实现代理请求转发\",{\"1\":{\"413\":1}}],[\"通过把他们添加到vue\",{\"1\":{\"407\":1}}],[\"通过函数运行时的为组件添加属性\",{\"1\":{\"402\":1}}],[\"通过函数简单创建组件的示例如下\",{\"1\":{\"208\":1}}],[\"通过动态重写当前页面来与用户交互\",{\"1\":{\"395\":1}}],[\"通过共同祖辈$parent或者$root搭建通信桥连\",{\"1\":{\"386\":1}}],[\"通过文档控制\",{\"1\":{\"365\":1}}],[\"通过extends关键字实现类的继承\",{\"1\":{\"316\":1}}],[\"通过es6的上下文来将this的指向绑定给当前组件\",{\"1\":{\"247\":1}}],[\"通过点击按钮触发onclick事件\",{\"1\":{\"302\":1}}],[\"通过useref创建一个ref\",{\"1\":{\"293\":1}}],[\"通过setup函数或<\",{\"1\":{\"503\":1}}],[\"通过set方法合并\",{\"1\":{\"483\":1}}],[\"通过slot插槽向组件内部指定位置传递内容\",{\"1\":{\"495\":1}}],[\"通过samevnode判断节点是否一样\",{\"1\":{\"422\":1}}],[\"通过super关键字引用父类的属性和方法\",{\"1\":{\"340\":1}}],[\"通过shouldcomponentupdate生命周期函数来比对\",{\"1\":{\"279\":1}}],[\"通过style属性直接引入\",{\"1\":{\"221\":1}}],[\"通过命令式创建地图\",{\"1\":{\"263\":1}}],[\"通过自定义hook能够更好的封装我们的功能\",{\"1\":{\"258\":1}}],[\"通过对\",{\"1\":{\"280\":1}}],[\"通过对上面的初步认识\",{\"1\":{\"258\":1}}],[\"通过对传入的原始组件\",{\"1\":{\"215\":1}}],[\"通过判断e\",{\"1\":{\"241\":1}}],[\"通过key可以准确地发现新旧集合中的节点都是相同的节点\",{\"1\":{\"232\":1}}],[\"通过css的transition属性\",{\"1\":{\"323\":1}}],[\"通过css\",{\"1\":{\"225\":1}}],[\"通过console\",{\"1\":{\"162\":1}}],[\"通过上面的初步了解\",{\"1\":{\"265\":1}}],[\"通过上面的了解\",{\"1\":{\"216\":1}}],[\"通过上面四种样式的引入\",{\"1\":{\"225\":1}}],[\"通过继承react\",{\"1\":{\"210\":1}}],[\"通过简单组合构建其他组件\",{\"1\":{\"208\":1}}],[\"通过两个图的对比\",{\"1\":{\"186\":1}}],[\"通过返回true或者false告知组件更新与否\",{\"1\":{\"181\":1}}],[\"通过使用react\",{\"1\":{\"157\":1}}],[\"通过使用父组件传递\",{\"1\":{\"156\":1}}],[\"通过props属性接收父组件传递的参数\",{\"1\":{\"154\":1}}],[\"通过\",{\"0\":{\"209\":1},\"1\":{\"140\":1,\"207\":1,\"216\":1,\"219\":1,\"386\":1,\"615\":2,\"627\":1}}],[\"通过实现多个接口\",{\"1\":{\"109\":1}}],[\"通过注册自动加载器\",{\"1\":{\"92\":1}}],[\"通过引用继承\",{\"1\":{\"67\":1}}],[\"通过该字段连接起来的所有的环境记录器共同构成一条作用域链\",{\"1\":{\"26\":1}}],[\"条目并将其记录到控制台的\",{\"1\":{\"574\":1}}],[\"条目并将其记录到控制台\",{\"1\":{\"568\":1}}],[\"条可计时的低级语句就会发生的事件\",{\"1\":{\"56\":1}}],[\"条件渲染\",{\"1\":{\"501\":1}}],[\"条件类型\",{\"0\":{\"337\":1}}],[\"条件\",{\"1\":{\"37\":1}}],[\"所期望的\",{\"1\":{\"636\":1}}],[\"所在组件的vnode更新时调用\",{\"1\":{\"427\":1}}],[\"所有其他码位都编码为字符串的两个码位元素\",{\"1\":{\"698\":1}}],[\"所有代码点都可以直接出现在字符串文本中\",{\"1\":{\"698\":1}}],[\"所有事件都挂载在\",{\"1\":{\"241\":1}}],[\"所有的节点都是全新的\",{\"1\":{\"422\":1}}],[\"所有的li标签都需要进行修改\",{\"1\":{\"273\":1}}],[\"所有的\",{\"1\":{\"223\":1}}],[\"所有这些\",{\"1\":{\"49\":1}}],[\"所面临的问题\",{\"1\":{\"168\":1}}],[\"所代表的结果\",{\"1\":{\"118\":1}}],[\"所以渲染层存在多个webview线程\",{\"1\":{\"525\":1}}],[\"所以切换时页面需要重新加载\",{\"1\":{\"522\":1}}],[\"所以每次都会追踪他的变化\",{\"1\":{\"508\":1}}],[\"所以在我们修改或者删除文件的时候\",{\"1\":{\"375\":1}}],[\"所以在实现团队协作的时候\",{\"1\":{\"374\":1}}],[\"所以在constructor中必须使用super\",{\"1\":{\"318\":1}}],[\"所以在不传递props且super的情况下\",{\"1\":{\"317\":1}}],[\"所以在子类constructor中\",{\"1\":{\"316\":1}}],[\"所以无论有没有constructor\",{\"1\":{\"317\":1}}],[\"所以他的主要作用是从父组件向子组件中传递数据\",{\"1\":{\"311\":1}}],[\"所以可以利用这一点\",{\"1\":{\"323\":1}}],[\"所以可以把props理解为从外部传入组件内部的数据\",{\"1\":{\"311\":1}}],[\"所以可以得到\",{\"1\":{\"162\":1}}],[\"所以并不会进行覆盖现象\",{\"1\":{\"306\":1}}],[\"所以最终只加了一次\",{\"1\":{\"306\":1}}],[\"所以想要阻止不同时间段的冒泡行为\",{\"1\":{\"241\":1}}],[\"所以会先执行原生事件\",{\"1\":{\"241\":1}}],[\"所以这边的\",{\"1\":{\"215\":1}}],[\"所以这里建议都使用函数式的方式来创建组件\",{\"1\":{\"211\":1}}],[\"所以\",{\"1\":{\"195\":1,\"215\":1,\"256\":1,\"299\":1}}],[\"所以需要尽早检查\",{\"1\":{\"100\":1}}],[\"所以非常适合在使用对象之前做一些初始化工作\",{\"1\":{\"80\":1}}],[\"所以指令只接受字面量的值\",{\"1\":{\"55\":1}}],[\"与转义序列\",{\"1\":{\"699\":1}}],[\"与产生式绑定\",{\"1\":{\"667\":1}}],[\"与fid的不同\",{\"1\":{\"572\":1}}],[\"与fcp的区别\",{\"1\":{\"569\":1,\"576\":1}}],[\"与界面渲染无关的数据最好不要设置在data中\",{\"1\":{\"530\":1}}],[\"与数据更新关联\",{\"1\":{\"501\":1}}],[\"与三元表达式一致\",{\"1\":{\"337\":1}}],[\"与html文档的混合\",{\"0\":{\"72\":1}}],[\"与比较运算符的例子\",{\"1\":{\"54\":1}}],[\"与\",{\"1\":{\"54\":1,\"281\":1,\"626\":1,\"638\":1,\"639\":1}}],[\"与参数列表\",{\"1\":{\"43\":1}}],[\"都是normalcompletion\",{\"1\":{\"663\":1}}],[\"都需要重新编译\",{\"1\":{\"392\":2}}],[\"都需要环境记录器\",{\"1\":{\"33\":1}}],[\"都能触发渲染更新\",{\"1\":{\"312\":1}}],[\"都会检查是否有更新版本\",{\"1\":{\"527\":1}}],[\"都会放到flushcallbacks\",{\"1\":{\"491\":1}}],[\"都会执行actived钩子\",{\"1\":{\"455\":1}}],[\"都会执行beforerouteenter\",{\"1\":{\"455\":1}}],[\"都会被重新render渲染\",{\"1\":{\"298\":1}}],[\"都会导致额外的渲染\",{\"1\":{\"250\":1}}],[\"都会重新进行bind的操作\",{\"1\":{\"246\":1}}],[\"都必须使用\",{\"1\":{\"223\":1}}],[\"都有一个表达式主体\",{\"1\":{\"54\":1}}],[\"ms\",{\"1\":{\"585\":2}}],[\"ms`\",{\"1\":{\"216\":1}}],[\"mvvm\",{\"1\":{\"501\":1}}],[\"m\",{\"1\":{\"379\":1,\"380\":1}}],[\"mousehover等\",{\"1\":{\"534\":1}}],[\"mousemove\",{\"1\":{\"534\":1}}],[\"mountcomponent渲染组件\",{\"1\":{\"486\":1}}],[\"mounted\",{\"0\":{\"467\":1},\"1\":{\"362\":1,\"449\":1,\"459\":1}}],[\"motion\",{\"1\":{\"321\":1}}],[\"movies\",{\"1\":{\"273\":3}}],[\"moved\",{\"1\":{\"516\":1}}],[\"move\",{\"1\":{\"232\":1,\"343\":1}}],[\"modifiers\",{\"1\":{\"427\":1}}],[\"modified值放入if\",{\"1\":{\"558\":1}}],[\"modified\",{\"1\":{\"90\":1,\"375\":1,\"557\":2,\"558\":2,\"559\":1}}],[\"modification\",{\"1\":{\"352\":2}}],[\"moduleitem\",{\"1\":{\"676\":1}}],[\"modulebodyopt\",{\"1\":{\"676\":1}}],[\"modulegraph\",{\"1\":{\"627\":2}}],[\"modules\",{\"0\":{\"625\":1},\"1\":{\"223\":1,\"599\":1,\"628\":1,\"638\":1,\"639\":4}}],[\"module\",{\"0\":{\"223\":1},\"1\":{\"220\":1,\"223\":1,\"225\":1,\"548\":3,\"585\":1,\"597\":1,\"599\":2,\"616\":1,\"621\":1,\"636\":1,\"638\":3,\"639\":1,\"643\":2,\"644\":2,\"646\":1,\"676\":1}}],[\"model\",{\"1\":{\"501\":1}}],[\"model指令\",{\"1\":{\"501\":1}}],[\"mode=\",{\"1\":{\"324\":1}}],[\"mode\",{\"1\":{\"169\":1,\"616\":1,\"702\":1}}],[\"mb\",{\"1\":{\"128\":1}}],[\"multiple\",{\"1\":{\"123\":2,\"147\":1}}],[\"middle\",{\"1\":{\"389\":1}}],[\"mixix\",{\"1\":{\"482\":1}}],[\"mixin进行全局混入\",{\"1\":{\"480\":1}}],[\"mixins\",{\"1\":{\"479\":1,\"482\":3}}],[\"mixin混入\",{\"0\":{\"477\":1}}],[\"mixin\",{\"1\":{\"329\":1,\"477\":1,\"480\":1,\"482\":3}}],[\"mixed\",{\"0\":{\"133\":1},\"1\":{\"110\":1,\"133\":1,\"169\":1,\"280\":4}}],[\"mini\",{\"1\":{\"618\":1}}],[\"minins\",{\"1\":{\"482\":1}}],[\"minratio\",{\"1\":{\"585\":1}}],[\"minheight\",{\"1\":{\"221\":1}}],[\"min\",{\"1\":{\"113\":1,\"585\":2,\"606\":1,\"607\":1,\"608\":1}}],[\"mymixin\",{\"1\":{\"479\":2}}],[\"myref\",{\"1\":{\"290\":3,\"291\":3,\"292\":3,\"293\":3}}],[\"mycomponentwithpersistentdata\",{\"1\":{\"216\":1}}],[\"mycomponent2\",{\"1\":{\"216\":2}}],[\"mycomponent\",{\"1\":{\"216\":1,\"236\":1,\"290\":1,\"291\":1,\"292\":1}}],[\"mycookie\",{\"1\":{\"148\":3}}],[\"myclass2\",{\"1\":{\"92\":1}}],[\"myclass1\",{\"1\":{\"92\":1}}],[\"myclass\",{\"1\":{\"91\":4,\"103\":9,\"157\":1}}],[\"my\",{\"1\":{\"122\":2,\"140\":1,\"479\":1,\"644\":3}}],[\"myname\",{\"1\":{\"122\":2}}],[\"myinterface\",{\"1\":{\"103\":3}}],[\"myfunction\",{\"1\":{\"65\":1}}],[\"measure\",{\"1\":{\"574\":1}}],[\"mergedataorfn\",{\"1\":{\"483\":1}}],[\"mergefield\",{\"1\":{\"482\":6}}],[\"mergeoptions\",{\"1\":{\"482\":4}}],[\"merge\",{\"1\":{\"380\":2}}],[\"mercurialhg是一种轻量级分布式版本控制系统\",{\"1\":{\"373\":1}}],[\"meet\",{\"1\":{\"317\":1}}],[\"memo用来缓存组件的渲染\",{\"1\":{\"281\":1}}],[\"memo\",{\"0\":{\"281\":1},\"1\":{\"278\":1,\"281\":4}}],[\"memoizedstate\",{\"1\":{\"169\":1}}],[\"memoizedprops\",{\"1\":{\"169\":1}}],[\"me<\",{\"1\":{\"236\":1}}],[\"me\",{\"1\":{\"147\":2,\"255\":2,\"256\":2}}],[\"message\",{\"1\":{\"67\":2,\"100\":2,\"302\":4,\"304\":4,\"305\":4,\"352\":2,\"379\":2}}],[\"methods的初始化\",{\"1\":{\"486\":1}}],[\"methods\",{\"0\":{\"359\":1},\"1\":{\"464\":1,\"479\":2,\"483\":3}}],[\"methods可以直接声明为类的成员方法\",{\"1\":{\"357\":1}}],[\"method=\",{\"1\":{\"147\":2}}],[\"method\",{\"1\":{\"49\":1,\"66\":1,\"352\":2,\"353\":1,\"359\":1,\"486\":1}}],[\"manifest的生成与使用\",{\"1\":{\"632\":1}}],[\"manifest的主要作用\",{\"1\":{\"632\":1}}],[\"manifest帮助webpack的运行时\",{\"1\":{\"632\":1}}],[\"manifest包含了模块之间的映射关系\",{\"1\":{\"632\":1}}],[\"manifest\",{\"0\":{\"632\":1}}],[\"manager\",{\"1\":{\"618\":1}}],[\"many\",{\"1\":{\"61\":1}}],[\"main\",{\"1\":{\"596\":2,\"616\":1,\"636\":1}}],[\"major\",{\"1\":{\"336\":1}}],[\"map>\",{\"1\":{\"263\":1}}],[\"map\",{\"1\":{\"263\":6,\"269\":1,\"273\":1,\"325\":1}}],[\"math\",{\"1\":{\"232\":3,\"606\":2,\"607\":2,\"608\":2}}],[\"match是否一致\",{\"1\":{\"559\":1}}],[\"match标头发送到服务器\",{\"1\":{\"559\":1}}],[\"matches\",{\"1\":{\"241\":1}}],[\"match表达式和\",{\"1\":{\"54\":1}}],[\"match\",{\"0\":{\"54\":1},\"1\":{\"54\":6,\"557\":1,\"558\":1}}],[\"marker\",{\"1\":{\"263\":5}}],[\"markup\",{\"1\":{\"232\":1}}],[\"margin\",{\"1\":{\"221\":1}}],[\"maxindex<\",{\"1\":{\"232\":1}}],[\"maxindex=0\",{\"1\":{\"232\":1}}],[\"maxindex\",{\"1\":{\"232\":4}}],[\"max\",{\"1\":{\"113\":1,\"232\":3,\"453\":1,\"556\":2}}],[\"making\",{\"1\":{\"63\":1}}],[\"makeyogurt\",{\"1\":{\"63\":2}}],[\">点击新增li标签<\",{\"1\":{\"541\":1}}],[\">b<\",{\"1\":{\"450\":1}}],[\">bar\",{\"1\":{\"79\":2}}],[\">+friend<\",{\"1\":{\"325\":1}}],[\">toggle<\",{\"1\":{\"323\":1}}],[\">test<\",{\"1\":{\"246\":1,\"247\":1,\"248\":1,\"249\":1}}],[\">面试官系列<\",{\"1\":{\"302\":1}}],[\">increment<\",{\"1\":{\"298\":2}}],[\">id\",{\"1\":{\"87\":2,\"109\":5}}],[\">真实dom节点\",{\"1\":{\"269\":1}}],[\">xxx<\",{\"1\":{\"269\":1}}],[\">按钮命名<\",{\"1\":{\"240\":4}}],[\">按钮<\",{\"1\":{\"240\":2}}],[\">click\",{\"1\":{\"236\":1}}],[\">click<\",{\"1\":{\"194\":1}}],[\">6<\",{\"1\":{\"233\":1}}],[\">5<\",{\"1\":{\"233\":4}}],[\">4<\",{\"1\":{\"233\":3}}],[\">3<\",{\"1\":{\"233\":4}}],[\">2<\",{\"1\":{\"233\":4}}],[\">1<\",{\"1\":{\"233\":4}}],[\">123<\",{\"1\":{\"221\":1}}],[\">a<\",{\"1\":{\"450\":1}}],[\">app\",{\"1\":{\"224\":1}}],[\">age\",{\"1\":{\"109\":1}}],[\">我是app中的一段文字描述<\",{\"1\":{\"222\":1,\"223\":1}}],[\">我是app的标题<\",{\"1\":{\"222\":1,\"223\":1}}],[\">follow<\",{\"1\":{\"197\":2}}],[\">foo\",{\"1\":{\"88\":1,\"90\":5}}],[\"><\",{\"1\":{\"162\":1,\"293\":1,\"459\":1,\"548\":1,\"606\":1,\"607\":1,\"608\":1}}],[\"><br\",{\"1\":{\"147\":4}}],[\">show<\",{\"1\":{\"244\":1}}],[\">showconstant\",{\"1\":{\"91\":1}}],[\">stuttgarter\",{\"1\":{\"147\":1}}],[\">goods2<\",{\"1\":{\"155\":1}}],[\">goods1<\",{\"1\":{\"155\":1}}],[\">guinness<\",{\"1\":{\"147\":1}}],[\">getuser\",{\"1\":{\"85\":2}}],[\">warthog<\",{\"1\":{\"147\":1}}],[\">do\",{\"1\":{\"129\":1}}],[\">displayvar\",{\"1\":{\"81\":1}}],[\">printid\",{\"1\":{\"109\":2}}],[\">property\",{\"1\":{\"86\":1}}],[\">>\",{\"1\":{\"96\":1}}],[\">modified\",{\"1\":{\"90\":2}}],[\">obj\",{\"1\":{\"88\":2}}],[\">name\",{\"1\":{\"85\":2,\"87\":2,\"109\":1}}],[\">访问符\",{\"0\":{\"85\":1}}],[\">var\",{\"1\":{\"77\":1}}],[\">variable\",{\"1\":{\"66\":2}}],[\">的简写\",{\"1\":{\"71\":1}}],[\">$funcname\",{\"1\":{\"66\":1}}],[\">$name\",{\"1\":{\"66\":1}}],[\">=\",{\"0\":{\"130\":1},\"1\":{\"54\":1,\"97\":1}}],[\">\",{\"1\":{\"53\":2,\"54\":1,\"56\":1,\"71\":8,\"72\":6,\"73\":4,\"74\":6,\"77\":1,\"85\":1,\"86\":2,\"97\":1,\"109\":2,\"111\":1,\"112\":1,\"113\":1,\"115\":1,\"116\":1,\"117\":1,\"120\":1,\"122\":1,\"125\":1,\"126\":2,\"127\":1,\"128\":1,\"130\":1,\"140\":1,\"142\":1,\"147\":14,\"148\":1,\"149\":1,\"154\":2,\"155\":1,\"156\":2,\"157\":1,\"194\":1,\"196\":4,\"201\":1,\"202\":3,\"215\":3,\"216\":1,\"221\":1,\"222\":3,\"223\":3,\"224\":1,\"236\":1,\"241\":2,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"255\":4,\"256\":4,\"261\":1,\"263\":2,\"264\":4,\"268\":3,\"269\":10,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"297\":1,\"298\":6,\"310\":1,\"311\":1,\"323\":4,\"324\":3,\"325\":1,\"336\":1,\"386\":5,\"442\":2,\"443\":4,\"446\":2,\"459\":3,\"541\":1,\"551\":1,\"585\":4,\"596\":4,\"601\":2,\"626\":1}}],[\"把多个子元素的响应事件委托给父元素\",{\"1\":{\"540\":1}}],[\"把差异应用在原来的dom树上\",{\"1\":{\"526\":1}}],[\"把所有的旧节点删除\",{\"1\":{\"422\":1}}],[\"把所有的尽可能的输入类型包含进去\",{\"1\":{\"349\":1}}],[\"把路由交给前端处理\",{\"1\":{\"383\":1}}],[\"把精确的定义放在前面\",{\"1\":{\"349\":1}}],[\"把传递给当前组件的属性继续传递给被包装的组件wrappedcomponent\",{\"1\":{\"216\":1}}],[\"把\",{\"1\":{\"215\":1}}],[\"把通用的逻辑放在高阶组件中\",{\"1\":{\"215\":1}}],[\"把创建的h1标签渲染到root节点上\",{\"1\":{\"162\":1}}],[\"把b的数组元素附加到a的数组后面\",{\"1\":{\"102\":1}}],[\"把右花括号\",{\"1\":{\"53\":1}}],[\"把一个对象中的属性方法抽取出来作为标识符绑定在环境中\",{\"1\":{\"27\":1}}],[\"和文法参数\",{\"1\":{\"673\":1}}],[\"和插件\",{\"1\":{\"622\":1}}],[\"和子元素对象\",{\"1\":{\"398\":1}}],[\"和构建对象的函数\",{\"1\":{\"345\":1}}],[\"和构造函数结束之间仍是undefined\",{\"1\":{\"318\":1}}],[\"和super\",{\"0\":{\"315\":1}}],[\"和高效\",{\"1\":{\"277\":1}}],[\"和后一次渲染的\",{\"1\":{\"256\":1}}],[\"和生命周期函数中读取新版本\",{\"1\":{\"197\":1}}],[\"和用户输入的数据\",{\"1\":{\"141\":1}}],[\"和枚举\",{\"1\":{\"92\":1}}],[\"和接口\",{\"1\":{\"92\":1}}],[\"和\",{\"0\":{\"147\":1},\"1\":{\"53\":3,\"71\":1,\"74\":1,\"78\":1,\"89\":1,\"90\":1,\"96\":3,\"100\":1,\"102\":2,\"110\":2,\"117\":1,\"120\":1,\"126\":1,\"147\":2,\"148\":1,\"150\":2,\"177\":1,\"215\":1,\"232\":1,\"256\":1,\"279\":1,\"280\":1,\"294\":1,\"312\":1,\"501\":1,\"576\":1,\"580\":1,\"623\":1,\"626\":1,\"636\":1,\"639\":2,\"698\":1}}],[\"和使用\",{\"1\":{\"47\":1}}],[\"等动画内容\",{\"1\":{\"569\":1}}],[\"等用户停止输入的时候\",{\"1\":{\"539\":1}}],[\"等浏览器忙完之后有剩余时间\",{\"1\":{\"170\":1}}],[\"等主线程不忙的时候在继续执行\",{\"1\":{\"170\":1}}],[\"等\",{\"1\":{\"100\":1,\"501\":1,\"502\":1,\"598\":1,\"622\":1}}],[\"等于十进制\",{\"1\":{\"113\":3}}],[\"等于\",{\"1\":{\"97\":5}}],[\"等价于\",{\"1\":{\"65\":1}}],[\"等同于以下步骤\",{\"1\":{\"661\":1,\"662\":1}}],[\"等同于以下三个分支\",{\"1\":{\"54\":1}}],[\"等同于如果\",{\"1\":{\"98\":1}}],[\"等同于属性的名称\",{\"1\":{\"49\":1}}],[\"等等之前\",{\"1\":{\"100\":1}}],[\"等等\",{\"1\":{\"16\":1}}],[\"类继承后\",{\"1\":{\"340\":1}}],[\"类似于object\",{\"1\":{\"335\":1}}],[\"类似于单引号\",{\"1\":{\"123\":1}}],[\"类实例\",{\"1\":{\"244\":1}}],[\"类组件基于es6\",{\"1\":{\"318\":1}}],[\"类组件是基于es6的规范实现的\",{\"1\":{\"317\":1}}],[\"类组件只要执行了\",{\"1\":{\"299\":1}}],[\"类组件重新渲染\",{\"1\":{\"298\":1}}],[\"类组件调用\",{\"1\":{\"298\":1}}],[\"类组件使用一个名为\",{\"1\":{\"261\":1}}],[\"类组件通过this\",{\"1\":{\"255\":2}}],[\"类组件通过constructor\",{\"1\":{\"255\":1}}],[\"类组件在基于现有工具的优化上存在些许问题\",{\"1\":{\"253\":1}}],[\"类组件中的this增加学习成本\",{\"1\":{\"253\":1}}],[\"类组件对应如下\",{\"1\":{\"197\":1}}],[\"类组件和函数式组件\",{\"0\":{\"189\":1}}],[\"类组件必须实现的方法\",{\"1\":{\"178\":1}}],[\"类组件\",{\"0\":{\"190\":1,\"317\":1},\"1\":{\"170\":1,\"190\":1,\"193\":1,\"264\":1,\"269\":2}}],[\"类\",{\"0\":{\"338\":1},\"1\":{\"108\":1,\"350\":1,\"352\":1,\"674\":1}}],[\"类型支持\",{\"1\":{\"502\":1}}],[\"类型索引\",{\"0\":{\"335\":1}}],[\"类型擦除\",{\"1\":{\"329\":1}}],[\"类型推断更友好\",{\"1\":{\"503\":1}}],[\"类型推断\",{\"1\":{\"329\":1}}],[\"类型批注和编译时类型检查\",{\"1\":{\"329\":1}}],[\"类型可用于\",{\"1\":{\"136\":1}}],[\"类型只有一个值\",{\"1\":{\"111\":1}}],[\"类型别名\",{\"0\":{\"110\":1,\"334\":1}}],[\"类型的\",{\"1\":{\"109\":3}}],[\"类型输出不同信息\",{\"1\":{\"109\":1}}],[\"类型系统\",{\"0\":{\"107\":1}}],[\"类型\",{\"0\":{\"106\":1,\"132\":1},\"1\":{\"169\":1}}],[\"类型运算符\",{\"0\":{\"103\":1}}],[\"类型声明来表示\",{\"1\":{\"132\":1}}],[\"类型声明\",{\"0\":{\"87\":1}}],[\"类自动引入\",{\"0\":{\"92\":1}}],[\"类常量基础上的约束层\",{\"1\":{\"130\":1}}],[\"类常量可以通过子类重新定义\",{\"1\":{\"91\":1}}],[\"类常量的默认可见性是\",{\"1\":{\"91\":1}}],[\"类常量\",{\"0\":{\"91\":1}}],[\"类应该实现魔术方法\",{\"1\":{\"89\":1}}],[\"类属性和方法可以通过\",{\"1\":{\"85\":1}}],[\"类的变量成员叫做属性\",{\"1\":{\"86\":1}}],[\"类的属性和方法存在于不同的\",{\"1\":{\"79\":1}}],[\"类的方法名\",{\"1\":{\"49\":1}}],[\"类名后的括号则可以省略掉\",{\"1\":{\"78\":1}}],[\"类名包括其被声明的作用域\",{\"1\":{\"49\":1}}],[\"名称和加载提示图标\",{\"1\":{\"528\":1}}],[\"名称\",{\"1\":{\"96\":1,\"97\":1,\"102\":1}}],[\"名包括其被声明的作用域\",{\"1\":{\"49\":1}}],[\"名字只在该区域内有效\",{\"1\":{\"329\":1}}],[\"名字空间\",{\"1\":{\"329\":1}}],[\"名字\",{\"1\":{\"49\":1}}],[\"除右引号代码点\",{\"1\":{\"698\":1}}],[\"除此之外\",{\"1\":{\"282\":1,\"534\":1}}],[\"除此之外还可以通过监听onerror事件\",{\"1\":{\"236\":1}}],[\"除法取整运算符\",{\"1\":{\"115\":1}}],[\"除以\",{\"1\":{\"96\":1}}],[\"除外\",{\"1\":{\"87\":1}}],[\"除非路径或者域不同\",{\"1\":{\"148\":1}}],[\"除非马上紧接换行\",{\"1\":{\"72\":1}}],[\"除非是根目录\",{\"1\":{\"49\":1}}],[\"除了常见的通过\",{\"1\":{\"636\":1}}],[\"除了js自身的数据类型\",{\"1\":{\"330\":1}}],[\"除了错误信息和\",{\"1\":{\"236\":1}}],[\"除了构造方法和私有方法\",{\"1\":{\"82\":1}}],[\"除了\",{\"1\":{\"32\":1,\"86\":1,\"118\":1}}],[\"它表示该产生式的右侧不包含任何终结符号或非终结符号\",{\"1\":{\"686\":1}}],[\"它表达逻辑而不显式地定义步骤\",{\"1\":{\"263\":1}}],[\"它执行以下步骤\",{\"1\":{\"658\":1}}],[\"它\",{\"1\":{\"643\":1}}],[\"它记录了关于打包后模块\",{\"1\":{\"632\":1}}],[\"它能够将项目中的多个文件和资源\",{\"1\":{\"622\":1}}],[\"它能保证回调函数在屏幕每一次的刷新间隔中只被执行一次\",{\"1\":{\"607\":1}}],[\"它仍然有着\",{\"1\":{\"621\":1}}],[\"它提供了友好的前端模块化开发支持\",{\"1\":{\"621\":1}}],[\"它会在内部从一个或多个入口点构建一个\",{\"1\":{\"621\":1}}],[\"它会在创建配置文件之前询问几个问题\",{\"1\":{\"618\":1}}],[\"它会像三元表达式一样求值\",{\"1\":{\"54\":1}}],[\"它的变化不会触发dom树的重新渲染\",{\"1\":{\"608\":1}}],[\"它的键是事件名\",{\"1\":{\"386\":1}}],[\"它通过显示简单的灰色块和线条\",{\"1\":{\"600\":1}}],[\"它通过比较新旧虚拟节点数组\",{\"1\":{\"460\":1}}],[\"它专注于测量核心web\",{\"1\":{\"580\":1}}],[\"它根据配置项的类型选择对应的合并策略函数\",{\"1\":{\"482\":1}}],[\"它只能继承父类的this对象\",{\"1\":{\"316\":1}}],[\"它只要在上次\",{\"1\":{\"125\":1}}],[\"它可以根据项目需求快速生成\",{\"1\":{\"618\":1}}],[\"它可以出现在任何地方\",{\"1\":{\"507\":1}}],[\"它可以有效地处理任何规模的项目\",{\"1\":{\"373\":1}}],[\"它可以被使用在多个ui场景\",{\"1\":{\"264\":1}}],[\"它可以让你在不编写\",{\"1\":{\"253\":1}}],[\"它现在并会自定绑定其this到当前组件\",{\"1\":{\"246\":1}}],[\"它们表示其中之一\",{\"1\":{\"684\":1}}],[\"它们被设计为可以在浏览器中高效地加载和执行\",{\"1\":{\"628\":1}}],[\"它们包含了用户点击图像的坐标\",{\"1\":{\"147\":1}}],[\"它们分别允许重写属性的读和写行为\",{\"1\":{\"90\":1}}],[\"它不能是联合类型声明的一部分\",{\"1\":{\"135\":1}}],[\"它不能成为联合类型声明的一部分\",{\"1\":{\"134\":1}}],[\"它是基于客户端\",{\"1\":{\"370\":1}}],[\"它是一个函数\",{\"1\":{\"310\":1}}],[\"它是\",{\"1\":{\"92\":1,\"169\":1}}],[\"它允许在运行时动态地加载模块\",{\"1\":{\"631\":1}}],[\"它允许不需要存储就能描述对象的属性\",{\"1\":{\"90\":1}}],[\"它允许直接使用属性\",{\"1\":{\"90\":1}}],[\"它并不会改变函数外部的值\",{\"1\":{\"62\":1}}],[\"它等价于\",{\"1\":{\"49\":1}}],[\"它必须要接入到一个宿主环境\",{\"1\":{\"13\":1}}],[\"魔术\",{\"1\":{\"49\":1}}],[\"魔术常量\",{\"0\":{\"49\":1}}],[\"语言值的语言标识\",{\"1\":{\"671\":1}}],[\"语言值使用samevalue抽象操作及其传递调用的抽象操作进行相等性比较\",{\"1\":{\"671\":1}}],[\"语言转译\",{\"1\":{\"636\":1}}],[\"语言结构解包数组\",{\"1\":{\"126\":1}}],[\"语言结构传递进去\",{\"1\":{\"67\":1}}],[\"语法参数是由前缀参数\",{\"1\":{\"673\":1}}],[\"语法导向操作和抽象操作有两种类型\",{\"1\":{\"667\":1}}],[\"语法导向操作是一系列算法的总和\",{\"1\":{\"667\":1}}],[\"语法\",{\"1\":{\"127\":1,\"236\":1,\"631\":1}}],[\"语法结构\",{\"1\":{\"119\":2}}],[\"语句列表中不允许使用await\",{\"1\":{\"676\":1}}],[\"语句列表的静态语义\",{\"1\":{\"668\":1}}],[\"语句中的\",{\"1\":{\"674\":1}}],[\"语句中显式指定\",{\"1\":{\"637\":1}}],[\"语句添加前缀\",{\"1\":{\"639\":1}}],[\"语句或任何\",{\"1\":{\"639\":1}}],[\"语句\",{\"1\":{\"98\":1,\"99\":1,\"626\":4,\"676\":1,\"682\":1}}],[\"语句类似\",{\"1\":{\"54\":1}}],[\"语句之内用\",{\"1\":{\"47\":1}}],[\"语义收集词法声明语句\",{\"1\":{\"22\":1}}],[\"循环结束\",{\"1\":{\"459\":2}}],[\"循环从两边向中间收拢\",{\"1\":{\"421\":1}}],[\"循环内以及\",{\"1\":{\"47\":1}}],[\"循环终止\",{\"1\":{\"37\":1}}],[\"抛出错误后\",{\"1\":{\"236\":1}}],[\"抛出错误\",{\"1\":{\"47\":1}}],[\"gzip\",{\"1\":{\"585\":18}}],[\"gz文件访问不到的时候\",{\"1\":{\"585\":1}}],[\"gz文件合并成一个文件\",{\"1\":{\"585\":1}}],[\"gz文件\",{\"1\":{\"585\":2}}],[\"gz\",{\"1\":{\"585\":3}}],[\"gmt\",{\"1\":{\"555\":1}}],[\"generated\",{\"1\":{\"618\":1}}],[\"generators\",{\"1\":{\"618\":5}}],[\"genelement\",{\"1\":{\"443\":1}}],[\"genslot\",{\"1\":{\"443\":1}}],[\"genstatic\",{\"1\":{\"443\":1}}],[\"genchildren\",{\"1\":{\"443\":1}}],[\"genif\",{\"1\":{\"443\":1}}],[\"genfor\",{\"1\":{\"443\":1}}],[\"genonce\",{\"1\":{\"443\":1}}],[\"getlongip\",{\"1\":{\"599\":1}}],[\"getip\",{\"1\":{\"599\":1}}],[\"getitem\",{\"1\":{\"216\":2}}],[\"getitemprice\",{\"1\":{\"155\":2}}],[\"getentriesbytype\",{\"1\":{\"574\":1}}],[\"getentriesbyname\",{\"1\":{\"568\":1}}],[\"getelementbyid\",{\"1\":{\"162\":1,\"261\":1,\"263\":1,\"268\":1,\"305\":1,\"541\":2,\"606\":1,\"607\":1,\"608\":1}}],[\"getuserinfo读取用户数据\",{\"1\":{\"519\":1}}],[\"getdata\",{\"1\":{\"455\":1}}],[\"getderivedstatefromerror\",{\"1\":{\"236\":3}}],[\"getderivedstatefromprops\",{\"0\":{\"177\":1},\"1\":{\"175\":1,\"180\":1,\"186\":1}}],[\"getparentcondition\",{\"1\":{\"450\":1}}],[\"getprice\",{\"1\":{\"155\":1}}],[\"getprice=\",{\"1\":{\"155\":1}}],[\"getsnapshotbeforeupdate\",{\"0\":{\"182\":1},\"1\":{\"180\":1,\"182\":2,\"186\":1}}],[\"gettype\",{\"1\":{\"150\":1}}],[\"getarr\",{\"1\":{\"127\":2}}],[\"get\",{\"0\":{\"147\":1},\"1\":{\"47\":1,\"89\":1,\"90\":2,\"100\":2,\"147\":5,\"150\":3,\"352\":1,\"359\":1}}],[\"github仓库链接\",{\"1\":{\"580\":1}}],[\"github实际就可以充当这个服务器角色\",{\"1\":{\"374\":1}}],[\"git自带一个git\",{\"1\":{\"377\":1}}],[\"git常用的命令\",{\"1\":{\"376\":1}}],[\"git就会修改文件的状态\",{\"1\":{\"375\":1}}],[\"git\",{\"1\":{\"375\":1,\"377\":2,\"378\":2,\"379\":9,\"380\":14},\"2\":{\"382\":1}}],[\"git能够知道git用以计算校验和的机制叫做\",{\"1\":{\"375\":1}}],[\"git中所有数据在存储前都计算校验和\",{\"1\":{\"375\":1}}],[\"git==子目录\",{\"1\":{\"375\":1}}],[\"git是一个分布式版本控制软件\",{\"1\":{\"374\":1}}],[\"git是目前世界上最先进的分布式版本控制系统\",{\"1\":{\"372\":1}}],[\"gif哟组合更优秀的算法\",{\"1\":{\"586\":1}}],[\"gif的图片替换为webp格式的图片\",{\"1\":{\"586\":1}}],[\"gif\",{\"1\":{\"147\":1,\"569\":1,\"585\":2}}],[\"grammatical\",{\"1\":{\"673\":1}}],[\"graph\",{\"1\":{\"621\":1,\"631\":1}}],[\"greet\",{\"1\":{\"352\":2}}],[\"green\",{\"1\":{\"222\":1}}],[\"groupanimation\",{\"1\":{\"325\":1}}],[\"group是一种很好的解决方案\",{\"1\":{\"322\":1}}],[\"group\",{\"1\":{\"321\":1,\"324\":1,\"325\":1}}],[\"glamorous\",{\"1\":{\"224\":1}}],[\"glo\",{\"1\":{\"18\":5}}],[\"globalapi\",{\"1\":{\"482\":1}}],[\"global\",{\"0\":{\"143\":1},\"1\":{\"38\":2,\"143\":2,\"377\":2}}],[\"globaldeclarationinstantiation\",{\"1\":{\"22\":1,\"33\":1}}],[\"globalthisvalue\",{\"1\":{\"32\":1}}],[\"globalthis\",{\"1\":{\"16\":1}}],[\"globalenv\",{\"1\":{\"11\":1}}],[\"globalobject\",{\"1\":{\"11\":1}}],[\"guinness\",{\"1\":{\"147\":1}}],[\"g\",{\"1\":{\"123\":2,\"353\":6,\"622\":1}}],[\"going\",{\"1\":{\"72\":2}}],[\"goodbye\",{\"1\":{\"47\":1}}],[\"用单引号或双引号括起来\",{\"1\":{\"698\":1}}],[\"用ast得到的js对象拼装成render和staticrenderfns函数\",{\"1\":{\"448\":1}}],[\"用对象的属性来描述节点\",{\"1\":{\"398\":1}}],[\"用到了key属性\",{\"1\":{\"325\":1}}],[\"用e\",{\"1\":{\"241\":2}}],[\"用来表示抽象操作或语法导向操作的调用绝不会返回一个abrupt\",{\"1\":{\"662\":1}}],[\"用来记录side\",{\"1\":{\"169\":1}}],[\"用来在处理完这个节点之后向上返回\",{\"1\":{\"169\":1}}],[\"用户现在可以更加灵活地引入细粒度逻辑\",{\"1\":{\"636\":1}}],[\"用户体验优化\",{\"0\":{\"595\":1},\"1\":{\"595\":1}}],[\"用户名\",{\"1\":{\"536\":1}}],[\"用户登陆后\",{\"1\":{\"392\":1}}],[\"用户可能会感觉到卡顿\",{\"1\":{\"168\":1}}],[\"用户定义的类型\",{\"1\":{\"108\":1}}],[\"用类似这样的标记\",{\"1\":{\"147\":1}}],[\"用\",{\"1\":{\"47\":1,\"57\":1,\"127\":1,\"574\":1}}],[\"用于自定义编译过程中的进度报告\",{\"1\":{\"644\":1}}],[\"用于访问内置插件\",{\"1\":{\"643\":1}}],[\"用于转换某些类型的模块\",{\"1\":{\"643\":1}}],[\"用于简单dom\",{\"1\":{\"605\":1}}],[\"用于衡量网页的主要内容何时对用户可见\",{\"1\":{\"576\":1}}],[\"用于衡量收到输入事件与主线程下次空闲之间的时间差\",{\"1\":{\"571\":1}}],[\"用于监听名称为\",{\"1\":{\"568\":1}}],[\"用于懒加载图片或其他dom元素\",{\"1\":{\"552\":1}}],[\"用于合并\",{\"1\":{\"482\":1}}],[\"用于高效地更新子节点列表\",{\"1\":{\"460\":1}}],[\"用于判断两个虚拟节点\",{\"1\":{\"460\":1}}],[\"用于实际构建条件分支的代码节点\",{\"1\":{\"450\":1}}],[\"用于一些常见的文本格式化\",{\"1\":{\"434\":1}}],[\"用于存储​​父组件通过\",{\"1\":{\"386\":1}}],[\"用于具体实现\",{\"1\":{\"349\":1}}],[\"用于声明一组命名的常数\",{\"1\":{\"344\":1}}],[\"用于取值被限定在一定范围内的场景\",{\"1\":{\"329\":1}}],[\"用于可以实时的获取到更新之后的数据\",{\"1\":{\"302\":1}}],[\"用于生成虚拟dom\",{\"1\":{\"299\":1}}],[\"用于构建用户界面的\",{\"1\":{\"261\":1}}],[\"用于告知组件本身基于当前的props和state是否需要重新渲染组件\",{\"1\":{\"181\":1}}],[\"用于渲染dom结构\",{\"1\":{\"178\":1}}],[\"用于标记fiber的worktag类型\",{\"1\":{\"169\":1}}],[\"用于将你创建好的虚拟dom节点插入到某个真实节点上\",{\"1\":{\"162\":1}}],[\"用于表达真\",{\"1\":{\"112\":1}}],[\"用于表示\",{\"1\":{\"30\":1}}],[\"用于确定一个\",{\"1\":{\"103\":1}}],[\"用于跟踪运行时执行的代码\",{\"1\":{\"10\":1}}],[\"来将一个\",{\"1\":{\"636\":1}}],[\"来解析不同类型的文件\",{\"1\":{\"622\":1}}],[\"来改进\",{\"1\":{\"572\":1}}],[\"来定义代码分割点\",{\"1\":{\"549\":1}}],[\"来定义常量\",{\"1\":{\"47\":1}}],[\"来定义常量相反的是\",{\"1\":{\"47\":1}}],[\"来降低内存的使用\",{\"1\":{\"540\":1}}],[\"来提高性能\",{\"1\":{\"533\":1}}],[\"来提升性能\",{\"1\":{\"460\":1}}],[\"来完成过渡动画效果\",{\"1\":{\"322\":1}}],[\"来实现开发的模式\",{\"1\":{\"206\":1}}],[\"来自php之外的变量\",{\"0\":{\"146\":1}}],[\"来检查\",{\"1\":{\"118\":1}}],[\"来表示\",{\"1\":{\"113\":1}}],[\"来表示一个负的\",{\"1\":{\"113\":1}}],[\"来表示作用域\",{\"1\":{\"26\":1}}],[\"来直接禁用\",{\"1\":{\"71\":1}}],[\"来指定的\",{\"1\":{\"56\":2}}],[\"来获取常量的值\",{\"1\":{\"47\":1}}],[\"来访问的\",{\"1\":{\"147\":1}}],[\"来访问键值对\",{\"1\":{\"125\":1}}],[\"来访问被覆盖的方法或属性\",{\"1\":{\"81\":1}}],[\"来访问\",{\"1\":{\"47\":1}}],[\"$uri\",{\"1\":{\"585\":4}}],[\"$user2\",{\"1\":{\"109\":2}}],[\"$user1\",{\"1\":{\"109\":2}}],[\"$user\",{\"1\":{\"85\":3,\"87\":3}}],[\"$watch等方法\",{\"1\":{\"487\":1}}],[\"$parent\",{\"1\":{\"386\":3}}],[\"$listeners\",{\"1\":{\"386\":1}}],[\"$$a\",{\"1\":{\"145\":2}}],[\"$hello\",{\"1\":{\"145\":2}}],[\"$get\",{\"1\":{\"487\":1}}],[\"$globals\",{\"1\":{\"143\":7}}],[\"$greet\",{\"1\":{\"67\":3}}],[\"$item\",{\"1\":{\"148\":1}}],[\"$int++\",{\"1\":{\"144\":1}}],[\"$int\",{\"1\":{\"144\":4}}],[\"$i\",{\"1\":{\"125\":2}}],[\"$id\",{\"1\":{\"87\":3,\"109\":3,\"126\":2}}],[\"$emit\",{\"1\":{\"386\":3,\"487\":1}}],[\"$either\",{\"1\":{\"120\":2}}],[\"$epsilon\",{\"1\":{\"117\":2}}],[\"$expand\",{\"1\":{\"120\":2}}],[\"$expression\",{\"1\":{\"72\":1}}],[\"$extended\",{\"1\":{\"81\":2}}],[\"$example\",{\"1\":{\"67\":12,\"90\":3}}],[\"$key\",{\"1\":{\"100\":2}}],[\"$mount方法\",{\"1\":{\"486\":1}}],[\"$mount方法挂载元素\",{\"1\":{\"486\":1}}],[\"$mounted\",{\"1\":{\"465\":1}}],[\"$modified\",{\"1\":{\"90\":1}}],[\"$my\",{\"1\":{\"100\":1}}],[\"$message\",{\"1\":{\"67\":14}}],[\"$three\",{\"1\":{\"126\":3}}],[\"$this\",{\"1\":{\"66\":1,\"67\":1,\"77\":3,\"79\":1,\"86\":1,\"87\":2,\"90\":5,\"109\":7}}],[\"$test\",{\"1\":{\"88\":3}}],[\"$off等事件\",{\"1\":{\"487\":1}}],[\"$off\",{\"1\":{\"487\":1}}],[\"$options\",{\"1\":{\"438\":1,\"442\":1}}],[\"$on\",{\"1\":{\"362\":1,\"386\":1}}],[\"$object\",{\"1\":{\"109\":3}}],[\"$obj2\",{\"1\":{\"92\":1}}],[\"$obj\",{\"1\":{\"79\":2,\"80\":3,\"88\":1,\"92\":1}}],[\"$output\",{\"1\":{\"54\":2,\"101\":1}}],[\"$destroy生命周期\",{\"1\":{\"487\":1}}],[\"$destroy之时\",{\"1\":{\"469\":1}}],[\"$delete\",{\"1\":{\"487\":1}}],[\"$duck\",{\"1\":{\"109\":2}}],[\"$d\",{\"1\":{\"65\":2,\"116\":1}}],[\"$varname\",{\"1\":{\"149\":2}}],[\"$var\",{\"1\":{\"77\":1,\"111\":1}}],[\"$variable\",{\"1\":{\"66\":6}}],[\"$variablestoringparamname\",{\"1\":{\"65\":1}}],[\"$value\",{\"1\":{\"65\":3,\"90\":2,\"100\":1,\"125\":1}}],[\"$name\",{\"1\":{\"66\":1,\"67\":2,\"87\":3,\"91\":2,\"109\":3,\"122\":2,\"126\":2}}],[\"$n\",{\"1\":{\"64\":2}}],[\"$numbers\",{\"1\":{\"64\":2}}],[\"$forceupdate\",{\"1\":{\"487\":1}}],[\"$forceupdated\",{\"1\":{\"404\":1}}],[\"$foo\",{\"1\":{\"66\":4,\"90\":1,\"112\":2,\"126\":2,\"140\":6}}],[\"$funcname\",{\"1\":{\"66\":1}}],[\"$flavour\",{\"1\":{\"63\":3}}],[\"$first\",{\"1\":{\"61\":1}}],[\"$set解决\",{\"1\":{\"501\":1}}],[\"$second\",{\"1\":{\"61\":1}}],[\"$s\",{\"1\":{\"130\":1}}],[\"$source\",{\"1\":{\"126\":10}}],[\"$str\",{\"1\":{\"62\":3}}],[\"$string\",{\"1\":{\"62\":2,\"65\":2}}],[\"$clolor\",{\"1\":{\"128\":1}}],[\"$class\",{\"1\":{\"91\":3,\"92\":2}}],[\"$classname\",{\"1\":{\"91\":2}}],[\"$count\",{\"1\":{\"148\":4}}],[\"$color\",{\"1\":{\"128\":4}}],[\"$colors\",{\"1\":{\"128\":2}}],[\"$container\",{\"1\":{\"63\":2}}],[\"$cache\",{\"1\":{\"100\":1}}],[\"$c\",{\"1\":{\"54\":2,\"65\":2,\"84\":2,\"116\":1}}],[\"$baz\",{\"1\":{\"126\":8}}],[\"$bar\",{\"1\":{\"79\":1,\"126\":2,\"129\":2,\"140\":6}}],[\"$b时\",{\"1\":{\"97\":1}}],[\"$b\",{\"1\":{\"54\":2,\"65\":3,\"96\":10,\"97\":19,\"102\":11,\"116\":1,\"117\":3,\"126\":4,\"143\":7}}],[\"$x\",{\"1\":{\"54\":1}}],[\"$repository\",{\"1\":{\"85\":3}}],[\"$result\",{\"1\":{\"54\":1,\"85\":4}}],[\"$return\",{\"1\":{\"54\":1}}],[\"$attrs\",{\"1\":{\"386\":3}}],[\"$a++\",{\"1\":{\"144\":1}}],[\"$arr6\",{\"1\":{\"127\":1}}],[\"$arr5\",{\"1\":{\"127\":1}}],[\"$arr4\",{\"1\":{\"127\":1}}],[\"$arr3\",{\"1\":{\"127\":1}}],[\"$arr2\",{\"1\":{\"127\":2}}],[\"$arr1\",{\"1\":{\"127\":6}}],[\"$arr\",{\"1\":{\"125\":5}}],[\"$array\",{\"1\":{\"124\":6,\"125\":11}}],[\"$arg\",{\"1\":{\"61\":1,\"67\":2}}],[\"$action\",{\"1\":{\"98\":3,\"99\":3}}],[\"$acc\",{\"1\":{\"64\":3}}],[\"$again\",{\"1\":{\"61\":1}}],[\"$age\",{\"1\":{\"54\":6,\"109\":3}}],[\"$a\",{\"1\":{\"53\":3,\"54\":2,\"56\":4,\"61\":1,\"65\":2,\"96\":12,\"97\":19,\"102\":11,\"103\":9,\"113\":6,\"116\":1,\"117\":3,\"126\":4,\"142\":2,\"143\":4,\"144\":2,\"145\":4}}],[\"$\",{\"1\":{\"47\":1,\"98\":4,\"99\":3,\"121\":1,\"147\":7,\"148\":4,\"150\":4,\"216\":1,\"224\":2,\"256\":4,\"352\":1,\"450\":1,\"574\":1,\"599\":1,\"618\":1,\"644\":1}}],[\"使得应用程序中每个模块都具备了条理清晰的设计和明确的目的\",{\"1\":{\"625\":1}}],[\"使得验证\",{\"1\":{\"625\":1}}],[\"使得多个\",{\"1\":{\"585\":1}}],[\"使之包含在下次提交的快照中\",{\"1\":{\"375\":1}}],[\"使函数组件的功能得到了扩充\",{\"1\":{\"258\":1}}],[\"使下一次渲染能够显示降级后的\",{\"1\":{\"236\":1}}],[\"使我们的页面的构建效率提到了极大的提升\",{\"1\":{\"228\":1}}],[\"使其在函数体内可用\",{\"1\":{\"142\":1}}],[\"使其成为运行中的执行上下文\",{\"1\":{\"21\":1}}],[\"使用描述性短语来描述少数非终结符号\",{\"1\":{\"689\":1}}],[\"使用node\",{\"0\":{\"645\":1}}],[\"使用namespace来定义\",{\"1\":{\"355\":1}}],[\"使用正则表达式匹配文件时\",{\"1\":{\"638\":1}}],[\"使用hashedmoduleidsplugin等插件来生成稳定的模块id\",{\"1\":{\"631\":1}}],[\"使用hooks能够解决大多数问题\",{\"1\":{\"258\":1}}],[\"使用optimization\",{\"1\":{\"631\":1}}],[\"使用相应的加载器来加载模块的源代码\",{\"1\":{\"622\":1}}],[\"使用loader\",{\"0\":{\"637\":1},\"1\":{\"622\":1}}],[\"使用不同的配置文件\",{\"0\":{\"617\":1}}],[\"使用常量或变量赋值\",{\"1\":{\"615\":1}}],[\"使用elementplus的骨架屏\",{\"1\":{\"601\":1}}],[\"使用prerender\",{\"1\":{\"599\":1}}],[\"使用paint\",{\"1\":{\"568\":1}}],[\"使用gzip压缩\",{\"1\":{\"585\":1}}],[\"使用git和gitlab搭建版本控制环境是现在互联网公司最流行的版本控制方式\",{\"1\":{\"372\":1}}],[\"使用海报图片加载时间或视频的第一帧呈现时间\",{\"1\":{\"569\":1}}],[\"使用webpack的require\",{\"1\":{\"548\":1}}],[\"使用vm\",{\"1\":{\"486\":1}}],[\"使用virtual\",{\"1\":{\"164\":1}}],[\"使用双指针从头尾向中间逼近的方式进行比较\",{\"1\":{\"460\":1}}],[\"使用对代码进行优化可获得系统的整体升级\",{\"1\":{\"407\":1}}],[\"使用它\",{\"1\":{\"370\":1}}],[\"使用|或者\",{\"1\":{\"349\":1}}],[\"使用该组件\",{\"1\":{\"322\":1}}],[\"使用super\",{\"1\":{\"316\":1}}],[\"使用usestate来更新状态的时候\",{\"1\":{\"298\":1}}],[\"使用时\",{\"1\":{\"289\":1}}],[\"使用时获取到创建的对象中存在\",{\"1\":{\"289\":1}}],[\"使用时通过生成hook对象的\",{\"1\":{\"289\":1}}],[\"使用时通过\",{\"1\":{\"289\":1}}],[\"使用key与不使用key的区别\",{\"1\":{\"273\":1}}],[\"使用key与不使用key作用如下\",{\"1\":{\"233\":1}}],[\"使用react\",{\"1\":{\"270\":1}}],[\"使用方法如下\",{\"1\":{\"269\":1,\"355\":1}}],[\"使用虚拟dom来有效地操作dom\",{\"1\":{\"261\":1}}],[\"使用虚拟dom的优势如下\",{\"1\":{\"164\":1}}],[\"使用起来更为简洁\",{\"1\":{\"255\":1}}],[\"使用一个统一的事件去监听\",{\"1\":{\"240\":1}}],[\"使用了旧式八进制转义\",{\"1\":{\"703\":1}}],[\"使用了treeshanking\",{\"1\":{\"508\":1}}],[\"使用了\",{\"1\":{\"236\":2}}],[\"使用实例如下\",{\"1\":{\"157\":1}}],[\"使用context提供了组件之间通讯的一种方式\",{\"1\":{\"157\":1}}],[\"使用简短的数组语法\",{\"1\":{\"127\":1}}],[\"使用示例\",{\"1\":{\"109\":1}}],[\"使用联合类型\",{\"1\":{\"109\":1}}],[\"使用交集类型\",{\"1\":{\"109\":1}}],[\"使用interface\",{\"1\":{\"108\":1}}],[\"使用a的\",{\"1\":{\"102\":1}}],[\"使用反引号运算符\",{\"1\":{\"101\":1}}],[\"使用条件结构\",{\"1\":{\"72\":1}}],[\"使用类似分配变量的语法定义参数的默认值\",{\"1\":{\"63\":1}}],[\"使用\",{\"0\":{\"352\":1,\"435\":1},\"1\":{\"47\":2,\"84\":1,\"125\":1,\"126\":1,\"129\":1,\"147\":1,\"215\":1,\"236\":1,\"332\":1,\"333\":1,\"460\":1,\"548\":1,\"569\":1,\"615\":2,\"632\":1,\"637\":1,\"639\":4}}],[\"之外\",{\"1\":{\"698\":1}}],[\"之所以在全局作用域内存在\",{\"1\":{\"143\":1}}],[\"之间的字节\",{\"1\":{\"139\":1}}],[\"之间的描述来看\",{\"1\":{\"136\":1}}],[\"之后主线程被阻塞的时间足以阻止输入响应的总时间\",{\"1\":{\"575\":1}}],[\"之后版本改名为\",{\"1\":{\"169\":1}}],[\"之后的信息\",{\"1\":{\"147\":1}}],[\"之后的\",{\"1\":{\"74\":1}}],[\"之后仍然可以输出响应标头\",{\"1\":{\"73\":1}}],[\"之后对每个子语句进行求值\",{\"1\":{\"33\":1}}],[\"之前三元运算符是左联的\",{\"1\":{\"98\":1}}],[\"之前的条件都匹配时运行\",{\"1\":{\"54\":1}}],[\"之前\",{\"1\":{\"47\":2,\"61\":1,\"92\":1,\"98\":1,\"124\":1,\"127\":1,\"144\":1,\"703\":1}}],[\"8k\",{\"1\":{\"585\":2}}],[\"80\",{\"1\":{\"585\":2}}],[\"83\",{\"1\":{\"113\":1}}],[\"8859\",{\"1\":{\"57\":1}}],[\"8\",{\"0\":{\"55\":1,\"130\":2},\"1\":{\"47\":2,\"54\":1,\"61\":1,\"65\":3,\"77\":1,\"81\":1,\"83\":1,\"84\":1,\"85\":2,\"86\":1,\"88\":1,\"89\":1,\"90\":1,\"91\":2,\"92\":2,\"98\":3,\"113\":1,\"124\":1,\"127\":1,\"135\":1,\"136\":1,\"144\":3,\"253\":1,\"386\":1,\"585\":1,\"618\":2,\"684\":1,\"701\":1}}],[\"0~3和八进制数的组合\",{\"1\":{\"701\":1}}],[\"0~9\",{\"1\":{\"700\":1}}],[\"0x和\",{\"1\":{\"681\":1}}],[\"0xhexdigits\",{\"1\":{\"681\":1}}],[\"0x1a\",{\"1\":{\"113\":1}}],[\"0+\",{\"1\":{\"624\":1}}],[\"00\",{\"1\":{\"555\":1}}],[\"000\",{\"1\":{\"273\":1}}],[\"00001\",{\"1\":{\"117\":1}}],[\"07\",{\"1\":{\"555\":1}}],[\"0中\",{\"1\":{\"555\":1}}],[\"0b11111111\",{\"1\":{\"113\":1}}],[\"0o123\",{\"1\":{\"113\":1}}],[\"0123\",{\"1\":{\"113\":1}}],[\"0\",{\"0\":{\"130\":1},\"1\":{\"47\":4,\"56\":1,\"61\":2,\"64\":1,\"65\":3,\"77\":1,\"81\":1,\"83\":1,\"84\":2,\"85\":4,\"86\":1,\"87\":1,\"88\":1,\"89\":1,\"91\":2,\"92\":5,\"96\":2,\"98\":7,\"113\":2,\"115\":1,\"116\":1,\"117\":1,\"124\":2,\"125\":1,\"126\":2,\"127\":2,\"134\":1,\"135\":1,\"136\":2,\"144\":5,\"155\":1,\"156\":1,\"194\":1,\"210\":1,\"216\":2,\"255\":2,\"256\":2,\"269\":3,\"280\":3,\"298\":2,\"305\":1,\"310\":1,\"323\":4,\"324\":8,\"325\":8,\"347\":1,\"375\":1,\"442\":1,\"443\":1,\"459\":1,\"576\":1,\"585\":3,\"606\":4,\"607\":3,\"608\":3,\"618\":3,\"621\":2,\"698\":1,\"701\":2}}],[\"0ℤ\",{\"1\":{\"45\":1}}],[\"0𝔽\",{\"1\":{\"45\":1}}],[\"就到等待逻辑层的指令才能进行下一步工作\",{\"1\":{\"526\":1}}],[\"就可以获取用户的openid\",{\"1\":{\"519\":1}}],[\"就可以用这种缩写\",{\"1\":{\"54\":1}}],[\"就可将这些csstransition放入到一个transitiongroup中来完成动画\",{\"1\":{\"325\":1}}],[\"就一定会触发\",{\"1\":{\"299\":1}}],[\"就会导致子组件的重新渲染\",{\"1\":{\"299\":1}}],[\"就会导致整个大组件的渲染\",{\"1\":{\"282\":1}}],[\"就会导致render\",{\"1\":{\"278\":1}}],[\"就会展示如下的伪代码\",{\"1\":{\"45\":1}}],[\"就删除\",{\"1\":{\"232\":1}}],[\"就只能使用类组件\",{\"1\":{\"195\":1}}],[\"就像全局数据一样\",{\"1\":{\"157\":1}}],[\"就行了\",{\"1\":{\"125\":1}}],[\"就是查询dns映射表\",{\"1\":{\"561\":1}}],[\"就是将父类中的this对象继承给子类的\",{\"1\":{\"316\":1}}],[\"就是3\",{\"1\":{\"232\":1}}],[\"就是1\",{\"1\":{\"232\":1}}],[\"就是不受我们控制的组件\",{\"1\":{\"202\":1}}],[\"就是不区分大小写的常量\",{\"1\":{\"111\":1}}],[\"就是受我们控制的组件\",{\"1\":{\"201\":1}}],[\"就是通过函数编写的形式去实现一个react组件\",{\"1\":{\"191\":1}}],[\"就是一个\",{\"1\":{\"169\":1}}],[\"就是说\",{\"1\":{\"145\":1}}],[\"就是由一系列的字符组成\",{\"1\":{\"119\":1}}],[\"就是\",{\"1\":{\"112\":1}}],[\"就能在它前面加上\",{\"1\":{\"100\":1}}],[\"就不需要创建对象\",{\"1\":{\"508\":1}}],[\"就不会触发render\",{\"1\":{\"298\":1}}],[\"就不会看到由包含文件生成的不期望的空白符\",{\"1\":{\"73\":1}}],[\"就不能再改变或者取消定义\",{\"1\":{\"47\":1}}],[\"就新增了许多访问页面尺寸和位置的属性\",{\"1\":{\"16\":1}}],[\"该指令将整个代码块至于严格模式\",{\"1\":{\"703\":1}}],[\"该位置后面跟着的内容必须不属于\",{\"1\":{\"687\":1}}],[\"该位置后面跟着的内容必须属于\",{\"1\":{\"687\":1}}],[\"该位置后面不能是\",{\"1\":{\"687\":1}}],[\"该位置后面必须是\",{\"1\":{\"687\":1}}],[\"该数据应该在服务端校验登陆状态和约定时间做对比\",{\"1\":{\"520\":1}}],[\"该占位符可以在后期使用自己的标记语言填充\",{\"1\":{\"494\":1}}],[\"该节点包含创建dom节点所需信息\",{\"1\":{\"448\":1}}],[\"该回调将在组件被渲染或更新之后被执行\",{\"1\":{\"269\":1}}],[\"该函数负责具体配置项的合并策略\",{\"1\":{\"482\":1}}],[\"该函数会在\",{\"1\":{\"289\":1}}],[\"该函数组件等价于的类组件如下\",{\"1\":{\"255\":1}}],[\"该函数接受一个组件wrappedcomponent作为参数\",{\"1\":{\"214\":1}}],[\"该类必须继承react\",{\"1\":{\"190\":1}}],[\"该周期函数在render后执行\",{\"1\":{\"182\":1}}],[\"该阶段的函数主要为如下方法\",{\"1\":{\"180\":1}}],[\"该方法的跳转不会缓存页面\",{\"1\":{\"522\":1}}],[\"该方法返回的一个snapshot值\",{\"1\":{\"182\":1}}],[\"该方法需要返回一个新的对象作为新的state或者返回null表示state状态不需要更新\",{\"1\":{\"177\":1}}],[\"该方法是新增的生命周期方法\",{\"1\":{\"177\":1}}],[\"该实现过程是基于\",{\"1\":{\"170\":1}}],[\"该fiber对应的组件产生的update会存放在这个队列里面\",{\"1\":{\"169\":1}}],[\"该元素的更新操作队列\",{\"1\":{\"169\":1}}],[\"该关键字可以与变量列表或单个变量一起使用\",{\"1\":{\"143\":1}}],[\"该文件中的代码继承了包含语句所在行的变量作用域\",{\"1\":{\"142\":1}}],[\"该值也被称为机器极小值\",{\"1\":{\"117\":1}}],[\"该表达式可能产生的任何错误诊断都被抑制\",{\"1\":{\"100\":1}}],[\"该功能则是被默认禁用的\",{\"1\":{\"71\":1}}],[\"该产生式是以下的缩写\",{\"1\":{\"44\":1}}],[\"该全局环境范围内加载的所有ecmascript代码\",{\"1\":{\"11\":1}}],[\"或语法导向操作\",{\"1\":{\"657\":1}}],[\"或从下到上\",{\"1\":{\"638\":1}}],[\"或从后台进入前台显示时触发\",{\"1\":{\"514\":1}}],[\"或编译\",{\"1\":{\"636\":1}}],[\"或其他指定的配置文件\",{\"1\":{\"622\":1}}],[\"或动画\",{\"1\":{\"569\":1}}],[\"或关闭当前页面返回上一页wx\",{\"1\":{\"518\":1}}],[\"或系统资源占用高\",{\"1\":{\"518\":1}}],[\"或proxy对象代理\",{\"1\":{\"501\":1}}],[\"或$root\",{\"1\":{\"386\":1}}],[\"或未被\",{\"1\":{\"386\":1}}],[\"或在生成器中使用\",{\"1\":{\"136\":1}}],[\"或最小单元取整数\",{\"1\":{\"117\":1}}],[\"或实数\",{\"1\":{\"116\":1}}],[\"或三元\",{\"1\":{\"98\":1}}],[\"或资源\",{\"1\":{\"88\":1}}],[\"或者一个\",{\"1\":{\"639\":1}}],[\"或者是一个函数\",{\"1\":{\"302\":1}}],[\"或者嵌套在另一个组件内部\",{\"1\":{\"264\":1}}],[\"或者取消订阅的网络请求等\",{\"1\":{\"185\":1}}],[\"或者用此功能从多选输入框中取得值\",{\"1\":{\"147\":1}}],[\"或者超全局变量\",{\"1\":{\"141\":1}}],[\"或者下划线\",{\"1\":{\"139\":1}}],[\"或者下划线开头\",{\"1\":{\"139\":1}}],[\"或者使用子包预加载技术\",{\"1\":{\"529\":1}}],[\"或者使用\",{\"1\":{\"115\":1,\"615\":1}}],[\"或者它们的类型不同\",{\"1\":{\"97\":1}}],[\"或者叫字段\",{\"1\":{\"86\":1}}],[\"或者\",{\"1\":{\"73\":1,\"74\":1,\"113\":1,\"126\":1,\"626\":1}}],[\"或者和参数重名\",{\"1\":{\"67\":1}}],[\"或者在编译时已经包括进去了\",{\"1\":{\"48\":1}}],[\"或者动态加载后\",{\"1\":{\"48\":1}}],[\"或\",{\"1\":{\"47\":1,\"70\":1,\"72\":2,\"73\":1,\"74\":1,\"132\":1,\"139\":1,\"148\":1,\"333\":1,\"450\":1,\"638\":1}}],[\"或称为算法\",{\"1\":{\"45\":1}}],[\"或一个参数列表通过逗号\",{\"1\":{\"43\":1}}],[\"或函数声明\",{\"1\":{\"28\":1}}],[\"参数可以为空\",{\"1\":{\"686\":1}}],[\"参数的产生式\",{\"1\":{\"686\":1}}],[\"参数来设置选项\",{\"1\":{\"636\":1}}],[\"参数\",{\"1\":{\"352\":1,\"615\":1}}],[\"参数处理\",{\"1\":{\"270\":1}}],[\"参数为state默认的值\",{\"1\":{\"255\":1}}],[\"参数名必须是一个标识符\",{\"1\":{\"65\":1}}],[\"参数与顺序无关\",{\"1\":{\"65\":1}}],[\"参数值将作为\",{\"1\":{\"64\":1}}],[\"参数列表可能包含\",{\"1\":{\"64\":1}}],[\"参数列表的产生式\",{\"1\":{\"43\":1}}],[\"参数化产生式的完整样子\",{\"1\":{\"44\":1}}],[\"参数化的产生式\",{\"1\":{\"44\":1,\"673\":1}}],[\"参数化的产生式是一组产生式的简写\",{\"1\":{\"44\":1}}],[\"参数中有名为arguments的参数\",{\"1\":{\"38\":1}}],[\"非八进制十进制转义\",{\"1\":{\"701\":1,\"702\":1}}],[\"非行终结符\",{\"1\":{\"701\":1}}],[\"非转义\",{\"1\":{\"701\":1}}],[\"非转义字符\",{\"1\":{\"701\":1}}],[\"非终结\",{\"1\":{\"682\":1}}],[\"非终结符号为斜体类型\",{\"1\":{\"682\":1}}],[\"非终结符号在ecma中显示为斜体类型\",{\"1\":{\"43\":1}}],[\"非同源请求\",{\"1\":{\"412\":1}}],[\"非关系组件间通信\",{\"1\":{\"386\":1}}],[\"非关系组件传递\",{\"0\":{\"158\":1},\"1\":{\"153\":1}}],[\"非图形的各种逻辑均抽象为一个统一的概念来实现的开发模式\",{\"1\":{\"407\":1}}],[\"非图形的各种逻辑均抽象为一个统一的概念\",{\"1\":{\"206\":1}}],[\"非受控组件\",{\"0\":{\"202\":1},\"1\":{\"202\":1}}],[\"非法变量名\",{\"1\":{\"149\":1}}],[\"非严格模式函数标识符会被实例化并初始化为undefined\",{\"1\":{\"22\":1}}],[\"也称为目标符号\",{\"1\":{\"682\":1}}],[\"也称为产生式\",{\"1\":{\"682\":1}}],[\"也称为非终结符号\",{\"1\":{\"43\":1}}],[\"也没有必要\",{\"1\":{\"540\":2}}],[\"也是一个创建单页应用的web应用框架\",{\"1\":{\"500\":1}}],[\"也是diff的一种优化策略\",{\"1\":{\"458\":1}}],[\"也通过\",{\"1\":{\"482\":1}}],[\"也从服务器仓库中拉取别人的提交\",{\"1\":{\"374\":1}}],[\"也能够减少子组件不必要的渲染\",{\"1\":{\"282\":1}}],[\"也存在\",{\"1\":{\"273\":1}}],[\"也会将c删除再重新创建h\",{\"1\":{\"231\":1}}],[\"也会调用\",{\"1\":{\"177\":1}}],[\"也会返回\",{\"1\":{\"114\":1}}],[\"也理解表单变量上下文中的数组\",{\"1\":{\"147\":1}}],[\"也适用于\",{\"1\":{\"147\":1}}],[\"也叫浮点数\",{\"1\":{\"116\":1}}],[\"也叫闭包函数\",{\"1\":{\"67\":1}}],[\"也不能用于条件结构例如\",{\"1\":{\"100\":1}}],[\"也仍然会被调用\",{\"1\":{\"100\":1}}],[\"也可用来确定一个变量是不是继承自某一父类的子类的实例\",{\"1\":{\"103\":1}}],[\"也可用于对象\",{\"1\":{\"84\":1}}],[\"也可以是\",{\"1\":{\"636\":1}}],[\"也可以是一个指令函数\",{\"1\":{\"427\":1}}],[\"也可以实现按需加载\",{\"1\":{\"548\":1}}],[\"也可以参与别人的开源项目\",{\"1\":{\"374\":1}}],[\"也可以用于类型声明\",{\"1\":{\"136\":1}}],[\"也可以用函数\",{\"1\":{\"47\":1}}],[\"也可以解包关联数组\",{\"1\":{\"126\":1}}],[\"也可以只指定一个函数的部分可选参数\",{\"1\":{\"65\":1}}],[\"也有其它应用的情况\",{\"1\":{\"67\":1}}],[\"也就是说\",{\"1\":{\"638\":1}}],[\"也就是说agent是程序的执行环境\",{\"1\":{\"7\":1}}],[\"也就是应用过转换后的资源\",{\"1\":{\"636\":1}}],[\"也就是input标签是一个可读的状态\",{\"1\":{\"201\":1}}],[\"也就是通过使用es6类的编写形式去编写组件\",{\"1\":{\"190\":1}}],[\"也就是虚拟dom\",{\"1\":{\"162\":1}}],[\"也就是\",{\"1\":{\"71\":1,\"169\":1}}],[\"也就是作用域链的起点\",{\"1\":{\"26\":1}}],[\"省略语义\",{\"1\":{\"42\":1}}],[\"简言之\",{\"1\":{\"365\":1}}],[\"简单\",{\"1\":{\"367\":1}}],[\"简单使用\",{\"1\":{\"265\":1}}],[\"简单来讲就是类组件通过调用setstate方法\",{\"1\":{\"278\":1}}],[\"简单来讲\",{\"1\":{\"201\":1,\"202\":1}}],[\"简单方便\",{\"1\":{\"164\":1}}],[\"简单的标量值\",{\"1\":{\"47\":1}}],[\"简略的表达了各种含义\",{\"1\":{\"42\":1}}],[\"简述步骤\",{\"1\":{\"34\":1,\"38\":1}}],[\"概念\",{\"1\":{\"42\":1}}],[\"阅读ecma有以下难点\",{\"1\":{\"42\":1}}],[\"闭包函数也可以接受常规参数\",{\"1\":{\"67\":1}}],[\"闭包可以从父作用域中继承变量\",{\"1\":{\"67\":1}}],[\"闭包\",{\"0\":{\"39\":1},\"1\":{\"450\":1}}],[\"从右到左\",{\"1\":{\"638\":1}}],[\"从入口文件开始\",{\"1\":{\"622\":1}}],[\"从用户发起网页加载到网页呈现主要的页首内容之间的时间\",{\"1\":{\"576\":1}}],[\"从输入延迟开始\",{\"1\":{\"572\":1}}],[\"从前台进入后台时触发\",{\"1\":{\"514\":1}}],[\"从哈希表寻找key一致的vnode节点再分情况操作\",{\"1\":{\"423\":1}}],[\"从旧的vnode为key值\",{\"1\":{\"422\":1}}],[\"从提交历史恢复某个删除掉的某个分支\",{\"1\":{\"380\":1}}],[\"从名字上来看\",{\"1\":{\"297\":1}}],[\"从上面可以看见\",{\"1\":{\"256\":1}}],[\"从上面可以看到setstate第一个参数可以是一个对象\",{\"1\":{\"302\":1}}],[\"从上面可以看到\",{\"1\":{\"244\":1,\"278\":1,\"304\":1}}],[\"从上面可以看到react事件和原生事件也非常的相似\",{\"1\":{\"240\":1}}],[\"从上述两种代码分析\",{\"1\":{\"255\":1}}],[\"从编码角度来看\",{\"1\":{\"169\":1}}],[\"从架构角度来看\",{\"1\":{\"169\":1}}],[\"从开始到渲染完成整个过程是一气呵成的\",{\"1\":{\"168\":1}}],[\"从数组中删除元素\",{\"1\":{\"125\":1}}],[\"从\",{\"1\":{\"81\":1,\"87\":1,\"116\":1,\"136\":1,\"621\":1,\"638\":1}}],[\"从而减少缓存失效的可能性\",{\"1\":{\"631\":1}}],[\"从而减少不必要的diff\",{\"1\":{\"273\":1}}],[\"从而提高缓存效率\",{\"1\":{\"631\":1}}],[\"从而得到相应的动画效果\",{\"1\":{\"323\":1}}],[\"从而达到更新组件内部数据的作用\",{\"1\":{\"302\":1,\"310\":1}}],[\"从而导致页面的视图更新\",{\"1\":{\"302\":1}}],[\"从而导致错误\",{\"1\":{\"244\":1}}],[\"从而导致input框的内容页发现改变\",{\"1\":{\"201\":1}}],[\"从而加工出想要的组件\",{\"1\":{\"215\":1}}],[\"从而实现登录功能\",{\"1\":{\"519\":1}}],[\"从而实现代码的复用\",{\"1\":{\"215\":1}}],[\"从而实现通信\",{\"1\":{\"158\":1}}],[\"从而实现两种类型标识符的隔离\",{\"1\":{\"38\":1}}],[\"从而形成动态内容的服务器端缓存\",{\"1\":{\"70\":1}}],[\"从结果来看lexicallydeclarednames只会收集let\",{\"1\":{\"22\":1}}],[\"碰撞\",{\"1\":{\"38\":1}}],[\"为非终结符\",{\"1\":{\"681\":1}}],[\"为应用程序生成一个\",{\"1\":{\"643\":1}}],[\"为结束\",{\"1\":{\"638\":1}}],[\"为了优化webpack打包结果\",{\"1\":{\"631\":1}}],[\"为了避免参数表达式的标识符与函数体变量声明的标识符发生\",{\"1\":{\"38\":1}}],[\"为整个\",{\"1\":{\"450\":1}}],[\"为什么需要\",{\"0\":{\"399\":1}}],[\"为每个实例化对象添加一个age属性\",{\"1\":{\"352\":1}}],[\"为每个增加了优先级\",{\"1\":{\"169\":1}}],[\"为字符时\",{\"1\":{\"127\":1}}],[\"为上一个+1\",{\"1\":{\"124\":1}}],[\"为\",{\"1\":{\"85\":1,\"112\":1,\"127\":1,\"636\":1}}],[\"为词法声明创建一次环境记录器\",{\"1\":{\"37\":1}}],[\"表格列\",{\"1\":{\"495\":1}}],[\"表单验证\",{\"1\":{\"539\":1}}],[\"表单输入内容\",{\"1\":{\"473\":1}}],[\"表单修饰符\",{\"1\":{\"389\":1}}],[\"表单数据就由dom本身处理\",{\"1\":{\"203\":1}}],[\"表单数据由react组件负责处理\",{\"1\":{\"203\":1}}],[\"表单也类似\",{\"1\":{\"147\":1}}],[\"表单中的数据\",{\"1\":{\"147\":1}}],[\"表单中的信息会自动在脚本中可用\",{\"1\":{\"147\":1}}],[\"表示一个可选符号\",{\"1\":{\"683\":1}}],[\"表示没有产生式的元素\",{\"1\":{\"681\":1}}],[\"表示如果目标符不带有该参数\",{\"1\":{\"675\":1}}],[\"表示如果目标符带有该参数\",{\"1\":{\"675\":1}}],[\"表示非终结符不可以带有该参数\",{\"1\":{\"675\":1}}],[\"表示非终结符可以带有该参数\",{\"1\":{\"675\":1}}],[\"表示in是in操作符还是for\",{\"1\":{\"674\":1}}],[\"表示是否可以使用return语句\",{\"1\":{\"674\":1}}],[\"表示是否可以使用无名函数\",{\"1\":{\"674\":1}}],[\"表示是否可以使用yield语句\",{\"1\":{\"674\":1}}],[\"表示是否可以使用await语句\",{\"1\":{\"674\":1}}],[\"表示是否可以使用数字分隔符\",{\"1\":{\"674\":1}}],[\"表示应用returnifabrupt\",{\"1\":{\"661\":1}}],[\"表示数据已经安全的保存在本地数据库中\",{\"1\":{\"375\":1}}],[\"表示对一个已修改文件的当前版本做了标记\",{\"1\":{\"375\":1}}],[\"表示修改了文件\",{\"1\":{\"375\":1}}],[\"表示旧组件先移除\",{\"1\":{\"324\":1}}],[\"表示新组件先进入\",{\"1\":{\"324\":1}}],[\"表示当前fibernode对应的element组件实例\",{\"1\":{\"169\":1}}],[\"表示当前代表的节点类型\",{\"1\":{\"169\":1}}],[\"表示函数不会终止\",{\"1\":{\"135\":1}}],[\"表示函数不返回值\",{\"1\":{\"134\":1}}],[\"表示函数的顶级作用域\",{\"1\":{\"29\":1}}],[\"表示\",{\"1\":{\"113\":1}}],[\"表示该函数接受可变数量的参数值\",{\"1\":{\"64\":1}}],[\"表达式之前\",{\"1\":{\"100\":1}}],[\"表达式\",{\"1\":{\"98\":1,\"100\":1}}],[\"表达式必须详尽列出所有情况\",{\"1\":{\"54\":1}}],[\"表达式结构\",{\"1\":{\"54\":1}}],[\"表达式基于值的一致性进行分支计算\",{\"1\":{\"54\":1}}],[\"表达式参数\",{\"1\":{\"38\":1}}],[\"重定向时间\",{\"1\":{\"573\":1}}],[\"重定向方法wx\",{\"1\":{\"518\":1}}],[\"重写了虚拟dom实现\",{\"1\":{\"506\":1}}],[\"重绘\",{\"1\":{\"501\":1}}],[\"重做上一次commit\",{\"1\":{\"379\":1}}],[\"重新发起请求\",{\"1\":{\"554\":1}}],[\"重新计算延迟时间\",{\"1\":{\"534\":1}}],[\"重新计算布局\",{\"1\":{\"469\":1}}],[\"重新计时\",{\"1\":{\"534\":1}}],[\"重新赋值\",{\"1\":{\"483\":1}}],[\"重新绑定事件\",{\"1\":{\"472\":1}}],[\"重新执行\",{\"1\":{\"169\":1}}],[\"重新索引\",{\"1\":{\"125\":1}}],[\"重新生成索引后曾经存在于\",{\"1\":{\"125\":1}}],[\"重置\",{\"1\":{\"67\":1}}],[\"重要\",{\"1\":{\"37\":1,\"47\":2,\"54\":1,\"80\":1,\"81\":1,\"83\":1,\"86\":1,\"89\":1,\"90\":1,\"91\":2,\"92\":1,\"98\":1,\"100\":1,\"101\":1,\"147\":2,\"178\":1,\"280\":1,\"305\":1,\"459\":1,\"480\":1,\"616\":1,\"636\":1,\"637\":1,\"638\":1,\"639\":1,\"660\":1,\"662\":1,\"663\":1,\"667\":2,\"676\":1,\"689\":1}}],[\"重复\",{\"1\":{\"37\":1}}],[\"恢复组件状态\",{\"1\":{\"472\":1}}],[\"恢复后也可以复用之前的中间状态\",{\"1\":{\"170\":1}}],[\"恢复词法环境为oldenv\",{\"1\":{\"37\":1}}],[\"恢复与此执行上下文的关联代码所需的任何状态\",{\"1\":{\"10\":1}}],[\"将argument\",{\"1\":{\"660\":1}}],[\"将生成一个\",{\"1\":{\"644\":1}}],[\"将禁用所有已配置的\",{\"1\":{\"639\":3}}],[\"将资源中的\",{\"1\":{\"639\":1}}],[\"将其结果\",{\"1\":{\"636\":1}}],[\"将其转换为解析树\",{\"1\":{\"20\":1}}],[\"将按照从右到左的顺序执行\",{\"1\":{\"636\":1}}],[\"将文件从不同的语言\",{\"1\":{\"635\":1}}],[\"将runtime代码单独打包成一个或多个chunk\",{\"1\":{\"631\":1}}],[\"将png\",{\"1\":{\"586\":1}}],[\"将多次的setdata合并为一次setdata\",{\"1\":{\"530\":1}}],[\"将多个类型合并在一起\",{\"1\":{\"332\":1}}],[\"将多个动画组件包裹在其中\",{\"1\":{\"322\":1}}],[\"将访问率低的页面放入子包内\",{\"1\":{\"529\":1}}],[\"将用户访问率高的页面放在主包内\",{\"1\":{\"529\":1}}],[\"将所有的事件拦截后\",{\"1\":{\"526\":1}}],[\"将逻辑层和视图层分开\",{\"1\":{\"525\":1}}],[\"将逻辑按功能聚合\",{\"1\":{\"503\":1}}],[\"将code作为参数传递为微信服务器指定接口\",{\"1\":{\"519\":1}}],[\"将css文件作为一个模块引入\",{\"1\":{\"223\":1}}],[\"将css单独写在一个css文件中\",{\"1\":{\"222\":1}}],[\"将组件模板转换为虚拟dom\",{\"1\":{\"501\":1}}],[\"将模板\",{\"1\":{\"501\":1}}],[\"将模板template转为ast结构的js对象\",{\"1\":{\"448\":1}}],[\"将输入事件\",{\"1\":{\"501\":1}}],[\"将回调函数压入\",{\"1\":{\"491\":1}}],[\"将vue的开发模型扩展到其他平台\",{\"1\":{\"507\":1}}],[\"将vnode转为真实dom\",{\"1\":{\"486\":1}}],[\"将v值给予result\",{\"1\":{\"37\":1}}],[\"将html解析成ast树\",{\"1\":{\"486\":1}}],[\"将父组件的所有配置项通过\",{\"1\":{\"482\":1}}],[\"将共有的功能以对象的方式传入mixins\",{\"1\":{\"478\":1}}],[\"将差异应用到真实dom\",{\"1\":{\"468\":1}}],[\"将f插入到c之前\",{\"1\":{\"459\":2}}],[\"将e插入到dom中\",{\"1\":{\"459\":1}}],[\"将el文本节点设置为vnode的文本节点\",{\"1\":{\"423\":1}}],[\"将当前真实dom移动到oldendvnode前面\",{\"1\":{\"422\":1}}],[\"将当前真实dom移动到oldendvnode后面\",{\"1\":{\"422\":1}}],[\"将当前节点移动到index的位置\",{\"1\":{\"232\":1}}],[\"将命名变为驼峰命名法\",{\"1\":{\"389\":1}}],[\"将快照永久性存储到git本地仓库\",{\"1\":{\"375\":1}}],[\"将设计恢复到之前任一状态的选择权\",{\"1\":{\"365\":1}}],[\"将由上至下依次对装饰器表达式求值\",{\"1\":{\"353\":1}}],[\"将t的所有属性映射为只读的\",{\"1\":{\"336\":1}}],[\"将t的所有属性映射为可选的\",{\"1\":{\"336\":1}}],[\"将this绑定到当前组件中\",{\"1\":{\"246\":1}}],[\"将类型联合起来\",{\"1\":{\"333\":1}}],[\"将类标记为\",{\"1\":{\"83\":1}}],[\"将新调用的\",{\"1\":{\"297\":1}}],[\"将对前一次渲染的\",{\"1\":{\"256\":1}}],[\"将一个类型映射为另一个类型\",{\"1\":{\"336\":1}}],[\"将一个\",{\"1\":{\"233\":1}}],[\"将oldindex的值赋值给maxindex\",{\"1\":{\"232\":1}}],[\"将控制权交回给浏览器\",{\"1\":{\"170\":1}}],[\"将时间控制权交给主线程\",{\"1\":{\"170\":1}}],[\"将包含字符串\",{\"1\":{\"150\":2}}],[\"将保留为字符串\",{\"1\":{\"150\":1}}],[\"将替换浏览器中先前的同名\",{\"1\":{\"148\":1}}],[\"将表单\",{\"1\":{\"147\":1}}],[\"将创建引用同名全局变量的局部变量\",{\"1\":{\"143\":1}}],[\"将创建该类的一个新实例\",{\"1\":{\"78\":1}}],[\"将在\",{\"1\":{\"142\":1}}],[\"将索引\",{\"1\":{\"126\":3}}],[\"将尝试将反引号中的内容作为\",{\"1\":{\"101\":1}}],[\"将\",{\"1\":{\"96\":3,\"140\":1}}],[\"将把\",{\"1\":{\"96\":3}}],[\"将会改变\",{\"1\":{\"197\":1}}],[\"将会自动将变量名中的点替换成下划线\",{\"1\":{\"149\":1}}],[\"将会自动创建相应的属性\",{\"1\":{\"89\":1}}],[\"将会被解释为\",{\"1\":{\"114\":1}}],[\"将会覆盖父类的方法\",{\"1\":{\"81\":1}}],[\"将跳过条件语句未达成的段落\",{\"1\":{\"72\":1}}],[\"将寻找与变量的值同名的函数\",{\"1\":{\"66\":1}}],[\"返回这个完成记录\",{\"1\":{\"660\":1}}],[\"返回的值传递给normalcompletion\",{\"1\":{\"663\":1}}],[\"返回的时候跳转到首页\",{\"1\":{\"522\":1}}],[\"返回的组件实例\",{\"1\":{\"288\":1}}],[\"返回上一级或多级页面\",{\"1\":{\"522\":1}}],[\"返回上一个页面\",{\"1\":{\"518\":1}}],[\"返回到首页\",{\"1\":{\"454\":1}}],[\"返回列表页\",{\"1\":{\"454\":1}}],[\"返回一个具有节流能力的函数\",{\"1\":{\"537\":1}}],[\"返回一个具有防抖能力的函数\",{\"1\":{\"534\":1}}],[\"返回一个promise对象\",{\"1\":{\"491\":1}}],[\"返回一个延迟执行的函数\",{\"1\":{\"450\":1}}],[\"返回一个node节点\",{\"1\":{\"450\":1}}],[\"返回一个脚本记录器\",{\"1\":{\"20\":1}}],[\"返回原来值\",{\"1\":{\"389\":1}}],[\"返回其联合类型\",{\"1\":{\"335\":1}}],[\"返回\",{\"1\":{\"279\":1,\"522\":1,\"636\":1}}],[\"返回真实dom节点\",{\"1\":{\"269\":2}}],[\"返回值是一个数组\",{\"1\":{\"255\":1}}],[\"返回值是一个对象\",{\"1\":{\"162\":1}}],[\"返回加工过的新组件enhancedcomponent\",{\"1\":{\"214\":1}}],[\"返回数组中的\",{\"1\":{\"100\":1}}],[\"返回类型在\",{\"1\":{\"67\":1}}],[\"返回类型声明必须放在\",{\"1\":{\"67\":1}}],[\"返回result\",{\"1\":{\"37\":1}}],[\"返回v\",{\"1\":{\"37\":1}}],[\"polyfill\",{\"1\":{\"623\":1}}],[\"points\",{\"1\":{\"622\":1,\"629\":1}}],[\"position=\",{\"1\":{\"263\":1}}],[\"position\",{\"1\":{\"263\":1}}],[\"posts\",{\"0\":{\"706\":1}}],[\"postloaders\",{\"1\":{\"639\":1}}],[\"postloader\",{\"1\":{\"639\":2}}],[\"postcss\",{\"1\":{\"618\":3}}],[\"post\",{\"0\":{\"147\":1},\"1\":{\"98\":4,\"99\":3,\"147\":6,\"150\":1}}],[\"pnpm\",{\"1\":{\"618\":1}}],[\"png\",{\"1\":{\"268\":2,\"569\":1,\"585\":2}}],[\"pwa\",{\"1\":{\"618\":1}}],[\"plain\",{\"1\":{\"585\":2}}],[\"placeholder\",{\"1\":{\"460\":1}}],[\"pluginname\",{\"1\":{\"646\":2}}],[\"plugin的集合\",{\"1\":{\"642\":1}}],[\"plugin插件\",{\"1\":{\"599\":1}}],[\"plugins\",{\"0\":{\"642\":1},\"1\":{\"585\":2,\"597\":1,\"599\":1,\"642\":1,\"643\":2,\"644\":1,\"645\":1}}],[\"plugin\",{\"0\":{\"643\":1},\"1\":{\"585\":4,\"597\":2,\"599\":1,\"618\":2,\"622\":3,\"636\":1,\"643\":2,\"644\":1}}],[\"pc端\",{\"1\":{\"502\":1}}],[\"pinia\",{\"1\":{\"502\":1}}],[\"pink\",{\"1\":{\"224\":1,\"269\":1}}],[\"pick\",{\"1\":{\"618\":1}}],[\"pick<iperson\",{\"1\":{\"336\":1}}],[\"pick用于抽取对象子集\",{\"1\":{\"336\":1}}],[\"p1\",{\"1\":{\"336\":3}}],[\"package\",{\"1\":{\"617\":1,\"618\":4,\"636\":1}}],[\"path\",{\"1\":{\"585\":2,\"599\":6,\"616\":4,\"644\":5}}],[\"patch更新\",{\"1\":{\"460\":2}}],[\"patch\",{\"1\":{\"460\":3}}],[\"patch函数通过虚拟dom算法利用vnode节点创建真实dom节点\",{\"1\":{\"448\":1}}],[\"patchvnode方法做了以下操作\",{\"1\":{\"423\":1}}],[\"patchvnode后\",{\"1\":{\"422\":2}}],[\"patchvnode\",{\"1\":{\"422\":1,\"460\":1}}],[\"patch方法接受参数\",{\"1\":{\"422\":1}}],[\"paint\",{\"1\":{\"568\":4,\"575\":1,\"580\":1}}],[\"pagecount\",{\"1\":{\"606\":4,\"607\":4,\"608\":4}}],[\"page\",{\"1\":{\"606\":1,\"607\":1,\"608\":1}}],[\"pagenav\",{\"1\":{\"574\":2}}],[\"pagemodel全部以栈的形式进行管理\",{\"1\":{\"521\":1}}],[\"pages\",{\"1\":{\"518\":4}}],[\"pass\",{\"1\":{\"585\":2}}],[\"password\",{\"1\":{\"460\":1}}],[\"passive\",{\"1\":{\"389\":1}}],[\"palevioletred\",{\"1\":{\"224\":1}}],[\"partial<iperson>\",{\"1\":{\"336\":1}}],[\"partialstate\",{\"1\":{\"302\":5}}],[\"param\",{\"1\":{\"359\":2}}],[\"parameters\",{\"1\":{\"673\":1}}],[\"parameter\",{\"1\":{\"335\":1}}],[\"paramname\",{\"1\":{\"65\":1}}],[\"parentval\",{\"1\":{\"483\":5}}],[\"parentelm\",{\"1\":{\"460\":4}}],[\"parentcondition\",{\"1\":{\"450\":2}}],[\"parentclickfun\",{\"1\":{\"241\":2}}],[\"parentclass\",{\"1\":{\"103\":3}}],[\"parentnode\",{\"1\":{\"269\":7}}],[\"parentref\",{\"1\":{\"241\":3}}],[\"parents\",{\"1\":{\"155\":1}}],[\"parent\",{\"1\":{\"80\":2,\"81\":2,\"108\":1,\"156\":1,\"386\":1,\"443\":2,\"482\":6}}],[\"parsed\",{\"1\":{\"72\":1}}],[\"puppeteerrenderer\",{\"1\":{\"599\":1}}],[\"pull\",{\"1\":{\"376\":1,\"379\":2}}],[\"push\",{\"1\":{\"376\":1,\"380\":1,\"596\":3}}],[\"pureclass\",{\"1\":{\"280\":1}}],[\"purecomponent\",{\"0\":{\"280\":1},\"1\":{\"222\":2,\"223\":2,\"278\":1,\"281\":1,\"323\":1,\"324\":1,\"325\":2}}],[\"public\",{\"1\":{\"77\":2,\"79\":2,\"87\":3,\"88\":2,\"90\":1,\"91\":2,\"109\":9,\"341\":1,\"556\":1,\"597\":1}}],[\"p\",{\"1\":{\"194\":1,\"196\":4,\"222\":1,\"223\":1,\"255\":2,\"256\":2,\"269\":3,\"336\":1,\"442\":1,\"443\":2,\"459\":1}}],[\"pending用于标识\",{\"1\":{\"491\":1}}],[\"pendingprops\",{\"1\":{\"169\":1}}],[\"people\",{\"1\":{\"224\":1}}],[\"performanceobserver\",{\"1\":{\"568\":2,\"574\":2}}],[\"person=\",{\"1\":{\"354\":1}}],[\"person=add\",{\"1\":{\"352\":1}}],[\"personmap\",{\"1\":{\"336\":1}}],[\"person2\",{\"1\":{\"336\":2}}],[\"person1\",{\"1\":{\"336\":2}}],[\"person\",{\"1\":{\"336\":2,\"352\":7,\"361\":6}}],[\"personal\",{\"1\":{\"147\":2}}],[\"perl\",{\"1\":{\"73\":1,\"74\":1}}],[\"periterationlets\",{\"1\":{\"37\":1}}],[\"p>\",{\"1\":{\"72\":2,\"74\":1,\"442\":1}}],[\"pdf\",{\"1\":{\"70\":1}}],[\"ph8\",{\"0\":{\"65\":1}}],[\"php会对双引号中的特殊字符进行解析\",{\"1\":{\"121\":1}}],[\"php标记表示了一段可以被php解析器解析的代码\",{\"1\":{\"71\":1}}],[\"php标记\",{\"0\":{\"71\":1}}],[\"php8\",{\"0\":{\"54\":1}}],[\"php\",{\"0\":{\"55\":4,\"70\":1,\"130\":1,\"707\":1},\"1\":{\"47\":2,\"48\":1,\"53\":3,\"65\":2,\"66\":1,\"67\":3,\"70\":3,\"71\":18,\"72\":15,\"73\":9,\"74\":6,\"77\":2,\"79\":1,\"80\":1,\"81\":2,\"83\":1,\"84\":1,\"85\":2,\"86\":2,\"87\":1,\"88\":1,\"89\":2,\"91\":3,\"92\":5,\"98\":4,\"100\":2,\"101\":2,\"103\":1,\"107\":1,\"109\":2,\"110\":2,\"111\":1,\"112\":1,\"113\":7,\"115\":2,\"116\":2,\"117\":1,\"119\":1,\"120\":1,\"122\":1,\"123\":1,\"124\":2,\"125\":1,\"126\":3,\"127\":2,\"128\":1,\"130\":1,\"134\":1,\"135\":1,\"136\":2,\"140\":1,\"141\":2,\"142\":2,\"143\":1,\"144\":3,\"147\":6,\"148\":1,\"149\":4,\"150\":4,\"585\":2},\"2\":{\"50\":1,\"51\":1,\"58\":1,\"59\":1,\"68\":1,\"69\":1,\"75\":1,\"76\":1,\"93\":1,\"94\":1,\"104\":1,\"105\":1,\"137\":1,\"138\":1,\"151\":1,\"152\":1}}],[\"prettier\",{\"1\":{\"618\":2}}],[\"preset\",{\"1\":{\"599\":1,\"618\":1}}],[\"presets\",{\"1\":{\"599\":1}}],[\"prerender\",{\"1\":{\"599\":1}}],[\"prerenderspaplugin\",{\"1\":{\"599\":3}}],[\"preloader\",{\"1\":{\"639\":3}}],[\"preload\",{\"1\":{\"596\":4,\"597\":1}}],[\"pre\",{\"1\":{\"443\":4,\"518\":1}}],[\"prevent\",{\"1\":{\"389\":1}}],[\"preventdefault方法\",{\"1\":{\"389\":1}}],[\"preventdefault\",{\"1\":{\"202\":1}}],[\"previousstate\",{\"1\":{\"306\":1}}],[\"prevstate\",{\"1\":{\"182\":2,\"306\":4,\"310\":2}}],[\"prevprops\",{\"1\":{\"182\":2,\"280\":1,\"281\":2}}],[\"pre>\",{\"1\":{\"101\":1,\"147\":1}}],[\"pricecontext\",{\"1\":{\"157\":4}}],[\"price\",{\"1\":{\"155\":3,\"157\":4}}],[\"private\",{\"1\":{\"80\":1,\"90\":1,\"91\":1,\"341\":1,\"556\":1}}],[\"privateenvironment\",{\"1\":{\"10\":1}}],[\"printlength\",{\"1\":{\"335\":4}}],[\"printage\",{\"1\":{\"316\":2}}],[\"printname\",{\"1\":{\"316\":2}}],[\"printing\",{\"1\":{\"122\":4}}],[\"printid\",{\"1\":{\"109\":1}}],[\"printf\",{\"1\":{\"67\":1}}],[\"print\",{\"1\":{\"56\":1,\"71\":2,\"72\":1,\"80\":2,\"84\":1,\"90\":1,\"122\":2,\"125\":4,\"128\":1,\"147\":1}}],[\"progressplugin\",{\"1\":{\"644\":2,\"645\":1}}],[\"promise\",{\"1\":{\"623\":1}}],[\"prod\",{\"1\":{\"617\":1}}],[\"production\",{\"1\":{\"585\":1,\"618\":1}}],[\"province\",{\"1\":{\"548\":2}}],[\"provide\",{\"1\":{\"386\":2,\"483\":1}}],[\"provider>\",{\"1\":{\"157\":1}}],[\"provider\",{\"1\":{\"157\":1}}],[\"provider组件通过value属性用于给后代组件传递数据\",{\"1\":{\"157\":1}}],[\"proxy劫持整个对象的基本操作\",{\"1\":{\"509\":1}}],[\"proxy可以对整个对象进行监听\",{\"1\":{\"509\":1}}],[\"proxy\",{\"1\":{\"413\":1,\"585\":2}}],[\"project\",{\"1\":{\"378\":1,\"618\":3}}],[\"protect\",{\"1\":{\"341\":1}}],[\"prototype上实现\",{\"1\":{\"407\":1}}],[\"prototype\",{\"1\":{\"280\":1,\"302\":1,\"316\":1,\"352\":2}}],[\"profile\",{\"1\":{\"268\":2}}],[\"profilepage\",{\"1\":{\"197\":2}}],[\"propc\",{\"1\":{\"360\":1}}],[\"propb\",{\"1\":{\"360\":1}}],[\"propa\",{\"1\":{\"360\":1}}],[\"prop\",{\"1\":{\"352\":1,\"360\":4,\"389\":1}}],[\"props在super\",{\"1\":{\"318\":1}}],[\"props在内部不可变的\",{\"1\":{\"311\":1}}],[\"props为undefined\",{\"1\":{\"317\":1}}],[\"props赋值\",{\"1\":{\"317\":1}}],[\"props都是可以使用的\",{\"1\":{\"317\":1}}],[\"props直接挂载到实例上\",{\"1\":{\"317\":1}}],[\"props除了可以传字符串\",{\"1\":{\"311\":1}}],[\"props并不发生改变\",{\"1\":{\"197\":1}}],[\"props的方式去访问\",{\"1\":{\"190\":1}}],[\"props\",{\"0\":{\"311\":1,\"315\":1,\"360\":1},\"1\":{\"154\":2,\"155\":1,\"156\":2,\"190\":3,\"191\":2,\"193\":5,\"196\":2,\"197\":7,\"201\":2,\"202\":2,\"208\":2,\"209\":2,\"210\":2,\"215\":10,\"216\":5,\"221\":2,\"224\":6,\"236\":5,\"241\":2,\"248\":2,\"249\":2,\"255\":2,\"256\":4,\"261\":2,\"264\":2,\"269\":14,\"279\":1,\"280\":1,\"281\":1,\"290\":2,\"291\":2,\"292\":2,\"293\":1,\"299\":2,\"302\":2,\"306\":2,\"310\":1,\"311\":1,\"312\":3,\"317\":15,\"324\":2,\"325\":2,\"386\":4,\"483\":3}}],[\"propertyname\",{\"1\":{\"352\":2}}],[\"propertydescriptor\",{\"1\":{\"352\":2,\"353\":2}}],[\"propertykey\",{\"1\":{\"352\":3,\"353\":2}}],[\"propertykey方法名称\",{\"1\":{\"352\":3}}],[\"property\",{\"1\":{\"49\":1,\"66\":2,\"86\":1,\"357\":1,\"358\":1,\"360\":1,\"361\":1,\"362\":1,\"585\":1}}],[\"processif\",{\"1\":{\"450\":1}}],[\"process\",{\"1\":{\"16\":1,\"585\":1}}],[\"有单引号\",{\"1\":{\"699\":1}}],[\"有两种使用\",{\"1\":{\"637\":1}}],[\"有大量的配置项\",{\"1\":{\"618\":1}}],[\"有局限性\",{\"1\":{\"598\":1}}],[\"有关的dom元素\",{\"1\":{\"569\":1}}],[\"有一些事件会频繁触发\",{\"1\":{\"534\":1}}],[\"有一个可用的伪变量\",{\"1\":{\"77\":1}}],[\"有额外的两个生命周期钩子\",{\"1\":{\"463\":1}}],[\"有以下类型\",{\"1\":{\"344\":1}}],[\"有以下简述步骤\",{\"1\":{\"37\":1}}],[\"有状态组件\",{\"1\":{\"264\":1}}],[\"有状态的组件也就是组件内部存在维护的数据\",{\"1\":{\"210\":1}}],[\"有状态的组件只能通过继承react\",{\"1\":{\"210\":1}}],[\"有的话\",{\"1\":{\"232\":1}}],[\"有的语句的求值过程中\",{\"1\":{\"33\":1}}],[\"有条件地禁用提交按钮\",{\"1\":{\"203\":1}}],[\"有经验的用户可能会注意到被浏览器发送的实际变量名包含的是一个点而不是下划线\",{\"1\":{\"147\":1}}],[\"有几个方法访问此信息\",{\"1\":{\"147\":1}}],[\"有时候使用可变变量名是很方便的\",{\"1\":{\"145\":1}}],[\"有函数作用域和全局作用域\",{\"1\":{\"142\":1}}],[\"有效期是通过expires来指定的\",{\"1\":{\"555\":1}}],[\"有效减轻服务端压力\",{\"1\":{\"539\":1}}],[\"有效的变量名由字母\",{\"1\":{\"139\":1}}],[\"有效\",{\"1\":{\"100\":1}}],[\"有些情况下当使用\",{\"1\":{\"73\":1}}],[\"有很多的操作序列被简化成简单的词汇存在于各种代换式中\",{\"1\":{\"42\":1}}],[\"当文法定义中的冒号后面跟着\",{\"1\":{\"684\":1}}],[\"当文法参数放在代换式左侧时\",{\"1\":{\"675\":1}}],[\"当文件被修改后\",{\"1\":{\"559\":1}}],[\"当模块内容发生变化时\",{\"1\":{\"632\":1}}],[\"当模块被加载并执行后\",{\"1\":{\"631\":1}}],[\"当浏览器需要加载某个模块时\",{\"1\":{\"631\":1}}],[\"当浏览器请求一个网站的时候\",{\"1\":{\"560\":1}}],[\"当使用\",{\"1\":{\"615\":1}}],[\"当使用尚未被定义的类\",{\"1\":{\"92\":1}}],[\"当资源加载完成时\",{\"1\":{\"601\":1}}],[\"当资源到期时\",{\"1\":{\"557\":1}}],[\"当网页上渲染的首个内容包含可见区域上的内容时\",{\"1\":{\"576\":1}}],[\"当存在长任务\",{\"1\":{\"575\":1}}],[\"当web应用获取资源时\",{\"1\":{\"554\":1}}],[\"当缓存过期时\",{\"1\":{\"553\":2,\"558\":1,\"559\":1}}],[\"当元素进入视口时才加载相关资源\",{\"1\":{\"552\":1}}],[\"当元素自身时触发处理函数\",{\"1\":{\"389\":1}}],[\"当视图存在交互时\",{\"1\":{\"526\":1}}],[\"当静态内容大到一定量级时候\",{\"1\":{\"508\":1}}],[\"当组件存在与mixin对象相同的选项时\",{\"1\":{\"481\":1}}],[\"当组件使用mixins对象的选项是所有的mixins对象的选项都将被混入该组件本身的选项中来\",{\"1\":{\"478\":1}}],[\"当组件挂载或卸载时\",{\"1\":{\"240\":1}}],[\"当v\",{\"0\":{\"443\":1}}],[\"当我们修改文件的时候\",{\"1\":{\"375\":1}}],[\"当我们通过git\",{\"1\":{\"375\":1}}],[\"当我们的组件需要处理多个互不相关的\",{\"1\":{\"253\":1}}],[\"当做了第一次改变后\",{\"1\":{\"365\":1}}],[\"当多个装饰器应用于一个声明上\",{\"1\":{\"353\":1}}],[\"当多个分支表达式右侧相同时\",{\"1\":{\"54\":1}}],[\"当修饰类的时候\",{\"1\":{\"352\":1}}],[\"当有一组动画的时候\",{\"1\":{\"325\":1}}],[\"当动画结束后才真正移除\",{\"1\":{\"325\":1}}],[\"当动画结束后\",{\"1\":{\"323\":1}}],[\"当动画执行结束后\",{\"1\":{\"323\":1}}],[\"当in属性置为false时\",{\"1\":{\"323\":1}}],[\"当csstransition的in属性置为true时\",{\"1\":{\"323\":1}}],[\"当component\",{\"1\":{\"231\":1}}],[\"当需要做强制更新\",{\"1\":{\"404\":1}}],[\"当需要修改里面的值的状态需要通过调用setstate来改变\",{\"1\":{\"302\":1,\"310\":1}}],[\"当需要时\",{\"1\":{\"202\":1}}],[\"当数据变化之时\",{\"1\":{\"467\":1}}],[\"当数据发生改变时\",{\"1\":{\"422\":1}}],[\"当数据发生变化时它们会使用接收到的新值\",{\"1\":{\"159\":1}}],[\"当数组的值不发生改变了\",{\"1\":{\"298\":1}}],[\"当ref传入为一个函数的时候\",{\"1\":{\"292\":1}}],[\"当状态发生修改的时候\",{\"1\":{\"282\":1}}],[\"当对象包含复杂的数据结构时\",{\"1\":{\"280\":1}}],[\"当没有key的时候\",{\"1\":{\"273\":1}}],[\"当拥有key的时候\",{\"1\":{\"273\":1}}],[\"当首次调用时\",{\"1\":{\"269\":1}}],[\"当首字母为大写时\",{\"1\":{\"268\":1}}],[\"当首字母为小写时\",{\"1\":{\"268\":1}}],[\"当按钮被点击时\",{\"1\":{\"244\":1}}],[\"当真实\",{\"1\":{\"241\":1}}],[\"当事件发生时\",{\"1\":{\"240\":1}}],[\"当abcd节点比较完成后\",{\"1\":{\"232\":1}}],[\"当oldindex<maxindex时\",{\"1\":{\"232\":1}}],[\"当oldindex=maxindex时\",{\"1\":{\"232\":1}}],[\"当oldindex>maxindex时\",{\"1\":{\"232\":1}}],[\"当调用vm\",{\"1\":{\"469\":1}}],[\"当调用this\",{\"1\":{\"210\":1}}],[\"当调用静态方法时\",{\"1\":{\"66\":1}}],[\"当\",{\"1\":{\"168\":1,\"291\":1,\"621\":1}}],[\"当其中一个线程执行时\",{\"1\":{\"168\":1}}],[\"当你在一次操作时\",{\"1\":{\"163\":1}}],[\"当用户点击到子包的目录时\",{\"1\":{\"529\":1}}],[\"当用户点击到图像中的某处时\",{\"1\":{\"147\":1}}],[\"当用户输入新的内容时\",{\"1\":{\"201\":1}}],[\"当用在\",{\"1\":{\"49\":1}}],[\"当提交表单时\",{\"1\":{\"147\":1}}],[\"当一个变量有几种可能的取值时\",{\"1\":{\"344\":1}}],[\"当一个表单提交给\",{\"1\":{\"147\":1}}],[\"当一个方法在类定义内部被调用时\",{\"1\":{\"77\":1}}],[\"当包含文件时\",{\"1\":{\"142\":1}}],[\"当将其放置在一个\",{\"1\":{\"100\":1}}],[\"当$a小于\",{\"1\":{\"97\":1}}],[\"当覆盖\",{\"1\":{\"82\":1}}],[\"当解析一个文件时\",{\"1\":{\"71\":1}}],[\"当函数被定义而不是被调用的时候继承变量的值\",{\"1\":{\"67\":1}}],[\"当函数调用时\",{\"1\":{\"38\":1}}],[\"当然\",{\"1\":{\"67\":1}}],[\"当前使用的数据\",{\"1\":{\"501\":1}}],[\"当前已经比较完了\",{\"1\":{\"232\":1}}],[\"当前节点在老集合中的下标\",{\"1\":{\"232\":1}}],[\"当前处理过程中的组件props对象\",{\"1\":{\"169\":1}}],[\"当前命名空间的名称\",{\"1\":{\"49\":1}}],[\"当前类的名称\",{\"1\":{\"49\":1}}],[\"当前函数的名称\",{\"1\":{\"49\":1}}],[\"当前上下文的词法环境恢复为oldenv\",{\"1\":{\"34\":1}}],[\"当false\",{\"1\":{\"37\":1}}],[\"当在for中使用let\",{\"1\":{\"37\":1}}],[\"块级声明实例化\",{\"1\":{\"33\":1}}],[\"字符串文本位于指令\",{\"1\":{\"703\":1}}],[\"字符串文本是\",{\"1\":{\"698\":1}}],[\"字符串形式的指令表达式\",{\"1\":{\"427\":1}}],[\"字符串枚举\",{\"1\":{\"344\":1}}],[\"字符串列表\",{\"1\":{\"32\":1}}],[\"字符连接符号\",{\"1\":{\"47\":1}}],[\"字段应当代替操作的返回值使用\",{\"1\":{\"662\":1}}],[\"字段直接引用一个模块\",{\"1\":{\"636\":1}}],[\"字段指向另一个环境记录器\",{\"1\":{\"26\":1}}],[\"字段上\",{\"1\":{\"22\":3}}],[\"字段\",{\"1\":{\"11\":1,\"29\":1,\"31\":1,\"32\":1,\"339\":1}}],[\"中重复使用\",{\"1\":{\"646\":1}}],[\"中指定\",{\"1\":{\"639\":1}}],[\"中被弃用\",{\"1\":{\"637\":1}}],[\"中使用\",{\"1\":{\"636\":1}}],[\"中查找模块\",{\"1\":{\"631\":1}}],[\"中包含可见区域上方的内容\",{\"1\":{\"576\":1}}],[\"中用于存储​​父组件通过\",{\"1\":{\"386\":1}}],[\"中文件的内容或目录结构计算出来\",{\"1\":{\"375\":1}}],[\"中初始化\",{\"1\":{\"310\":1,\"312\":1}}],[\"中组件的首字母\",{\"1\":{\"268\":1}}],[\"中是不识别的\",{\"1\":{\"223\":1}}],[\"中是不可变的所以它永远不会改变\",{\"1\":{\"197\":1}}],[\"中读取\",{\"1\":{\"197\":1}}],[\"中任务切割为多个步骤\",{\"1\":{\"170\":1}}],[\"中任何一个为\",{\"1\":{\"96\":1}}],[\"中在\",{\"1\":{\"147\":1}}],[\"中写成\",{\"1\":{\"109\":1}}],[\"中为\",{\"1\":{\"96\":1}}],[\"中一个为\",{\"1\":{\"96\":1}}],[\"中都为\",{\"1\":{\"96\":1}}],[\"中则需要使用\",{\"1\":{\"72\":1}}],[\"中出现的事件是由\",{\"1\":{\"56\":1}}],[\"中\",{\"1\":{\"53\":1,\"79\":1,\"125\":1,\"264\":1,\"299\":1,\"482\":2,\"636\":1}}],[\"中的定义进行\",{\"1\":{\"698\":1}}],[\"中的问题\",{\"1\":{\"639\":1}}],[\"中的所有\",{\"1\":{\"639\":1}}],[\"中的内容时注册\",{\"1\":{\"576\":1}}],[\"中的字符串\",{\"1\":{\"465\":1}}],[\"中的元素时\",{\"1\":{\"291\":1}}],[\"中的位向右移动\",{\"1\":{\"96\":1}}],[\"中的位向左移动\",{\"1\":{\"96\":1}}],[\"中的\",{\"1\":{\"56\":1,\"124\":1,\"288\":1}}],[\"中的每个参数都经过组合\",{\"1\":{\"44\":1}}],[\"中的绑定\",{\"1\":{\"32\":1}}],[\"中才能发挥作用\",{\"1\":{\"13\":1}}],[\"此操作用于强调正在返回一个完成记录\",{\"1\":{\"658\":1}}],[\"此插件不能使用太高的版本\",{\"1\":{\"585\":1}}],[\"此类元素被视为不稳定元素\",{\"1\":{\"570\":1}}],[\"此字段拥有强大的缓存控制能力\",{\"1\":{\"556\":1}}],[\"此功能并不是\",{\"1\":{\"224\":1}}],[\"此方法用于组件卸载前\",{\"1\":{\"185\":1}}],[\"此方法的目的在于获取组件更新前的一些信息\",{\"1\":{\"182\":1}}],[\"此方法多用于执行一些数据获取\",{\"1\":{\"179\":1}}],[\"此结果代表着一个在浮点数运算中未定义或不可表述的值\",{\"1\":{\"118\":1}}],[\"此函数的返回结果会随着每次错误的发生而相应变化\",{\"1\":{\"100\":1}}],[\"此时await\",{\"1\":{\"676\":1}}],[\"此时小程序需要重新加载启动\",{\"1\":{\"527\":1}}],[\"此时装饰器接受参数如下\",{\"1\":{\"352\":3}}],[\"此时需要采取一些措施来提升运行性能\",{\"1\":{\"277\":1}}],[\"此时maxindex=3\",{\"1\":{\"232\":1}}],[\"此时maxindex=1\",{\"1\":{\"232\":2}}],[\"此时maxindex=\",{\"1\":{\"232\":3}}],[\"此时\",{\"1\":{\"72\":1,\"232\":1,\"386\":1}}],[\"此种解析方式使得\",{\"1\":{\"71\":1}}],[\"此种情况下\",{\"1\":{\"65\":1}}],[\"此外注意如果将\",{\"1\":{\"72\":1}}],[\"此外\",{\"1\":{\"38\":1,\"365\":1}}],[\"此环境记录是否为with语句创建\",{\"1\":{\"31\":1}}],[\"此范围使用的全局对象\",{\"1\":{\"11\":1}}],[\"否则不存在\",{\"1\":{\"675\":2}}],[\"否则没有\",{\"1\":{\"675\":1}}],[\"否则报错\",{\"1\":{\"585\":1}}],[\"否则使用el属性\",{\"1\":{\"465\":1}}],[\"否则只会监听自定义事件\",{\"1\":{\"389\":1}}],[\"否则子组件的props和展示形式不会改变\",{\"1\":{\"311\":1}}],[\"否则会根据模块的路径加载模块并执行\",{\"1\":{\"631\":1}}],[\"否则会导致无限循环调用更新\",{\"1\":{\"181\":1}}],[\"否则会触发死循环导致内存崩溃\",{\"1\":{\"178\":1}}],[\"否则返回\",{\"1\":{\"98\":1}}],[\"否则目录中名不包括末尾的斜杠\",{\"1\":{\"49\":1}}],[\"否则为表达式中的默认值\",{\"1\":{\"38\":1}}],[\"否则为undefined\",{\"1\":{\"38\":1}}],[\"否则\",{\"1\":{\"29\":1,\"554\":1,\"660\":1}}],[\"的定义\",{\"1\":{\"682\":2}}],[\"的定义从被定义非终结名称\",{\"1\":{\"682\":1}}],[\"的定义时\",{\"1\":{\"45\":1}}],[\"的单个文件\",{\"1\":{\"638\":1}}],[\"的方式\",{\"1\":{\"637\":1}}],[\"的方法\",{\"1\":{\"549\":1}}],[\"的方法或者函数组件\",{\"1\":{\"261\":1}}],[\"的其中一个强大的特性就是能通过\",{\"1\":{\"636\":1}}],[\"的预处理函数\",{\"1\":{\"636\":1}}],[\"的详细信息\",{\"1\":{\"632\":1}}],[\"的版本\",{\"1\":{\"624\":1}}],[\"的浏览器\",{\"1\":{\"623\":1}}],[\"的模块进行预加载\",{\"1\":{\"597\":1}}],[\"的延迟时间中的最大值\",{\"1\":{\"572\":1}}],[\"的场景下\",{\"1\":{\"632\":1}}],[\"的场景\",{\"1\":{\"501\":1}}],[\"的双向同步\",{\"1\":{\"501\":1}}],[\"的元素\",{\"1\":{\"465\":1}}],[\"的元素分配给变量\",{\"1\":{\"126\":1}}],[\"的状态被正确应用\",{\"1\":{\"449\":1}}],[\"的重要组成部分\",{\"1\":{\"370\":1}}],[\"的重写\",{\"1\":{\"169\":1}}],[\"的区别\",{\"0\":{\"315\":1}}],[\"的批量更新策略会对其进行覆盖\",{\"1\":{\"306\":1}}],[\"的必要步骤\",{\"1\":{\"297\":1}}],[\"的渲染效率足以我们的业务日常\",{\"1\":{\"277\":1}}],[\"的第一个变量被编译为对象\",{\"1\":{\"268\":1}}],[\"的第一个变量被编译为字符串\",{\"1\":{\"268\":1}}],[\"的调用\",{\"1\":{\"256\":1}}],[\"的情况下使用\",{\"1\":{\"253\":1}}],[\"的新增特性\",{\"1\":{\"253\":1}}],[\"的时候\",{\"1\":{\"244\":1,\"317\":1}}],[\"的上下文可能不会指向\",{\"1\":{\"244\":1}}],[\"的一部分\",{\"1\":{\"224\":1}}],[\"的一种不太灵活的替代方法\",{\"1\":{\"92\":1}}],[\"的形式来编写\",{\"1\":{\"223\":1}}],[\"的描述\",{\"1\":{\"162\":1}}],[\"的变量\",{\"1\":{\"149\":1}}],[\"的变量都将解析为值\",{\"1\":{\"111\":1}}],[\"的内容是\",{\"1\":{\"145\":2}}],[\"的写入不会修改最后一个数组元素\",{\"1\":{\"128\":1}}],[\"的数组和对象才能被展开\",{\"1\":{\"127\":1}}],[\"的逻辑\",{\"1\":{\"126\":1}}],[\"的转义序列将不会被替换\",{\"1\":{\"120\":1}}],[\"的字符集\",{\"1\":{\"119\":1}}],[\"的范围\",{\"1\":{\"114\":1}}],[\"的类型别名\",{\"1\":{\"136\":1}}],[\"的类型\",{\"1\":{\"124\":1}}],[\"的类型系统支持各种原子类型\",{\"1\":{\"107\":1}}],[\"的类尤其有用\",{\"1\":{\"84\":1}}],[\"的实例\",{\"1\":{\"103\":1}}],[\"的效果与函数\",{\"1\":{\"101\":1}}],[\"的结果\",{\"1\":{\"98\":1}}],[\"的位设为\",{\"1\":{\"96\":4}}],[\"的完全限定名称\",{\"1\":{\"84\":1}}],[\"的构造函数\",{\"1\":{\"80\":1}}],[\"的话\",{\"1\":{\"80\":1}}],[\"的注释\",{\"1\":{\"74\":1}}],[\"的配置文件是\",{\"1\":{\"615\":1}}],[\"的配置\",{\"1\":{\"71\":1}}],[\"的功能包括输出丰富的文件类型\",{\"1\":{\"70\":1}}],[\"的值为\",{\"1\":{\"306\":1}}],[\"的值来自于父组件或者祖先组件的\",{\"1\":{\"299\":1}}],[\"的值来直接更改数组的值\",{\"1\":{\"128\":1}}],[\"的值是\",{\"1\":{\"256\":1}}],[\"的值是在\",{\"1\":{\"56\":1}}],[\"的值也被修改\",{\"1\":{\"140\":1}}],[\"的值取决于它在脚本中使用的行\",{\"1\":{\"49\":1}}],[\"的\",{\"1\":{\"53\":1,\"110\":1,\"168\":1,\"197\":1,\"255\":1,\"269\":1,\"291\":1,\"460\":1,\"568\":1,\"598\":1,\"618\":1,\"623\":1,\"636\":3,\"644\":1,\"646\":1}}],[\"的名字\",{\"1\":{\"49\":1}}],[\"的组合\",{\"1\":{\"43\":1,\"673\":1}}],[\"的外部作用域\",{\"1\":{\"30\":1}}],[\"的newtarget参数的值\",{\"1\":{\"29\":1}}],[\"的标识符\",{\"1\":{\"22\":1}}],[\"是以下的缩写\",{\"1\":{\"684\":1}}],[\"是以下的缩写variabledeclaration\",{\"1\":{\"683\":1}}],[\"是以下请求阶段的总和\",{\"1\":{\"573\":1}}],[\"是用于衡量网页的整个生命周期内发生的每一次意外布局偏移\",{\"1\":{\"570\":1}}],[\"是用特殊的\",{\"1\":{\"143\":1}}],[\"是指webpack在打包过程中生成的一段代码\",{\"1\":{\"631\":1}}],[\"是指衡量从用户首次与网页互动\",{\"1\":{\"571\":1}}],[\"是指可见的最大图片\",{\"1\":{\"569\":1}}],[\"是指用户首次导航到网页到网页任何一部分内容呈现在屏幕上的时间\",{\"1\":{\"567\":1}}],[\"是指一种模式\",{\"1\":{\"224\":1}}],[\"是web组件内的一个占位符\",{\"1\":{\"494\":1}}],[\"是否禁用压缩\",{\"1\":{\"585\":1}}],[\"是否在http\",{\"1\":{\"585\":2}}],[\"是否删除原有静态资源文件\",{\"1\":{\"585\":1}}],[\"是否执行\",{\"1\":{\"537\":1}}],[\"是否存在template标签\",{\"1\":{\"465\":1}}],[\"是否只是删除节点\",{\"1\":{\"460\":1}}],[\"是否定义data\",{\"1\":{\"460\":1}}],[\"是否为注释节点\",{\"1\":{\"460\":1}}],[\"是否可以复用\",{\"1\":{\"460\":1}}],[\"是否是文本节点\",{\"1\":{\"422\":1}}],[\"是源配置管理\",{\"1\":{\"370\":1}}],[\"是维护工程蓝图的标准作法\",{\"1\":{\"365\":1}}],[\"是会创建新属性的非同态映射类型\",{\"1\":{\"336\":1}}],[\"是可以不写的\",{\"1\":{\"317\":1}}],[\"是多变的\",{\"1\":{\"312\":1}}],[\"是在组件内被组件自己管理的\",{\"1\":{\"312\":1}}],[\"是外部传递给组件的\",{\"1\":{\"312\":1}}],[\"是不建议使用深层次结构的数据\",{\"1\":{\"280\":1}}],[\"是不会影响后续节点操作的\",{\"1\":{\"232\":1}}],[\"是类名\",{\"1\":{\"269\":1}}],[\"是函数名\",{\"1\":{\"269\":1}}],[\"是字符串\",{\"1\":{\"269\":1}}],[\"是由\",{\"1\":{\"215\":1}}],[\"是react中定义组件最简单的方式\",{\"1\":{\"191\":1}}],[\"是对\",{\"1\":{\"169\":2}}],[\"是因为浏览器无法中断正在执行的任务\",{\"1\":{\"575\":1}}],[\"是因为其不会在渲染期间触发\",{\"1\":{\"236\":1}}],[\"是因为\",{\"1\":{\"143\":1}}],[\"是内置伪类型\",{\"1\":{\"136\":1}}],[\"是内置编译时\",{\"1\":{\"136\":1}}],[\"是仅用于返回的类型\",{\"1\":{\"135\":1}}],[\"是仅用于返回类型\",{\"1\":{\"134\":1}}],[\"是顶级类型\",{\"1\":{\"133\":1}}],[\"是一种合作式调度\",{\"1\":{\"170\":1}}],[\"是一种文本协议\",{\"1\":{\"150\":1}}],[\"是一种在远端浏览器端存储数据并能追踪或识别再次访问的用户的机制\",{\"1\":{\"148\":1}}],[\"是一种特殊变量\",{\"1\":{\"131\":1}}],[\"是一个轻量级的javascript库\",{\"1\":{\"580\":1}}],[\"是一个静态的方法\",{\"1\":{\"177\":1}}],[\"是一个结构化文本的抽象\",{\"1\":{\"162\":1}}],[\"是一个超全局变量\",{\"1\":{\"143\":1}}],[\"是一个关联数组\",{\"1\":{\"143\":1}}],[\"是一个到当前对象的引用\",{\"1\":{\"77\":1}}],[\"是一个在\",{\"1\":{\"56\":1}}],[\"是计算中所能接受的最小的差别值\",{\"1\":{\"117\":1}}],[\"是该属性名\",{\"1\":{\"86\":1}}],[\"是从左向右求值的\",{\"1\":{\"61\":1}}],[\"是调用\",{\"1\":{\"49\":1}}],[\"是替代性的\",{\"1\":{\"47\":1}}],[\"是\",{\"1\":{\"29\":1,\"63\":1,\"71\":1,\"148\":1,\"169\":1,\"253\":1,\"386\":1}}],[\"说明该用户没有注册\",{\"1\":{\"519\":1}}],[\"说明这些是新增的\",{\"1\":{\"460\":1}}],[\"说明\",{\"1\":{\"29\":1,\"31\":1,\"32\":1,\"49\":1,\"514\":1,\"516\":1,\"517\":1}}],[\"附加字段\",{\"1\":{\"29\":1,\"31\":1,\"32\":1}}],[\"一条产生式可以绑定多条语法导向操作\",{\"1\":{\"667\":1}}],[\"一组链式的\",{\"1\":{\"636\":1}}],[\"一秒之内可能执行几十次\",{\"1\":{\"534\":1}}],[\"一共发生了0次更新\",{\"1\":{\"459\":1}}],[\"一共发生了3次更新\",{\"1\":{\"459\":1}}],[\"一键copy的功能\",{\"1\":{\"428\":1}}],[\"一系列的http头组成\",{\"1\":{\"413\":1}}],[\"一次操作时\",{\"1\":{\"399\":1}}],[\"一次性取值\",{\"1\":{\"203\":1}}],[\"一切回到合并前的状态\",{\"1\":{\"380\":1}}],[\"一切皆为组件\",{\"1\":{\"264\":1}}],[\"一种通过同层的树节点进行比较的高效算法\",{\"1\":{\"421\":1}}],[\"一种简单的版本控制形式如下\",{\"1\":{\"365\":1}}],[\"一种不改变原类和使用继承的情况下\",{\"1\":{\"351\":1}}],[\"一种声明式环境记录\",{\"1\":{\"29\":1,\"30\":1}}],[\"一旦发生变化\",{\"1\":{\"486\":1}}],[\"一旦父组件发生渲染\",{\"1\":{\"299\":1}}],[\"一旦执行了setstate就会执行render方法\",{\"1\":{\"299\":1}}],[\"一旦一个组件实例被卸载\",{\"1\":{\"185\":1}}],[\"一般用于列表中元素的动画\",{\"1\":{\"322\":1}}],[\"一般在git仓库目录中\",{\"1\":{\"375\":1}}],[\"一般在\",{\"1\":{\"310\":1,\"312\":1}}],[\"一般遵循一些约定\",{\"1\":{\"215\":1}}],[\"一般如果函数组件调用state\",{\"1\":{\"194\":1}}],[\"一般情况下只要不是\",{\"1\":{\"663\":1}}],[\"一般情况下建议开启\",{\"1\":{\"585\":2}}],[\"一般情况是在初始化的时候接受外部数据\",{\"1\":{\"202\":1}}],[\"一般情况\",{\"1\":{\"181\":1,\"216\":1}}],[\"一套代码多端运行\",{\"1\":{\"164\":1}}],[\"一些函数如\",{\"1\":{\"132\":1}}],[\"一些魔术常量会根据使用位置而变化\",{\"1\":{\"49\":1}}],[\"一段\",{\"1\":{\"73\":1}}],[\"一样时\",{\"1\":{\"422\":1}}],[\"一样格外小心\",{\"1\":{\"122\":1}}],[\"一样的结构都可以以相同方式自动加载\",{\"1\":{\"92\":1}}],[\"一样\",{\"1\":{\"73\":1}}],[\"一个包含它\",{\"1\":{\"683\":1}}],[\"一个包含修饰符的对象\",{\"1\":{\"427\":1}}],[\"一个省略可选元素\",{\"1\":{\"683\":1}}],[\"一个完成记录\",{\"1\":{\"658\":1}}],[\"一个webpack项目会有一个或多个入口点\",{\"1\":{\"629\":1}}],[\"一个节流函数具有以下要点\",{\"1\":{\"537\":1}}],[\"一个防抖函数具有以下要点\",{\"1\":{\"534\":1}}],[\"一个小程序存在多个界面\",{\"1\":{\"525\":1}}],[\"一个页面只会调用一次\",{\"1\":{\"518\":1}}],[\"一个用于创建用户界面的开源js框架\",{\"1\":{\"500\":1}}],[\"一个普通的js对象\",{\"1\":{\"478\":1}}],[\"一个库\",{\"1\":{\"407\":1}}],[\"一个git项目的初始有两个途径\",{\"1\":{\"378\":1}}],[\"一个标识符可在多个命名空间中定义\",{\"1\":{\"355\":1}}],[\"一个组件的显示形态可以由数据状态和外部参数所决定\",{\"1\":{\"302\":1,\"310\":1}}],[\"一个组件该有的特点如下\",{\"1\":{\"264\":1}}],[\"一个数据的多个输入\",{\"1\":{\"203\":1}}],[\"一个函数都可以视为一个组件\",{\"1\":{\"206\":1}}],[\"一个函数\",{\"1\":{\"195\":1}}],[\"一个列表\",{\"1\":{\"169\":1}}],[\"一个\",{\"1\":{\"169\":1,\"660\":1}}],[\"一个链表\",{\"1\":{\"169\":1}}],[\"一个dom对应两个fiber\",{\"1\":{\"169\":1}}],[\"一个可变变量获取了一个普通变量的值作为这个可变变量的变量名\",{\"1\":{\"145\":1}}],[\"一个变量的变量名可以动态的设置和使用\",{\"1\":{\"145\":1}}],[\"一个字符串可以用\",{\"1\":{\"119\":1}}],[\"一个字符串\",{\"1\":{\"119\":1}}],[\"一个类\",{\"1\":{\"206\":1}}],[\"一个类只能继承一个基类\",{\"1\":{\"81\":1}}],[\"一个类可以在声明中用\",{\"1\":{\"81\":1}}],[\"一个类可以包含有属于自己的\",{\"1\":{\"77\":1}}],[\"一个ecmascript全局环境\",{\"1\":{\"11\":1}}],[\"一个realm由一组内置对象\",{\"1\":{\"11\":1}}],[\"一个agent记录器和一个执行线程\",{\"1\":{\"8\":1}}],[\"一个执行线程\",{\"1\":{\"7\":1}}],[\"常见hooks\",{\"0\":{\"254\":1}}],[\"常见的字段有\",{\"1\":{\"556\":1}}],[\"常见的绑定方式有如下\",{\"1\":{\"245\":1}}],[\"常见的css引入方式有以下\",{\"1\":{\"220\":1}}],[\"常常用于与核心业务无关但又在多个模块使用的功能\",{\"1\":{\"216\":1}}],[\"常量值\",{\"1\":{\"86\":1}}],[\"常量可以声明为\",{\"1\":{\"81\":1}}],[\"常量都在编译时解析\",{\"1\":{\"49\":1}}],[\"常量数组\",{\"1\":{\"47\":1}}],[\"常量不需要使用\",{\"1\":{\"47\":1}}],[\"常量\",{\"0\":{\"47\":1},\"1\":{\"28\":1,\"77\":1}}],[\"常用于绑定块级语句内的标识符\",{\"1\":{\"27\":1}}],[\"对该位置后面紧跟的内容进行限制\",{\"1\":{\"687\":1}}],[\"对该节点的引用可以在\",{\"1\":{\"291\":1}}],[\"对加载的模块进行一系列的转换操作\",{\"1\":{\"622\":1}}],[\"对非可见区域中的数据不渲染或部分渲染的技术\",{\"1\":{\"609\":1}}],[\"对大量的数据分批渲染\",{\"1\":{\"605\":1}}],[\"对调试很有用\",{\"1\":{\"599\":1}}],[\"对按需加载\",{\"1\":{\"597\":1}}],[\"对超过10kb的文件进行压缩\",{\"1\":{\"585\":1}}],[\"对这些静态文件的加载速度也会得到提升\",{\"1\":{\"583\":1}}],[\"对不参与更新的元素\",{\"1\":{\"508\":1}}],[\"对会发生变化的地方增加了flag标记\",{\"1\":{\"508\":1}}],[\"对比数据变化\",{\"1\":{\"468\":1}}],[\"对性能会有影响\",{\"1\":{\"392\":1}}],[\"对联合类型实现遍历\",{\"1\":{\"336\":1}}],[\"对同一个值进行多次\",{\"1\":{\"306\":1}}],[\"对dom元素的操作和对组件实例的操作\",{\"1\":{\"294\":1}}],[\"对dom元素的内容设置及媒体播放\",{\"1\":{\"294\":1}}],[\"对dom元素的焦点控制\",{\"1\":{\"294\":1}}],[\"对declarations中的元素\",{\"1\":{\"35\":1}}],[\"对\",{\"1\":{\"277\":1,\"615\":1}}],[\"对组件实现一致的处理\",{\"1\":{\"215\":1}}],[\"对应每一个属性\",{\"1\":{\"360\":1}}],[\"对应css如下\",{\"1\":{\"325\":1}}],[\"对应css样式如下\",{\"1\":{\"323\":1}}],[\"对应两个值\",{\"1\":{\"324\":1}}],[\"对应两个队列\",{\"1\":{\"169\":1}}],[\"对应如下\",{\"1\":{\"241\":1}}],[\"对应使用不同的方法\",{\"1\":{\"241\":1}}],[\"对应过程如图所示\",{\"1\":{\"241\":1}}],[\"对应的渲染函数\",{\"1\":{\"443\":1}}],[\"对应的index序列为value值的哈希表中寻找到与newstartvnode一致key的旧的vnode节点\",{\"1\":{\"422\":1}}],[\"对应的useeffect示例如下\",{\"1\":{\"256\":1}}],[\"对应的\",{\"1\":{\"170\":2}}],[\"对应分别如下\",{\"1\":{\"157\":1}}],[\"对单引号转义\",{\"1\":{\"120\":1}}],[\"对新手来说一个简单的规则就是\",{\"1\":{\"100\":1}}],[\"对参数标识符进行实例化\",{\"1\":{\"38\":1}}],[\"对函数进行声明实例化\",{\"1\":{\"38\":1}}],[\"对其求值\",{\"1\":{\"37\":1}}],[\"对标识符进行对应的绑定\",{\"1\":{\"37\":1}}],[\"对块中语句挨个执行\",{\"1\":{\"34\":1}}],[\"对象配置\",{\"1\":{\"636\":1}}],[\"对象形式的指令\",{\"1\":{\"449\":1}}],[\"对象形式存在的对\",{\"1\":{\"162\":1}}],[\"对象或函数都可以\",{\"1\":{\"418\":1}}],[\"对象是通过\",{\"1\":{\"289\":1}}],[\"对象深层的数据已改变却没有触发\",{\"1\":{\"280\":1}}],[\"对象后\",{\"1\":{\"241\":1}}],[\"对象上\",{\"1\":{\"241\":1}}],[\"对象运算符\",{\"1\":{\"86\":1}}],[\"对象引用解析\",{\"1\":{\"85\":1}}],[\"对象环境记录\",{\"1\":{\"32\":1}}],[\"对象环境记录绑定一组字符串标识符名称\",{\"1\":{\"31\":1}}],[\"对象环境记录器\",{\"1\":{\"27\":1}}],[\"对象\",{\"1\":{\"29\":1,\"31\":1,\"32\":1,\"169\":1,\"312\":1,\"639\":1,\"646\":2}}],[\"对于脚本内容的情况返回undefined\",{\"1\":{\"667\":1}}],[\"对于其他文件需要loader将其他的类型的文件转换为有效模块\",{\"1\":{\"635\":1}}],[\"对于其他的类型的模块\",{\"1\":{\"627\":1}}],[\"对于开发者来说\",{\"1\":{\"632\":1}}],[\"对于解析出的每个模块\",{\"1\":{\"622\":1}}],[\"对于大量数据渲染的时候\",{\"1\":{\"604\":1}}],[\"对于一些不经常变的内容\",{\"1\":{\"560\":1}}],[\"对于一些无状态的组件创建\",{\"1\":{\"211\":1}}],[\"对于事件的分发处理\",{\"1\":{\"526\":1}}],[\"对于每个小程序\",{\"1\":{\"519\":1}}],[\"对于子组件中存在但父组件不存在的配置项\",{\"1\":{\"482\":1}}],[\"对于keep\",{\"1\":{\"463\":1}}],[\"对于以上\",{\"1\":{\"459\":1}}],[\"对于多人协作项目\",{\"1\":{\"365\":1}}],[\"对于错误边界无法捕获的异常\",{\"1\":{\"236\":1}}],[\"对于简单列表渲染而言\",{\"1\":{\"233\":1}}],[\"对于比较同一层级的节点们\",{\"1\":{\"232\":1}}],[\"对于\",{\"1\":{\"148\":1}}],[\"对于负数键值也成立\",{\"1\":{\"124\":1}}],[\"对于包含的变量\",{\"1\":{\"121\":1}}],[\"对于系统的键值对\",{\"1\":{\"102\":1}}],[\"对于vardeclarations中的标识符\",{\"1\":{\"22\":1}}],[\"对于functionstoinitialize\",{\"1\":{\"22\":1}}],[\"对于lexdeclarations中的标识符\",{\"1\":{\"22\":1}}],[\"声明而没有赋值\",{\"1\":{\"344\":1}}],[\"声明式模板\",{\"1\":{\"501\":1}}],[\"声明式的设计\",{\"1\":{\"265\":1}}],[\"声明式编程方式使得react组件很容易使用\",{\"1\":{\"263\":1}}],[\"声明式编程是一种编程范式\",{\"1\":{\"263\":1}}],[\"声明式编程\",{\"0\":{\"263\":1},\"1\":{\"262\":1}}],[\"声明式编程范式和函数式编程概念\",{\"1\":{\"261\":1}}],[\"声明式环境记录绑定其范围内包含的声明所定义的一组标识符\",{\"1\":{\"28\":1}}],[\"声明式环境记录器\",{\"1\":{\"27\":1,\"32\":1}}],[\"声明一个叫\",{\"1\":{\"255\":1}}],[\"声明\",{\"1\":{\"124\":1,\"349\":1}}],[\"声明方法\",{\"1\":{\"77\":1}}],[\"声明属性\",{\"1\":{\"77\":1}}],[\"声明实例化\",{\"1\":{\"22\":1}}],[\"绑定了变量的文本\",{\"1\":{\"501\":1}}],[\"绑定了事件以后只能触发一次\",{\"1\":{\"389\":1}}],[\"绑定值\",{\"1\":{\"427\":1}}],[\"绑定到当前组件的所有事件监听器​​的对象\",{\"1\":{\"386\":1}}],[\"绑定到全局环境记录器的\",{\"1\":{\"22\":2}}],[\"绑定方法\",{\"0\":{\"245\":1}}],[\"绑定标识符\",{\"1\":{\"37\":2}}],[\"绑定模块顶层代码的标识符\",{\"1\":{\"27\":1}}],[\"绑定函数体内的标识符\",{\"1\":{\"27\":1}}],[\"绑定全局顶层代码的标识符\",{\"1\":{\"27\":1}}],[\"这可能不符合你的意图\",{\"1\":{\"638\":1}}],[\"这可以使php混合其他内容\",{\"1\":{\"72\":1}}],[\"这可以避免在\",{\"1\":{\"71\":1}}],[\"这段代码在浏览器中被用来加载和管理模块\",{\"1\":{\"631\":1}}],[\"这类反馈应该通知给开发者的逻辑层\",{\"1\":{\"526\":1}}],[\"这类常量可以通过\",{\"1\":{\"47\":1}}],[\"这四个配置项使用相同的合并策略函数\",{\"1\":{\"483\":1}}],[\"这么一来\",{\"1\":{\"374\":1}}],[\"这一短语\",{\"1\":{\"686\":1}}],[\"这一特性使得cvs成为位于不同地点的人同时处理数据文件\",{\"1\":{\"370\":1}}],[\"这一步是决定如何更新\",{\"1\":{\"297\":1}}],[\"这三个生命周期函数的组合\",{\"1\":{\"256\":1}}],[\"这种做法需要将本地的登陆状态发送到服务端\",{\"1\":{\"520\":1}}],[\"这种情况可以使用js的try\",{\"1\":{\"236\":1}}],[\"这种组件可以捕获发生在其子组件树任何位置的\",{\"1\":{\"236\":1}}],[\"这种方法\",{\"1\":{\"225\":1}}],[\"这种方式压缩后的文件少\",{\"1\":{\"585\":1}}],[\"这种方式是默认的\",{\"1\":{\"585\":1}}],[\"这种方式是webpack特有的方案\",{\"1\":{\"223\":1}}],[\"这种方式在组件每次render渲染的时候\",{\"1\":{\"246\":1}}],[\"这种方式能够解决局部作用域问题\",{\"1\":{\"223\":1}}],[\"这种方式存在不好的地方在于样式是全局生效\",{\"1\":{\"222\":1}}],[\"这种方式优点\",{\"1\":{\"221\":1}}],[\"这种方式来访问非静态属性\",{\"1\":{\"86\":1}}],[\"这明显是冗杂的\",{\"1\":{\"216\":1}}],[\"这里这时候被动字节不用动\",{\"1\":{\"232\":1}}],[\"这里需要注意的是\",{\"1\":{\"215\":1}}],[\"这里给出一个简单的例子\",{\"1\":{\"195\":1}}],[\"这里是求值语义\",{\"1\":{\"667\":1}}],[\"这里是给html\",{\"1\":{\"585\":1}}],[\"这里是一个函数\",{\"1\":{\"157\":1}}],[\"这里是\",{\"1\":{\"126\":1,\"269\":1}}],[\"这使开发者能够在主事件循环上执行后台和低优先级工作\",{\"1\":{\"170\":1}}],[\"这使得大多数样板get\",{\"1\":{\"90\":1}}],[\"这使得参数的含义自成体系\",{\"1\":{\"65\":1}}],[\"这都是为找到被中断的任务\",{\"1\":{\"169\":1}}],[\"这时需要通过使用\",{\"1\":{\"643\":1}}],[\"这时候\",{\"1\":{\"317\":1}}],[\"这时候可以给memo第二个参数传递比较函数\",{\"1\":{\"281\":1}}],[\"这时候就可以从避免无谓的渲染\",{\"1\":{\"278\":1}}],[\"这时候只需要传入第二个参数\",{\"1\":{\"256\":1}}],[\"这时候当我们在输入框输入内容的时候\",{\"1\":{\"201\":1}}],[\"这时\",{\"1\":{\"149\":1}}],[\"这将会建立两个单独的\",{\"1\":{\"148\":1}}],[\"这将如预期中的运行\",{\"1\":{\"72\":1}}],[\"这在数字索引数组中更容易选择正确的元素\",{\"1\":{\"126\":1}}],[\"这适用于所有表达式\",{\"1\":{\"100\":1}}],[\"这对使用了\",{\"1\":{\"84\":1}}],[\"这意味着它要么调用\",{\"1\":{\"135\":1}}],[\"这意味着其它所有类型都是它的子类型\",{\"1\":{\"133\":1}}],[\"这意味着\",{\"1\":{\"119\":1,\"571\":1,\"676\":1}}],[\"这意味着同一个类的属性和方法可以使用同样的名字\",{\"1\":{\"79\":1}}],[\"这意味着在\",{\"1\":{\"74\":1}}],[\"这个对象负责控制整个打包过程\",{\"1\":{\"622\":1}}],[\"这个时间不一定和屏幕的刷新时间相同\",{\"1\":{\"606\":1}}],[\"这个新的chunk会被webpack通过jsonp来异步加载\",{\"1\":{\"549\":1}}],[\"这个过程就是热启动\",{\"1\":{\"527\":1}}],[\"这个函数是webpack模块加载机制的核心\",{\"1\":{\"631\":1}}],[\"这个函数的主要目的是将父组件和子组件的配置进行合并\",{\"1\":{\"482\":1}}],[\"这个函数的作用是从this\",{\"1\":{\"438\":1}}],[\"这个函数在\",{\"1\":{\"460\":1}}],[\"这个函数会传入一个\",{\"1\":{\"289\":1}}],[\"这个参数就是props\",{\"1\":{\"311\":1}}],[\"这个元素就是虚拟dom树的节点\",{\"1\":{\"297\":1}}],[\"这个事件监听器上维持了一个映射来保存所有组件内部的事件监听和处理函数\",{\"1\":{\"240\":1}}],[\"这个组件会被自动添加上一个不重复的class\",{\"1\":{\"224\":1}}],[\"这个模块中的所有css\",{\"1\":{\"223\":1}}],[\"这个功能有两个目的\",{\"1\":{\"90\":1}}],[\"这个注释会引发问题\",{\"1\":{\"74\":1}}],[\"这个尾部的逗号是不允许的\",{\"1\":{\"61\":1}}],[\"这是一个由40个十六进制字符\",{\"1\":{\"375\":1}}],[\"这是一条多行注释\",{\"1\":{\"74\":1}}],[\"这是版本控制系统的基本能力\",{\"1\":{\"365\":1}}],[\"这是react自动附带的\",{\"1\":{\"317\":1}}],[\"这是effect可选的清除机制\",{\"1\":{\"256\":1}}],[\"这是类组件不具备的方法\",{\"1\":{\"256\":1}}],[\"这是因为react并不像vue2中调用object\",{\"1\":{\"302\":1}}],[\"这是因为value被this\",{\"1\":{\"201\":1}}],[\"这是因为这些生命周期钩子都来自于继承的react\",{\"1\":{\"195\":1}}],[\"这是单行\",{\"1\":{\"74\":2}}],[\"这是with语句和全局对象所使用的记录器\",{\"1\":{\"27\":1}}],[\"这样可以在不更改业务代码的情况下更新runtime代码\",{\"1\":{\"631\":1}}],[\"这样就不会引起丢帧现象\",{\"1\":{\"607\":1}}],[\"这样就可以相对的节约宽带\",{\"1\":{\"583\":1}}],[\"这样做简化了事件处理和回收机制\",{\"1\":{\"240\":1}}],[\"这样的话input内的内容也就不会变了\",{\"1\":{\"201\":1}}],[\"这样不期望的空白符就不会出现在文件末尾\",{\"1\":{\"73\":1}}],[\"这样是无效的\",{\"1\":{\"55\":1}}],[\"这样是有效的\",{\"1\":{\"55\":1}}],[\"这告诉\",{\"1\":{\"71\":1}}],[\"这就增加性能的开销\",{\"1\":{\"273\":1}}],[\"这就会导致一些用户交互\",{\"1\":{\"168\":1}}],[\"这就意味着不能在函数内\",{\"1\":{\"47\":1}}],[\"这就是执行上下文的代码查找变量的起点\",{\"1\":{\"26\":1}}],[\"这说明一个参数列表\",{\"1\":{\"43\":1}}],[\"这些比较的算法操作决定了ecmascript\",{\"1\":{\"671\":1}}],[\"这些规则与语法的产生式相关联\",{\"1\":{\"668\":1}}],[\"这些信息在运行时被用来解析和加载模块\",{\"1\":{\"632\":1}}],[\"这些代码通常会被添加到打包后的bundle文件的顶部或底部\",{\"1\":{\"631\":1}}],[\"这些bundle文件可以配置为按需加载\",{\"1\":{\"629\":1}}],[\"这些模块会形成一个图\",{\"1\":{\"627\":1}}],[\"这些事件可以被插件所监听\",{\"1\":{\"622\":1}}],[\"这些文件就可以在浏览器中通过<\",{\"1\":{\"622\":1}}],[\"这些转换操作可以包括代码压缩\",{\"1\":{\"622\":1}}],[\"这些依赖模块可以是javascript文件\",{\"1\":{\"622\":1}}],[\"这些配置信息包括入口文件\",{\"1\":{\"622\":1}}],[\"这些指标可能会有所不同\",{\"1\":{\"576\":1}}],[\"这些静态node\",{\"1\":{\"508\":1}}],[\"这些属性未被当前组件声明为\",{\"1\":{\"386\":1}}],[\"这些虚拟dom树最终会渲染成真实dom\",{\"1\":{\"297\":1}}],[\"这些类别最终都会被转化成react\",{\"1\":{\"269\":1}}],[\"这些组件之间可以组合\",{\"1\":{\"261\":1}}],[\"这些数组在每个作用域内自动可用\",{\"1\":{\"141\":1}}],[\"这些数组变量包含了来自\",{\"1\":{\"141\":1}}],[\"这些特殊的常量不区分大小写\",{\"1\":{\"49\":1}}],[\"这些名称直接对应于其绑定对象的属性名称\",{\"1\":{\"31\":1}}],[\"这些标识符可能是变量\",{\"1\":{\"28\":1}}],[\"这些内置对象会帮助实现最基础的语言功能\",{\"1\":{\"14\":1}}],[\"这些内置对象至少包括一个全局对象以及所有标准定义的固有对象\",{\"1\":{\"14\":1}}],[\"<img\",{\"1\":{\"551\":1}}],[\"<input>\",{\"1\":{\"460\":1}}],[\"<input\",{\"1\":{\"147\":7,\"154\":1,\"201\":1,\"202\":2,\"386\":1}}],[\"<ul\",{\"1\":{\"541\":1,\"606\":1,\"607\":1,\"608\":1}}],[\"<ul>\",{\"1\":{\"273\":1}}],[\"<原分支名>\",{\"1\":{\"380\":1}}],[\"<新分支名><提交id>\",{\"1\":{\"380\":1}}],[\"<新分支名>\",{\"1\":{\"380\":4}}],[\"<分支名>\",{\"1\":{\"380\":5}}],[\"<本地分支名>\",{\"1\":{\"379\":1}}],[\"<远程库名>\",{\"1\":{\"380\":2}}],[\"<远程分支名>\",{\"1\":{\"379\":2}}],[\"<远程仓库名>\",{\"1\":{\"379\":2}}],[\"<具体文件路径+全名>\",{\"1\":{\"379\":1}}],[\"<template\",{\"1\":{\"443\":1}}],[\"<template>\",{\"1\":{\"386\":2,\"548\":1,\"601\":1}}],[\"<transitiongroup>\",{\"1\":{\"325\":1}}],[\"<todolist\",{\"1\":{\"264\":1}}],[\"<todoform\",{\"1\":{\"264\":1}}],[\"<wrapper\",{\"1\":{\"386\":1}}],[\"<wrappedcomponent\",{\"1\":{\"215\":2,\"216\":1}}],[\"<welcome\",{\"1\":{\"311\":1}}],[\"<link\",{\"1\":{\"596\":4}}],[\"<li>列表项<\",{\"1\":{\"541\":6}}],[\"<li>\",{\"1\":{\"273\":1}}],[\"<label>\",{\"1\":{\"154\":1}}],[\"<component\",{\"1\":{\"548\":1}}],[\"<csstransition\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"<classcomponent\",{\"1\":{\"269\":1}}],[\"<child\",{\"1\":{\"155\":1}}],[\"<foo\",{\"1\":{\"298\":2}}],[\"<form\",{\"1\":{\"147\":2,\"202\":1}}],[\"<functioncomponent\",{\"1\":{\"269\":1}}],[\"<app\",{\"1\":{\"268\":1}}],[\"<jumbotron\",{\"1\":{\"264\":1}}],[\"<marker\",{\"1\":{\"263\":1}}],[\"<map\",{\"1\":{\"263\":1}}],[\"<mywidget\",{\"1\":{\"236\":1}}],[\"<header>\",{\"1\":{\"297\":1}}],[\"<hello\",{\"1\":{\"268\":1}}],[\"<hellomessage\",{\"1\":{\"261\":1}}],[\"<h3>classcomponent<\",{\"1\":{\"269\":1}}],[\"<home\",{\"1\":{\"222\":1,\"223\":1}}],[\"<h2>\",{\"1\":{\"302\":1}}],[\"<h2\",{\"1\":{\"222\":1,\"223\":1}}],[\"<h1>\",{\"1\":{\"297\":2,\"298\":4}}],[\"<h1>todo\",{\"1\":{\"264\":1}}],[\"<h1>this\",{\"1\":{\"74\":1}}],[\"<h1>caught\",{\"1\":{\"236\":1}}],[\"<h1>something\",{\"1\":{\"236\":1}}],[\"<h1>bye\",{\"1\":{\"195\":1}}],[\"<h1>hello\",{\"1\":{\"162\":1,\"190\":1,\"191\":1,\"193\":2,\"195\":1,\"216\":1,\"311\":1}}],[\"<div\",{\"1\":{\"221\":2,\"222\":1,\"223\":1,\"233\":20,\"241\":2,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"264\":1,\"269\":3,\"290\":1,\"291\":1,\"292\":1,\"293\":1,\"297\":1,\"298\":2,\"323\":3,\"442\":1,\"443\":1,\"446\":2,\"450\":3,\"459\":1}}],[\"<div>nice\",{\"1\":{\"317\":1}}],[\"<div>6<\",{\"1\":{\"233\":1}}],[\"<div>5<\",{\"1\":{\"233\":5}}],[\"<div>4<\",{\"1\":{\"233\":4}}],[\"<div>3<\",{\"1\":{\"233\":5}}],[\"<div>2<\",{\"1\":{\"233\":5}}],[\"<div>1<\",{\"1\":{\"233\":5}}],[\"<div>hello\",{\"1\":{\"208\":1}}],[\"<div>price\",{\"1\":{\"155\":1,\"157\":1}}],[\"<div>\",{\"1\":{\"155\":2,\"156\":1,\"194\":1,\"210\":1,\"216\":2,\"221\":1,\"224\":1,\"255\":2,\"256\":2,\"261\":1,\"268\":1,\"297\":1,\"298\":4,\"302\":1,\"325\":2}}],[\"<el\",{\"1\":{\"601\":1}}],[\"<errorboundary>\",{\"1\":{\"236\":1}}],[\"<enhance\",{\"1\":{\"215\":1}}],[\"<emailinput\",{\"1\":{\"154\":1}}],[\"<script>\",{\"1\":{\"459\":1,\"541\":1,\"548\":1,\"601\":1}}],[\"<script\",{\"1\":{\"459\":1}}],[\"<switchtransition\",{\"1\":{\"324\":1}}],[\"<selfbutton\",{\"1\":{\"224\":1}}],[\"<selflink\",{\"1\":{\"224\":1}}],[\"<select\",{\"1\":{\"147\":1}}],[\"<siblingb\",{\"1\":{\"156\":1}}],[\"<siblinga\",{\"1\":{\"156\":1}}],[\"<body>\",{\"1\":{\"459\":1,\"541\":1}}],[\"<button\",{\"1\":{\"155\":2,\"194\":1,\"197\":2,\"236\":1,\"240\":6,\"244\":1,\"255\":2,\"256\":2,\"298\":4,\"302\":1,\"310\":1,\"323\":1,\"324\":1,\"325\":1,\"541\":1}}],[\"<br\",{\"1\":{\"147\":1}}],[\"<option\",{\"1\":{\"147\":3}}],[\"<p\",{\"1\":{\"222\":1,\"223\":1,\"269\":1,\"442\":1,\"443\":1,\"459\":1}}],[\"<p>xx<\",{\"1\":{\"269\":1}}],[\"<p>\",{\"1\":{\"269\":1}}],[\"<p>you\",{\"1\":{\"255\":2,\"256\":2}}],[\"<p>hello\",{\"1\":{\"196\":4}}],[\"<p>count\",{\"1\":{\"194\":1}}],[\"<p>the\",{\"1\":{\"74\":1}}],[\"<p>this\",{\"1\":{\"72\":2}}],[\"<pricecontext\",{\"1\":{\"157\":2}}],[\"<pre>\",{\"1\":{\"147\":1}}],[\"<pre>$output<\",{\"1\":{\"101\":1}}],[\"<>\",{\"1\":{\"97\":1,\"102\":1,\"293\":1}}],[\"<<<eot\",{\"1\":{\"122\":1}}],[\"<<<\",{\"1\":{\"122\":1,\"123\":1}}],[\"<<\",{\"1\":{\"96\":1}}],[\"<=>\",{\"1\":{\"97\":1}}],[\"<=\",{\"1\":{\"54\":1,\"97\":1,\"460\":2,\"606\":1,\"607\":1,\"608\":1}}],[\"<\",{\"1\":{\"26\":1,\"53\":2,\"54\":2,\"71\":10,\"72\":7,\"73\":5,\"74\":4,\"77\":1,\"97\":1,\"109\":2,\"111\":1,\"112\":1,\"113\":1,\"115\":1,\"116\":1,\"117\":2,\"120\":1,\"122\":1,\"123\":1,\"125\":1,\"126\":2,\"127\":1,\"128\":1,\"130\":1,\"140\":1,\"142\":1,\"147\":6,\"148\":1,\"149\":1,\"154\":1,\"155\":3,\"156\":1,\"157\":3,\"190\":1,\"191\":1,\"193\":2,\"194\":2,\"202\":1,\"208\":1,\"210\":1,\"216\":3,\"221\":1,\"222\":1,\"223\":1,\"224\":2,\"236\":3,\"241\":2,\"255\":4,\"256\":4,\"261\":1,\"263\":1,\"264\":2,\"268\":2,\"269\":8,\"273\":2,\"280\":1,\"293\":1,\"297\":5,\"298\":14,\"302\":2,\"310\":1,\"311\":1,\"317\":1,\"323\":3,\"324\":3,\"325\":4,\"386\":5,\"442\":2,\"443\":3,\"446\":2,\"459\":4,\"541\":3,\"548\":2,\"585\":4,\"601\":2,\"606\":1,\"607\":1,\"608\":1,\"626\":1}}],[\"环境\",{\"0\":{\"624\":1}}],[\"环境记录绑定的对象\",{\"1\":{\"31\":1}}],[\"环境记录器存放着标识符的绑定\",{\"1\":{\"27\":1}}],[\"环境记录器\",{\"1\":{\"26\":1}}],[\"环境会初始化一系列的内置对象\",{\"1\":{\"14\":1}}],[\"关闭所有的页面\",{\"1\":{\"522\":1}}],[\"关闭当前页面\",{\"1\":{\"522\":1}}],[\"关闭了\",{\"1\":{\"101\":1}}],[\"关联数组\",{\"1\":{\"124\":1}}],[\"关联到\",{\"1\":{\"124\":1}}],[\"关联代码使用的内置值\",{\"1\":{\"11\":1}}],[\"关联代码来源的模块记录器\",{\"1\":{\"10\":1}}],[\"关键字\",{\"1\":{\"316\":1}}],[\"关键字用于将变量从全局作用域绑定到局部作用域\",{\"1\":{\"143\":1}}],[\"关键字实例化为对象\",{\"1\":{\"129\":1}}],[\"关键字继承另一个类的方法和属性\",{\"1\":{\"81\":1}}],[\"关键字定义常量必须处于最顶端的作用域\",{\"1\":{\"47\":1}}],[\"关键字或者自\",{\"1\":{\"86\":1}}],[\"关键字或\",{\"1\":{\"47\":1}}],[\"关于\",{\"1\":{\"486\":1}}],[\"关于提交信息的格式\",{\"1\":{\"379\":1}}],[\"关于state方法的定义是从react\",{\"1\":{\"302\":1}}],[\"关于react\",{\"1\":{\"241\":1}}],[\"关于函数的环境记录器的指向问题\",{\"1\":{\"38\":1}}],[\"关于严格模式\",{\"1\":{\"22\":1}}],[\"实验特性\",{\"1\":{\"352\":1}}],[\"实例挂载过程\",{\"0\":{\"486\":1}}],[\"实例销毁\",{\"1\":{\"471\":1}}],[\"实例过程中自动调用的方法\",{\"1\":{\"176\":1}}],[\"实例化\",{\"1\":{\"38\":1}}],[\"实例化函数对象\",{\"1\":{\"35\":1}}],[\"实例化的过程中\",{\"1\":{\"33\":1}}],[\"实例化相应的函数对象\",{\"1\":{\"22\":1}}],[\"实现原理\",{\"0\":{\"525\":1}}],[\"实现了对\",{\"1\":{\"277\":1}}],[\"实现也非常的简单\",{\"1\":{\"249\":1}}],[\"实现的上述方式的是requestidlecallback方法\",{\"1\":{\"170\":1}}],[\"实现\",{\"0\":{\"322\":1,\"427\":1},\"1\":{\"115\":1,\"349\":1,\"501\":1}}],[\"实现交集的类\",{\"1\":{\"109\":1}}],[\"实际等价于如下\",{\"1\":{\"306\":1}}],[\"实际上等同于\",{\"1\":{\"352\":1}}],[\"实际上所有的\",{\"1\":{\"270\":1}}],[\"实际上是一个有序映射\",{\"1\":{\"124\":1}}],[\"实际上是成为全局对象的属性\",{\"1\":{\"22\":2}}],[\"实际输出是\",{\"1\":{\"98\":1}}],[\"实参\",{\"1\":{\"61\":1}}],[\"并强制实施上述规则\",{\"1\":{\"703\":1}}],[\"并指示要排除的扩展来指定不允许某些扩展\",{\"1\":{\"685\":1}}],[\"并称为产生式的静态语义\",{\"1\":{\"668\":1}}],[\"并称之为\",{\"1\":{\"625\":1}}],[\"并使用其结果\",{\"1\":{\"663\":1}}],[\"并使他指向旧有的\",{\"1\":{\"33\":1}}],[\"并返回一个完成记录\",{\"1\":{\"658\":1}}],[\"并自动将生成的所有\",{\"1\":{\"643\":1}}],[\"并生成相应的依赖图\",{\"1\":{\"631\":1}}],[\"并传入模块的id作为参数\",{\"1\":{\"631\":1}}],[\"并最终生成这些bundle文件\",{\"1\":{\"629\":1}}],[\"并形成一个通过模块互相连接的图\",{\"1\":{\"627\":1}}],[\"并在其中使用\",{\"1\":{\"644\":1}}],[\"并在需要时动态加载\",{\"1\":{\"631\":1}}],[\"并在相应的时机执行插件的逻辑\",{\"1\":{\"622\":1}}],[\"并在数据变化时触发依赖更新\",{\"1\":{\"501\":1}}],[\"并以模块化的方式提供了所有web\",{\"1\":{\"580\":1}}],[\"并给出相应的建议\",{\"1\":{\"578\":1}}],[\"并给不同的任务赋予不同的优先级\",{\"1\":{\"170\":1}}],[\"并更新资源的有效期\",{\"1\":{\"557\":1}}],[\"并更新到页面中\",{\"1\":{\"486\":1}}],[\"并同时用客户端本地的包进行启动\",{\"1\":{\"527\":1}}],[\"并支持更细粒度的依赖跟踪\",{\"1\":{\"501\":1}}],[\"并尽可能复用和移动现有\",{\"1\":{\"460\":1}}],[\"并确保这个新的property同样是响应式的\",{\"1\":{\"404\":1}}],[\"并切换为这个分支\",{\"1\":{\"380\":1}}],[\"并写提交信息\",{\"1\":{\"379\":1}}],[\"并包括指定文件的新变化\",{\"1\":{\"379\":1}}],[\"并没有主次之分\",{\"1\":{\"374\":1}}],[\"并没有一个绝对的答案\",{\"1\":{\"225\":1}}],[\"并提供简单直观的界面\",{\"1\":{\"373\":1}}],[\"并为每次改动编上序号\",{\"1\":{\"365\":1}}],[\"并获取defaultprops对默认props进行赋值\",{\"1\":{\"270\":1}}],[\"并渲染\",{\"1\":{\"236\":1}}],[\"并渲染到页面上\",{\"1\":{\"162\":1}}],[\"并打印这些错误\",{\"1\":{\"236\":1}}],[\"并查找其当前值\",{\"1\":{\"202\":1}}],[\"并不需要等到用户点击到子包页面后再下载子包\",{\"1\":{\"529\":1}}],[\"并不能在执行完setstate之后立马拿到最新的state的结果\",{\"1\":{\"304\":1}}],[\"并不能影响到这一点\",{\"1\":{\"74\":1}}],[\"并不是拥有key值代表性能越高\",{\"1\":{\"273\":1}}],[\"并不是一个组件\",{\"1\":{\"214\":1}}],[\"并不会产生删除创建操作\",{\"1\":{\"273\":1}}],[\"并不会导致渲染时候问题\",{\"1\":{\"236\":1}}],[\"并不建议使用\",{\"1\":{\"211\":1}}],[\"并不存在生命周期\",{\"1\":{\"195\":1}}],[\"并不像字面意思那样表示不安全\",{\"1\":{\"186\":1}}],[\"并不知道后续还有9次更新操作\",{\"1\":{\"163\":1}}],[\"并加上两个变量\",{\"1\":{\"147\":1}}],[\"并将它们合并成一个或多个bundle文件\",{\"1\":{\"629\":1}}],[\"并将它们保存在文件系统中\",{\"1\":{\"70\":1}}],[\"并将相关依赖引入到你的\",{\"1\":{\"627\":1}}],[\"并将其输出到项目的dist目录下\",{\"1\":{\"630\":1}}],[\"并将其输出信息返回\",{\"1\":{\"101\":1}}],[\"并将其转换为webpack可以处理的形式\",{\"1\":{\"622\":1}}],[\"并将对应\",{\"1\":{\"460\":2}}],[\"并将当前分支作为\",{\"1\":{\"450\":1}}],[\"并将结果赋值给函数的参数\",{\"1\":{\"61\":1}}],[\"并允许任意跳过默认值\",{\"1\":{\"65\":1}}],[\"并发出一个提示级别错误信息\",{\"1\":{\"47\":1}}],[\"并把变量声明的标识符绑定在这个环境当中\",{\"1\":{\"38\":1}}],[\"并把执行上下文的词法环境指向该记录器\",{\"1\":{\"38\":1}}],[\"并完成环境记录器的绑定\",{\"1\":{\"35\":1}}],[\"并且结果中的完成记录的\",{\"1\":{\"662\":1}}],[\"并且在\",{\"1\":{\"646\":1}}],[\"并且在生产环境开启压缩和优化\",{\"1\":{\"616\":1}}],[\"并且可以在出错时\",{\"1\":{\"639\":1}}],[\"并且可以采用分包加载的操作\",{\"1\":{\"529\":1}}],[\"并且能够执行任何操作\",{\"1\":{\"636\":1}}],[\"并且渲染到页面中\",{\"1\":{\"487\":1}}],[\"并且最大程度在同适当的地方对同类型的element\",{\"1\":{\"458\":1}}],[\"并且加入父节点\",{\"1\":{\"422\":1}}],[\"并且组件在系统中是被复用的\",{\"1\":{\"407\":1}}],[\"并且至少包含签名\",{\"1\":{\"398\":1}}],[\"并且各自把各自的提交推送到服务器仓库里\",{\"1\":{\"374\":1}}],[\"并且添加\",{\"1\":{\"323\":1}}],[\"并且重新调用组件render方法\",{\"1\":{\"310\":1}}],[\"并且对传入的孩子节点进行处理\",{\"1\":{\"270\":1}}],[\"并且还拥有代码复用机制\",{\"1\":{\"258\":1}}],[\"并且它们的类型也相同\",{\"1\":{\"97\":1}}],[\"并且如果是链式调用中的一部分\",{\"1\":{\"85\":1}}],[\"并且如果函数不是一个箭头函数\",{\"1\":{\"29\":1}}],[\"并且尝试执行它\",{\"1\":{\"66\":1}}],[\"并且\",{\"1\":{\"38\":1,\"92\":1,\"145\":1}}],[\"并且没有本地的this值\",{\"1\":{\"29\":1}}],[\"并绑定到全局环境记录器的\",{\"1\":{\"22\":1}}],[\"并扩展全局对象的属性和方法\",{\"1\":{\"14\":1}}],[\"dns解析\",{\"1\":{\"597\":1}}],[\"dns\",{\"1\":{\"573\":1}}],[\"dns查询过程大约消耗20毫秒\",{\"1\":{\"561\":1}}],[\"dnf\",{\"1\":{\"109\":1}}],[\"d与c\",{\"1\":{\"459\":1}}],[\"das\",{\"1\":{\"352\":1}}],[\"dashboard\",{\"1\":{\"264\":2}}],[\"date\",{\"1\":{\"216\":2}}],[\"dataset\",{\"1\":{\"552\":1}}],[\"data初始化时\",{\"1\":{\"418\":1}}],[\"data属性为何是一个函数\",{\"0\":{\"416\":1}}],[\"data=\",{\"1\":{\"216\":1}}],[\"data\",{\"0\":{\"359\":1},\"1\":{\"216\":9,\"357\":1,\"359\":1,\"459\":1,\"460\":2,\"483\":1,\"486\":1,\"548\":1,\"635\":1}}],[\"duck\",{\"1\":{\"109\":4}}],[\"dump\",{\"1\":{\"54\":1,\"65\":3,\"67\":5,\"87\":2,\"103\":6,\"115\":3}}],[\"dialog\",{\"1\":{\"294\":1}}],[\"diamonds\",{\"1\":{\"130\":1}}],[\"diff时仅扫描动态节点\",{\"1\":{\"501\":1}}],[\"diff创建了a的真实节点\",{\"1\":{\"421\":1}}],[\"diff后建立c的真实节点\",{\"1\":{\"421\":1}}],[\"diff后将他作为第一个真实节点\",{\"1\":{\"421\":1}}],[\"diff算法优化\",{\"1\":{\"508\":1}}],[\"diff算法中的核心函数\",{\"1\":{\"460\":1}}],[\"diff算法\",{\"0\":{\"421\":1},\"1\":{\"273\":1}}],[\"diff算法进行高效的更新\",{\"1\":{\"269\":1}}],[\"diff过程还没完\",{\"1\":{\"232\":1}}],[\"diff过程如下\",{\"1\":{\"232\":1}}],[\"diff\",{\"0\":{\"228\":1},\"1\":{\"277\":1,\"297\":1,\"379\":2,\"460\":2}}],[\"diff树变成了链表\",{\"1\":{\"169\":1}}],[\"div`\",{\"1\":{\"224\":2}}],[\"div1\",{\"1\":{\"221\":2}}],[\"div\",{\"1\":{\"209\":1,\"241\":1,\"268\":1,\"297\":2,\"442\":1,\"443\":1}}],[\"div>节点\",{\"1\":{\"162\":1}}],[\"div>\",{\"1\":{\"155\":3,\"156\":1,\"157\":1,\"194\":1,\"208\":1,\"210\":1,\"216\":2,\"221\":2,\"222\":1,\"223\":1,\"224\":1,\"233\":45,\"241\":2,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"255\":2,\"256\":2,\"261\":1,\"264\":1,\"268\":1,\"269\":3,\"293\":1,\"297\":2,\"298\":6,\"302\":1,\"317\":1,\"323\":2,\"325\":2,\"442\":1,\"443\":1,\"446\":2,\"450\":3,\"459\":1}}],[\"die\",{\"1\":{\"100\":1}}],[\"dist\",{\"1\":{\"459\":1,\"585\":2,\"599\":3,\"616\":2,\"644\":1}}],[\"display\",{\"1\":{\"449\":2}}],[\"displayvar\",{\"1\":{\"77\":1,\"81\":2}}],[\"displayed\",{\"1\":{\"72\":2}}],[\"disable\",{\"1\":{\"71\":1,\"585\":1}}],[\"directed\",{\"1\":{\"657\":1}}],[\"direction\",{\"1\":{\"344\":1,\"345\":6}}],[\"directive方法进行注册\",{\"1\":{\"427\":1}}],[\"directives\",{\"1\":{\"358\":1,\"483\":2,\"501\":1}}],[\"directive\",{\"1\":{\"55\":1,\"56\":1}}],[\"dirname\",{\"1\":{\"49\":1,\"599\":3,\"616\":1,\"644\":1}}],[\"dir\",{\"1\":{\"49\":1,\"450\":2}}],[\"d\",{\"1\":{\"65\":2,\"124\":2,\"127\":2,\"380\":1,\"459\":3,\"618\":1}}],[\"docs\",{\"1\":{\"379\":1}}],[\"documentfragment是dom节点\",{\"1\":{\"608\":1}}],[\"document\",{\"1\":{\"162\":1,\"241\":8,\"256\":4,\"261\":1,\"263\":1,\"268\":1,\"269\":3,\"305\":1,\"541\":3,\"552\":1,\"606\":2,\"607\":2,\"608\":3}}],[\"documents\",{\"1\":{\"71\":1}}],[\"down\",{\"1\":{\"344\":1,\"345\":2}}],[\"doprint\",{\"1\":{\"340\":3}}],[\"done的class\",{\"1\":{\"323\":2}}],[\"doing\",{\"1\":{\"129\":1}}],[\"do\",{\"1\":{\"120\":3,\"129\":1,\"130\":2,\"215\":1,\"618\":7}}],[\"double\",{\"1\":{\"65\":1,\"116\":1}}],[\"dog\",{\"1\":{\"47\":1}}],[\"dom操作\",{\"1\":{\"467\":1}}],[\"dom元素依然存在\",{\"1\":{\"447\":1}}],[\"dom是很慢的\",{\"1\":{\"399\":1}}],[\"dom节点跨层级的操作不做优化\",{\"1\":{\"230\":1}}],[\"dom来找出真正的dom变化之处\",{\"1\":{\"228\":1}}],[\"dom的概念\",{\"1\":{\"228\":1}}],[\"dom\",{\"1\":{\"15\":1,\"162\":3,\"164\":2,\"169\":1,\"170\":1,\"202\":1,\"240\":1,\"241\":7,\"268\":1,\"269\":1,\"277\":3,\"288\":1,\"289\":1,\"294\":1,\"297\":2,\"460\":4,\"472\":1,\"473\":1}}],[\"dependency\",{\"1\":{\"621\":1,\"631\":1}}],[\"dependencies\",{\"1\":{\"549\":1}}],[\"dev\",{\"1\":{\"618\":2}}],[\"devdependencies\",{\"1\":{\"618\":2}}],[\"dev创建自定义\",{\"1\":{\"616\":1}}],[\"development\",{\"1\":{\"616\":1}}],[\"delegation\",{\"0\":{\"540\":1}}],[\"deleteoriginalassets\",{\"1\":{\"585\":1}}],[\"delete\",{\"1\":{\"269\":2}}],[\"deleted\",{\"1\":{\"120\":3}}],[\"delay\",{\"1\":{\"538\":2,\"580\":1}}],[\"debounce\",{\"1\":{\"535\":1}}],[\"detached\",{\"1\":{\"516\":1}}],[\"destroyed\",{\"0\":{\"471\":1}}],[\"descriptor\",{\"1\":{\"352\":4,\"353\":2}}],[\"descriptor方法的属性描述符\",{\"1\":{\"352\":2}}],[\"desc\",{\"1\":{\"222\":2,\"223\":1,\"352\":1}}],[\"deactivated\",{\"0\":{\"473\":1},\"1\":{\"453\":1,\"463\":1}}],[\"deep\",{\"1\":{\"361\":1}}],[\"demo\",{\"1\":{\"343\":2}}],[\"demo2\",{\"1\":{\"340\":1}}],[\"demo1\",{\"1\":{\"340\":2,\"342\":1}}],[\"decorator\",{\"1\":{\"357\":1,\"358\":1,\"360\":1,\"361\":1,\"362\":1}}],[\"decoration\",{\"1\":{\"222\":1}}],[\"declarations2\",{\"1\":{\"668\":2}}],[\"declarations1\",{\"1\":{\"668\":2}}],[\"declarativerecord\",{\"1\":{\"22\":1,\"32\":1}}],[\"declare\",{\"0\":{\"55\":1},\"1\":{\"55\":4,\"56\":3,\"57\":1,\"109\":2}}],[\"dereference\",{\"1\":{\"85\":1}}],[\"defaultstrat\",{\"1\":{\"482\":1}}],[\"defaultprops\",{\"1\":{\"269\":1}}],[\"defaultvalue=\",{\"1\":{\"202\":1}}],[\"default\",{\"1\":{\"54\":1,\"61\":2,\"77\":1,\"90\":1,\"98\":2,\"99\":2,\"215\":1,\"216\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"241\":1,\"269\":2,\"281\":2,\"302\":1,\"323\":1,\"324\":1,\"325\":1,\"358\":1,\"359\":1,\"360\":3,\"361\":1,\"362\":1,\"386\":1,\"548\":2,\"585\":1,\"674\":1}}],[\"defineconfig\",{\"1\":{\"585\":2}}],[\"definereactive新增属性的响应式\",{\"1\":{\"404\":1}}],[\"defineproperty无法劫持到对象的删除和添加属性的操作\",{\"1\":{\"509\":1}}],[\"defineproperty和proxy实现的区别\",{\"1\":{\"509\":1}}],[\"defineproperty实现的数据响应式\",{\"1\":{\"403\":1}}],[\"defineproperty的语法糖\",{\"1\":{\"351\":1}}],[\"defineproperty数据响应式或者vue3调用proxy监听数据的变化\",{\"1\":{\"302\":1}}],[\"defined\",{\"1\":{\"47\":2}}],[\"define\",{\"1\":{\"47\":5,\"626\":1}}],[\"函数会根据模块id在已安装的模块缓存\",{\"1\":{\"631\":1}}],[\"函数加载背景图片的元素\",{\"1\":{\"569\":1}}],[\"函数合并到\",{\"1\":{\"482\":2}}],[\"函数实现时\",{\"1\":{\"349\":1}}],[\"函数重载\",{\"0\":{\"349\":1}}],[\"函数的执行\",{\"1\":{\"299\":1}}],[\"函数返回的树与旧版本的树进行比较\",{\"1\":{\"297\":1}}],[\"函数式组件如下\",{\"1\":{\"264\":1}}],[\"函数式组件创建的组件通过使用hooks方法也能使之成为有状态组件\",{\"1\":{\"211\":1}}],[\"函数式组件可以视为无状态组件\",{\"1\":{\"208\":1}}],[\"函数式创建\",{\"0\":{\"208\":1},\"1\":{\"207\":1}}],[\"函数第一个参数为props用于接收父组件传递过来的参数\",{\"1\":{\"191\":1}}],[\"函数组件使用usestate更改状态不一定导致重新render\",{\"1\":{\"299\":1}}],[\"函数组件重新渲染\",{\"1\":{\"298\":1}}],[\"函数组件通过usestate这种形式更新数据\",{\"1\":{\"298\":1}}],[\"函数组件通过usestate\",{\"1\":{\"298\":1}}],[\"函数组件也被称为无状态的组件\",{\"1\":{\"253\":1}}],[\"函数组件不得不改为类组件等等\",{\"1\":{\"253\":1}}],[\"函数组件对应如下\",{\"1\":{\"197\":1}}],[\"函数组件就是无状态组件\",{\"1\":{\"194\":1}}],[\"函数组件\",{\"0\":{\"191\":1},\"1\":{\"170\":1,\"191\":1,\"193\":1,\"269\":2}}],[\"函数也有同样的限制\",{\"1\":{\"148\":1}}],[\"函数必须在向浏览器发送任何输出之前调用\",{\"1\":{\"148\":1}}],[\"函数设定\",{\"1\":{\"148\":1}}],[\"函数可以更好地进行四舍五入\",{\"1\":{\"115\":1}}],[\"函数可以注册任意数量的自动加载器\",{\"1\":{\"92\":1}}],[\"函数调用时\",{\"1\":{\"535\":1}}],[\"函数调用\",{\"1\":{\"100\":1}}],[\"函数调用要比静态属性优先\",{\"1\":{\"66\":1}}],[\"函数调用中使用的this值\",{\"1\":{\"29\":1}}],[\"函数表在内的一些用途\",{\"1\":{\"66\":1}}],[\"函数在实际调用之前\",{\"1\":{\"61\":1}}],[\"函数参数值通过值传递\",{\"1\":{\"62\":1}}],[\"函数参数使用尾部逗号\",{\"1\":{\"61\":1}}],[\"函数参数\",{\"0\":{\"61\":1}}],[\"函数\",{\"0\":{\"60\":1},\"1\":{\"47\":1,\"350\":1,\"460\":1,\"482\":2,\"548\":1,\"631\":1}}],[\"函数来获取名称\",{\"1\":{\"47\":1}}],[\"函数两种方法来定义一个常量\",{\"1\":{\"47\":1}}],[\"函数定义处进行声明实例化的时候\",{\"1\":{\"38\":1}}],[\"函数体内有名为arguments的函数或标识符为arguments的词法声明语句\",{\"1\":{\"38\":1}}],[\"函数是箭头函数\",{\"1\":{\"38\":1}}],[\"函数被调用时会触发函数的内部方法\",{\"1\":{\"38\":1}}],[\"函数求值\",{\"0\":{\"38\":1}}],[\"函数声明实例化\",{\"1\":{\"33\":1}}],[\"函数声明和变量声明的绑定名称\",{\"1\":{\"32\":1}}],[\"函数声明的标识符\",{\"1\":{\"22\":1}}],[\"函数对象\",{\"1\":{\"29\":1}}],[\"函数环境记录器\",{\"1\":{\"27\":1}}],[\"函数执行完毕后重置定时器\",{\"1\":{\"538\":1}}],[\"函数执行\",{\"1\":{\"9\":1,\"299\":1}}],[\"只等于它本身\",{\"1\":{\"671\":1}}],[\"只对可见区域进行渲染\",{\"1\":{\"609\":1}}],[\"只在每两秒钟响应一次联想\",{\"1\":{\"539\":1}}],[\"只在update\",{\"1\":{\"427\":2}}],[\"只需窗口调整完后\",{\"1\":{\"536\":1}}],[\"只需用户最后一次输入完\",{\"1\":{\"536\":1}}],[\"只需要将后台的小程序切换到前台\",{\"1\":{\"527\":1}}],[\"只需要将旧集合中节点的位置进行移动\",{\"1\":{\"232\":1}}],[\"只需要在对应元素或组件中ref属性\",{\"1\":{\"290\":1}}],[\"只需要在子组件标签内传递参数\",{\"1\":{\"154\":1}}],[\"只需要配置webpack配置文件中\",{\"1\":{\"223\":1}}],[\"只调用一次\",{\"1\":{\"427\":2}}],[\"只影响实例本身和使用插槽的子组件\",{\"1\":{\"404\":1}}],[\"只要有一台电脑充当服务器的角色\",{\"1\":{\"374\":1}}],[\"只要点击了\",{\"1\":{\"298\":1}}],[\"只是用来改善少数营销页面\",{\"1\":{\"598\":1}}],[\"只是多个函数的声明\",{\"1\":{\"349\":1}}],[\"只是在这个统一的事件监听器上插入或删除一些对象\",{\"1\":{\"240\":1}}],[\"只是在前者加上了unsafe\",{\"1\":{\"186\":1}}],[\"只能理解javascript和json文件\",{\"1\":{\"635\":1}}],[\"只能在类内部使用\",{\"1\":{\"341\":1}}],[\"只能通过外部组件传入新的props来重新渲染子组件\",{\"1\":{\"311\":1}}],[\"只能用于函数组件\",{\"1\":{\"281\":1}}],[\"只能支持\",{\"1\":{\"119\":1}}],[\"只提供了\",{\"1\":{\"261\":1}}],[\"只提供抽象定义\",{\"1\":{\"42\":1}}],[\"只负责渲染的一些工作\",{\"1\":{\"253\":1}}],[\"只负责根据传入的props来展示视图\",{\"1\":{\"208\":1}}],[\"只作用于当前组件\",{\"1\":{\"223\":1}}],[\"只不过要用适当的\",{\"1\":{\"147\":1}}],[\"只读修饰符\",{\"1\":{\"341\":1}}],[\"只读属性并不会妨碍内部可变性\",{\"1\":{\"88\":1}}],[\"只读\",{\"0\":{\"88\":1}}],[\"只会执行一次\",{\"1\":{\"537\":1}}],[\"只会被创建一次\",{\"1\":{\"508\":1}}],[\"只会对相同层级的节点进行比较\",{\"1\":{\"230\":1}}],[\"只会监听数据的变化\",{\"1\":{\"159\":1}}],[\"只会向每个声明的属性添加\",{\"1\":{\"83\":1}}],[\"只会处理declaration\",{\"1\":{\"22\":1}}],[\"只有受影响的模块需要重新加载\",{\"1\":{\"632\":1}}],[\"只有主线程执行完才会去检查事件队列中的任务是否需要执行\",{\"1\":{\"606\":1}}],[\"只有旧节点有子节点\",{\"1\":{\"422\":1}}],[\"只有新节点有子节点\",{\"1\":{\"422\":1}}],[\"只有一个原始版仓库\",{\"1\":{\"374\":1}}],[\"只有首次会触发foo\",{\"1\":{\"298\":1}}],[\"只有删除和创建操作\",{\"1\":{\"230\":1}}],[\"只有删除\",{\"1\":{\"230\":1}}],[\"只有两种方法可以访问\",{\"1\":{\"147\":1}}],[\"只有实现了\",{\"1\":{\"127\":1}}],[\"只有在加载了这些扩展库时才会出现\",{\"1\":{\"48\":1}}],[\"只有执行到对应的位置\",{\"1\":{\"22\":1}}],[\"不具有标识的值\",{\"1\":{\"671\":1}}],[\"不一样\",{\"1\":{\"638\":1}}],[\"不一定触发\",{\"1\":{\"299\":1}}],[\"不包含\",{\"1\":{\"576\":1}}],[\"不包含bigint\",{\"1\":{\"330\":1}}],[\"不进行强缓存\",{\"1\":{\"556\":1}}],[\"不强制缓存\",{\"1\":{\"556\":1}}],[\"不需要node\",{\"1\":{\"598\":1}}],[\"不需要冒泡\",{\"1\":{\"540\":1}}],[\"不需要深度遍历\",{\"1\":{\"509\":1}}],[\"不使用的内容都会被摇掉\",{\"1\":{\"508\":1}}],[\"不使用key会依次比较\",{\"1\":{\"459\":1}}],[\"不使用key比使用key的性能\",{\"1\":{\"233\":1}}],[\"不匹配则新建\",{\"1\":{\"460\":1}}],[\"不发生dom操作\",{\"1\":{\"459\":7}}],[\"不缓存\",{\"1\":{\"454\":1}}],[\"不可更改\",{\"1\":{\"377\":1}}],[\"不可变的绑定\",{\"1\":{\"35\":1}}],[\"不管\",{\"1\":{\"298\":1}}],[\"不写key反而性能和效率更高\",{\"1\":{\"273\":1}}],[\"不加key\",{\"1\":{\"233\":2}}],[\"不满足maxindex<\",{\"1\":{\"232\":2}}],[\"不操作\",{\"1\":{\"232\":1}}],[\"不方便动态来修改某些样式\",{\"1\":{\"223\":1}}],[\"不要再\",{\"1\":{\"215\":1}}],[\"不要以任何方式改变原始组件\",{\"1\":{\"215\":1}}],[\"不要在\",{\"1\":{\"178\":1}}],[\"不涉及对state状态的操作\",{\"1\":{\"208\":1}}],[\"不受控制\",{\"1\":{\"203\":1}}],[\"不像类组件中调用setstate\",{\"1\":{\"194\":1}}],[\"不建议在该周期方法中进行深层比较\",{\"1\":{\"181\":1}}],[\"不论是props变化还是state变化\",{\"1\":{\"177\":1}}],[\"不会触发组件的生命周期\",{\"1\":{\"447\":1}}],[\"不会跨层级比较\",{\"1\":{\"421\":1}}],[\"不会影响当前组件的后代组件\",{\"1\":{\"223\":1}}],[\"不会随意污染其他组件内的原生\",{\"1\":{\"219\":1}}],[\"不会尝试将值转换为特定类型\",{\"1\":{\"150\":1}}],[\"不会改变传递给脚本中的变量名\",{\"1\":{\"149\":1}}],[\"不会发生转义和插值\",{\"1\":{\"123\":1}}],[\"不会处理函数和类中的\",{\"1\":{\"22\":1}}],[\"不应拿\",{\"1\":{\"118\":1}}],[\"不过\",{\"1\":{\"576\":1}}],[\"不过期\",{\"1\":{\"520\":1}}],[\"不过还是有迂回的方法来比较浮点数值的\",{\"1\":{\"117\":1}}],[\"不过很多常量都是由不同的扩展库定义的\",{\"1\":{\"48\":1}}],[\"不是\",{\"1\":{\"112\":1,\"149\":1}}],[\"不是所有语句都可计时\",{\"1\":{\"56\":1}}],[\"不区分大小写\",{\"1\":{\"111\":1}}],[\"不能跟8\",{\"1\":{\"701\":1}}],[\"不能跟八进制数\",{\"1\":{\"701\":2}}],[\"不能包含以下之一\",{\"1\":{\"699\":1}}],[\"不能使用yeild\",{\"1\":{\"676\":1}}],[\"不能使用连接符\",{\"1\":{\"223\":1}}],[\"不能直接包裹你想要切换的组件\",{\"1\":{\"324\":1}}],[\"不能在函数组件上使用ref属性\",{\"1\":{\"293\":1}}],[\"不能保管组件的状态\",{\"1\":{\"194\":1}}],[\"不能把它放在函数或类的定义之前\",{\"1\":{\"100\":1}}],[\"不能传入此类变量\",{\"1\":{\"67\":1}}],[\"不存在\",{\"1\":{\"100\":1}}],[\"不全等于\",{\"1\":{\"102\":1}}],[\"不全等\",{\"1\":{\"97\":1,\"102\":1}}],[\"不等于\",{\"1\":{\"97\":3,\"102\":2}}],[\"不等于初始化\",{\"1\":{\"22\":1}}],[\"不等\",{\"1\":{\"97\":2,\"102\":2}}],[\"不仅限于输出\",{\"1\":{\"70\":1}}],[\"不支持无符号的\",{\"1\":{\"113\":1}}],[\"不支持用户定义类型别名\",{\"1\":{\"110\":1}}],[\"不支持静态属性\",{\"1\":{\"88\":1}}],[\"不支持多重继承\",{\"1\":{\"81\":1}}],[\"不支持\",{\"1\":{\"65\":1,\"623\":1}}],[\"不允许动态指定\",{\"1\":{\"65\":1}}],[\"不同的webpack版本和配置可能会生成略有不同的manifest数据\",{\"1\":{\"632\":1}}],[\"不同的执行上下文可能有不同的realm\",{\"1\":{\"10\":1}}],[\"不同浏览器的缓存机制不同\",{\"1\":{\"561\":1}}],[\"不同类型的节点\",{\"1\":{\"459\":1}}],[\"不同点\",{\"0\":{\"447\":1}}],[\"不同点是\",{\"1\":{\"54\":1}}],[\"不同时使用使用在同一个标签上\",{\"1\":{\"444\":1}}],[\"不同状态的文件在git中处于不同的工作区域\",{\"1\":{\"375\":1}}],[\"不为空\",{\"1\":{\"37\":1}}],[\"创建compiler\",{\"1\":{\"622\":1}}],[\"创建compiler对象\",{\"1\":{\"622\":1}}],[\"创建documentfragment\",{\"1\":{\"608\":1}}],[\"创建watcher实例\",{\"1\":{\"501\":1}}],[\"创建vue实例对象\",{\"1\":{\"463\":1}}],[\"创建新节点\",{\"1\":{\"460\":1}}],[\"创建新的\",{\"1\":{\"231\":1}}],[\"创建新的环境记录器loopenv\",{\"1\":{\"37\":1}}],[\"创建新的声明式环境记录器blockenv\",{\"1\":{\"34\":1}}],[\"创建newstrtidx和newendidx之间的所有节点\",{\"1\":{\"421\":1}}],[\"创建b的真实节点\",{\"1\":{\"421\":1}}],[\"创建或在当前目录初始化一个git代码库\",{\"1\":{\"378\":1}}],[\"创建ref的形式有四种种\",{\"1\":{\"289\":1}}],[\"创建refs\",{\"0\":{\"289\":1}}],[\"创建真实dom节点\",{\"1\":{\"269\":1}}],[\"创建地图\",{\"1\":{\"263\":1}}],[\"创建标记\",{\"1\":{\"263\":2}}],[\"创建操作\",{\"1\":{\"230\":1}}],[\"创建一个新的对象\",{\"1\":{\"404\":1}}],[\"创建一个style\",{\"1\":{\"224\":1}}],[\"创建一个简单的数组\",{\"1\":{\"125\":1}}],[\"创建的方式过于冗杂\",{\"1\":{\"211\":1}}],[\"创建的函数环境记录器的outenv就会使用这个值\",{\"1\":{\"38\":1}}],[\"创建\",{\"0\":{\"210\":1},\"1\":{\"207\":1,\"291\":1,\"463\":1}}],[\"创建阶段主要分成了以下几个生命周期方法\",{\"1\":{\"175\":1}}],[\"创建阶段\",{\"0\":{\"175\":1},\"1\":{\"174\":1}}],[\"创建h1标签\",{\"1\":{\"162\":1}}],[\"创建虚拟dom目的就是为了更好将虚拟的节点渲染到页面视图中\",{\"1\":{\"162\":1}}],[\"创建arguments对象\",{\"1\":{\"38\":1}}],[\"创建函数的执行上下文以及函数环境记录器\",{\"1\":{\"38\":1}}],[\"创建记录器\",{\"1\":{\"37\":2}}],[\"创建此环境记录的函数对象\",{\"1\":{\"29\":1}}],[\"创建ecmascript代码执行上下文\",{\"1\":{\"21\":1}}],[\"创建全局执行上下文\",{\"1\":{\"19\":1}}],[\"每条产生式的目标符实例都可以通过调用自身的语法导向操作\",{\"1\":{\"667\":1}}],[\"每页\",{\"1\":{\"608\":1}}],[\"每页多少条\",{\"1\":{\"606\":1,\"608\":1}}],[\"每调用usehook一次都会生成一份独立的状态\",{\"1\":{\"258\":1}}],[\"每一个块就是组件\",{\"1\":{\"261\":1}}],[\"每一个变量为一个元素\",{\"1\":{\"143\":1}}],[\"每一次移动都表示\",{\"1\":{\"96\":2}}],[\"每一段脚本执行前\",{\"1\":{\"20\":1}}],[\"每次都会协商缓存\",{\"1\":{\"556\":1}}],[\"每次冷启动时\",{\"1\":{\"527\":1}}],[\"每次组件渲染时\",{\"1\":{\"455\":1}}],[\"每次路由跳转都要做权限判断\",{\"1\":{\"392\":1}}],[\"每次路由跳转都要做判断\",{\"1\":{\"392\":3}}],[\"每次路由跳转前做校验\",{\"1\":{\"392\":1}}],[\"每次只做一小部分\",{\"1\":{\"170\":1}}],[\"每次\",{\"1\":{\"56\":1}}],[\"每个部分都会相对于当前目录解析\",{\"1\":{\"639\":1}}],[\"每个模块都拥有小于完整程序的体积\",{\"1\":{\"625\":1}}],[\"每个页面可以看成一个pagemodel\",{\"1\":{\"521\":1}}],[\"每个阶段包含多个钩子函数\",{\"1\":{\"463\":1}}],[\"每个组件的实例都会共用一个内存地址\",{\"1\":{\"417\":1}}],[\"每个组件都是具有独立功能的\",{\"1\":{\"264\":1}}],[\"每个组件都需要重复写componentwillmount中的代码\",{\"1\":{\"216\":1}}],[\"每个计算机都是一个完整仓库\",{\"1\":{\"371\":1}}],[\"每个小的组件仅仅包含自身的逻辑\",{\"1\":{\"264\":1}}],[\"每个功能都包裹在函数中\",{\"1\":{\"258\":1}}],[\"每个生命周期函数中可能会包含着各种互不相关的逻辑在里面\",{\"1\":{\"253\":1}}],[\"每个节点在对应的层级用唯一的key作为标识\",{\"1\":{\"232\":1}}],[\"每个\",{\"1\":{\"170\":3}}],[\"每个环境记录器都有一个\",{\"1\":{\"26\":1}}],[\"每个agent至多只有一个正在实际执行代码的执行上下文\",{\"1\":{\"10\":1}}],[\"每个agent包含一个执行上下文栈\",{\"1\":{\"7\":1}}],[\"每个agent对于一个js程序\",{\"1\":{\"7\":1}}],[\"accept\",{\"1\":{\"585\":2}}],[\"activated\",{\"0\":{\"472\":1},\"1\":{\"453\":1,\"463\":1}}],[\"active的class\",{\"1\":{\"323\":1}}],[\"active的class执行动画\",{\"1\":{\"323\":1}}],[\"active这一系列勾子\",{\"1\":{\"322\":1}}],[\"active\",{\"1\":{\"241\":1,\"322\":1,\"323\":2,\"324\":2,\"325\":2}}],[\"action=\",{\"1\":{\"147\":2}}],[\"action\",{\"1\":{\"98\":4,\"99\":3}}],[\"available\",{\"1\":{\"574\":1}}],[\"avatar\",{\"1\":{\"268\":2}}],[\"ajax\",{\"1\":{\"534\":1}}],[\"attached\",{\"1\":{\"516\":1}}],[\"attrs\",{\"1\":{\"398\":1,\"442\":1,\"443\":1}}],[\"attrs透传\",{\"1\":{\"386\":1}}],[\"attrs与$\",{\"1\":{\"386\":1}}],[\"attributes\",{\"1\":{\"297\":1}}],[\"a触发事件\",{\"1\":{\"386\":1}}],[\"a=1\",{\"1\":{\"354\":1}}],[\"axxx\",{\"1\":{\"344\":1}}],[\"aaa\",{\"1\":{\"298\":1}}],[\"a>\",{\"1\":{\"269\":1}}],[\"a节点下没有了b\",{\"1\":{\"230\":1}}],[\"application\",{\"1\":{\"585\":10}}],[\"apply\",{\"1\":{\"535\":1,\"538\":1,\"645\":1,\"646\":3}}],[\"appsecret\",{\"1\":{\"519\":1}}],[\"app2\",{\"1\":{\"323\":1}}],[\"appendchild\",{\"1\":{\"269\":1,\"541\":1,\"606\":1,\"607\":1,\"608\":2}}],[\"app<\",{\"1\":{\"264\":1}}],[\"app\",{\"1\":{\"222\":4,\"223\":3,\"241\":2,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"293\":1,\"298\":8,\"302\":1,\"442\":2,\"443\":2,\"459\":3,\"518\":5}}],[\"api会在视口中可见元素在两帧之间更改起始位置时报告layout\",{\"1\":{\"570\":1}}],[\"api创建一个\",{\"1\":{\"568\":1}}],[\"api\",{\"0\":{\"645\":1},\"1\":{\"169\":1,\"503\":2,\"574\":1,\"585\":2,\"645\":1}}],[\"a有着局部作用域\",{\"1\":{\"144\":1}}],[\"autoprefixer\",{\"1\":{\"618\":1}}],[\"auto\",{\"1\":{\"221\":1}}],[\"autoglobals\",{\"1\":{\"141\":1}}],[\"autoload\",{\"1\":{\"92\":5}}],[\"amd\",{\"1\":{\"626\":1,\"627\":1}}],[\"amend\",{\"1\":{\"379\":1}}],[\"am\",{\"1\":{\"122\":4}}],[\"abrupt\",{\"1\":{\"660\":1,\"663\":1}}],[\"about\",{\"1\":{\"598\":1}}],[\"abort\",{\"1\":{\"380\":1}}],[\"above\",{\"1\":{\"74\":1}}],[\"abstract\",{\"1\":{\"343\":2,\"657\":1}}],[\"abs\",{\"1\":{\"117\":1}}],[\"age=604800\",{\"1\":{\"556\":1}}],[\"age=18\",{\"1\":{\"352\":1}}],[\"age\",{\"1\":{\"109\":2,\"316\":7,\"335\":2,\"336\":7,\"352\":4,\"556\":1}}],[\"agent标识符\",{\"1\":{\"11\":1}}],[\"agentsignifier\",{\"1\":{\"11\":1}}],[\"agent是程序的执行环境\",{\"1\":{\"8\":1}}],[\"agent集群中的agent可以共享内存\",{\"1\":{\"7\":1}}],[\"algorithm\",{\"1\":{\"585\":2}}],[\"alive缓存的组件\",{\"1\":{\"463\":1}}],[\"alive判断是否需要缓存\",{\"1\":{\"454\":1}}],[\"alive\",{\"0\":{\"453\":1}}],[\"alice\",{\"1\":{\"109\":1}}],[\"all\",{\"1\":{\"323\":2,\"324\":2,\"325\":2}}],[\"allowdynamicproperties\",{\"1\":{\"89\":1}}],[\"alert的内容仍旧是之前的内容\",{\"1\":{\"197\":1}}],[\"alert\",{\"1\":{\"197\":2}}],[\"always\",{\"1\":{\"123\":2}}],[\"al`\",{\"1\":{\"101\":1}}],[\"also\",{\"1\":{\"72\":1,\"120\":1}}],[\"alt=\",{\"1\":{\"551\":1}}],[\"alternate\",{\"1\":{\"169\":1,\"450\":2}}],[\"alt\",{\"1\":{\"19\":1,\"21\":1,\"22\":1,\"26\":1,\"38\":2,\"232\":1,\"374\":1,\"375\":1,\"527\":1}}],[\"as=\",{\"1\":{\"596\":4}}],[\"astelement\",{\"1\":{\"443\":1}}],[\"ast\",{\"1\":{\"443\":1,\"450\":1}}],[\"asyncchunks\",{\"1\":{\"597\":1}}],[\"asynccomponent\",{\"1\":{\"548\":3}}],[\"asyncfactory\",{\"1\":{\"460\":3}}],[\"async\",{\"1\":{\"389\":1,\"460\":1}}],[\"assert\",{\"1\":{\"658\":1,\"660\":1,\"662\":1}}],[\"assets\",{\"1\":{\"627\":1}}],[\"assignable\",{\"1\":{\"335\":1}}],[\"assign\",{\"1\":{\"306\":1,\"404\":2}}],[\"assignmentexpression\",{\"1\":{\"43\":2}}],[\"assignmentexpressionargumentlist\",{\"1\":{\"43\":1}}],[\"associated\",{\"1\":{\"169\":1}}],[\"as\",{\"1\":{\"64\":1,\"120\":1,\"125\":1,\"126\":1,\"128\":1,\"450\":1,\"574\":2}}],[\"address\",{\"1\":{\"377\":1}}],[\"addage\",{\"1\":{\"352\":2}}],[\"add=\",{\"1\":{\"347\":1,\"348\":1}}],[\"addfriend\",{\"1\":{\"325\":2}}],[\"addeventlistener\",{\"1\":{\"236\":1,\"241\":4,\"269\":1,\"305\":1}}],[\"add\",{\"1\":{\"62\":2,\"349\":3,\"352\":2,\"359\":1,\"376\":1,\"379\":2,\"618\":1}}],[\"adult\",{\"1\":{\"54\":2}}],[\"arr\",{\"1\":{\"335\":1}}],[\"array|traversable\",{\"1\":{\"136\":1}}],[\"array数组\",{\"0\":{\"124\":1}}],[\"array类型\",{\"1\":{\"108\":1}}],[\"array\",{\"1\":{\"47\":1,\"64\":1,\"65\":2,\"124\":3,\"125\":6,\"126\":10,\"127\":4,\"128\":1,\"150\":1,\"269\":1,\"330\":1}}],[\"arepropsequal\",{\"1\":{\"281\":2}}],[\"are\",{\"1\":{\"123\":2}}],[\"arnold\",{\"1\":{\"120\":1}}],[\"arg2\",{\"1\":{\"349\":8}}],[\"arg1\",{\"1\":{\"349\":8}}],[\"args\",{\"1\":{\"61\":1,\"538\":2}}],[\"argument\",{\"1\":{\"45\":3,\"61\":1,\"335\":1,\"660\":6}}],[\"argumentlist\",{\"1\":{\"43\":3}}],[\"arguments\",{\"1\":{\"38\":1,\"535\":1,\"538\":1}}],[\"arg\",{\"1\":{\"38\":2,\"61\":2,\"427\":1,\"535\":2}}],[\"animated=\",{\"1\":{\"601\":1}}],[\"animated\",{\"1\":{\"321\":1}}],[\"animals\",{\"1\":{\"47\":1}}],[\"any\",{\"1\":{\"169\":6,\"330\":1,\"352\":1}}],[\"an\",{\"1\":{\"74\":2,\"236\":1,\"302\":2}}],[\"anoymous\",{\"1\":{\"442\":1,\"443\":1}}],[\"anonymous\",{\"1\":{\"67\":1,\"596\":1}}],[\"another\",{\"1\":{\"47\":1,\"74\":1}}],[\"and\",{\"1\":{\"62\":2,\"72\":2,\"96\":1,\"109\":2,\"123\":2,\"574\":1,\"668\":1}}],[\"a\",{\"1\":{\"38\":3,\"45\":1,\"53\":4,\"61\":1,\"62\":2,\"63\":1,\"65\":1,\"73\":2,\"74\":2,\"77\":1,\"109\":1,\"120\":3,\"122\":5,\"124\":2,\"127\":2,\"139\":2,\"143\":1,\"147\":1,\"269\":1,\"302\":1,\"310\":1,\"347\":1,\"348\":3,\"365\":1,\"380\":1,\"386\":1,\"450\":2,\"459\":3,\"460\":8,\"571\":1,\"618\":1,\"631\":4,\"632\":4,\"658\":1,\"659\":2,\"660\":2,\"662\":1}}],[\"await作为关键字使用\",{\"1\":{\"676\":1}}],[\"await\",{\"1\":{\"36\":2,\"674\":1,\"686\":1}}],[\"固有对象\",{\"1\":{\"19\":1}}],[\"⑦\",{\"1\":{\"18\":1}}],[\"⑥\",{\"1\":{\"18\":1}}],[\"7e\",{\"1\":{\"116\":1}}],[\"7\",{\"0\":{\"55\":1},\"1\":{\"18\":1,\"67\":1,\"86\":1,\"87\":1,\"92\":1,\"98\":1,\"113\":1,\"115\":3,\"116\":1,\"125\":1,\"126\":1,\"134\":1,\"136\":1,\"618\":5,\"684\":1,\"703\":1}}],[\"⑤\",{\"1\":{\"18\":1}}],[\"6666\",{\"1\":{\"585\":2}}],[\"6\",{\"1\":{\"18\":1,\"45\":1,\"53\":3,\"67\":1,\"124\":1,\"125\":1,\"233\":2,\"576\":1,\"585\":1,\"618\":2,\"684\":1}}],[\"④\",{\"1\":{\"18\":1}}],[\"txt\",{\"1\":{\"638\":2}}],[\"txt$\",{\"1\":{\"638\":3,\"643\":1}}],[\"ttf\",{\"1\":{\"585\":2}}],[\"ttf$|\",{\"1\":{\"585\":1}}],[\"ttfb\",{\"1\":{\"573\":1,\"574\":3}}],[\"tbt\",{\"1\":{\"575\":1}}],[\"tls\",{\"1\":{\"573\":1}}],[\"t表示渲染插槽的函数\",{\"1\":{\"497\":1}}],[\"ts文件标记js库类型的时候使用命名空间\",{\"1\":{\"356\":1}}],[\"ts为函数添加了额外的功能\",{\"1\":{\"346\":1}}],[\"ts函数\",{\"0\":{\"346\":1}}],[\"ts添加了三种修饰符\",{\"1\":{\"341\":1}}],[\"ts中用接口来定义对象类型\",{\"1\":{\"329\":1}}],[\"tuple\",{\"1\":{\"330\":1}}],[\"timing\",{\"1\":{\"568\":1,\"574\":1}}],[\"timeout=\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"times\",{\"1\":{\"310\":1}}],[\"times`\",{\"1\":{\"256\":4}}],[\"times<\",{\"1\":{\"255\":2,\"256\":2}}],[\"timer=null\",{\"1\":{\"535\":1}}],[\"timerfunc\",{\"1\":{\"491\":1}}],[\"timer\",{\"1\":{\"210\":1,\"535\":3,\"538\":4}}],[\"time\",{\"1\":{\"148\":4}}],[\"title=\",{\"1\":{\"224\":1,\"263\":1}}],[\"title\",{\"1\":{\"222\":2,\"223\":1,\"256\":4,\"263\":1,\"442\":2,\"443\":2}}],[\"tick\",{\"1\":{\"55\":1,\"56\":12,\"210\":2}}],[\"ticks=n\",{\"1\":{\"56\":1}}],[\"ticks=tick\",{\"1\":{\"55\":1}}],[\"ticks=1\",{\"1\":{\"55\":1,\"56\":1}}],[\"ticks\",{\"0\":{\"56\":1},\"1\":{\"55\":1}}],[\"typeerror\",{\"1\":{\"585\":1,\"659\":2}}],[\"type2\",{\"1\":{\"335\":1}}],[\"type1\",{\"1\":{\"335\":1}}],[\"type就没有\",{\"1\":{\"269\":1}}],[\"typeof\",{\"1\":{\"269\":3,\"280\":2,\"302\":2,\"349\":4}}],[\"typeofmode\",{\"1\":{\"169\":1}}],[\"type\",{\"1\":{\"169\":3,\"269\":16,\"297\":1,\"334\":2,\"335\":3,\"336\":7,\"354\":1,\"360\":2,\"568\":1,\"574\":1,\"597\":1}}],[\"type=\",{\"1\":{\"147\":7,\"202\":1,\"596\":1}}],[\"typescript\",{\"0\":{\"328\":1},\"1\":{\"635\":1},\"2\":{\"364\":1}}],[\"types=1\",{\"1\":{\"109\":2}}],[\"types\",{\"1\":{\"55\":1,\"585\":2}}],[\"t|\",{\"1\":{\"109\":1}}],[\"t\",{\"1\":{\"98\":3,\"121\":1,\"334\":1,\"335\":1,\"337\":1,\"700\":1}}],[\"tap\",{\"1\":{\"646\":2}}],[\"tappromise\",{\"1\":{\"585\":1}}],[\"taylor\",{\"1\":{\"261\":1}}],[\"table\",{\"1\":{\"162\":1}}],[\"tag\",{\"1\":{\"71\":3,\"73\":1,\"169\":1,\"398\":1,\"443\":2,\"460\":2}}],[\"tags\",{\"1\":{\"71\":3}}],[\"takes\",{\"1\":{\"61\":1,\"302\":1}}],[\"target对象原型\",{\"1\":{\"352\":3}}],[\"target来避免\",{\"1\":{\"241\":1}}],[\"target\",{\"1\":{\"38\":3,\"241\":2,\"352\":6,\"353\":2,\"541\":1,\"552\":3}}],[\"toplevellexicallyscopeddeclarations\",{\"1\":{\"668\":2}}],[\"touch\",{\"1\":{\"407\":1}}],[\"tortoisehg是一个免费的分布式源代码管理工具\",{\"1\":{\"373\":1}}],[\"tortoisesvn是一款非常易于使用的跨平台的版本控制\",{\"1\":{\"369\":1}}],[\"todo\",{\"1\":{\"362\":1}}],[\"total\",{\"1\":{\"359\":2,\"606\":4,\"607\":4,\"608\":4}}],[\"tolocalelowercase\",{\"1\":{\"269\":1}}],[\"to\",{\"1\":{\"53\":1,\"71\":3,\"72\":2,\"120\":1,\"302\":1,\"317\":1,\"335\":1,\"618\":10,\"644\":1,\"662\":1}}],[\"toboolean方法的抽象定义\",{\"1\":{\"45\":1}}],[\"trim\",{\"1\":{\"389\":1}}],[\"tree<t>\",{\"1\":{\"334\":1}}],[\"tree<t>=\",{\"1\":{\"334\":1}}],[\"tree层级\",{\"0\":{\"230\":1},\"1\":{\"229\":1}}],[\"treated\",{\"1\":{\"123\":2}}],[\"truth\",{\"1\":{\"112\":1}}],[\"true\",{\"1\":{\"18\":1,\"45\":1,\"54\":1,\"72\":2,\"90\":1,\"97\":9,\"98\":6,\"102\":5,\"112\":3,\"117\":1,\"118\":1,\"124\":1,\"147\":1,\"203\":7,\"223\":1,\"236\":1,\"280\":2,\"323\":2,\"324\":1,\"352\":1,\"360\":1,\"361\":2,\"568\":1,\"574\":1,\"585\":1,\"601\":1,\"638\":1,\"670\":1}}],[\"translate\",{\"1\":{\"324\":4,\"325\":4}}],[\"translatex\",{\"1\":{\"323\":4}}],[\"transformif\",{\"1\":{\"450\":1}}],[\"transformif结构化指令\",{\"1\":{\"450\":1}}],[\"transform\",{\"1\":{\"323\":4,\"324\":4,\"325\":4}}],[\"transitiongroup>\",{\"1\":{\"325\":1}}],[\"transitiongroup在感知children发生变化的时候\",{\"1\":{\"325\":1}}],[\"transitiongroup\",{\"0\":{\"325\":1},\"1\":{\"322\":1,\"325\":1}}],[\"transition\",{\"1\":{\"321\":1,\"322\":1,\"323\":2,\"324\":3,\"325\":3,\"449\":7}}],[\"traversable\",{\"1\":{\"127\":1}}],[\"traversable|array\",{\"1\":{\"110\":1}}],[\"trait\",{\"1\":{\"49\":5,\"92\":1}}],[\"try\",{\"1\":{\"47\":1,\"236\":1,\"585\":2}}],[\"thorw的代换式\",{\"1\":{\"688\":1}}],[\"that\",{\"1\":{\"618\":1}}],[\"throwstatement\",{\"1\":{\"688\":1}}],[\"throwcompletion\",{\"1\":{\"659\":1}}],[\"throw\",{\"1\":{\"659\":1,\"688\":1}}],[\"throttle\",{\"1\":{\"538\":1}}],[\"threshold\",{\"1\":{\"585\":2}}],[\"then\",{\"1\":{\"548\":1,\"549\":1}}],[\"these\",{\"1\":{\"71\":1}}],[\"the\",{\"1\":{\"45\":1,\"71\":1,\"72\":3,\"73\":1,\"169\":1,\"618\":3,\"668\":1}}],[\"this\",{\"1\":{\"45\":1,\"62\":2,\"66\":1,\"71\":3,\"72\":3,\"73\":2,\"74\":4,\"109\":2,\"120\":4,\"122\":2,\"155\":10,\"156\":5,\"157\":1,\"169\":1,\"170\":3,\"190\":1,\"193\":1,\"197\":7,\"201\":3,\"202\":4,\"210\":6,\"215\":2,\"216\":13,\"236\":10,\"241\":9,\"244\":4,\"246\":5,\"247\":3,\"248\":6,\"249\":3,\"255\":4,\"256\":6,\"261\":2,\"264\":1,\"269\":2,\"273\":6,\"280\":1,\"289\":1,\"290\":2,\"291\":3,\"292\":3,\"298\":5,\"302\":7,\"304\":4,\"305\":4,\"306\":11,\"310\":5,\"311\":2,\"316\":6,\"317\":4,\"323\":4,\"324\":6,\"325\":5,\"339\":1,\"352\":4,\"359\":3,\"362\":2,\"386\":3,\"404\":2,\"442\":1,\"443\":1,\"444\":1,\"459\":1,\"482\":3,\"535\":1,\"538\":1,\"618\":1}}],[\"thisbindingstatus\",{\"1\":{\"29\":1}}],[\"thisvalue\",{\"1\":{\"29\":1}}],[\"this绑定\",{\"1\":{\"29\":1}}],[\"teleport\",{\"1\":{\"507\":1}}],[\"template\",{\"1\":{\"443\":1,\"597\":1,\"643\":1,\"644\":1}}],[\"template>\",{\"1\":{\"386\":2,\"443\":1,\"548\":1,\"601\":1}}],[\"templatemap\",{\"1\":{\"11\":1}}],[\"test=keyof\",{\"1\":{\"335\":1}}],[\"testcomponent\",{\"1\":{\"201\":1}}],[\"testing\",{\"1\":{\"148\":2}}],[\"test\",{\"1\":{\"73\":2,\"74\":4,\"88\":2,\"144\":1,\"147\":1,\"221\":2,\"224\":2,\"379\":1,\"585\":1,\"599\":1,\"638\":1,\"643\":1,\"644\":1}}],[\"teenager\",{\"1\":{\"54\":2}}],[\"textarea\",{\"1\":{\"571\":1}}],[\"textno\",{\"1\":{\"73\":1}}],[\"text\",{\"1\":{\"19\":1,\"21\":1,\"22\":1,\"26\":1,\"38\":2,\"73\":1,\"147\":4,\"222\":1,\"232\":1,\"269\":5,\"374\":1,\"375\":1,\"460\":1,\"527\":1,\"585\":6}}],[\"ix\",{\"1\":{\"622\":1}}],[\"iv\",{\"1\":{\"622\":1}}],[\"iii\",{\"1\":{\"622\":1}}],[\"i<l\",{\"1\":{\"482\":1}}],[\"i<10\",{\"1\":{\"37\":1}}],[\"irecord\",{\"1\":{\"336\":2}}],[\"ireadonly\",{\"1\":{\"336\":2}}],[\"ipick\",{\"1\":{\"336\":2}}],[\"ipartial\",{\"1\":{\"336\":2}}],[\"iperson>\",{\"1\":{\"336\":1}}],[\"iperson\",{\"1\":{\"335\":3,\"336\":2}}],[\"ilength\",{\"1\":{\"335\":1}}],[\"ie8\",{\"1\":{\"623\":1}}],[\"ie对dns记录默认的缓存时间为30分钟\",{\"1\":{\"561\":1}}],[\"ie\",{\"1\":{\"270\":1}}],[\"immediate\",{\"1\":{\"361\":1}}],[\"img元素\",{\"1\":{\"569\":1}}],[\"img\",{\"1\":{\"268\":2,\"552\":3,\"626\":1}}],[\"image\",{\"1\":{\"147\":3,\"224\":1,\"551\":1,\"585\":6,\"596\":1}}],[\"import\",{\"1\":{\"202\":1,\"215\":1,\"216\":2,\"221\":1,\"222\":3,\"223\":3,\"224\":2,\"241\":1,\"255\":1,\"256\":1,\"281\":1,\"302\":1,\"324\":1,\"325\":2,\"358\":2,\"360\":1,\"361\":1,\"362\":1,\"548\":3,\"549\":1,\"574\":1,\"585\":2,\"597\":1,\"623\":1,\"626\":2,\"635\":1,\"636\":1,\"637\":1,\"639\":7}}],[\"import和\",{\"1\":{\"28\":1}}],[\"implements\",{\"1\":{\"103\":1,\"109\":1}}],[\"identifiernamebut\",{\"1\":{\"685\":1}}],[\"identifier\",{\"1\":{\"685\":1}}],[\"identifier词法的产生式\",{\"1\":{\"685\":1}}],[\"idxinold\",{\"1\":{\"460\":4}}],[\"id=\",{\"1\":{\"162\":1,\"442\":1,\"443\":1,\"459\":1,\"541\":2,\"606\":1,\"607\":1,\"608\":1}}],[\"id=3\",{\"1\":{\"147\":1}}],[\"id\",{\"1\":{\"109\":8,\"147\":1,\"162\":1,\"256\":2,\"442\":1,\"443\":1}}],[\"ignored\",{\"1\":{\"72\":2}}],[\"item=>\",{\"1\":{\"444\":1}}],[\"items\",{\"1\":{\"444\":1}}],[\"item\",{\"1\":{\"273\":2,\"325\":2,\"442\":4,\"443\":4,\"444\":1,\"459\":3}}],[\"iterable\",{\"1\":{\"110\":1,\"136\":3}}],[\"it\",{\"1\":{\"71\":1,\"120\":1,\"574\":1}}],[\"isintersecting\",{\"1\":{\"552\":1}}],[\"is=\",{\"1\":{\"548\":1}}],[\"isundef\",{\"1\":{\"460\":5}}],[\"isasyncplaceholder\",{\"1\":{\"460\":1}}],[\"isarray\",{\"1\":{\"269\":1}}],[\"istrue\",{\"1\":{\"460\":1}}],[\"isdef\",{\"1\":{\"460\":3}}],[\"iscomment\",{\"1\":{\"460\":2}}],[\"isroot\",{\"1\":{\"450\":2}}],[\"isreactcomponent\",{\"1\":{\"269\":1}}],[\"isshow\",{\"1\":{\"442\":1,\"443\":2}}],[\"isset\",{\"1\":{\"99\":1,\"148\":1}}],[\"ison\",{\"1\":{\"324\":6}}],[\"isonline\",{\"1\":{\"256\":1}}],[\"isopen\",{\"1\":{\"294\":1}}],[\"iso\",{\"1\":{\"57\":1}}],[\"is\",{\"1\":{\"45\":3,\"53\":2,\"62\":2,\"66\":1,\"71\":2,\"72\":3,\"73\":2,\"74\":5,\"85\":2,\"109\":5,\"118\":1,\"120\":2,\"122\":2,\"140\":1,\"150\":5,\"280\":3,\"335\":1,\"658\":1,\"660\":2,\"662\":1}}],[\"iswithenvironment\",{\"1\":{\"31\":1}}],[\"i++\",{\"1\":{\"26\":1,\"37\":1,\"269\":1,\"280\":1,\"482\":1,\"606\":1,\"607\":1,\"608\":1}}],[\"i\",{\"1\":{\"26\":4,\"37\":1,\"120\":1,\"122\":4,\"269\":3,\"280\":5,\"482\":2,\"606\":3,\"607\":3,\"608\":3}}],[\"iframe\",{\"1\":{\"576\":3}}],[\"ifconditionalexpression\",{\"1\":{\"450\":1}}],[\"ifnode\",{\"1\":{\"450\":5}}],[\"if|else\",{\"1\":{\"450\":2}}],[\"if原理\",{\"0\":{\"450\":1}}],[\"if的状态更改\",{\"1\":{\"447\":1}}],[\"if是真正的条件渲染\",{\"1\":{\"447\":1}}],[\"if切换有一个局部编译\",{\"1\":{\"447\":1}}],[\"if隐藏是将dom元素整个添加或删除\",{\"1\":{\"447\":1}}],[\"if优先级高于v\",{\"1\":{\"444\":1}}],[\"ifprocessed\",{\"1\":{\"443\":1}}],[\"if指令\",{\"1\":{\"443\":1}}],[\"if高\",{\"1\":{\"442\":1}}],[\"if=\",{\"1\":{\"442\":1,\"443\":1,\"446\":1,\"450\":2}}],[\"if和v\",{\"0\":{\"442\":1,\"443\":1,\"445\":1},\"1\":{\"446\":1}}],[\"if\",{\"0\":{\"441\":1},\"1\":{\"18\":1,\"45\":2,\"47\":1,\"53\":4,\"56\":1,\"71\":2,\"72\":2,\"85\":2,\"90\":1,\"98\":2,\"99\":2,\"100\":1,\"109\":2,\"117\":1,\"147\":1,\"148\":1,\"236\":2,\"241\":1,\"269\":6,\"280\":6,\"349\":2,\"392\":1,\"443\":8,\"444\":1,\"449\":2,\"450\":5,\"460\":9,\"482\":2,\"483\":3,\"501\":1,\"535\":1,\"538\":1,\"548\":1,\"552\":1,\"557\":2,\"558\":1,\"585\":1,\"606\":1,\"607\":1,\"608\":1,\"660\":1}}],[\"invalid\",{\"1\":{\"703\":1}}],[\"invariant\",{\"1\":{\"302\":1}}],[\"info\",{\"1\":{\"618\":1}}],[\"inheritattrs\",{\"1\":{\"386\":2}}],[\"inject\",{\"1\":{\"386\":2,\"483\":3,\"597\":1,\"599\":1}}],[\"inp\",{\"1\":{\"572\":2,\"573\":1}}],[\"inprocess\",{\"1\":{\"360\":1}}],[\"input=\",{\"1\":{\"386\":1}}],[\"inputref\",{\"1\":{\"202\":3}}],[\"input\",{\"1\":{\"147\":1,\"386\":2,\"571\":1,\"580\":1}}],[\"in=\",{\"1\":{\"323\":1}}],[\"installedmodules\",{\"1\":{\"631\":1}}],[\"install\",{\"1\":{\"585\":2,\"618\":4}}],[\"instability\",{\"1\":{\"570\":1}}],[\"instance\",{\"1\":{\"196\":2,\"317\":2}}],[\"instanceof也可用于确定一个变量是不是实现了某个接口的对象的实例\",{\"1\":{\"103\":1}}],[\"instanceof\",{\"1\":{\"103\":8,\"109\":2}}],[\"inst\",{\"1\":{\"280\":1}}],[\"insertbefore\",{\"1\":{\"460\":1}}],[\"insertedvnodequeue\",{\"1\":{\"460\":4}}],[\"inserted\",{\"1\":{\"358\":1,\"427\":1}}],[\"insertmovie\",{\"1\":{\"273\":2}}],[\"insert\",{\"1\":{\"232\":1}}],[\"indexpath\",{\"1\":{\"599\":1}}],[\"indexof\",{\"1\":{\"360\":1}}],[\"index参数数组中的位置\",{\"1\":{\"352\":1}}],[\"index\",{\"1\":{\"150\":1,\"169\":1,\"232\":1,\"273\":1,\"274\":1,\"306\":2,\"325\":2,\"352\":2,\"585\":8,\"597\":3,\"599\":2,\"606\":2,\"607\":2,\"608\":2,\"616\":1,\"643\":1,\"644\":1}}],[\"increment\",{\"1\":{\"298\":4}}],[\"inc\",{\"1\":{\"142\":2}}],[\"include\",{\"1\":{\"73\":1,\"100\":1,\"142\":2,\"453\":1,\"597\":1}}],[\"intersectionobserver\",{\"1\":{\"552\":1}}],[\"interval\",{\"1\":{\"210\":2}}],[\"interface\",{\"1\":{\"92\":1,\"103\":1,\"109\":2,\"335\":1,\"336\":2,\"355\":1}}],[\"integer\",{\"1\":{\"127\":1}}],[\"intdiv\",{\"1\":{\"115\":1}}],[\"int整型\",{\"0\":{\"113\":1}}],[\"int类型\",{\"1\":{\"108\":1}}],[\"int\",{\"1\":{\"87\":2,\"97\":1,\"109\":5,\"113\":7,\"114\":2,\"115\":4,\"150\":1}}],[\"intrinsics\",{\"1\":{\"11\":1}}],[\"initialised\",{\"1\":{\"618\":1}}],[\"initialising\",{\"1\":{\"618\":1}}],[\"initializeropt\",{\"1\":{\"683\":1}}],[\"initializer\",{\"1\":{\"673\":1,\"683\":1}}],[\"initializeenvironment\",{\"1\":{\"33\":1}}],[\"initialized或\",{\"1\":{\"29\":1}}],[\"initdata方法\",{\"1\":{\"486\":1}}],[\"initstate方法完成props\",{\"1\":{\"486\":1}}],[\"initstate\",{\"1\":{\"486\":1}}],[\"init方法\",{\"1\":{\"486\":1,\"487\":1}}],[\"initmixin\",{\"1\":{\"482\":1}}],[\"init\",{\"1\":{\"378\":2,\"379\":1,\"486\":1,\"618\":3}}],[\"init创建或者git\",{\"1\":{\"375\":1}}],[\"ini\",{\"1\":{\"71\":1}}],[\"innertext\",{\"1\":{\"606\":1,\"607\":1,\"608\":1}}],[\"innerhtml\",{\"1\":{\"290\":1,\"541\":1}}],[\"inner\",{\"1\":{\"18\":2}}],[\"in\",{\"0\":{\"224\":1},\"1\":{\"14\":1,\"36\":2,\"44\":3,\"45\":1,\"67\":1,\"71\":1,\"80\":6,\"120\":1,\"220\":1,\"224\":1,\"225\":1,\"324\":3,\"336\":2,\"442\":1,\"443\":1,\"459\":1,\"482\":2,\"483\":1,\"618\":1,\"673\":3,\"674\":3}}],[\"5kb\",{\"1\":{\"580\":1}}],[\"50\",{\"1\":{\"575\":2}}],[\"500ms\",{\"1\":{\"323\":2,\"324\":2,\"325\":2}}],[\"500\",{\"1\":{\"323\":1,\"324\":1}}],[\"50px\",{\"1\":{\"224\":1}}],[\"56\",{\"1\":{\"125\":1}}],[\"567\",{\"1\":{\"113\":1,\"116\":1}}],[\"5714285714286\",{\"1\":{\"115\":1}}],[\"5\",{\"0\":{\"55\":1},\"1\":{\"18\":1,\"26\":1,\"38\":1,\"53\":5,\"54\":4,\"61\":1,\"67\":4,\"85\":2,\"109\":1,\"115\":1,\"124\":2,\"125\":4,\"233\":7,\"256\":4,\"618\":4,\"624\":1,\"626\":1,\"684\":1}}],[\"4~7和八进制数的组合\",{\"1\":{\"701\":1}}],[\"4k\",{\"1\":{\"585\":2}}],[\"444\",{\"1\":{\"273\":1}}],[\"44014c\",{\"1\":{\"221\":1}}],[\"4之后的生命周期\",{\"1\":{\"174\":1}}],[\"456\",{\"1\":{\"109\":2}}],[\"4中引入的\",{\"1\":{\"90\":1}}],[\"42\",{\"1\":{\"79\":1,\"125\":1}}],[\"46\",{\"1\":{\"65\":2}}],[\"404\",{\"1\":{\"705\":1}}],[\"40\",{\"1\":{\"54\":1,\"65\":2}}],[\"4\",{\"0\":{\"55\":1},\"1\":{\"18\":1,\"38\":1,\"64\":1,\"65\":1,\"77\":1,\"86\":1,\"87\":1,\"98\":1,\"108\":1,\"113\":1,\"115\":1,\"116\":1,\"119\":1,\"125\":1,\"233\":5,\"263\":2,\"501\":1,\"618\":4,\"626\":1,\"631\":1,\"684\":1}}],[\"③\",{\"1\":{\"18\":1}}],[\"fmp\",{\"1\":{\"576\":4}}],[\"fcp\",{\"1\":{\"567\":1,\"568\":1,\"569\":2,\"575\":2,\"576\":2}}],[\"fucntion\",{\"1\":{\"460\":1}}],[\"fun\",{\"1\":{\"343\":2}}],[\"func\",{\"1\":{\"132\":1}}],[\"functioncomponent\",{\"1\":{\"269\":2}}],[\"functionalcomponent\",{\"1\":{\"194\":1,\"195\":2}}],[\"functions\",{\"1\":{\"67\":1}}],[\"functionstoinitialize\",{\"1\":{\"22\":1}}],[\"functiondeclarationinstantiation\",{\"1\":{\"33\":1}}],[\"functionobject\",{\"1\":{\"29\":1}}],[\"function\",{\"1\":{\"10\":1,\"18\":2,\"38\":4,\"49\":1,\"56\":3,\"61\":1,\"62\":1,\"64\":1,\"65\":2,\"66\":3,\"67\":6,\"77\":1,\"79\":2,\"80\":2,\"81\":1,\"87\":1,\"88\":1,\"91\":1,\"92\":1,\"109\":7,\"127\":1,\"129\":1,\"130\":1,\"143\":2,\"144\":2,\"154\":1,\"169\":1,\"191\":1,\"193\":1,\"196\":1,\"197\":1,\"208\":1,\"209\":1,\"214\":1,\"215\":2,\"216\":2,\"236\":1,\"255\":1,\"256\":2,\"269\":10,\"280\":2,\"281\":2,\"293\":1,\"297\":1,\"298\":5,\"302\":3,\"345\":1,\"349\":3,\"352\":9,\"353\":4,\"355\":1,\"358\":1,\"362\":1,\"442\":2,\"443\":3,\"444\":1,\"460\":1,\"479\":1,\"480\":1,\"482\":4,\"483\":2,\"535\":2,\"538\":2,\"541\":2,\"549\":1,\"606\":1,\"607\":2,\"608\":2,\"645\":1,\"703\":1}}],[\"f函数全名为resolvefilter\",{\"1\":{\"438\":1}}],[\"feat\",{\"1\":{\"379\":1}}],[\"fragment\",{\"1\":{\"608\":3}}],[\"framents\",{\"1\":{\"507\":1}}],[\"freeip\",{\"1\":{\"599\":1}}],[\"friends\",{\"1\":{\"325\":4}}],[\"friend\",{\"1\":{\"256\":2,\"325\":5}}],[\"from\",{\"1\":{\"136\":1,\"202\":1,\"215\":1,\"216\":2,\"221\":1,\"222\":2,\"223\":2,\"224\":2,\"241\":1,\"255\":1,\"256\":1,\"281\":1,\"302\":1,\"324\":1,\"325\":2,\"358\":2,\"360\":1,\"361\":1,\"362\":1,\"574\":1,\"585\":2,\"639\":4}}],[\"float浮点型\",{\"0\":{\"116\":1}}],[\"float\",{\"1\":{\"109\":1,\"114\":2,\"115\":3,\"116\":1,\"150\":1}}],[\"float|int\",{\"1\":{\"109\":2}}],[\"float类型\",{\"1\":{\"108\":1}}],[\"flying\",{\"1\":{\"109\":1}}],[\"fly\",{\"1\":{\"109\":4}}],[\"flyable\",{\"1\":{\"109\":3}}],[\"fid\",{\"1\":{\"571\":3,\"572\":2,\"580\":1}}],[\"firefox对dns记录默认的缓存时间为1分钟\",{\"1\":{\"561\":1}}],[\"first\",{\"1\":{\"568\":2,\"580\":1,\"644\":2}}],[\"firsteffect\",{\"1\":{\"169\":1}}],[\"firstcontextdependency\",{\"1\":{\"169\":1}}],[\"fix\",{\"1\":{\"379\":1}}],[\"findidxinold\",{\"1\":{\"460\":1}}],[\"finished\",{\"1\":{\"310\":1}}],[\"final\",{\"1\":{\"74\":1,\"81\":2,\"91\":1}}],[\"filters\",{\"1\":{\"483\":2}}],[\"filters中找出注册的过滤器并返回\",{\"1\":{\"438\":1}}],[\"filter\",{\"1\":{\"269\":1,\"444\":1}}],[\"files\",{\"1\":{\"585\":2,\"618\":1}}],[\"filename\",{\"1\":{\"585\":2,\"597\":1,\"599\":1,\"616\":1,\"644\":1}}],[\"file2\",{\"1\":{\"379\":1}}],[\"file1\",{\"1\":{\"379\":1}}],[\"file\",{\"1\":{\"49\":2,\"100\":4,\"618\":1,\"644\":1}}],[\"fist\",{\"1\":{\"224\":1}}],[\"fiber把渲染更新过程拆分成多个子任务\",{\"1\":{\"170\":1}}],[\"fiber的版本池\",{\"1\":{\"169\":1}}],[\"fiber\",{\"0\":{\"167\":1,\"169\":1},\"1\":{\"169\":14,\"170\":6}}],[\"fade\",{\"1\":{\"323\":5}}],[\"failed\",{\"1\":{\"100\":1}}],[\"fatal\",{\"1\":{\"65\":1}}],[\"false和true\",{\"1\":{\"108\":1}}],[\"false\",{\"1\":{\"45\":1,\"65\":2,\"90\":1,\"98\":2,\"112\":1,\"118\":1,\"203\":7,\"236\":1,\"241\":1,\"279\":1,\"280\":3,\"386\":1,\"460\":2,\"585\":2,\"599\":1,\"606\":1,\"607\":1,\"608\":1}}],[\"found\",{\"1\":{\"705\":1}}],[\"following\",{\"1\":{\"618\":2}}],[\"followed\",{\"1\":{\"197\":2}}],[\"focus\",{\"1\":{\"358\":2}}],[\"fontobject\",{\"1\":{\"585\":2}}],[\"font\",{\"1\":{\"222\":1,\"585\":4,\"596\":2}}],[\"foo=bar\",{\"1\":{\"639\":1}}],[\"foobar\",{\"1\":{\"65\":1}}],[\"foo\",{\"1\":{\"49\":2,\"65\":4,\"66\":5,\"79\":2,\"91\":2,\"122\":1,\"124\":2,\"126\":5,\"129\":5,\"144\":1,\"147\":3,\"148\":1,\"182\":1,\"297\":4,\"298\":11,\"386\":2,\"599\":1,\"616\":2,\"639\":1}}],[\"formalparameters\",{\"1\":{\"686\":1}}],[\"format\",{\"1\":{\"618\":1}}],[\"form>\",{\"1\":{\"147\":2,\"202\":1}}],[\"for优先级高于v\",{\"1\":{\"444\":1}}],[\"for优先级比v\",{\"1\":{\"442\":1}}],[\"for不同\",{\"1\":{\"444\":1}}],[\"forprocessed\",{\"1\":{\"443\":1}}],[\"for指令\",{\"1\":{\"443\":1}}],[\"for置于不同的标签中\",{\"0\":{\"443\":1}}],[\"for=\",{\"1\":{\"442\":1,\"443\":1,\"459\":1}}],[\"for的优先级\",{\"0\":{\"442\":1}}],[\"forwardedref\",{\"1\":{\"215\":3}}],[\"forwardref=\",{\"1\":{\"215\":1}}],[\"forwardref\",{\"1\":{\"215\":6}}],[\"foreach\",{\"1\":{\"53\":1,\"64\":1,\"100\":1,\"125\":1,\"126\":1,\"128\":1,\"136\":1,\"269\":1,\"552\":1}}],[\"forstatement\",{\"1\":{\"37\":1}}],[\"forloopevaluation语义应用的其中一个代换式\",{\"1\":{\"37\":1}}],[\"forloopevaluation\",{\"1\":{\"36\":1}}],[\"for和for\",{\"1\":{\"36\":1}}],[\"for循环在标准中分为\",{\"1\":{\"36\":1}}],[\"for声明实例化\",{\"1\":{\"33\":1}}],[\"fordeclarationbindinginstantiation\",{\"1\":{\"33\":1}}],[\"for\",{\"0\":{\"441\":1},\"1\":{\"26\":1,\"36\":4,\"37\":2,\"53\":1,\"269\":2,\"280\":1,\"443\":1,\"444\":1,\"482\":3,\"483\":1,\"501\":1,\"568\":1,\"606\":1,\"607\":1,\"608\":1,\"618\":4}}],[\"f\",{\"1\":{\"38\":1,\"98\":2,\"121\":1,\"353\":6,\"375\":1,\"459\":3,\"622\":1,\"700\":1}}],[\"fn\",{\"1\":{\"18\":4,\"38\":9,\"535\":2,\"538\":2}}],[\"333\",{\"1\":{\"273\":1}}],[\"30px\",{\"1\":{\"221\":1}}],[\"300\",{\"1\":{\"325\":1}}],[\"300px\",{\"1\":{\"221\":1}}],[\"3000\",{\"1\":{\"197\":2}}],[\"30\",{\"1\":{\"109\":1}}],[\"3\",{\"1\":{\"18\":1,\"38\":2,\"45\":1,\"64\":1,\"65\":1,\"71\":1,\"91\":1,\"108\":1,\"115\":2,\"124\":1,\"125\":1,\"126\":2,\"127\":7,\"144\":3,\"232\":1,\"233\":7,\"335\":1,\"618\":3,\"626\":1,\"629\":1,\"631\":2,\"632\":1,\"684\":1}}],[\"28\",{\"1\":{\"555\":1}}],[\"21\",{\"1\":{\"555\":1}}],[\"24b9da6552252987aa493b52f8696cd6d3b00373\",{\"1\":{\"375\":1}}],[\"222\",{\"1\":{\"273\":1}}],[\"2e3\",{\"1\":{\"116\":1}}],[\"23456780\",{\"1\":{\"117\":1}}],[\"23456789\",{\"1\":{\"117\":1}}],[\"234\",{\"1\":{\"113\":1,\"116\":2}}],[\"26\",{\"1\":{\"113\":1}}],[\"256\",{\"1\":{\"119\":1}}],[\"255\",{\"1\":{\"113\":1,\"139\":1}}],[\"25\",{\"1\":{\"109\":1,\"115\":3,\"336\":1}}],[\"2015\",{\"1\":{\"555\":1}}],[\"2000\",{\"1\":{\"459\":1}}],[\"200px\",{\"1\":{\"221\":1}}],[\"20px\",{\"1\":{\"222\":1}}],[\"20\",{\"1\":{\"65\":1,\"316\":2,\"606\":1,\"607\":1,\"608\":1}}],[\"2\",{\"1\":{\"18\":1,\"38\":2,\"54\":1,\"56\":1,\"64\":1,\"65\":3,\"71\":1,\"83\":1,\"89\":1,\"92\":1,\"96\":2,\"108\":1,\"115\":1,\"124\":1,\"125\":2,\"126\":7,\"127\":7,\"136\":1,\"143\":2,\"148\":1,\"233\":9,\"269\":2,\"306\":1,\"335\":1,\"352\":1,\"443\":1,\"459\":1,\"548\":1,\"585\":2,\"596\":1,\"618\":4,\"626\":1,\"629\":1,\"631\":2,\"632\":2,\"684\":1}}],[\"1~7和八进制数的组合\",{\"1\":{\"701\":1}}],[\"17\",{\"1\":{\"618\":1}}],[\"1已被广泛使用\",{\"1\":{\"555\":1}}],[\"1次插入操作\",{\"1\":{\"459\":2}}],[\"1px\",{\"1\":{\"224\":1}}],[\"16版本之后\",{\"1\":{\"236\":1}}],[\"16\",{\"1\":{\"169\":1,\"236\":1,\"253\":1,\"585\":2,\"698\":1}}],[\"163\",{\"1\":{\"154\":1}}],[\"150px\",{\"1\":{\"224\":4}}],[\"15\",{\"1\":{\"168\":1}}],[\"1+2\",{\"1\":{\"144\":1}}],[\"121\",{\"1\":{\"144\":1}}],[\"128\",{\"1\":{\"139\":1}}],[\"12\",{\"1\":{\"125\":1,\"618\":1}}],[\"123124132\",{\"1\":{\"154\":1}}],[\"123\",{\"1\":{\"109\":2,\"150\":1,\"359\":1}}],[\"1234\",{\"1\":{\"87\":1,\"113\":1}}],[\"1=>\",{\"1\":{\"124\":1}}],[\"10240\",{\"1\":{\"585\":2}}],[\"100px\",{\"1\":{\"342\":1}}],[\"100\",{\"1\":{\"155\":1,\"157\":1,\"323\":2,\"324\":2,\"325\":2}}],[\"100000\",{\"1\":{\"606\":1,\"607\":1,\"608\":1}}],[\"1000\",{\"1\":{\"26\":1,\"155\":1,\"210\":1}}],[\"10\",{\"1\":{\"116\":1,\"298\":2,\"335\":2,\"352\":1,\"618\":1}}],[\"111\",{\"1\":{\"127\":2,\"273\":1}}],[\"11\",{\"1\":{\"67\":2,\"618\":1,\"698\":1}}],[\"19\",{\"1\":{\"54\":2,\"618\":2}}],[\"13\",{\"1\":{\"54\":1,\"624\":1}}],[\"18\",{\"1\":{\"54\":1,\"336\":3,\"585\":2}}],[\"1\",{\"0\":{\"130\":1},\"1\":{\"18\":1,\"26\":1,\"38\":1,\"45\":1,\"55\":1,\"56\":1,\"57\":1,\"64\":1,\"65\":4,\"67\":1,\"71\":1,\"73\":1,\"81\":1,\"86\":1,\"88\":2,\"91\":1,\"96\":7,\"108\":1,\"113\":2,\"115\":1,\"116\":3,\"117\":2,\"124\":3,\"125\":2,\"126\":5,\"127\":8,\"134\":1,\"135\":1,\"136\":1,\"142\":1,\"143\":2,\"148\":3,\"156\":1,\"194\":1,\"210\":1,\"233\":9,\"255\":2,\"256\":2,\"280\":2,\"298\":2,\"306\":11,\"310\":1,\"323\":2,\"324\":2,\"325\":2,\"335\":1,\"359\":2,\"360\":1,\"375\":1,\"404\":1,\"422\":3,\"450\":1,\"555\":2,\"585\":8,\"618\":6,\"622\":2,\"626\":1,\"629\":1,\"631\":2,\"632\":2,\"667\":1,\"698\":2}}],[\"=0\",{\"1\":{\"345\":2,\"482\":1}}],[\"==​​\",{\"1\":{\"501\":1}}],[\"========>\",{\"1\":{\"233\":4}}],[\"===\",{\"1\":{\"97\":1,\"102\":1,\"269\":5,\"280\":5,\"281\":1,\"302\":2,\"349\":4,\"443\":2,\"449\":1,\"460\":5}}],[\"==\",{\"1\":{\"53\":3,\"72\":1,\"97\":2,\"102\":2,\"269\":1,\"280\":7,\"302\":1,\"360\":1,\"535\":1,\"585\":1}}],[\"=oldenv\",{\"1\":{\"34\":1}}],[\"=>rest\",{\"1\":{\"348\":1}}],[\"=>return\",{\"1\":{\"54\":1}}],[\"=>a+b\",{\"1\":{\"348\":1}}],[\"=>a+\",{\"1\":{\"347\":1}}],[\"=>console\",{\"1\":{\"310\":1}}],[\"=>\",{\"1\":{\"26\":1,\"54\":11,\"65\":2,\"124\":6,\"125\":3,\"126\":5,\"127\":2,\"156\":1,\"157\":1,\"169\":1,\"194\":2,\"195\":5,\"197\":2,\"202\":2,\"210\":2,\"215\":1,\"224\":2,\"240\":1,\"241\":6,\"247\":1,\"249\":1,\"255\":2,\"256\":6,\"264\":1,\"269\":3,\"273\":1,\"292\":1,\"298\":3,\"302\":1,\"304\":1,\"305\":2,\"306\":4,\"310\":2,\"323\":1,\"325\":2,\"360\":1,\"450\":3,\"459\":1,\"535\":1,\"538\":1,\"548\":10,\"549\":2,\"552\":2,\"568\":1,\"574\":1,\"585\":1,\"606\":1,\"646\":1}}],[\"=\",{\"1\":{\"18\":7,\"26\":1,\"38\":6,\"47\":2,\"54\":4,\"55\":1,\"56\":1,\"61\":2,\"62\":2,\"63\":1,\"64\":1,\"65\":2,\"66\":5,\"67\":10,\"71\":2,\"73\":1,\"77\":1,\"79\":2,\"80\":3,\"81\":1,\"84\":1,\"85\":5,\"87\":3,\"88\":3,\"90\":6,\"91\":6,\"92\":2,\"97\":1,\"98\":3,\"99\":3,\"100\":2,\"101\":1,\"102\":1,\"103\":3,\"109\":6,\"111\":1,\"112\":1,\"113\":6,\"116\":4,\"117\":3,\"122\":1,\"124\":6,\"125\":7,\"126\":12,\"127\":6,\"128\":1,\"129\":1,\"140\":3,\"142\":1,\"143\":6,\"144\":4,\"145\":2,\"148\":2,\"154\":1,\"155\":1,\"156\":2,\"157\":3,\"162\":3,\"169\":1,\"170\":3,\"182\":1,\"186\":1,\"194\":2,\"195\":2,\"196\":3,\"197\":2,\"201\":1,\"202\":2,\"210\":2,\"214\":1,\"215\":2,\"216\":7,\"221\":1,\"224\":2,\"236\":3,\"240\":5,\"241\":4,\"248\":1,\"249\":1,\"255\":2,\"256\":6,\"263\":2,\"264\":2,\"269\":22,\"273\":3,\"280\":5,\"290\":2,\"291\":2,\"292\":3,\"293\":2,\"298\":9,\"302\":3,\"305\":1,\"306\":2,\"310\":1,\"311\":1,\"316\":4,\"317\":2,\"323\":3,\"324\":2,\"325\":1,\"335\":4,\"336\":10,\"345\":2,\"352\":5,\"359\":2,\"443\":1,\"449\":2,\"450\":4,\"459\":1,\"460\":5,\"479\":1,\"482\":7,\"483\":11,\"535\":2,\"538\":4,\"541\":7,\"548\":5,\"552\":3,\"574\":1,\"585\":2,\"597\":3,\"599\":4,\"606\":9,\"607\":9,\"608\":10,\"616\":2,\"638\":1,\"643\":3,\"644\":4,\"645\":3,\"646\":2,\"687\":2}}],[\"程序执行过程\",{\"0\":{\"18\":1}}],[\"程序初始化操作\",{\"1\":{\"9\":1}}],[\"程序初始化\",{\"1\":{\"9\":1}}],[\"creation\",{\"1\":{\"618\":1}}],[\"createapp\",{\"1\":{\"616\":1}}],[\"createrenderer\",{\"1\":{\"507\":1}}],[\"createref一致\",{\"1\":{\"293\":1}}],[\"createref\",{\"1\":{\"202\":1,\"241\":2,\"289\":1,\"290\":1,\"291\":2,\"292\":1}}],[\"create\",{\"1\":{\"483\":2}}],[\"created\",{\"0\":{\"465\":1},\"1\":{\"479\":1,\"480\":1,\"516\":1,\"659\":1}}],[\"createdocumentfragment\",{\"1\":{\"269\":1,\"608\":1}}],[\"createelm\",{\"1\":{\"460\":2}}],[\"createelement方法用来创建元素的\",{\"1\":{\"297\":1}}],[\"createelement函数对key和ref等特殊的props进行处理\",{\"1\":{\"270\":1}}],[\"createelement或jsx编写react组件\",{\"1\":{\"270\":1}}],[\"createelement会根据传入的节点信息进行一个判断\",{\"1\":{\"269\":1}}],[\"createelement其被调用时会传⼊标签类型type\",{\"1\":{\"269\":1}}],[\"createelement这种形式\",{\"1\":{\"268\":1,\"269\":1}}],[\"createelement执行\",{\"1\":{\"162\":1}}],[\"createelement\",{\"1\":{\"162\":2,\"209\":2,\"268\":5,\"269\":3,\"270\":1,\"297\":3,\"541\":1,\"606\":1,\"607\":1,\"608\":1}}],[\"createkeytooldidx\",{\"1\":{\"460\":2}}],[\"createstructuraldirectivetransform\",{\"1\":{\"450\":1}}],[\"createstructuraldirectivetransform工具函数创建\",{\"1\":{\"450\":1}}],[\"createnode\",{\"1\":{\"269\":4}}],[\"createtextnode\",{\"1\":{\"269\":3}}],[\"createcodegennodeforbranch\",{\"1\":{\"450\":2}}],[\"createcontext\",{\"1\":{\"157\":1}}],[\"createcontext创建一个context\",{\"1\":{\"157\":1}}],[\"createclass这种形式\",{\"1\":{\"209\":1}}],[\"createclass是react刚开始推荐的创建组件的方式\",{\"1\":{\"209\":1}}],[\"createclass\",{\"0\":{\"209\":1},\"1\":{\"207\":1,\"211\":1}}],[\"crossorigin=\",{\"1\":{\"596\":1}}],[\"cdn\",{\"1\":{\"556\":1}}],[\"c与f\",{\"1\":{\"459\":1}}],[\"curindex\",{\"1\":{\"606\":3,\"607\":3,\"608\":3}}],[\"curtotal\",{\"1\":{\"606\":4,\"607\":4,\"608\":4}}],[\"curr\",{\"1\":{\"518\":1}}],[\"currentcomponent\",{\"1\":{\"548\":2}}],[\"current\",{\"1\":{\"202\":1,\"215\":1,\"241\":2,\"289\":2,\"291\":2,\"293\":1}}],[\"cumulative\",{\"1\":{\"580\":1}}],[\"custom\",{\"1\":{\"407\":1}}],[\"cvs是版本控制系统\",{\"1\":{\"370\":1}}],[\"cvs\",{\"1\":{\"368\":1}}],[\"cn\",{\"1\":{\"297\":2}}],[\"cmp\",{\"1\":{\"269\":2}}],[\"center=\",{\"1\":{\"263\":1}}],[\"center\",{\"1\":{\"263\":1}}],[\"css$\",{\"1\":{\"638\":1}}],[\"css$|\",{\"1\":{\"585\":1}}],[\"css和js文件\",{\"1\":{\"596\":1}}],[\"css和js等文件\",{\"1\":{\"560\":1}}],[\"csstransition>\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"csstransition会给子组件加上xxx\",{\"1\":{\"323\":1}}],[\"csstransition首先会给其子组件加上xxx\",{\"1\":{\"323\":1}}],[\"csstransition\",{\"0\":{\"323\":1},\"1\":{\"322\":1,\"324\":1,\"325\":1}}],[\"css文件对应如下\",{\"1\":{\"324\":1}}],[\"css文件\",{\"1\":{\"222\":1,\"622\":1}}],[\"css属性需要转换成驼峰写法\",{\"1\":{\"221\":1}}],[\"css\",{\"0\":{\"223\":1,\"224\":1},\"1\":{\"220\":3,\"222\":1,\"223\":1,\"224\":1,\"225\":2,\"322\":1,\"569\":1,\"585\":2,\"596\":2,\"618\":5,\"622\":1,\"626\":1,\"635\":1,\"636\":1,\"638\":2,\"639\":8}}],[\"css引入\",{\"0\":{\"219\":1}}],[\"cccccc\",{\"0\":{\"136\":1}}],[\"chrome和edge提供了ligthouse扩展\",{\"1\":{\"578\":1}}],[\"chrome对dns记录默认的缓存时间为1分钟\",{\"1\":{\"561\":1}}],[\"chunks\",{\"1\":{\"597\":1,\"632\":2}}],[\"chunk\",{\"0\":{\"625\":1},\"1\":{\"549\":2,\"625\":1,\"627\":3}}],[\"chunkname\",{\"1\":{\"549\":1}}],[\"chunkname3\",{\"1\":{\"548\":2}}],[\"chunkname1\",{\"1\":{\"548\":2}}],[\"chore\",{\"1\":{\"379\":1}}],[\"check\",{\"1\":{\"599\":2}}],[\"checksession检验微信登陆状态是否过期\",{\"1\":{\"520\":1}}],[\"checkout\",{\"1\":{\"376\":1,\"380\":4}}],[\"checkcapabilities\",{\"1\":{\"109\":2}}],[\"chainwebpack\",{\"1\":{\"585\":1}}],[\"change事件之后进行同步\",{\"1\":{\"389\":1}}],[\"changetext\",{\"1\":{\"302\":3,\"304\":2,\"305\":1}}],[\"change\",{\"1\":{\"298\":2}}],[\"changed\",{\"1\":{\"90\":1}}],[\"chatapi\",{\"1\":{\"256\":2}}],[\"china\",{\"1\":{\"224\":1}}],[\"childval\",{\"1\":{\"483\":8}}],[\"childclickfun\",{\"1\":{\"241\":2}}],[\"childref\",{\"1\":{\"241\":3}}],[\"children\",{\"1\":{\"236\":1,\"269\":9,\"297\":1,\"343\":1,\"398\":1,\"460\":1}}],[\"childexpirationtime\",{\"1\":{\"169\":1}}],[\"child\",{\"1\":{\"54\":1,\"155\":1,\"169\":1,\"170\":1,\"269\":9,\"361\":1,\"482\":6}}],[\"c++\",{\"1\":{\"74\":2}}],[\"c\",{\"0\":{\"136\":3},\"1\":{\"73\":1,\"74\":3,\"120\":3,\"124\":2,\"127\":2,\"231\":1,\"353\":1,\"442\":2,\"443\":2,\"459\":3,\"585\":2}}],[\"cache\",{\"1\":{\"501\":1,\"554\":1,\"556\":2}}],[\"camel\",{\"1\":{\"389\":1}}],[\"car\",{\"1\":{\"339\":1}}],[\"cart\",{\"1\":{\"148\":1}}],[\"case\",{\"1\":{\"130\":4}}],[\"capture\",{\"1\":{\"389\":1}}],[\"capital\",{\"1\":{\"122\":2}}],[\"capability\",{\"1\":{\"109\":1}}],[\"cannot\",{\"1\":{\"585\":1}}],[\"candidate\",{\"1\":{\"568\":1}}],[\"canvas优化性能\",{\"1\":{\"604\":1}}],[\"canvas\",{\"0\":{\"649\":1,\"651\":1},\"1\":{\"503\":1},\"2\":{\"614\":1,\"652\":1}}],[\"canmove\",{\"1\":{\"460\":1}}],[\"can\",{\"1\":{\"71\":1,\"109\":2,\"120\":1}}],[\"catch\",{\"1\":{\"47\":1,\"236\":2,\"549\":1}}],[\"cat\",{\"1\":{\"47\":1}}],[\"callbacks是异步操作队列\",{\"1\":{\"491\":1}}],[\"callback\",{\"0\":{\"132\":1},\"1\":{\"269\":1,\"302\":2,\"549\":1}}],[\"callable类型\",{\"1\":{\"108\":1}}],[\"callable\",{\"0\":{\"132\":1},\"1\":{\"87\":1,\"132\":1}}],[\"callable参数的值\",{\"1\":{\"67\":1}}],[\"called\",{\"1\":{\"56\":1,\"66\":1,\"353\":4}}],[\"call\",{\"1\":{\"38\":1,\"132\":1,\"280\":1,\"316\":1}}],[\"cls\",{\"1\":{\"570\":1,\"580\":1}}],[\"cleartimeout\",{\"1\":{\"535\":1}}],[\"clearinterval\",{\"1\":{\"210\":1}}],[\"clearimmediate\",{\"1\":{\"16\":1}}],[\"cli项目\",{\"1\":{\"585\":1}}],[\"cli\",{\"1\":{\"502\":1,\"615\":3,\"618\":10,\"637\":1}}],[\"click=\",{\"1\":{\"386\":1}}],[\"clicked\",{\"1\":{\"255\":2,\"256\":6,\"310\":1}}],[\"click\",{\"1\":{\"241\":4,\"255\":2,\"256\":2,\"305\":1,\"386\":1}}],[\"clickgoods\",{\"1\":{\"155\":3}}],[\"clone\",{\"1\":{\"376\":1}}],[\"clone一个项目到本地\",{\"1\":{\"375\":1}}],[\"clone一个项目的时候\",{\"1\":{\"375\":1}}],[\"close\",{\"1\":{\"294\":1}}],[\"closing\",{\"1\":{\"73\":1}}],[\"closures\",{\"1\":{\"67\":1}}],[\"closure\",{\"1\":{\"49\":1}}],[\"clubs\",{\"1\":{\"130\":1}}],[\"class关键字紧接着类名\",{\"1\":{\"339\":1}}],[\"classcomponent\",{\"1\":{\"269\":1}}],[\"classcomponent等\",{\"1\":{\"169\":1}}],[\"class等\",{\"1\":{\"162\":1}}],[\"classnames=\",{\"1\":{\"323\":1,\"324\":1,\"325\":1}}],[\"classname=\",{\"1\":{\"222\":3,\"223\":3,\"264\":1,\"268\":1,\"269\":4,\"297\":1,\"298\":2,\"323\":3}}],[\"classname\",{\"1\":{\"49\":1,\"84\":6,\"162\":1,\"223\":2,\"268\":1,\"297\":1}}],[\"class\",{\"0\":{\"77\":1,\"84\":1},\"1\":{\"18\":2,\"28\":1,\"38\":2,\"49\":3,\"66\":2,\"77\":1,\"79\":1,\"80\":3,\"81\":2,\"84\":6,\"87\":1,\"88\":1,\"90\":1,\"91\":2,\"92\":2,\"103\":6,\"108\":1,\"109\":2,\"129\":2,\"155\":2,\"156\":1,\"157\":1,\"169\":1,\"190\":1,\"193\":1,\"196\":1,\"197\":1,\"201\":1,\"202\":1,\"210\":1,\"215\":2,\"216\":5,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"236\":2,\"241\":1,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"253\":1,\"255\":1,\"256\":1,\"261\":1,\"264\":1,\"269\":1,\"290\":1,\"291\":1,\"292\":1,\"297\":1,\"298\":2,\"302\":1,\"310\":1,\"311\":1,\"316\":3,\"317\":3,\"323\":1,\"324\":1,\"325\":1,\"339\":1,\"340\":2,\"342\":1,\"343\":2,\"352\":5,\"353\":1,\"355\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"646\":1}}],[\"core\",{\"1\":{\"618\":1}}],[\"cors\",{\"1\":{\"413\":1}}],[\"color=\",{\"1\":{\"224\":1,\"269\":1}}],[\"color\",{\"1\":{\"222\":2,\"224\":4,\"269\":2,\"541\":1}}],[\"count+\",{\"1\":{\"306\":2}}],[\"count的方式获取\",{\"1\":{\"255\":1}}],[\"count=\",{\"1\":{\"156\":1}}],[\"count\",{\"1\":{\"148\":3,\"156\":4,\"194\":3,\"255\":8,\"256\":15,\"298\":13,\"306\":14,\"310\":4,\"359\":4}}],[\"cookies\",{\"1\":{\"148\":3}}],[\"cookie\",{\"0\":{\"148\":1},\"1\":{\"148\":10}}],[\"command\",{\"1\":{\"618\":1}}],[\"commonjs\",{\"1\":{\"615\":1,\"626\":1,\"627\":1}}],[\"commit\",{\"1\":{\"376\":1,\"379\":3}}],[\"committed\",{\"1\":{\"375\":1}}],[\"completion\",{\"1\":{\"658\":1,\"660\":3,\"662\":2,\"663\":1}}],[\"completionrecord\",{\"1\":{\"658\":1}}],[\"complieroptions\",{\"1\":{\"352\":1}}],[\"compilation\",{\"1\":{\"646\":1}}],[\"compiler\",{\"1\":{\"645\":3,\"646\":5}}],[\"compatibility\",{\"0\":{\"623\":1}}],[\"company\",{\"1\":{\"599\":1}}],[\"comp\",{\"1\":{\"585\":2}}],[\"compressionplugin\",{\"1\":{\"585\":2}}],[\"compression\",{\"1\":{\"585\":6}}],[\"computed\",{\"0\":{\"359\":1},\"1\":{\"444\":1,\"479\":1,\"483\":3,\"501\":1}}],[\"composition\",{\"1\":{\"503\":1}}],[\"compositetypes\",{\"1\":{\"280\":1}}],[\"compositetype\",{\"1\":{\"280\":1}}],[\"compose\",{\"1\":{\"215\":1}}],[\"component>\",{\"1\":{\"548\":1}}],[\"componentupdated可使用\",{\"1\":{\"427\":2}}],[\"componentupdated\",{\"1\":{\"427\":1}}],[\"componentb\",{\"1\":{\"358\":2}}],[\"componenta\",{\"1\":{\"358\":2}}],[\"component装饰器他注明了此类为一个vue组件\",{\"1\":{\"358\":1}}],[\"component中继承\",{\"1\":{\"302\":1}}],[\"components会给该class添加相关的样式\",{\"1\":{\"224\":1}}],[\"components的基本使用\",{\"1\":{\"224\":1}}],[\"components\",{\"1\":{\"224\":1,\"358\":2,\"548\":5}}],[\"component创建一个时钟示例如下\",{\"1\":{\"210\":1}}],[\"component这种形式进行创建\",{\"1\":{\"210\":1}}],[\"componentwillupdate\",{\"1\":{\"186\":1}}],[\"componentwillunmount\",{\"0\":{\"185\":1},\"1\":{\"210\":1,\"256\":1}}],[\"componentwillreceiveprops\",{\"1\":{\"186\":1,\"215\":1}}],[\"componentwillmount\",{\"1\":{\"186\":2,\"216\":5}}],[\"componentdidcatch\",{\"1\":{\"236\":3}}],[\"componentdidupdate\",{\"0\":{\"183\":1},\"1\":{\"180\":1,\"182\":2,\"256\":2}}],[\"componentdidmount\",{\"0\":{\"179\":1},\"1\":{\"175\":1,\"210\":1,\"216\":3,\"241\":2,\"256\":1,\"305\":1}}],[\"component\",{\"0\":{\"210\":1,\"264\":1,\"358\":1},\"1\":{\"155\":2,\"156\":1,\"157\":1,\"190\":2,\"193\":1,\"195\":1,\"196\":1,\"197\":1,\"201\":1,\"202\":2,\"207\":1,\"210\":1,\"215\":2,\"216\":6,\"221\":2,\"224\":2,\"236\":2,\"241\":1,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"255\":1,\"256\":1,\"261\":1,\"262\":1,\"264\":1,\"269\":1,\"281\":1,\"290\":1,\"291\":1,\"292\":1,\"297\":1,\"298\":2,\"302\":3,\"310\":1,\"311\":1,\"317\":4,\"358\":2,\"359\":1,\"360\":2,\"361\":2,\"362\":2,\"443\":1,\"460\":1,\"479\":2,\"482\":1,\"483\":4}}],[\"com\",{\"1\":{\"147\":1,\"154\":1}}],[\"concatenation\",{\"1\":{\"668\":1}}],[\"connection\",{\"1\":{\"548\":1}}],[\"contact\",{\"1\":{\"598\":1}}],[\"container1\",{\"1\":{\"606\":2}}],[\"container\",{\"1\":{\"269\":4,\"323\":1,\"607\":2,\"608\":2}}],[\"contentful\",{\"1\":{\"568\":2,\"575\":1,\"580\":1}}],[\"contextdependency<mixed>\",{\"1\":{\"169\":1}}],[\"context\",{\"1\":{\"157\":1,\"208\":1,\"209\":1,\"221\":1,\"224\":1,\"450\":4}}],[\"contexttype\",{\"1\":{\"157\":1}}],[\"context创建成功后\",{\"1\":{\"157\":1}}],[\"control的优先级高于expires\",{\"1\":{\"554\":1}}],[\"control\",{\"0\":{\"708\":1},\"1\":{\"365\":1,\"554\":1,\"556\":1}}],[\"configuration\",{\"1\":{\"618\":1,\"645\":2}}],[\"configurewebpack\",{\"1\":{\"585\":1}}],[\"config的工具来帮助设置控制git外观和行为的配置变量\",{\"1\":{\"377\":1}}],[\"config\",{\"1\":{\"269\":5,\"377\":2,\"413\":1,\"585\":4,\"616\":1,\"617\":3,\"622\":1,\"637\":1,\"643\":1,\"644\":1,\"645\":1}}],[\"conponent层级\",{\"0\":{\"231\":1}}],[\"conponent\",{\"1\":{\"229\":1}}],[\"conditional\",{\"1\":{\"54\":3}}],[\"consumer>\",{\"1\":{\"157\":2}}],[\"consumer组件\",{\"1\":{\"157\":1}}],[\"consumer组件用于接收数据\",{\"1\":{\"157\":1}}],[\"consolelogonbuildwebpackplugin\",{\"1\":{\"646\":4}}],[\"console\",{\"1\":{\"26\":1,\"38\":2,\"182\":2,\"195\":2,\"202\":1,\"215\":2,\"216\":1,\"240\":1,\"241\":6,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"269\":1,\"298\":4,\"304\":2,\"305\":2,\"306\":3,\"316\":2,\"317\":4,\"352\":6,\"353\":4,\"362\":2,\"568\":1,\"574\":2,\"646\":1}}],[\"constants\",{\"1\":{\"47\":1}}],[\"constant\",{\"1\":{\"47\":9,\"91\":6}}],[\"const时\",{\"1\":{\"37\":1}}],[\"const做相应的可变\",{\"1\":{\"35\":1}}],[\"constructor中bind\",{\"0\":{\"248\":1},\"1\":{\"245\":1}}],[\"constructor\",{\"0\":{\"176\":1},\"1\":{\"80\":6,\"155\":1,\"156\":1,\"175\":1,\"190\":1,\"193\":1,\"201\":1,\"202\":1,\"210\":1,\"216\":1,\"221\":1,\"224\":1,\"236\":2,\"241\":1,\"248\":1,\"249\":1,\"255\":1,\"256\":1,\"264\":1,\"290\":1,\"291\":1,\"292\":1,\"302\":1,\"310\":2,\"312\":1,\"316\":4,\"317\":2,\"324\":1,\"325\":1,\"339\":1,\"352\":7}}],[\"construct\",{\"1\":{\"29\":2,\"79\":1,\"80\":4,\"87\":1,\"88\":1,\"109\":1}}],[\"const声明语句\",{\"1\":{\"22\":1}}],[\"const\",{\"1\":{\"18\":2,\"38\":2,\"47\":6,\"55\":1,\"91\":3,\"154\":1,\"157\":1,\"162\":3,\"194\":2,\"195\":2,\"196\":3,\"197\":2,\"214\":1,\"215\":2,\"216\":1,\"221\":1,\"224\":2,\"240\":5,\"255\":1,\"256\":1,\"263\":2,\"264\":1,\"269\":9,\"273\":2,\"280\":3,\"291\":1,\"292\":1,\"293\":2,\"298\":6,\"305\":1,\"311\":1,\"317\":1,\"323\":1,\"324\":1,\"335\":4,\"347\":1,\"348\":1,\"352\":1,\"354\":1,\"449\":1,\"450\":2,\"459\":1,\"482\":2,\"483\":1,\"548\":5,\"552\":2,\"568\":1,\"574\":1,\"585\":1,\"597\":2,\"599\":3,\"616\":1,\"643\":2,\"644\":3,\"645\":2,\"646\":1}}],[\"code一起发送到微信服务器\",{\"1\":{\"519\":1}}],[\"codegennode\",{\"1\":{\"450\":2}}],[\"codegenstate\",{\"1\":{\"443\":1}}],[\"coderwhy\",{\"1\":{\"325\":1}}],[\"code\",{\"1\":{\"10\":1,\"71\":2,\"241\":1,\"281\":2,\"631\":1,\"632\":1}}],[\"oct\",{\"1\":{\"555\":1}}],[\"observe\",{\"1\":{\"552\":1,\"568\":1,\"574\":1}}],[\"observer\",{\"1\":{\"552\":4}}],[\"objetc\",{\"1\":{\"482\":1,\"483\":1}}],[\"objectdirective<vsowelement>\",{\"1\":{\"449\":1}}],[\"object|resource|array|string|float|int|bool|null\",{\"1\":{\"110\":1}}],[\"object类型\",{\"1\":{\"108\":1}}],[\"objectrecord\",{\"1\":{\"22\":2,\"32\":2}}],[\"object\",{\"0\":{\"129\":1},\"1\":{\"14\":1,\"88\":1,\"89\":1,\"109\":3,\"150\":1,\"269\":2,\"280\":5,\"302\":3,\"306\":1,\"352\":2,\"404\":1,\"482\":3,\"483\":7,\"522\":6,\"659\":1}}],[\"objects\",{\"1\":{\"14\":1}}],[\"obj\",{\"1\":{\"335\":1,\"336\":1}}],[\"objb\",{\"1\":{\"280\":7}}],[\"obja\",{\"1\":{\"280\":6}}],[\"output\",{\"1\":{\"599\":1,\"616\":1,\"622\":1,\"644\":1}}],[\"out\",{\"1\":{\"324\":3}}],[\"outerenv\",{\"1\":{\"26\":1,\"34\":1}}],[\"opt\",{\"1\":{\"683\":1}}],[\"option\",{\"1\":{\"643\":1}}],[\"options是用户传递的配置项\",{\"1\":{\"486\":1}}],[\"options\",{\"0\":{\"465\":1},\"1\":{\"463\":1,\"482\":8,\"503\":1,\"599\":1,\"636\":1,\"638\":1}}],[\"option>\",{\"1\":{\"147\":3}}],[\"operationname\",{\"1\":{\"661\":2,\"662\":2}}],[\"operations\",{\"1\":{\"657\":2}}],[\"opening\",{\"1\":{\"100\":1}}],[\"open\",{\"1\":{\"71\":2,\"294\":1}}],[\"opacity\",{\"1\":{\"323\":4,\"324\":4,\"325\":4}}],[\"okay\",{\"1\":{\"120\":1}}],[\"override\",{\"1\":{\"82\":1}}],[\"othersubclass\",{\"1\":{\"80\":2}}],[\"otherwise\",{\"1\":{\"72\":1}}],[\"omitted\",{\"1\":{\"73\":1}}],[\"oldkeytoidx\",{\"1\":{\"460\":3}}],[\"oldendvnode\",{\"1\":{\"460\":3}}],[\"oldendidx\",{\"1\":{\"460\":5}}],[\"oldstartvnode\",{\"1\":{\"460\":6}}],[\"oldstartidx++\",{\"1\":{\"460\":2}}],[\"oldstartidx\",{\"1\":{\"460\":3}}],[\"oldch\",{\"1\":{\"460\":5}}],[\"oldvnode\",{\"1\":{\"427\":1}}],[\"oldvnode和vnode\",{\"1\":{\"422\":1}}],[\"oldvalue\",{\"1\":{\"427\":1,\"449\":1}}],[\"oldval\",{\"1\":{\"361\":3}}],[\"oldindex=2\",{\"1\":{\"232\":1}}],[\"oldindex=3\",{\"1\":{\"232\":1}}],[\"oldindex=0\",{\"1\":{\"232\":1}}],[\"oldindex=1\",{\"1\":{\"232\":1}}],[\"oldindex\",{\"1\":{\"232\":8}}],[\"old\",{\"1\":{\"54\":1}}],[\"orphan\",{\"1\":{\"380\":1}}],[\"orange\",{\"1\":{\"264\":1}}],[\"order\",{\"1\":{\"214\":1}}],[\"or\",{\"1\":{\"45\":1,\"71\":1,\"96\":1,\"100\":1,\"302\":1,\"443\":1}}],[\"of123456789\",{\"1\":{\"684\":1}}],[\"of1\",{\"1\":{\"684\":1}}],[\"off\",{\"1\":{\"324\":2}}],[\"off再从右侧进入\",{\"1\":{\"324\":1}}],[\"of\",{\"1\":{\"36\":4,\"45\":1,\"63\":1,\"123\":2,\"224\":1,\"302\":2,\"335\":2,\"568\":1,\"585\":1,\"618\":3,\"668\":3,\"684\":1}}],[\"onunload\",{\"1\":{\"515\":1}}],[\"onunhandlerejection\",{\"1\":{\"514\":1}}],[\"onhdie=>\",{\"1\":{\"518\":1}}],[\"onhdie\",{\"1\":{\"515\":1,\"518\":1}}],[\"onhide\",{\"1\":{\"514\":1}}],[\"onready\",{\"1\":{\"515\":1,\"518\":2}}],[\"onttfb\",{\"1\":{\"574\":2}}],[\"onthemechange\",{\"1\":{\"514\":1}}],[\"ontoggle\",{\"1\":{\"323\":2}}],[\"onpagenotfound\",{\"1\":{\"514\":1}}],[\"onpersonchanged2\",{\"1\":{\"361\":1}}],[\"onpersonchanged1\",{\"1\":{\"361\":1}}],[\"onshow=>\",{\"1\":{\"518\":3}}],[\"onshow\",{\"1\":{\"514\":1,\"515\":1,\"518\":2}}],[\"onsubmit=\",{\"1\":{\"202\":1}}],[\"onload=>\",{\"1\":{\"518\":2}}],[\"onload\",{\"1\":{\"515\":1}}],[\"onlaunch重新开始执行\",{\"1\":{\"518\":1}}],[\"onlaunch=>\",{\"1\":{\"518\":2}}],[\"onlaunch\",{\"1\":{\"514\":1}}],[\"only\",{\"1\":{\"71\":1,\"618\":2}}],[\"on=\",{\"1\":{\"386\":1}}],[\"onnamechanged=\",{\"1\":{\"311\":1}}],[\"onchildchanged\",{\"1\":{\"361\":1}}],[\"onclick\",{\"1\":{\"306\":1,\"541\":2}}],[\"onclick=\",{\"1\":{\"155\":2,\"156\":1,\"194\":1,\"197\":2,\"236\":1,\"240\":6,\"241\":2,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"255\":2,\"256\":2,\"298\":4,\"302\":1,\"310\":1,\"323\":1,\"324\":1,\"325\":1}}],[\"onceprocessed\",{\"1\":{\"443\":1}}],[\"once指令\",{\"1\":{\"443\":1}}],[\"once\",{\"1\":{\"92\":1,\"120\":1,\"389\":1,\"443\":1,\"606\":3,\"607\":3,\"608\":3}}],[\"on\",{\"1\":{\"67\":1,\"269\":1,\"324\":2,\"386\":1,\"501\":1,\"585\":4}}],[\"onerror\",{\"1\":{\"514\":1}}],[\"one=\",{\"1\":{\"336\":1}}],[\"one\",{\"1\":{\"45\":1,\"74\":1,\"684\":3}}],[\"onblur等等\",{\"1\":{\"16\":1}}],[\"ondrag\",{\"1\":{\"16\":1}}],[\"would\",{\"1\":{\"618\":1}}],[\"woff2\",{\"1\":{\"596\":2}}],[\"woff\",{\"1\":{\"585\":2}}],[\"woff$\",{\"1\":{\"585\":1}}],[\"worker\",{\"1\":{\"573\":1}}],[\"worktag\",{\"1\":{\"169\":1}}],[\"work\",{\"1\":{\"71\":1}}],[\"world<\",{\"1\":{\"162\":1,\"195\":2}}],[\"world\",{\"1\":{\"47\":4,\"67\":6,\"71\":1,\"145\":2,\"162\":1,\"216\":1,\"302\":1,\"304\":2,\"362\":1}}],[\"wx\",{\"1\":{\"519\":2,\"522\":5}}],[\"which\",{\"1\":{\"302\":1,\"618\":2}}],[\"whilestatement\",{\"1\":{\"682\":1}}],[\"while语句的产生式\",{\"1\":{\"682\":1,\"683\":1}}],[\"while\",{\"1\":{\"53\":1,\"72\":1,\"460\":1,\"682\":1}}],[\"w3c\",{\"1\":{\"240\":1}}],[\"writable=false\",{\"1\":{\"352\":1}}],[\"wrapper\",{\"1\":{\"323\":1,\"386\":2}}],[\"wrappedcomponent\",{\"1\":{\"214\":1,\"215\":6,\"216\":4}}],[\"wrong\",{\"1\":{\"236\":1}}],[\"www\",{\"1\":{\"147\":1}}],[\"wait\",{\"1\":{\"535\":2}}],[\"watch等选项\",{\"1\":{\"479\":1}}],[\"watch\",{\"0\":{\"361\":1},\"1\":{\"361\":4,\"486\":1,\"501\":1}}],[\"warthog\",{\"1\":{\"147\":1}}],[\"way\",{\"1\":{\"120\":1}}],[\"was\",{\"1\":{\"100\":1}}],[\"want\",{\"1\":{\"71\":1,\"618\":6}}],[\"wed\",{\"1\":{\"555\":1}}],[\"went\",{\"1\":{\"236\":1}}],[\"welcome\",{\"1\":{\"190\":1,\"191\":1,\"193\":2,\"311\":1}}],[\"we\",{\"1\":{\"73\":1}}],[\"webassembly\",{\"1\":{\"627\":1}}],[\"webp提供有损压缩和无损压缩两种方案\",{\"1\":{\"586\":1}}],[\"webp比png\",{\"1\":{\"586\":1}}],[\"webpack在构建过程中会自动生成manifest数据\",{\"1\":{\"632\":1}}],[\"webpack在打包过程中会分析模块之间的依赖关系\",{\"1\":{\"631\":1}}],[\"webpack在打包过程中会根据项目的配置和模块之间的依赖关系生成runtime代码\",{\"1\":{\"631\":1}}],[\"webpack可以更有效地利用浏览器的缓存机制\",{\"1\":{\"632\":1}}],[\"webpack支持代码分割\",{\"1\":{\"631\":1}}],[\"webpack的manifest是构建过程中的一个内部机制\",{\"1\":{\"632\":1}}],[\"webpack的manifest是一个在webpack构建过程中生成的数据集合\",{\"1\":{\"632\":1}}],[\"webpack的运行时\",{\"1\":{\"632\":1}}],[\"webpack的runtime\",{\"1\":{\"631\":1}}],[\"webpack的打包过程主要就是将项目中所有的资源\",{\"1\":{\"629\":1}}],[\"webpack的打包过程是一个复杂但高效的过程\",{\"1\":{\"622\":1}}],[\"webpack原生支持\",{\"1\":{\"627\":1}}],[\"webpack使用不同的加载器\",{\"1\":{\"622\":1}}],[\"webpack会从这些入口点开始\",{\"1\":{\"629\":1}}],[\"webpack会将生成的bundle文件输出到指定的输出目录中\",{\"1\":{\"622\":1}}],[\"webpack会将所有处理后的模块合并成一个或多个bundle文件\",{\"1\":{\"622\":1}}],[\"webpack会将配置文件中的参数与通过命令行传入的参数进行合并\",{\"1\":{\"622\":1}}],[\"webpack会根据配置中的规则来将模块分组打包\",{\"1\":{\"622\":1}}],[\"webpack会根据配置中的插件\",{\"1\":{\"622\":1}}],[\"webpack会根据配置中的入口文件\",{\"1\":{\"622\":1}}],[\"webpack会根据模块的类型和配置中的加载器\",{\"1\":{\"622\":1}}],[\"webpack会递归解析项目中的所有依赖模块\",{\"1\":{\"622\":1}}],[\"webpack会创建一个compiler对象\",{\"1\":{\"622\":1}}],[\"webpack首先会读取项目中的webpack\",{\"1\":{\"622\":1}}],[\"webpack是一个前端项目工程化的具体解决方案\",{\"1\":{\"621\":1}}],[\"webpack是一个现代javascript应用程序的静态模块打包器\",{\"1\":{\"621\":1}}],[\"webpack方案\",{\"0\":{\"599\":1}}],[\"webpack\",{\"0\":{\"618\":1,\"621\":1},\"1\":{\"585\":2,\"597\":2,\"615\":6,\"616\":3,\"617\":1,\"618\":18,\"621\":2,\"623\":2,\"624\":1,\"626\":1,\"627\":3,\"631\":7,\"632\":2,\"635\":1,\"636\":2,\"637\":3,\"638\":3,\"642\":1,\"643\":5,\"644\":7,\"645\":6,\"646\":3},\"2\":{\"620\":1,\"634\":1,\"641\":1,\"648\":1}}],[\"webpack等构建工具提供了代码分割的支持\",{\"1\":{\"549\":1}}],[\"web上的说明\",{\"1\":{\"570\":1,\"572\":1,\"573\":1}}],[\"webgl\",{\"1\":{\"503\":1}}],[\"web\",{\"0\":{\"580\":1},\"1\":{\"141\":1,\"574\":2,\"580\":2}}],[\"web服务端的node\",{\"1\":{\"13\":1}}],[\"web客户端的浏览器\",{\"1\":{\"13\":1}}],[\"width=\",{\"1\":{\"342\":1}}],[\"width\",{\"1\":{\"221\":1,\"224\":1}}],[\"will\",{\"1\":{\"71\":1,\"72\":3,\"74\":1,\"120\":2,\"618\":2}}],[\"withtiming\",{\"1\":{\"216\":2}}],[\"withpersistentdata\",{\"1\":{\"216\":2}}],[\"withlogging\",{\"1\":{\"215\":2}}],[\"within\",{\"1\":{\"71\":1}}],[\"with\",{\"1\":{\"61\":1,\"169\":1,\"442\":1,\"443\":1,\"618\":1}}],[\"window\",{\"1\":{\"16\":2,\"170\":1,\"236\":1,\"607\":1,\"608\":1}}],[\"npx\",{\"1\":{\"618\":3}}],[\"npm\",{\"1\":{\"585\":2,\"615\":1,\"618\":1,\"636\":1}}],[\"nginx\",{\"1\":{\"413\":1,\"585\":2}}],[\"ns\",{\"1\":{\"84\":2}}],[\"n\",{\"1\":{\"56\":3,\"63\":1,\"67\":1,\"80\":2,\"81\":1,\"91\":4,\"120\":2,\"121\":1,\"124\":1,\"352\":2,\"362\":3,\"442\":1,\"443\":1,\"618\":1,\"700\":1}}],[\"need\",{\"1\":{\"618\":1}}],[\"nexttick\",{\"0\":{\"490\":1},\"1\":{\"491\":1}}],[\"next方法中可以拿到组件实例\",{\"1\":{\"455\":1}}],[\"nextstate\",{\"1\":{\"280\":1}}],[\"nextval\",{\"1\":{\"269\":4}}],[\"nextprops\",{\"1\":{\"215\":1,\"280\":1,\"281\":2}}],[\"next\",{\"1\":{\"215\":1,\"518\":3}}],[\"nexteffect\",{\"1\":{\"169\":1}}],[\"never\",{\"0\":{\"135\":1},\"1\":{\"135\":1,\"330\":1}}],[\"never类型\",{\"1\":{\"108\":1}}],[\"newly\",{\"1\":{\"659\":1}}],[\"newlines\",{\"1\":{\"120\":1}}],[\"newline\",{\"1\":{\"73\":4,\"120\":2}}],[\"newendvnode\",{\"1\":{\"460\":2}}],[\"newendidx\",{\"1\":{\"460\":3}}],[\"newstartvnode\",{\"1\":{\"460\":10}}],[\"newstartidx++\",{\"1\":{\"460\":2}}],[\"newstartidx\",{\"1\":{\"460\":4}}],[\"newch\",{\"1\":{\"460\":6}}],[\"newcount\",{\"1\":{\"298\":4}}],[\"newproperty1\",{\"1\":{\"404\":1}}],[\"newmovies\",{\"1\":{\"273\":4}}],[\"new实例化\",{\"0\":{\"78\":1}}],[\"new\",{\"1\":{\"66\":1,\"78\":1,\"79\":1,\"80\":3,\"81\":1,\"84\":1,\"87\":1,\"88\":3,\"90\":1,\"91\":1,\"92\":2,\"103\":3,\"109\":3,\"129\":2,\"196\":1,\"263\":2,\"269\":1,\"316\":1,\"317\":1,\"352\":2,\"459\":1,\"463\":1,\"487\":1,\"541\":3,\"552\":1,\"568\":1,\"574\":1,\"585\":1,\"597\":2,\"599\":2,\"643\":2,\"644\":2,\"645\":1}}],[\"newtarget\",{\"1\":{\"29\":2}}],[\"neither\",{\"1\":{\"53\":1}}],[\"navigation\",{\"1\":{\"574\":4}}],[\"navigationback\",{\"1\":{\"518\":1}}],[\"navigator\",{\"1\":{\"548\":1}}],[\"navigateback\",{\"1\":{\"522\":2}}],[\"navigateto\",{\"1\":{\"522\":1}}],[\"naive\",{\"1\":{\"502\":1}}],[\"native\",{\"1\":{\"389\":1}}],[\"nativeevent\",{\"1\":{\"240\":1,\"241\":1}}],[\"nativeevent属性获取\",{\"1\":{\"240\":1}}],[\"name=\",{\"1\":{\"147\":8,\"201\":1,\"261\":1,\"269\":2,\"311\":1,\"352\":1}}],[\"name\",{\"1\":{\"61\":1,\"65\":1,\"92\":2,\"122\":2,\"140\":1,\"147\":3,\"190\":1,\"191\":1,\"193\":2,\"208\":1,\"209\":1,\"216\":1,\"261\":1,\"269\":2,\"298\":6,\"310\":1,\"311\":1,\"316\":10,\"317\":1,\"335\":3,\"336\":8,\"352\":7,\"354\":1,\"377\":2,\"378\":1,\"427\":1,\"585\":2}}],[\"namespace\",{\"1\":{\"49\":1,\"84\":2,\"355\":1}}],[\"nan\",{\"0\":{\"118\":1},\"1\":{\"45\":1,\"118\":4}}],[\"num\",{\"1\":{\"335\":1}}],[\"numbers\",{\"1\":{\"273\":3}}],[\"number\",{\"1\":{\"169\":1,\"335\":3,\"336\":2,\"347\":2,\"348\":2,\"349\":7,\"352\":3,\"359\":4,\"360\":3,\"389\":1}}],[\"number等\",{\"1\":{\"14\":1}}],[\"null合并\",{\"0\":{\"99\":1}}],[\"nullsafe\",{\"1\":{\"85\":1}}],[\"null\",{\"0\":{\"111\":1},\"1\":{\"45\":1,\"67\":1,\"85\":6,\"87\":1,\"99\":1,\"108\":1,\"109\":2,\"111\":4,\"143\":1,\"150\":1,\"169\":11,\"170\":3,\"209\":1,\"236\":1,\"268\":2,\"269\":1,\"280\":2,\"297\":2,\"302\":1,\"483\":2,\"535\":1,\"538\":2}}],[\"nonzerodigit\",{\"1\":{\"684\":3}}],[\"none\",{\"1\":{\"447\":1,\"449\":1,\"557\":1,\"558\":1,\"559\":2}}],[\"non\",{\"1\":{\"100\":1}}],[\"nowdoc结构\",{\"0\":{\"123\":1}}],[\"nowdoc\",{\"1\":{\"119\":1,\"123\":2}}],[\"now\",{\"1\":{\"73\":2,\"122\":2,\"216\":2}}],[\"no\",{\"1\":{\"73\":1,\"556\":2,\"618\":1,\"688\":2}}],[\"notreservedword\",{\"1\":{\"685\":1}}],[\"notify通知所有的订阅者watcher\",{\"1\":{\"422\":1}}],[\"notice\",{\"1\":{\"67\":1}}],[\"notmyclass\",{\"1\":{\"103\":2}}],[\"not\",{\"1\":{\"96\":1,\"109\":1,\"120\":4,\"335\":1,\"558\":1,\"559\":1,\"685\":1,\"705\":1}}],[\"note\",{\"1\":{\"45\":1}}],[\"nor\",{\"1\":{\"53\":1}}],[\"normalcompletion或throwcompletion的结果时\",{\"1\":{\"663\":1}}],[\"normal\",{\"1\":{\"38\":1,\"639\":1,\"662\":1}}],[\"node环境\",{\"1\":{\"598\":1}}],[\"nodeops\",{\"1\":{\"460\":1}}],[\"nodevalue\",{\"1\":{\"269\":1}}],[\"node\",{\"1\":{\"15\":1,\"16\":1,\"232\":1,\"269\":21,\"291\":1,\"292\":1,\"293\":1,\"450\":2,\"508\":1,\"585\":1,\"599\":1,\"624\":1,\"626\":1,\"636\":1,\"645\":2}}],[\"blue\",{\"1\":{\"541\":1}}],[\"blockenv\",{\"1\":{\"34\":1}}],[\"blockdeclarationinstantiation\",{\"1\":{\"33\":1}}],[\"block\",{\"1\":{\"18\":3}}],[\"branches\",{\"1\":{\"450\":1}}],[\"branch\",{\"1\":{\"380\":7,\"450\":3}}],[\"browser\",{\"0\":{\"623\":1},\"1\":{\"72\":2}}],[\"btnclick\",{\"1\":{\"324\":2}}],[\"btn\",{\"1\":{\"305\":1,\"324\":5,\"541\":4}}],[\"btnel\",{\"1\":{\"305\":2}}],[\"bye\",{\"1\":{\"195\":1}}],[\"by\",{\"1\":{\"72\":4}}],[\"been\",{\"1\":{\"618\":1}}],[\"beer\",{\"1\":{\"147\":2}}],[\"bedoremounted\",{\"0\":{\"466\":1}}],[\"beforedestroy\",{\"0\":{\"470\":1}}],[\"beforeupdate\",{\"0\":{\"468\":1}}],[\"beforeunmount\",{\"1\":{\"449\":1}}],[\"beforecreate\",{\"0\":{\"464\":1}}],[\"beforeenter\",{\"1\":{\"449\":1}}],[\"beforemount\",{\"1\":{\"449\":1}}],[\"be\",{\"1\":{\"72\":3,\"120\":1,\"618\":1,\"662\":2,\"668\":2}}],[\"base\",{\"1\":{\"585\":1}}],[\"baseclass\",{\"1\":{\"80\":9}}],[\"babel\",{\"1\":{\"599\":2,\"618\":3,\"644\":1}}],[\"babel编译后\",{\"1\":{\"297\":1}}],[\"babel帮助我们完成了这个转换的过程\",{\"1\":{\"270\":1}}],[\"babel在编译时会判断\",{\"1\":{\"268\":1}}],[\"baby\",{\"1\":{\"54\":1}}],[\"background\",{\"1\":{\"224\":2}}],[\"backgroundcolor\",{\"1\":{\"221\":2,\"264\":1}}],[\"backslashes\",{\"1\":{\"123\":2}}],[\"back\",{\"1\":{\"120\":1}}],[\"baz\",{\"1\":{\"91\":2,\"126\":9,\"147\":1}}],[\"bar2\",{\"1\":{\"122\":1}}],[\"bar\",{\"1\":{\"49\":2,\"66\":4,\"91\":4,\"124\":2,\"126\":5,\"147\":2,\"148\":1,\"599\":1,\"639\":1}}],[\"bind表达式\",{\"1\":{\"435\":1}}],[\"bindingidentifierbindingidentifier\",{\"1\":{\"683\":1}}],[\"bindingidentifier\",{\"1\":{\"673\":1,\"683\":1}}],[\"binding\",{\"1\":{\"427\":1}}],[\"bindingobject\",{\"1\":{\"31\":1}}],[\"bind修饰符\",{\"1\":{\"389\":1}}],[\"bind=\",{\"1\":{\"386\":2}}],[\"bind\",{\"1\":{\"155\":3,\"197\":2,\"236\":1,\"246\":2,\"248\":1,\"324\":1,\"386\":1,\"427\":1,\"501\":1}}],[\"bird\",{\"1\":{\"47\":1}}],[\"b\",{\"1\":{\"38\":2,\"45\":1,\"65\":2,\"124\":2,\"127\":2,\"142\":2,\"143\":2,\"147\":1,\"347\":3,\"348\":1,\"365\":1,\"380\":1,\"386\":1,\"450\":2,\"459\":3,\"460\":8,\"631\":1,\"700\":1}}],[\"body>\",{\"1\":{\"459\":1,\"541\":1}}],[\"body\",{\"1\":{\"241\":1,\"597\":1}}],[\"box\",{\"1\":{\"221\":1}}],[\"boxsizing\",{\"1\":{\"221\":1}}],[\"border\",{\"1\":{\"221\":1,\"224\":1,\"269\":3}}],[\"bob\",{\"1\":{\"109\":1,\"140\":2}}],[\"both\",{\"1\":{\"109\":2}}],[\"bool类型\",{\"1\":{\"108\":1}}],[\"bool\",{\"1\":{\"90\":1,\"112\":1}}],[\"boolean布尔类型\",{\"0\":{\"112\":1}}],[\"boolean\",{\"1\":{\"31\":1,\"45\":1,\"280\":2}}],[\"bowl\",{\"1\":{\"63\":1}}],[\"bom\",{\"1\":{\"15\":1}}],[\"build\",{\"1\":{\"617\":1}}],[\"built\",{\"1\":{\"14\":1}}],[\"buymeal\",{\"1\":{\"599\":1}}],[\"bundles\",{\"1\":{\"632\":1}}],[\"bundles中\",{\"1\":{\"627\":1}}],[\"bundle是项目在浏览器中运行所需的所有代码和资源的集合\",{\"1\":{\"628\":1}}],[\"bundle是指webpack打包后最终生成的文件\",{\"1\":{\"628\":1}}],[\"bundler\",{\"1\":{\"621\":1}}],[\"bundle\",{\"0\":{\"628\":1},\"1\":{\"599\":1,\"616\":1,\"618\":1,\"621\":1,\"643\":1,\"644\":2}}],[\"button\",{\"1\":{\"240\":4,\"281\":3,\"310\":1,\"317\":2}}],[\"button>\",{\"1\":{\"155\":2,\"194\":1,\"197\":2,\"236\":1,\"240\":6,\"244\":1,\"255\":2,\"256\":2,\"298\":4,\"302\":1,\"310\":1,\"323\":1,\"324\":1,\"325\":1,\"541\":1}}],[\"but\",{\"1\":{\"71\":1,\"73\":2,\"685\":1}}],[\"buffers\",{\"1\":{\"585\":2}}],[\"buffered\",{\"1\":{\"568\":1,\"574\":1}}],[\"buffer\",{\"1\":{\"16\":1}}],[\"会调用这个函数\",{\"1\":{\"631\":1}}],[\"会假定项目的入口起点为\",{\"1\":{\"616\":1}}],[\"会根据manifest来加载和解析模块\",{\"1\":{\"632\":1}}],[\"会根据该配置定义的属性进行处理\",{\"1\":{\"615\":1}}],[\"会根据条件来忽略之\",{\"1\":{\"72\":1}}],[\"会加载各种各样的资源\",{\"1\":{\"560\":1}}],[\"会协商服务器资源是否修改\",{\"1\":{\"557\":1}}],[\"会有一定的延时\",{\"1\":{\"526\":1}}],[\"会关闭其他的非tabar的页面\",{\"1\":{\"522\":1}}],[\"会触发一系列的生命周期事件\",{\"1\":{\"622\":1}}],[\"会触发onready方法\",{\"1\":{\"518\":1}}],[\"会触发组件的生命周期\",{\"1\":{\"447\":1}}],[\"会用createstaticvnode方法在客户端去生成一个static\",{\"1\":{\"508\":1}}],[\"会做静态提升\",{\"1\":{\"508\":1}}],[\"会\",{\"1\":{\"501\":1}}],[\"会合并为一个数组\",{\"1\":{\"481\":1}}],[\"会被销毁\",{\"1\":{\"518\":1}}],[\"会被直接innerhtml\",{\"1\":{\"508\":1}}],[\"会被直接remove或者destoryed\",{\"1\":{\"458\":1}}],[\"会被bebel转化成如下\",{\"1\":{\"268\":1}}],[\"会影响节点是否被包含在最终的渲染函数中\",{\"1\":{\"450\":1}}],[\"会影响效率\",{\"1\":{\"181\":1}}],[\"会传入过渡对象\",{\"1\":{\"449\":1}}],[\"会将转换应用在已处理过的资源上\",{\"1\":{\"636\":1}}],[\"会将指令系统转为可执行的render函数\",{\"1\":{\"442\":1}}],[\"会将下一个\",{\"1\":{\"124\":1}}],[\"会自动绑定根元素\",{\"1\":{\"386\":1}}],[\"会保留之前分支的所有文件\",{\"1\":{\"380\":1}}],[\"会提交哪些内容\",{\"1\":{\"379\":1}}],[\"会提供两类重要的宿主对象\",{\"1\":{\"15\":1}}],[\"会add哪些内容\",{\"1\":{\"379\":1}}],[\"会移除两个class\",{\"1\":{\"323\":1}}],[\"会在用户可见\",{\"1\":{\"576\":1}}],[\"会在setstate调用完成并且组件开始重新渲染时被调用\",{\"1\":{\"310\":1}}],[\"会在函数环境记录器上再创建一个声明式环境记录器\",{\"1\":{\"38\":1}}],[\"会判断当前值有无发生改变确定是否执行render方法\",{\"1\":{\"299\":1}}],[\"会判断变量类型并在需要时进行转换\",{\"1\":{\"150\":1}}],[\"会使组件的实例或者是dom结构暴露\",{\"1\":{\"294\":1}}],[\"会重新生成一个数字\",{\"1\":{\"274\":1}}],[\"会冒泡到\",{\"1\":{\"241\":1}}],[\"会把渲染期间发生的所有错误打印到控制台\",{\"1\":{\"236\":1}}],[\"会发现输入的内容并无法显示出来\",{\"1\":{\"201\":1}}],[\"会导致页面响应度变差\",{\"1\":{\"168\":1}}],[\"会导致\",{\"1\":{\"71\":1}}],[\"会寻找起始和结束标记\",{\"1\":{\"71\":1}}],[\"会抛出\",{\"1\":{\"54\":1}}],[\"会ordinaryfunctioncreate创建函数对象\",{\"1\":{\"38\":1}}],[\"会收集自身区域的标识符并绑定到相应的环境记录器\",{\"1\":{\"33\":1}}],[\"会忽略所有的函数声明\",{\"1\":{\"22\":1}}],[\"会创建迭代器的内置对象方法\",{\"1\":{\"9\":1}}],[\"浏览器兼容性\",{\"0\":{\"623\":1}}],[\"浏览器必须等待任务完成后才能响应\",{\"1\":{\"575\":1}}],[\"浏览器什么都不会做\",{\"1\":{\"561\":1}}],[\"浏览器窗口大小改变后\",{\"1\":{\"536\":1}}],[\"浏览器会将他们保存在本地的文件中\",{\"1\":{\"560\":1}}],[\"浏览器会依次执行10次更新操作\",{\"1\":{\"399\":1}}],[\"浏览器会从构建dom树开始从头到尾执行一遍流程\",{\"1\":{\"163\":1}}],[\"浏览器空闲的时候执行\",{\"1\":{\"169\":1}}],[\"浏览器没这么智能\",{\"1\":{\"163\":1}}],[\"浏览器宿主的全局对象window\",{\"1\":{\"16\":1}}],[\"浏览器\",{\"1\":{\"15\":1}}],[\"宿主可以提供任何ecmascript对象值\",{\"1\":{\"32\":1}}],[\"宿主对象\",{\"1\":{\"14\":1}}],[\"宿主环境会被wxml转为对应的js对象\",{\"1\":{\"526\":1}}],[\"宿主环境\",{\"0\":{\"13\":1},\"1\":{\"14\":1}}],[\"宿主环境保留字段\",{\"1\":{\"11\":1}}],[\"宿主环境中有多个agent\",{\"1\":{\"7\":1}}],[\"俗称\",{\"1\":{\"14\":1}}],[\"则表示该生成式是受限生成式\",{\"1\":{\"688\":1}}],[\"则可以通过在命令行中使用\",{\"1\":{\"617\":1}}],[\"则可以依据自身的业务需求\",{\"1\":{\"14\":1}}],[\"则上次间隔的函数执行完成\",{\"1\":{\"538\":1}}],[\"则解析模板文件\",{\"1\":{\"486\":1}}],[\"则递归地将每个\",{\"1\":{\"482\":1}}],[\"则执行updatechildren函数比较子节点\",{\"1\":{\"423\":1}}],[\"则删除el子节点\",{\"1\":{\"423\":1}}],[\"则没有节点可以复用\",{\"1\":{\"422\":1}}],[\"则处理比较更新子节点\",{\"1\":{\"422\":1}}],[\"则发出警告\",{\"1\":{\"418\":1}}],[\"则发生了跨域\",{\"1\":{\"412\":1}}],[\"则它的内容被视为全局可见的\",{\"1\":{\"354\":1}}],[\"则调用setstate方法\",{\"1\":{\"298\":1}}],[\"则插入\",{\"1\":{\"273\":1}}],[\"则能够将相同的逻辑抽离出来\",{\"1\":{\"256\":1}}],[\"则能够得到虚拟vdom消息\",{\"1\":{\"162\":1}}],[\"则会指向fn定义环境\",{\"1\":{\"535\":1}}],[\"则会覆盖\",{\"1\":{\"483\":1}}],[\"则会引发报错\",{\"1\":{\"316\":1}}],[\"则会发现控制台输出undefined\",{\"1\":{\"244\":1}}],[\"则会继续往下diff运算\",{\"1\":{\"231\":1}}],[\"则使用react\",{\"1\":{\"215\":1}}],[\"则需要插入到新的dom树中\",{\"1\":{\"273\":1}}],[\"则需要将组件进行实例化\",{\"1\":{\"196\":1}}],[\"则需要创建一个类组件或者state提升到你的父组件中\",{\"1\":{\"194\":1}}],[\"则return函数会在组件卸载的时候执行\",{\"1\":{\"195\":1}}],[\"则父组件作为中间层来实现数据的互通\",{\"1\":{\"156\":1}}],[\"则将vnode的子节点真实化后添加到el\",{\"1\":{\"423\":1}}],[\"则将其删除\",{\"1\":{\"273\":1}}],[\"则将会忽略尾随字符\",{\"1\":{\"147\":1}}],[\"则将在全局作用域内创建该变量并赋值为\",{\"1\":{\"143\":1}}],[\"则为\",{\"1\":{\"102\":3}}],[\"则不允许使用该生成式\",{\"1\":{\"688\":1}}],[\"则不加载某些资源\",{\"1\":{\"548\":1}}],[\"则不应使用setdata来设置这些数据\",{\"1\":{\"530\":1}}],[\"则不用像集中版本管理那样因为断网情况而无法工作\",{\"1\":{\"371\":1}}],[\"则不会发出通知\",{\"1\":{\"100\":1}}],[\"则不能被子类重新定义\",{\"1\":{\"91\":1}}],[\"则不可被覆盖\",{\"1\":{\"81\":1}}],[\"则必须使用其完整名称\",{\"1\":{\"78\":1}}],[\"则代码段的结束标记包含了行结束\",{\"1\":{\"73\":1}}],[\"则返回被包括的文件所在的目录\",{\"1\":{\"49\":1}}],[\"则返回被包含的文件名\",{\"1\":{\"49\":1}}],[\"则初始化为这个值\",{\"1\":{\"38\":2}}],[\"则\",{\"1\":{\"29\":1}}],[\"则这是一个箭头函数\",{\"1\":{\"29\":1}}],[\"则提供一个\",{\"1\":{\"29\":1}}],[\"则抛出\",{\"1\":{\"22\":1}}],[\"则在全局对象上新增了进程属性globalthis\",{\"1\":{\"16\":1}}],[\"则值为null\",{\"1\":{\"10\":1}}],[\"如manifest\",{\"1\":{\"632\":1}}],[\"如webpackmanifestplugin\",{\"1\":{\"632\":1}}],[\"如window\",{\"1\":{\"16\":2}}],[\"如import\",{\"1\":{\"631\":1}}],[\"如input\",{\"1\":{\"501\":2}}],[\"如javascript\",{\"1\":{\"622\":1}}],[\"如何获取合适的高度\",{\"1\":{\"610\":1}}],[\"如何阅读ecma标准\",{\"0\":{\"42\":1}}],[\"如字体\",{\"1\":{\"596\":1}}],[\"如运行中线程和基础库的初始化\",{\"1\":{\"528\":1}}],[\"如定时器或播放音乐\",{\"1\":{\"515\":1}}],[\"如网络通讯状态\",{\"1\":{\"512\":1}}],[\"如游戏\",{\"1\":{\"503\":1}}],[\"如ssr\",{\"1\":{\"503\":1}}],[\"如defineprops自动推导类型\",{\"1\":{\"503\":1}}],[\"如div\",{\"1\":{\"269\":1}}],[\"如异步请求\",{\"1\":{\"501\":1}}],[\"如拼接姓名\",{\"1\":{\"501\":1}}],[\"如重新渲染组件或更新计算属性\",{\"1\":{\"501\":1}}],[\"如重新加载最新数据\",{\"1\":{\"472\":1}}],[\"如生命周期钩子\",{\"1\":{\"482\":1}}],[\"如滚动位置\",{\"1\":{\"473\":1}}],[\"如停止定时器\",{\"1\":{\"473\":1}}],[\"如切换到其他页面\",{\"1\":{\"473\":1}}],[\"如刷新数据\",{\"1\":{\"472\":1}}],[\"如从其他页面返回\",{\"1\":{\"472\":1}}],[\"如git\",{\"1\":{\"375\":1}}],[\"如系统设置\",{\"1\":{\"367\":1}}],[\"如react\",{\"1\":{\"321\":1}}],[\"如实现一个标记的地图\",{\"1\":{\"263\":1}}],[\"如有错误则会抛出\",{\"1\":{\"236\":1}}],[\"如事件处理过程中发生问题并不会捕获到\",{\"1\":{\"236\":1}}],[\"如权限控制\",{\"1\":{\"216\":1}}],[\"如unsafe\",{\"1\":{\"186\":1}}],[\"如获取数据\",{\"1\":{\"183\":1}}],[\"如动画和输入响应\",{\"1\":{\"170\":1}}],[\"如\",{\"1\":{\"150\":1,\"257\":1,\"262\":1,\"386\":1,\"460\":1,\"635\":1,\"659\":1}}],[\"如下情况\",{\"1\":{\"317\":1}}],[\"如下例子\",{\"1\":{\"302\":1,\"323\":1}}],[\"如下场景\",{\"1\":{\"232\":1}}],[\"如下图\",{\"1\":{\"230\":1}}],[\"如下\",{\"1\":{\"49\":1,\"190\":1,\"194\":1,\"202\":1,\"215\":2,\"216\":2,\"221\":1,\"236\":3,\"249\":1,\"255\":1,\"256\":2,\"264\":1,\"268\":1,\"273\":1,\"291\":1,\"297\":1,\"302\":1,\"306\":1,\"311\":1,\"316\":1,\"317\":1,\"324\":1,\"325\":1,\"375\":1}}],[\"如下所示\",{\"1\":{\"43\":1,\"269\":2}}],[\"如以下中的underfined\",{\"1\":{\"45\":1}}],[\"如果产生式的右侧出现\",{\"1\":{\"686\":1}}],[\"如果存在return则存在\",{\"1\":{\"676\":1}}],[\"如果存在子节点\",{\"1\":{\"422\":1}}],[\"如果目标符有该参数\",{\"1\":{\"675\":1}}],[\"如果完成记录\",{\"1\":{\"660\":1}}],[\"如果找到则直接返回模块的导出对象\",{\"1\":{\"631\":1}}],[\"如果找到key值相同\",{\"1\":{\"460\":1}}],[\"如果你想要支持旧版本浏览器\",{\"1\":{\"623\":1}}],[\"如果你的类属性被分配给一个\",{\"1\":{\"79\":1}}],[\"如果尚未在项目或全局安装\",{\"1\":{\"618\":1}}],[\"如果出于某些原因\",{\"1\":{\"617\":1}}],[\"如果调研服务器端渲染\",{\"1\":{\"598\":1}}],[\"如果适用\",{\"1\":{\"573\":1}}],[\"如果dns查询很多\",{\"1\":{\"561\":1}}],[\"如果定时器为空\",{\"1\":{\"538\":1}}],[\"如果函数内部操作了dom\",{\"1\":{\"534\":1}}],[\"如果函数调用的时候有赋值\",{\"1\":{\"38\":2}}],[\"如果事件连续触发\",{\"1\":{\"534\":1}}],[\"如果渲染层工作较快完成\",{\"1\":{\"526\":1}}],[\"如果渲染dom则返回的是具体的dom节点\",{\"1\":{\"288\":1}}],[\"如果过期\",{\"1\":{\"520\":1}}],[\"如果父组件中存在\",{\"1\":{\"483\":1}}],[\"如果子元素之间\",{\"1\":{\"540\":2}}],[\"如果子组件中有\",{\"1\":{\"482\":1}}],[\"如果子类没有定义构造函数则会如同一个普通的类方法一样从父类继承\",{\"1\":{\"80\":1}}],[\"如果子类中定义了构造函数则不会隐式调用其父类的构造函数\",{\"1\":{\"80\":1}}],[\"如果相同选项为生命周期钩子\",{\"1\":{\"481\":1}}],[\"如果还有剩余的\",{\"1\":{\"460\":1}}],[\"如果有就直接用\",{\"1\":{\"554\":1}}],[\"如果有\",{\"1\":{\"527\":1}}],[\"如果有过渡效果\",{\"1\":{\"449\":1}}],[\"如果有继续下一个任务\",{\"1\":{\"170\":1}}],[\"如果条件出现在循环内部\",{\"1\":{\"444\":1}}],[\"如果两者都有子节点\",{\"1\":{\"423\":1}}],[\"如果oldvnode没有子节点而vnode有\",{\"1\":{\"423\":1}}],[\"如果oldvnode有子节点而vnode没有\",{\"1\":{\"423\":1}}],[\"如果都有文本节点且不相等\",{\"1\":{\"423\":1}}],[\"如果采用对象的data\",{\"1\":{\"417\":1}}],[\"如果路由很多\",{\"1\":{\"392\":1}}],[\"如果无法解析\",{\"1\":{\"389\":1}}],[\"如果只调用了super\",{\"1\":{\"318\":1}}],[\"如果只需为一个\",{\"1\":{\"148\":1}}],[\"如果先调用this\",{\"1\":{\"316\":1}}],[\"如果直接修改state的状态\",{\"1\":{\"302\":1}}],[\"如果ref设置的组件为一个类组件的时候\",{\"1\":{\"293\":1}}],[\"如果一个文件不带有\",{\"1\":{\"354\":1}}],[\"如果一个过大\",{\"1\":{\"282\":1}}],[\"如果一个变量包含一个类名的\",{\"1\":{\"78\":1}}],[\"如果一个变量名后有圆括号\",{\"1\":{\"66\":1}}],[\"如果需要深层次比较\",{\"1\":{\"281\":1}}],[\"如果需要传递refs的话\",{\"1\":{\"215\":1}}],[\"如果不满足以上四种情况\",{\"1\":{\"422\":1}}],[\"如果不传进去\",{\"1\":{\"317\":1}}],[\"如果不希望组件重新渲染\",{\"1\":{\"279\":1}}],[\"如果不是一个类的组件\",{\"1\":{\"231\":1}}],[\"如果说只是文本内容改变了\",{\"1\":{\"273\":1}}],[\"如果列表数据渲染中\",{\"1\":{\"273\":1}}],[\"如果提供了可选的回调函数callback\",{\"1\":{\"269\":1}}],[\"如果某些特定值在两次重渲染之间没有发生变化\",{\"1\":{\"256\":1}}],[\"如果使用key\",{\"1\":{\"458\":1,\"459\":1}}],[\"如果使用<transition>组件\",{\"1\":{\"449\":1}}],[\"如果使用一个类组件\",{\"1\":{\"246\":1}}],[\"如果使用手动操作真实dom来完成页面\",{\"1\":{\"164\":1}}],[\"如果我们对这个集合进行增删的操作改成\",{\"1\":{\"233\":1}}],[\"如果我们的组件在请求运行时更新\",{\"1\":{\"197\":1}}],[\"如果当前节点在新集合中的位置比老集合中的位置靠前的话\",{\"1\":{\"232\":1}}],[\"如果向一个高阶组件添加refe引用\",{\"1\":{\"215\":1}}],[\"如果选择非受控组件的话\",{\"1\":{\"203\":1}}],[\"如果是如果是异步占位符节点\",{\"1\":{\"460\":1}}],[\"如果是\",{\"1\":{\"422\":1,\"460\":1}}],[\"如果是为组件只能是一个函数\",{\"1\":{\"416\":1}}],[\"如果是下一个state依赖前一个state的话\",{\"1\":{\"306\":1}}],[\"如果是渲染组件则返回的是组件实例\",{\"1\":{\"288\":1}}],[\"如果是类组件\",{\"1\":{\"269\":1}}],[\"如果是函数组件\",{\"1\":{\"269\":1}}],[\"如果是文本节点\",{\"1\":{\"269\":1}}],[\"如果是原生标签节点\",{\"1\":{\"269\":1}}],[\"如果是相等则跳过effects执行\",{\"1\":{\"256\":1}}],[\"如果是同一个类的组件\",{\"1\":{\"231\":1}}],[\"如果是一个子元素\",{\"1\":{\"540\":1}}],[\"如果是一个类组件\",{\"1\":{\"196\":1}}],[\"如果是一个函数组件\",{\"1\":{\"196\":1}}],[\"如果是兄弟组件之间的传递\",{\"1\":{\"156\":1}}],[\"如果在指示位置的输入流中出现\",{\"1\":{\"688\":1}}],[\"如果在句法的生成式的部分右侧出现短语\",{\"1\":{\"688\":1}}],[\"如果在子类中不使用super\",{\"1\":{\"316\":1}}],[\"如果在useeffect回调函数中return\",{\"1\":{\"195\":1}}],[\"如果在函数内部\",{\"1\":{\"142\":1}}],[\"如果没有查到记录\",{\"1\":{\"519\":1}}],[\"如果没有提供render函数\",{\"1\":{\"486\":1}}],[\"如果没有\",{\"1\":{\"170\":1}}],[\"如果没有参数要传递给类的构造函数\",{\"1\":{\"78\":1}}],[\"如果组件较大\",{\"1\":{\"168\":1}}],[\"如果组件之间关系类型比较复杂的情况\",{\"1\":{\"158\":1}}],[\"如果想要改变它看\",{\"1\":{\"311\":1}}],[\"如果想要立刻获取更新后的值\",{\"1\":{\"304\":1}}],[\"如果想要获得原生dom事件\",{\"1\":{\"240\":1}}],[\"如果想要获取provider传递的数据\",{\"1\":{\"157\":1}}],[\"如果想要解除被控制\",{\"1\":{\"201\":1}}],[\"如果想要管理state状态\",{\"1\":{\"194\":1}}],[\"如果想要访问父组件传递过来的参数\",{\"1\":{\"190\":1}}],[\"如果想要函数的参数值始终通过引用传递\",{\"1\":{\"62\":1}}],[\"如果要将多个值赋给单个\",{\"1\":{\"148\":1}}],[\"如果要检查是否定义了某常量\",{\"1\":{\"47\":1}}],[\"如果外部变量名以有效的数组语法开头\",{\"1\":{\"147\":1}}],[\"如果全局变量不存在\",{\"1\":{\"143\":1}}],[\"如果可用\",{\"1\":{\"141\":1}}],[\"如果变量未提供\",{\"1\":{\"126\":1}}],[\"如果给定的一个数超出了\",{\"1\":{\"114\":1}}],[\"如果其中一种类型是交集类型\",{\"1\":{\"109\":1}}],[\"如果能从某处获得值\",{\"1\":{\"100\":1}}],[\"如果索引\",{\"1\":{\"100\":1}}],[\"如果用户在长时间运行的任务过程中与网页互动\",{\"1\":{\"575\":1}}],[\"如果用户开启了数据节省模式\",{\"1\":{\"548\":1}}],[\"如果用户一直在输入中\",{\"1\":{\"539\":1}}],[\"如果用到生命周期\",{\"1\":{\"195\":1}}],[\"如果用\",{\"1\":{\"100\":1}}],[\"如果用在被包括文件中\",{\"1\":{\"49\":1}}],[\"如果用在被包含文件中\",{\"1\":{\"49\":1}}],[\"如果类型不是函数\",{\"1\":{\"418\":1}}],[\"如果类型转换后\",{\"1\":{\"97\":3}}],[\"如果类常量定义为\",{\"1\":{\"91\":1}}],[\"如果尝试在\",{\"1\":{\"89\":1}}],[\"如果该类属于一个命名空间\",{\"1\":{\"78\":1}}],[\"如果后面还有新行\",{\"1\":{\"73\":1}}],[\"如果文件内容仅仅包含\",{\"1\":{\"71\":1}}],[\"如果\",{\"1\":{\"71\":1,\"97\":6,\"102\":5,\"168\":1,\"256\":1,\"576\":1}}],[\"如果希望允许函数修改它的参数值\",{\"1\":{\"62\":1}}],[\"如果主体表达式不能被任意分支条件处理\",{\"1\":{\"54\":1}}],[\"如果常量名是动态的\",{\"1\":{\"47\":1}}],[\"如果test\",{\"1\":{\"37\":1}}],[\"如果层层嵌套\",{\"1\":{\"33\":1}}],[\"如果此环境记录是由\",{\"1\":{\"29\":1}}],[\"如果值是lexical\",{\"1\":{\"29\":1}}],[\"如果词法声明和变量声明的连接有重复项\",{\"1\":{\"22\":1}}],[\"如果正在求值脚本\",{\"1\":{\"10\":1}}],[\"如果正在求值函数对象的代码\",{\"1\":{\"10\":1}}],[\"如array\",{\"1\":{\"14\":1}}],[\"在代码块内使用严格模式\",{\"0\":{\"703\":1}}],[\"在ecma中使用黑色粗体表示\",{\"1\":{\"681\":1}}],[\"在es6之后\",{\"1\":{\"338\":1}}],[\"在es6中\",{\"1\":{\"316\":1}}],[\"在比较相等性时\",{\"1\":{\"671\":1}}],[\"在标准上查看\",{\"1\":{\"671\":1}}],[\"在标准中\",{\"1\":{\"670\":1}}],[\"在标准中文法定义了语句的结构\",{\"1\":{\"667\":1}}],[\"在标准中声明的返回完成记录的抽象操作和所有内置函数中\",{\"1\":{\"663\":1}}],[\"在标准中可以找到六种声明实例化操作\",{\"1\":{\"33\":1}}],[\"在以下情况不适用\",{\"1\":{\"663\":1}}],[\"在以前\",{\"1\":{\"253\":1}}],[\"在抽象操作和语法导向操作调用时\",{\"1\":{\"661\":1}}],[\"在被调用时\",{\"1\":{\"658\":1}}],[\"在被安装时使用了\",{\"1\":{\"71\":1}}],[\"在运行时调用的算法\",{\"1\":{\"657\":1}}],[\"在上面的示例中\",{\"1\":{\"643\":1}}],[\"在上面的例子中\",{\"1\":{\"316\":1}}],[\"在查阅或分析manifest时\",{\"1\":{\"632\":1}}],[\"在浏览器端\",{\"1\":{\"632\":1}}],[\"在浏览器中衡量导航请求的\",{\"1\":{\"574\":1}}],[\"在按需加载\",{\"1\":{\"632\":1}}],[\"在打包过程中\",{\"1\":{\"627\":1}}],[\"在打包完成后\",{\"1\":{\"622\":1}}],[\"在模块化编程中\",{\"1\":{\"625\":1}}],[\"在webpack的配置文件中\",{\"1\":{\"630\":1}}],[\"在webpack打包的过程中\",{\"1\":{\"622\":1}}],[\"在webpack中配置资源预加载\",{\"1\":{\"597\":1}}],[\"在webpack中通过require\",{\"1\":{\"549\":1}}],[\"在加载模块之后\",{\"1\":{\"622\":1}}],[\"在构建时简单的生成针对特定路由的静态html文件\",{\"1\":{\"598\":1}}],[\"在构造函数执行完毕之前已被赋值\",{\"1\":{\"317\":1}}],[\"在js中\",{\"1\":{\"606\":1}}],[\"在js中衡量ttfb\",{\"0\":{\"574\":1}}],[\"在js中衡量fcp\",{\"0\":{\"568\":1}}],[\"在js对象中\",{\"1\":{\"398\":1}}],[\"在dns查询过程中\",{\"1\":{\"561\":1}}],[\"在diff比较的过程中\",{\"1\":{\"421\":1}}],[\"在框架中\",{\"1\":{\"548\":1}}],[\"在工程化环境中还有以下方式\",{\"1\":{\"548\":1}}],[\"在连续触发时\",{\"1\":{\"534\":2,\"537\":2}}],[\"在n秒内函数只能执行一次\",{\"1\":{\"534\":1}}],[\"在任何逻辑层和视图层之间的数据传递都是线程间的通信\",{\"1\":{\"526\":1}}],[\"在任何时候\",{\"1\":{\"10\":1}}],[\"在逻辑层发生数据变更的时候\",{\"1\":{\"526\":1}}],[\"在逻辑位置写模板代码\",{\"1\":{\"507\":1}}],[\"在小程序中调用微信的api完成支付功能\",{\"1\":{\"524\":1}}],[\"在小程序中\",{\"1\":{\"519\":1,\"525\":1}}],[\"在小数点后五位精度内都是相等的\",{\"1\":{\"117\":1}}],[\"在表单元素\",{\"1\":{\"501\":1}}],[\"在修改数据之后立即使用这个方法\",{\"1\":{\"490\":1}}],[\"在下次dom更新循环结束之后执行延迟回调\",{\"1\":{\"490\":1}}],[\"在下面的示例中\",{\"1\":{\"150\":1,\"638\":1}}],[\"在递归合并的时候组件的选项会覆盖mixin的选项\",{\"1\":{\"481\":1}}],[\"在内存中重新渲染虚拟dom树\",{\"1\":{\"468\":1}}],[\"在不使用key的情况\",{\"1\":{\"459\":1}}],[\"在keep\",{\"1\":{\"454\":1}}],[\"在元素卸载前确保\",{\"1\":{\"449\":1}}],[\"在选项filters中定义\",{\"1\":{\"436\":1}}],[\"在进行patchvnode\",{\"1\":{\"422\":1}}],[\"在实例中可以定义为对象或函数\",{\"1\":{\"416\":1}}],[\"在实际开发过程中\",{\"1\":{\"282\":1}}],[\"在实际应用中\",{\"1\":{\"216\":1}}],[\"在某个地方写错了迫使vue实例重新渲染\",{\"1\":{\"404\":1}}],[\"在某些情况下\",{\"1\":{\"294\":1}}],[\"在全局路由守卫中调用addroutes添加路由\",{\"1\":{\"392\":1}}],[\"在路由上标记相应的权限信息\",{\"1\":{\"392\":1}}],[\"在vue3中v\",{\"1\":{\"444\":1}}],[\"在vue3中被统一为attrs\",{\"1\":{\"386\":1}}],[\"在vue2中v\",{\"1\":{\"444\":1}}],[\"在vue中提供了一套数据驱动视图更为方便的操作\",{\"1\":{\"426\":1}}],[\"在vue中使用\",{\"0\":{\"357\":1}}],[\"在html文件中\",{\"1\":{\"630\":1}}],[\"在html中slot元素\",{\"1\":{\"494\":1}}],[\"在http\",{\"1\":{\"555\":1}}],[\"在history模式下的问题\",{\"1\":{\"383\":1}}],[\"在hooks出来之前\",{\"1\":{\"194\":1}}],[\"在我们安装完git之后\",{\"1\":{\"377\":1}}],[\"在我们日常使用中\",{\"1\":{\"258\":1}}],[\"在ts中\",{\"1\":{\"354\":1}}],[\"在tsconfig\",{\"1\":{\"352\":1}}],[\"在前端开发中\",{\"1\":{\"322\":1}}],[\"在调用super过程\",{\"1\":{\"318\":1}}],[\"在调用super\",{\"1\":{\"317\":1}}],[\"在子组件中\",{\"1\":{\"311\":1}}],[\"在settimeout或者原生dom事件中\",{\"1\":{\"305\":1}}],[\"在第二个参数的回调中更新后会执行\",{\"1\":{\"304\":1}}],[\"在渲染线程被初始化已经完成\",{\"1\":{\"516\":1}}],[\"在渲染过程中\",{\"1\":{\"292\":1}}],[\"在渲染组件时\",{\"1\":{\"168\":1}}],[\"在最后一个比较的时候\",{\"1\":{\"273\":1}}],[\"在数据后面插入一条数据\",{\"1\":{\"273\":1}}],[\"在转化过程中\",{\"1\":{\"268\":1}}],[\"在constructor中预先bind当前组件\",{\"1\":{\"248\":1}}],[\"在c节点下创建b以及下属节点\",{\"1\":{\"230\":1}}],[\"在其中给某个组件\",{\"1\":{\"246\":1}}],[\"在新集合访问过的节点中\",{\"1\":{\"232\":1}}],[\"在这个环境下执行的都是有关小程序业务逻辑的代码\",{\"1\":{\"525\":1}}],[\"在这种情况下\",{\"1\":{\"273\":1,\"299\":1}}],[\"在这一方面\",{\"1\":{\"219\":1}}],[\"在这里仅执行一次\",{\"1\":{\"98\":1}}],[\"在这里写代码\",{\"1\":{\"57\":1}}],[\"在考虑组件的选择原则上\",{\"1\":{\"211\":1}}],[\"在类型实例化时\",{\"1\":{\"350\":1}}],[\"在类型理论中\",{\"1\":{\"133\":1}}],[\"在类组件中\",{\"1\":{\"297\":1}}],[\"在类创建的方式中通过this\",{\"1\":{\"210\":1}}],[\"在函数内部实现state的更新\",{\"1\":{\"201\":1}}],[\"在函数组件中直接使用变量\",{\"1\":{\"255\":1}}],[\"在函数组件中通过\",{\"1\":{\"255\":2}}],[\"在函数组件中通过usestate实现函数内部维护state\",{\"1\":{\"255\":1}}],[\"在函数组件中\",{\"1\":{\"195\":1,\"297\":1}}],[\"在函数之外定义的任何变量都仅限于全局作用域\",{\"1\":{\"142\":1}}],[\"在render函数中将虚拟dom渲染成真实dom\",{\"1\":{\"466\":1}}],[\"在render过程中\",{\"1\":{\"297\":1}}],[\"在render中this\",{\"1\":{\"317\":1}}],[\"在render中\",{\"1\":{\"297\":1}}],[\"在react源码中\",{\"1\":{\"270\":1}}],[\"在react应用中\",{\"1\":{\"244\":1}}],[\"在react\",{\"1\":{\"208\":1,\"236\":1,\"264\":1}}],[\"在react目前来讲\",{\"1\":{\"207\":1}}],[\"在react中实现过渡动画效果会有很多种选择\",{\"1\":{\"321\":1}}],[\"在react中这套事件机制被称之为合成事件\",{\"1\":{\"239\":1}}],[\"在react中\",{\"1\":{\"162\":1,\"169\":1,\"206\":1,\"208\":1,\"214\":1,\"269\":1,\"280\":1,\"297\":1,\"317\":1,\"318\":1,\"322\":1}}],[\"在return中返回react对象\",{\"1\":{\"190\":1}}],[\"在组件实例被从页面节点树移除时执行\",{\"1\":{\"516\":1}}],[\"在组件实例被移动到节点树另一个位置时执行\",{\"1\":{\"516\":1}}],[\"在组件渲染或计算属性执行时\",{\"1\":{\"501\":1}}],[\"在组件内部可以进行修改\",{\"1\":{\"312\":1}}],[\"在组件内部是不可修改的\",{\"1\":{\"312\":1}}],[\"在组件内直接使用css该方式编写方便\",{\"1\":{\"225\":1}}],[\"在组件内直接使用\",{\"0\":{\"221\":1},\"1\":{\"220\":1}}],[\"在组件生命周期或react合成事件中\",{\"1\":{\"305\":1}}],[\"在组件通信过程中可以使用usecontext\",{\"1\":{\"257\":1}}],[\"在组件中必须实现render方法\",{\"1\":{\"190\":1}}],[\"在组件更新后可以根据这些信息恢复一些ui视觉上的状态\",{\"1\":{\"182\":1}}],[\"在每次render方法前调用\",{\"1\":{\"177\":1}}],[\"在每个小程序页面的生命周期中\",{\"1\":{\"526\":1}}],[\"在每个\",{\"1\":{\"56\":1,\"637\":1}}],[\"在该方法中\",{\"1\":{\"176\":1,\"183\":1}}],[\"在该作用域中读取\",{\"1\":{\"66\":1}}],[\"在该作用域中需要\",{\"1\":{\"66\":1}}],[\"在方法内部通过super关键字获取来自父组件的props\",{\"1\":{\"176\":1}}],[\"在完成一部分任务之后\",{\"1\":{\"170\":1}}],[\"在一些列出所有替代方案不切实际的情况下\",{\"1\":{\"689\":1}}],[\"在一些性能要求极高的应用中虚拟\",{\"1\":{\"164\":1}}],[\"在一定时间间隔内\",{\"1\":{\"537\":1}}],[\"在一段时间内再次打开\",{\"1\":{\"527\":1}}],[\"在一个\",{\"1\":{\"73\":1}}],[\"在大规模应用下维护起来也很困难\",{\"1\":{\"164\":1}}],[\"在使用\",{\"1\":{\"645\":1}}],[\"在使用这些表达式之前\",{\"1\":{\"623\":1}}],[\"在使用key的情况\",{\"1\":{\"459\":1}}],[\"在使用setstate更新数据的时候\",{\"1\":{\"303\":1}}],[\"在使用hooks情况下\",{\"1\":{\"194\":1}}],[\"在使用过程中会被babel进行编译转化成js代码\",{\"1\":{\"162\":1}}],[\"在使用输出缓冲时也很便利\",{\"1\":{\"73\":1}}],[\"在页面渲染出的每一个结点都是一个真实dom结构\",{\"1\":{\"162\":1}}],[\"在此函数中传入值\",{\"1\":{\"155\":1}}],[\"在此场景下需要用括号包裹起来调用\",{\"1\":{\"79\":1}}],[\"在脚本中是单个数组\",{\"1\":{\"148\":1}}],[\"在命名函数或匿名函数内创建的任何变量都仅限于函数主体的作用域\",{\"1\":{\"142\":1}}],[\"在单引号字符串中的\",{\"1\":{\"120\":1}}],[\"在非静态属性上有两个钩子\",{\"1\":{\"90\":1}}],[\"在php标记以外的内容都会被php解析器忽略\",{\"1\":{\"72\":1}}],[\"在\",{\"1\":{\"47\":2,\"61\":1,\"92\":2,\"98\":1,\"109\":1,\"122\":1,\"127\":2,\"144\":1,\"197\":1,\"223\":1,\"261\":1,\"299\":1,\"637\":2,\"702\":1}}],[\"在相关领域代码的全局代码中\",{\"1\":{\"32\":1}}],[\"在程序运行前\",{\"1\":{\"14\":1}}],[\"lcp\",{\"1\":{\"569\":2,\"580\":1}}],[\"l\",{\"1\":{\"442\":1,\"443\":1,\"482\":1}}],[\"l是vue的列表渲染函数\",{\"1\":{\"442\":1}}],[\"lng\",{\"1\":{\"263\":4}}],[\"largest\",{\"1\":{\"580\":1}}],[\"layout\",{\"1\":{\"570\":1,\"580\":1}}],[\"lazy修饰符\",{\"1\":{\"389\":1}}],[\"lazy\",{\"1\":{\"389\":1,\"551\":1,\"629\":1}}],[\"lat\",{\"1\":{\"263\":4}}],[\"lang\",{\"1\":{\"219\":1}}],[\"lanes\",{\"1\":{\"169\":1}}],[\"label>\",{\"1\":{\"154\":1}}],[\"lasteffect\",{\"1\":{\"169\":1}}],[\"last\",{\"1\":{\"71\":1,\"73\":1,\"100\":2,\"558\":1}}],[\"like\",{\"1\":{\"618\":2}}],[\"ligthouse可以对网页的各项性能进行评分\",{\"1\":{\"578\":1}}],[\"lighthouse\",{\"1\":{\"576\":1,\"578\":1}}],[\"li\",{\"1\":{\"541\":4,\"606\":4,\"607\":4,\"608\":4}}],[\"liu\",{\"1\":{\"336\":1}}],[\"li>\",{\"1\":{\"273\":1,\"541\":6}}],[\"lin\",{\"1\":{\"335\":1,\"336\":3}}],[\"lindaidai\",{\"1\":{\"201\":1,\"202\":1}}],[\"lineterminator\",{\"1\":{\"688\":3}}],[\"lines\",{\"1\":{\"123\":2}}],[\"line\",{\"1\":{\"49\":2,\"67\":1}}],[\"listen\",{\"1\":{\"585\":2}}],[\"listeners\",{\"1\":{\"386\":2}}],[\"list\",{\"1\":{\"126\":1,\"442\":2,\"443\":2,\"444\":1,\"459\":3,\"541\":5,\"668\":1}}],[\"literally\",{\"1\":{\"123\":2}}],[\"ll\",{\"1\":{\"120\":1}}],[\"lookahead\",{\"1\":{\"687\":5}}],[\"loop\",{\"1\":{\"606\":3,\"607\":3,\"608\":3}}],[\"loopcontinues为false\",{\"1\":{\"37\":1}}],[\"location\",{\"1\":{\"585\":4,\"596\":1}}],[\"localhost\",{\"1\":{\"585\":4}}],[\"local\",{\"1\":{\"253\":1}}],[\"localstorage\",{\"1\":{\"216\":2}}],[\"loader\",{\"0\":{\"635\":1},\"1\":{\"599\":2,\"618\":4,\"622\":4,\"627\":3,\"636\":14,\"637\":4,\"638\":11,\"639\":17,\"643\":2,\"644\":1}}],[\"loadedmodules\",{\"1\":{\"11\":1}}],[\"loading=\",{\"1\":{\"551\":1,\"601\":1}}],[\"loading\",{\"1\":{\"548\":2,\"601\":1,\"629\":1}}],[\"long\",{\"1\":{\"61\":1}}],[\"login\",{\"1\":{\"519\":2,\"599\":1}}],[\"logparameter\",{\"1\":{\"352\":2}}],[\"logerrortomyservice\",{\"1\":{\"236\":1}}],[\"log\",{\"1\":{\"26\":1,\"38\":2,\"162\":1,\"182\":2,\"195\":2,\"202\":1,\"215\":2,\"216\":1,\"240\":1,\"241\":6,\"244\":2,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"269\":1,\"298\":4,\"304\":2,\"305\":2,\"306\":3,\"310\":1,\"316\":2,\"317\":4,\"352\":6,\"353\":4,\"362\":2,\"568\":1,\"574\":3,\"646\":1}}],[\"less\",{\"1\":{\"626\":1}}],[\"level\",{\"1\":{\"585\":2}}],[\"length\",{\"1\":{\"269\":2,\"280\":3,\"335\":1,\"450\":1,\"482\":1,\"585\":2}}],[\"left\",{\"1\":{\"96\":1,\"334\":1,\"389\":1}}],[\"lexicaldeclarationexpressionopt\",{\"1\":{\"37\":1}}],[\"lexical\",{\"1\":{\"29\":1}}],[\"lexicalenvironment\",{\"1\":{\"10\":1}}],[\"lexdeclarations\",{\"1\":{\"22\":2}}],[\"let\",{\"1\":{\"18\":6,\"28\":1,\"35\":1,\"37\":1,\"38\":4,\"157\":1,\"216\":2,\"269\":7,\"280\":1,\"316\":1,\"335\":2,\"336\":4,\"352\":1,\"482\":2,\"535\":1,\"538\":2,\"606\":8,\"607\":8,\"608\":9,\"645\":1,\"662\":2,\"668\":2}}],[\"列表项高不一定是固定的\",{\"1\":{\"610\":1}}],[\"列表项高度\",{\"1\":{\"610\":1}}],[\"列表数据\",{\"1\":{\"542\":1}}],[\"列表渲染\",{\"1\":{\"501\":1}}],[\"列表页的某些数据=>详情页\",{\"1\":{\"530\":1}}],[\"列表页应该缓存\",{\"1\":{\"454\":1}}],[\"列表页\",{\"1\":{\"454\":2}}],[\"列表\",{\"1\":{\"11\":2}}],[\"含义\",{\"1\":{\"11\":1,\"121\":1,\"534\":1,\"537\":1,\"540\":1}}],[\"值时\",{\"1\":{\"698\":1}}],[\"值或特征相同意味着相等\",{\"1\":{\"671\":1}}],[\"值是对应的回调函数\",{\"1\":{\"386\":1}}],[\"值可以舍弃小数部分\",{\"1\":{\"115\":1}}],[\"值的字长可以用常量\",{\"1\":{\"113\":1}}],[\"值对应变量的内容\",{\"1\":{\"143\":1}}],[\"值对并且顺序和类型都相同则为\",{\"1\":{\"102\":1}}],[\"值对则为\",{\"1\":{\"102\":1}}],[\"值参数\",{\"1\":{\"61\":1}}],[\"值\",{\"1\":{\"11\":1,\"29\":1,\"31\":1,\"32\":1,\"97\":1,\"112\":1,\"515\":1,\"698\":1}}],[\"值为该函数对象\",{\"1\":{\"10\":1}}],[\"以供应用程序使用\",{\"1\":{\"635\":1}}],[\"以优化页面加载时间和提高应用的性能\",{\"1\":{\"629\":1}}],[\"以占位符形式展示页面结构的技术\",{\"1\":{\"600\":1}}],[\"以防\",{\"1\":{\"585\":1}}],[\"以秒为单位\",{\"1\":{\"576\":1}}],[\"以时间较短者为准\",{\"1\":{\"569\":1}}],[\"以便它可以在所有\",{\"1\":{\"646\":1}}],[\"以便在需要时查阅或使用\",{\"1\":{\"632\":1}}],[\"以便在浏览器中运行你的应用\",{\"1\":{\"630\":1}}],[\"以便后续再次需要该模块时能够直接从缓存中获取\",{\"1\":{\"631\":1}}],[\"以便于在浏览器中加载和运行\",{\"1\":{\"622\":2}}],[\"以便按需加载\",{\"1\":{\"549\":1}}],[\"以便生成最终的组件配置对象\",{\"1\":{\"482\":1}}],[\"以便您可以在\",{\"1\":{\"197\":1}}],[\"以js对象作为基础的树\",{\"1\":{\"398\":1}}],[\"以此类推\",{\"1\":{\"365\":1}}],[\"以使前端应用程序更高效\",{\"1\":{\"261\":1}}],[\"以下的是一般运行时语义\",{\"1\":{\"657\":1}}],[\"以下示例展示了如何创建一个监听\",{\"1\":{\"574\":1}}],[\"以下所有\",{\"1\":{\"571\":1}}],[\"以下列出了当前有效的方法\",{\"1\":{\"147\":1}}],[\"以下情况不需要创建\",{\"1\":{\"38\":1}}],[\"以下情况会创建执行上下文\",{\"1\":{\"9\":1}}],[\"以后\",{\"1\":{\"113\":1}}],[\"以上表示\",{\"1\":{\"685\":1,\"686\":1}}],[\"以上例子等同于于以下\",{\"1\":{\"99\":1}}],[\"以上等同于以下的\",{\"1\":{\"98\":1}}],[\"以上示例会输出\",{\"1\":{\"73\":1,\"123\":1}}],[\"以及被添加到依赖图中\",{\"1\":{\"635\":1}}],[\"以及优化应用的加载性能\",{\"1\":{\"632\":1}}],[\"以及webpack在打包过程中对这些模块进行的一系列转换和优化后的结果\",{\"1\":{\"628\":1}}],[\"以及代码压缩混淆\",{\"1\":{\"621\":1}}],[\"以及本次会话密钥session\",{\"1\":{\"519\":1}}],[\"以及原生的css都能完成切换动画\",{\"1\":{\"321\":1}}],[\"以及组件中的状态发生了变化之后\",{\"1\":{\"268\":1}}],[\"以及在地图上添加的标记的步骤如下\",{\"1\":{\"263\":1}}],[\"以及其他有用的诊断性性能指标\",{\"1\":{\"580\":1}}],[\"以及其他的\",{\"1\":{\"253\":1}}],[\"以及其他相关状态和资源组成\",{\"1\":{\"11\":1}}],[\"以及函数\",{\"1\":{\"77\":1}}],[\"以及\",{\"1\":{\"53\":1}}],[\"以及一些特别的定时器方法globalthis\",{\"1\":{\"16\":1}}],[\"以及许多事件监听方法\",{\"1\":{\"16\":1}}],[\"early\",{\"1\":{\"668\":1}}],[\"edge开发者工具\",{\"1\":{\"578\":1}}],[\"edge上的使用\",{\"1\":{\"578\":1}}],[\"edge逐个渲染\",{\"1\":{\"270\":1}}],[\"etag的值放入if\",{\"1\":{\"559\":1}}],[\"etag会得到更新\",{\"1\":{\"559\":1}}],[\"etag标头的值是服务器生成的任意值\",{\"1\":{\"559\":1}}],[\"err\",{\"1\":{\"549\":1,\"645\":1}}],[\"errorinfo\",{\"1\":{\"236\":2}}],[\"errorboundary>\",{\"1\":{\"236\":1}}],[\"errorboundary\",{\"1\":{\"236\":1}}],[\"error\",{\"1\":{\"65\":1,\"100\":4,\"236\":9,\"460\":1,\"516\":1,\"668\":1}}],[\"e与d\",{\"1\":{\"459\":1}}],[\"every\",{\"1\":{\"618\":1}}],[\"eventbus\",{\"1\":{\"386\":1}}],[\"eventname\",{\"1\":{\"269\":2}}],[\"event\",{\"0\":{\"540\":1},\"1\":{\"236\":1,\"389\":2,\"501\":1}}],[\"evaluate\",{\"1\":{\"638\":1}}],[\"evaluated\",{\"1\":{\"353\":4}}],[\"evaluationscript\",{\"1\":{\"667\":1}}],[\"evaluation\",{\"1\":{\"10\":1}}],[\"eval函数声明实例化\",{\"1\":{\"33\":1}}],[\"evaldeclarationinstantiation\",{\"1\":{\"33\":1}}],[\"effecttag\",{\"1\":{\"169\":1}}],[\"effect\",{\"1\":{\"169\":5,\"256\":1}}],[\"elm\",{\"1\":{\"460\":4}}],[\"el\",{\"1\":{\"358\":2,\"427\":1,\"443\":22,\"449\":11,\"459\":1,\"465\":1}}],[\"element层级\",{\"0\":{\"232\":1}}],[\"elementtype\",{\"1\":{\"169\":1}}],[\"element\",{\"1\":{\"154\":1,\"170\":3,\"229\":1,\"269\":1,\"292\":2,\"311\":1,\"407\":1,\"443\":1,\"502\":1}}],[\"else>c<\",{\"1\":{\"450\":1}}],[\"elseif\",{\"1\":{\"53\":3,\"109\":1}}],[\"else\",{\"1\":{\"53\":3,\"72\":1,\"85\":2,\"98\":2,\"99\":2,\"109\":2,\"148\":1,\"269\":5,\"280\":1,\"349\":1,\"443\":6,\"449\":1,\"450\":6,\"460\":8,\"548\":1,\"660\":1}}],[\"eod\",{\"1\":{\"123\":2}}],[\"eot$|\",{\"1\":{\"585\":1}}],[\"eot\",{\"1\":{\"122\":1}}],[\"eol\",{\"1\":{\"79\":1,\"91\":1}}],[\"es规范类型\",{\"0\":{\"694\":1}}],[\"es语言类型\",{\"0\":{\"692\":1}}],[\"es语言值\",{\"1\":{\"29\":1}}],[\"es2015\",{\"1\":{\"626\":1}}],[\"es6\",{\"1\":{\"618\":1}}],[\"es6类\",{\"0\":{\"316\":1}}],[\"es5\",{\"1\":{\"352\":1,\"623\":1}}],[\"es自带能力\",{\"0\":{\"342\":1}}],[\"es特性\",{\"1\":{\"341\":1}}],[\"escape\",{\"1\":{\"121\":1}}],[\"e\",{\"1\":{\"121\":1,\"123\":2,\"155\":4,\"202\":4,\"240\":2,\"241\":4,\"247\":2,\"302\":1,\"325\":1,\"442\":1,\"443\":1,\"459\":2,\"541\":2,\"622\":1}}],[\"emittodo\",{\"1\":{\"362\":2}}],[\"emit\",{\"0\":{\"362\":1},\"1\":{\"362\":3}}],[\"emp\",{\"1\":{\"352\":2}}],[\"employee\",{\"1\":{\"352\":2}}],[\"empty\",{\"1\":{\"45\":1,\"98\":2,\"667\":1,\"686\":2}}],[\"emotion\",{\"1\":{\"224\":1}}],[\"email=\",{\"1\":{\"154\":1}}],[\"emailinput\",{\"1\":{\"154\":1}}],[\"email\",{\"1\":{\"147\":4,\"154\":2,\"377\":2}}],[\"embedded\",{\"1\":{\"120\":1}}],[\"epsilon\",{\"1\":{\"117\":1}}],[\"equivalent\",{\"1\":{\"71\":1}}],[\"equals\",{\"1\":{\"53\":2}}],[\"equal\",{\"1\":{\"53\":1}}],[\"ensure和import\",{\"1\":{\"549\":1}}],[\"ensure\",{\"1\":{\"548\":4,\"549\":1,\"623\":1}}],[\"ensure技术\",{\"1\":{\"548\":1}}],[\"engine=engine\",{\"1\":{\"339\":1}}],[\"engine\",{\"1\":{\"339\":2}}],[\"enqueuesetstate\",{\"1\":{\"302\":1}}],[\"enhance\",{\"1\":{\"215\":1}}],[\"enhancedcomponent\",{\"1\":{\"214\":1,\"215\":3}}],[\"enum\",{\"1\":{\"130\":1,\"330\":1,\"344\":2}}],[\"enabled\",{\"1\":{\"71\":1}}],[\"entrylist\",{\"1\":{\"568\":2,\"574\":2}}],[\"entry\",{\"1\":{\"552\":5,\"568\":3,\"599\":1,\"616\":1,\"622\":3,\"629\":1,\"644\":2}}],[\"entries\",{\"1\":{\"552\":2}}],[\"enter\",{\"1\":{\"182\":2,\"322\":1,\"323\":6,\"324\":2,\"325\":2,\"449\":1}}],[\"ent\",{\"1\":{\"65\":3}}],[\"encode\",{\"1\":{\"65\":1}}],[\"encoding=\",{\"1\":{\"57\":1}}],[\"encoding\",{\"0\":{\"57\":1},\"1\":{\"55\":1,\"57\":1,\"585\":2}}],[\"endindex移动到b\",{\"1\":{\"421\":1}}],[\"endif\",{\"1\":{\"53\":3,\"72\":1}}],[\"end\",{\"1\":{\"216\":3}}],[\"endswitch\",{\"1\":{\"53\":1}}],[\"endforeach\",{\"1\":{\"53\":1}}],[\"endfor\",{\"1\":{\"53\":1}}],[\"endwhile\",{\"1\":{\"53\":1}}],[\"env\",{\"1\":{\"38\":1,\"585\":2,\"615\":1,\"618\":1}}],[\"environment\",{\"0\":{\"624\":1},\"1\":{\"13\":1,\"26\":1,\"38\":1}}],[\"echo\",{\"1\":{\"47\":2,\"53\":5,\"56\":1,\"62\":1,\"63\":1,\"64\":1,\"66\":3,\"71\":7,\"72\":2,\"73\":4,\"74\":5,\"77\":1,\"79\":1,\"81\":1,\"84\":1,\"91\":5,\"98\":2,\"101\":1,\"109\":7,\"117\":1,\"120\":7,\"122\":1,\"123\":1,\"126\":8,\"129\":1,\"140\":2,\"143\":2,\"144\":2,\"145\":2,\"147\":5}}],[\"ecma\",{\"2\":{\"691\":1}}],[\"ecma对普通脚本的定义\",{\"1\":{\"676\":1}}],[\"ecma语言值\",{\"1\":{\"671\":1}}],[\"ecma语言值以粗体显示\",{\"1\":{\"670\":1}}],[\"ecma规范类型值\",{\"1\":{\"671\":1}}],[\"ecma通过算法或描述性要求来表达的额外规则\",{\"1\":{\"668\":1}}],[\"ecma在抽象操作\",{\"1\":{\"45\":1}}],[\"ecma中的语言值以粗体表示\",{\"1\":{\"45\":1}}],[\"ecma中的携带文法参数产生式如下所示\",{\"1\":{\"44\":1}}],[\"ecma中的产生式\",{\"1\":{\"43\":1}}],[\"ecma是一个js标准\",{\"1\":{\"42\":1}}],[\"ecmascript\",{\"1\":{\"30\":1,\"627\":1,\"698\":1}}],[\"ecmascript执行上下文的词法环境组件指向一个环境记录器\",{\"1\":{\"26\":1}}],[\"ecmascript有两种常见的宿主\",{\"1\":{\"13\":1}}],[\"ecmascript并不是一门能够独立运行的编程语言\",{\"1\":{\"13\":1}}],[\"ecmascript代码的执行上下文还有额外的三个组件\",{\"1\":{\"10\":1}}],[\"ecma标准\",{\"0\":{\"24\":1},\"2\":{\"12\":1,\"17\":1,\"23\":1,\"25\":1,\"40\":1,\"46\":1,\"654\":1,\"656\":1,\"664\":1,\"672\":1,\"677\":1,\"679\":1,\"690\":1,\"693\":1,\"695\":1,\"697\":1,\"704\":1}}],[\"exception\",{\"1\":{\"659\":1}}],[\"exclude\",{\"1\":{\"453\":1,\"599\":1}}],[\"existing\",{\"1\":{\"232\":1}}],[\"existent\",{\"1\":{\"100\":1}}],[\"exit和xxx\",{\"1\":{\"323\":1}}],[\"exit\",{\"1\":{\"135\":1,\"322\":2,\"323\":3,\"324\":2,\"325\":2}}],[\"expires\",{\"1\":{\"555\":2}}],[\"expires标头使用明确的时间\",{\"1\":{\"555\":1}}],[\"expirationtime\",{\"1\":{\"169\":3}}],[\"experimentaldecorators\",{\"1\":{\"352\":1}}],[\"exports\",{\"1\":{\"585\":1,\"597\":1,\"599\":1,\"616\":1,\"638\":1,\"643\":1,\"644\":1,\"646\":1}}],[\"export关键字可以导出类型\",{\"1\":{\"354\":1}}],[\"export\",{\"1\":{\"202\":1,\"215\":1,\"216\":1,\"221\":1,\"222\":1,\"223\":1,\"224\":3,\"241\":1,\"269\":2,\"281\":2,\"302\":1,\"323\":1,\"324\":1,\"325\":1,\"354\":2,\"355\":2,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1,\"386\":1,\"443\":1,\"449\":1,\"450\":1,\"482\":2,\"548\":1,\"585\":1}}],[\"explode\",{\"1\":{\"148\":1}}],[\"expand\",{\"1\":{\"120\":2}}],[\"express\",{\"1\":{\"413\":1}}],[\"expression的形式是object\",{\"1\":{\"351\":1}}],[\"expression2\",{\"1\":{\"54\":1}}],[\"expression1\",{\"1\":{\"54\":1}}],[\"expression\",{\"1\":{\"38\":1,\"54\":5,\"72\":1,\"427\":1,\"682\":1,\"688\":1}}],[\"expressionopt\",{\"1\":{\"37\":1}}],[\"expr3\",{\"1\":{\"98\":2}}],[\"expr1\",{\"1\":{\"98\":4}}],[\"execute\",{\"1\":{\"638\":1}}],[\"exec\",{\"1\":{\"101\":2}}],[\"extensions\",{\"1\":{\"599\":1}}],[\"extend\",{\"1\":{\"417\":1,\"483\":2}}],[\"extending\",{\"1\":{\"81\":1}}],[\"extendclass\",{\"1\":{\"81\":2}}],[\"extends\",{\"1\":{\"80\":2,\"81\":2,\"103\":1,\"155\":2,\"156\":1,\"157\":1,\"190\":1,\"193\":1,\"196\":1,\"197\":1,\"201\":1,\"202\":1,\"210\":1,\"215\":2,\"216\":5,\"221\":1,\"222\":1,\"223\":1,\"224\":1,\"236\":2,\"241\":1,\"244\":1,\"246\":1,\"247\":1,\"248\":1,\"249\":1,\"255\":1,\"256\":1,\"261\":1,\"264\":1,\"269\":1,\"290\":1,\"291\":1,\"292\":1,\"297\":1,\"298\":2,\"302\":1,\"310\":1,\"311\":1,\"316\":2,\"317\":3,\"323\":1,\"324\":1,\"325\":1,\"335\":1,\"337\":1,\"340\":1,\"343\":1,\"358\":1,\"359\":1,\"360\":1,\"361\":1,\"362\":1}}],[\"ext\",{\"1\":{\"149\":2,\"585\":1}}],[\"extract\",{\"1\":{\"618\":2}}],[\"extra\",{\"1\":{\"62\":4}}],[\"example<\",{\"1\":{\"74\":1}}],[\"example\",{\"1\":{\"38\":2,\"67\":1,\"74\":1,\"90\":2,\"123\":2,\"147\":1,\"255\":2,\"256\":2,\"261\":1,\"551\":1}}],[\"skeleton\",{\"1\":{\"601\":1}}],[\"ssg\",{\"2\":{\"591\":1}}],[\"ssg静态站点生成\",{\"0\":{\"589\":1}}],[\"ssr\",{\"1\":{\"598\":2},\"2\":{\"594\":1}}],[\"ssr服务端渲染\",{\"0\":{\"592\":1}}],[\"ssr优化\",{\"1\":{\"508\":1}}],[\"ssr速度提高2~3倍\",{\"1\":{\"506\":1}}],[\"svg元素中的image元素\",{\"1\":{\"569\":1}}],[\"svg元素或非白色的canvas元素\",{\"1\":{\"567\":1}}],[\"sfc\",{\"1\":{\"501\":1}}],[\"slot本质上是返回vnode的函数\",{\"1\":{\"497\":1}}],[\"slot\",{\"0\":{\"494\":1},\"1\":{\"443\":1}}],[\"slottarget\",{\"1\":{\"443\":1}}],[\"slice\",{\"1\":{\"269\":2}}],[\"s函数的全称是tostring\",{\"1\":{\"438\":1}}],[\"symbol\",{\"1\":{\"330\":1}}],[\"syntax\",{\"1\":{\"123\":2,\"657\":1}}],[\"syntaxerror\",{\"1\":{\"22\":1}}],[\"square\",{\"1\":{\"323\":2}}],[\"sqrt\",{\"1\":{\"144\":1}}],[\"src\",{\"1\":{\"224\":1,\"268\":1,\"552\":2,\"599\":1,\"616\":1,\"643\":1,\"644\":1}}],[\"src=\",{\"1\":{\"147\":1,\"224\":1,\"268\":1,\"459\":1,\"551\":1,\"626\":1}}],[\"solutions\",{\"1\":{\"618\":2}}],[\"solidus\",{\"1\":{\"698\":1}}],[\"solid\",{\"1\":{\"224\":1}}],[\"soon\",{\"1\":{\"574\":1}}],[\"sourcecharacter\",{\"1\":{\"689\":1}}],[\"source\",{\"1\":{\"269\":1}}],[\"someobject\",{\"1\":{\"404\":1}}],[\"someobject=object\",{\"1\":{\"404\":1}}],[\"someclassname\",{\"1\":{\"355\":3}}],[\"somecomponent\",{\"1\":{\"215\":1}}],[\"somenamespacename=\",{\"1\":{\"355\":1}}],[\"somenamespacename||\",{\"1\":{\"355\":1}}],[\"somenamespacename\",{\"1\":{\"355\":8}}],[\"some=boolean|string\",{\"1\":{\"334\":1}}],[\"something\",{\"1\":{\"62\":2,\"215\":1}}],[\"some\",{\"1\":{\"62\":2,\"73\":2,\"122\":4,\"362\":1,\"645\":1}}],[\"snapshot\",{\"1\":{\"182\":3}}],[\"sciptbody\",{\"1\":{\"676\":1}}],[\"sciptbodyopt\",{\"1\":{\"676\":1}}],[\"scm\",{\"1\":{\"370\":1}}],[\"school\",{\"1\":{\"336\":1}}],[\"schwabenbräu<\",{\"1\":{\"147\":1}}],[\"scoped\",{\"1\":{\"219\":1}}],[\"scroll\",{\"1\":{\"534\":1}}],[\"scrolly\",{\"1\":{\"16\":1}}],[\"scripts\",{\"1\":{\"617\":1}}],[\"script\",{\"1\":{\"503\":1,\"596\":2,\"644\":1,\"645\":1,\"676\":1}}],[\"script>标签来引入这个bundle文件\",{\"1\":{\"630\":1}}],[\"script>标签等方式加载和运行了\",{\"1\":{\"622\":1}}],[\"script>\",{\"1\":{\"459\":2,\"541\":1,\"548\":1}}],[\"script共享的最外层作用域\",{\"1\":{\"32\":1}}],[\"scriptcontext\",{\"1\":{\"21\":1}}],[\"scriptormodule\",{\"1\":{\"10\":1}}],[\"screenx\",{\"1\":{\"16\":1}}],[\"spa\",{\"0\":{\"395\":1},\"1\":{\"395\":1,\"599\":2}}],[\"span\",{\"1\":{\"162\":1,\"269\":1}}],[\"spanning\",{\"1\":{\"123\":2}}],[\"spades\",{\"1\":{\"130\":2}}],[\"splitting\",{\"1\":{\"631\":1,\"632\":1}}],[\"splice\",{\"1\":{\"459\":1}}],[\"spl\",{\"1\":{\"92\":3}}],[\"sass\",{\"1\":{\"626\":1,\"638\":2}}],[\"savedata\",{\"1\":{\"548\":1}}],[\"sameinputtype\",{\"1\":{\"460\":1}}],[\"samevnode\",{\"1\":{\"460\":7}}],[\"sara\",{\"1\":{\"311\":1}}],[\"said\",{\"1\":{\"120\":1}}],[\"sayhi\",{\"1\":{\"196\":5}}],[\"say\",{\"1\":{\"74\":1,\"352\":1}}],[\"swimming\",{\"1\":{\"109\":1}}],[\"swimmable\",{\"1\":{\"109\":3}}],[\"swim\",{\"1\":{\"109\":4}}],[\"switchtab\",{\"1\":{\"522\":1}}],[\"switchtransition>\",{\"1\":{\"324\":1}}],[\"switchtransition组件里面要有csstransition\",{\"1\":{\"324\":1}}],[\"switchtransition中主要有一个属性mode\",{\"1\":{\"324\":1}}],[\"switchtransition可以完成两个组件之间切换的炫酷动画\",{\"1\":{\"324\":1}}],[\"switchtransition\",{\"0\":{\"324\":1},\"1\":{\"322\":1,\"324\":1}}],[\"switchanimation\",{\"1\":{\"324\":1}}],[\"switch\",{\"1\":{\"53\":1,\"54\":2}}],[\"simplify\",{\"1\":{\"618\":1}}],[\"simpleclass\",{\"1\":{\"77\":1,\"81\":1}}],[\"simple\",{\"1\":{\"74\":1,\"120\":1}}],[\"since标头发送到服务器\",{\"1\":{\"558\":1}}],[\"since和etag\",{\"1\":{\"557\":1}}],[\"single\",{\"1\":{\"54\":1}}],[\"size\",{\"1\":{\"222\":1,\"224\":1}}],[\"size来表示\",{\"1\":{\"113\":1}}],[\"sideeffecttag\",{\"1\":{\"169\":1}}],[\"sibling\",{\"1\":{\"169\":1,\"170\":1}}],[\"shaking优化\",{\"1\":{\"503\":1}}],[\"sha\",{\"1\":{\"375\":1}}],[\"shallowequal对应方法大致如下\",{\"1\":{\"280\":1}}],[\"shallowequal\",{\"1\":{\"280\":3}}],[\"shift集合\",{\"1\":{\"570\":1}}],[\"shift\",{\"1\":{\"96\":2,\"580\":1}}],[\"shell\",{\"1\":{\"74\":2,\"101\":3}}],[\"shouldupdate\",{\"1\":{\"280\":1}}],[\"shouldcomponentupdate\",{\"0\":{\"181\":1,\"279\":1},\"1\":{\"180\":1,\"278\":1,\"280\":1}}],[\"should\",{\"1\":{\"122\":2}}],[\"show切换\",{\"1\":{\"522\":1}}],[\"show的过渡动画\",{\"1\":{\"449\":1}}],[\"show的初始状态\",{\"1\":{\"449\":1}}],[\"show指令的实现\",{\"1\":{\"449\":1}}],[\"show原理\",{\"0\":{\"449\":1}}],[\"show是纯样式控制\",{\"1\":{\"447\":1}}],[\"show只是简单的改变css属性\",{\"1\":{\"447\":1}}],[\"show隐藏是为元素添加css属性display\",{\"1\":{\"447\":1}}],[\"show=\",{\"1\":{\"446\":1}}],[\"show都是用于控制元素显示隐藏的指令\",{\"1\":{\"446\":1}}],[\"showalert\",{\"1\":{\"244\":5}}],[\"showmessage\",{\"1\":{\"197\":5}}],[\"showconstant\",{\"1\":{\"91\":1}}],[\"show\",{\"0\":{\"441\":1,\"445\":1},\"1\":{\"72\":2,\"323\":5,\"442\":1,\"444\":1,\"446\":2,\"449\":1,\"501\":1,\"517\":1}}],[\"short\",{\"1\":{\"71\":5}}],[\"s\",{\"1\":{\"67\":1,\"71\":1,\"224\":1,\"442\":1,\"443\":1,\"574\":1}}],[\"support\",{\"1\":{\"618\":1}}],[\"sup\",{\"1\":{\"316\":3}}],[\"super代替的是父类的构建函数\",{\"1\":{\"316\":1}}],[\"super代表的事父类的构造函数\",{\"1\":{\"316\":2}}],[\"super\",{\"0\":{\"315\":1},\"1\":{\"155\":1,\"156\":1,\"190\":1,\"193\":1,\"201\":1,\"202\":1,\"210\":1,\"216\":6,\"221\":1,\"224\":1,\"236\":2,\"241\":1,\"248\":1,\"249\":1,\"255\":1,\"256\":1,\"264\":1,\"290\":1,\"291\":1,\"292\":1,\"302\":1,\"310\":1,\"316\":2,\"317\":2,\"324\":1,\"325\":1,\"340\":1}}],[\"superglobals\",{\"1\":{\"67\":1,\"141\":1}}],[\"suit\",{\"1\":{\"130\":3}}],[\"subscribetofriendstatus\",{\"1\":{\"256\":1}}],[\"substitute\",{\"1\":{\"65\":1}}],[\"sub\",{\"1\":{\"147\":5,\"316\":3}}],[\"submit\",{\"1\":{\"147\":6,\"202\":1}}],[\"subclass\",{\"1\":{\"80\":4}}],[\"subject\",{\"1\":{\"54\":1}}],[\"sum\",{\"1\":{\"64\":2,\"143\":4}}],[\"seq\",{\"1\":{\"674\":1,\"687\":1}}],[\"semantics\",{\"0\":{\"657\":1},\"1\":{\"667\":1}}],[\"seo更彻底\",{\"1\":{\"598\":1}}],[\"seo\",{\"1\":{\"598\":1}}],[\"segment\",{\"1\":{\"548\":2}}],[\"session\",{\"1\":{\"519\":1}}],[\"sex\",{\"1\":{\"336\":1}}],[\"seconds\",{\"1\":{\"210\":5}}],[\"section\",{\"1\":{\"45\":1}}],[\"service\",{\"1\":{\"573\":1}}],[\"server\",{\"1\":{\"585\":4,\"596\":1,\"618\":2}}],[\"serve\",{\"1\":{\"71\":1}}],[\"serialize\",{\"1\":{\"148\":1}}],[\"select\",{\"1\":{\"571\":1}}],[\"select><br\",{\"1\":{\"147\":1}}],[\"selfbutton>\",{\"1\":{\"224\":1}}],[\"selfbutton\",{\"1\":{\"224\":3}}],[\"selflink>\",{\"1\":{\"224\":1}}],[\"selflink\",{\"1\":{\"224\":2}}],[\"self\",{\"1\":{\"91\":1,\"108\":1,\"269\":1,\"389\":1}}],[\"setup>语法糖\",{\"1\":{\"503\":1}}],[\"set或this\",{\"1\":{\"501\":1}}],[\"setdisplay\",{\"1\":{\"449\":2}}],[\"set方法会调用dep\",{\"1\":{\"422\":1}}],[\"set方法变得不必要\",{\"1\":{\"90\":1}}],[\"setter\",{\"1\":{\"501\":1}}],[\"settled\",{\"1\":{\"360\":1}}],[\"settimeout任务被放进事件队列中\",{\"1\":{\"606\":1}}],[\"settimeout的执行时间并不是确定的\",{\"1\":{\"606\":1}}],[\"settimeout会导致明显的闪屏现象\",{\"1\":{\"606\":1}}],[\"settimeout\",{\"1\":{\"26\":1,\"197\":2,\"305\":1,\"459\":1,\"535\":1,\"538\":1,\"606\":1}}],[\"setname\",{\"1\":{\"298\":2}}],[\"setmap\",{\"1\":{\"263\":1}}],[\"setisonline\",{\"1\":{\"256\":1}}],[\"setinterval\",{\"1\":{\"210\":1}}],[\"setimmediate\",{\"1\":{\"16\":1}}],[\"setcount\",{\"1\":{\"156\":2,\"194\":2,\"255\":3,\"256\":2,\"298\":2}}],[\"setcookie\",{\"1\":{\"148\":6}}],[\"setstate还可以接受第二个参数\",{\"1\":{\"310\":1}}],[\"setstate是同步\",{\"1\":{\"305\":1}}],[\"setstate是异步\",{\"1\":{\"305\":1}}],[\"setstate的更新类型分成\",{\"1\":{\"303\":1}}],[\"setstate方法更新state状态\",{\"1\":{\"302\":1}}],[\"setstate修改组件的状态时\",{\"1\":{\"210\":1}}],[\"setstate\",{\"0\":{\"302\":1},\"1\":{\"155\":1,\"156\":1,\"178\":1,\"210\":1,\"216\":2,\"236\":1,\"241\":1,\"255\":2,\"256\":1,\"273\":2,\"298\":3,\"299\":1,\"302\":4,\"304\":2,\"305\":2,\"306\":7,\"310\":3,\"323\":1,\"324\":1,\"325\":1}}],[\"set\",{\"1\":{\"89\":1,\"90\":2,\"100\":1,\"359\":1,\"404\":1,\"660\":1,\"662\":1,\"687\":4}}],[\"store\",{\"1\":{\"556\":1}}],[\"stop\",{\"1\":{\"389\":1}}],[\"stopimmediatepropagation\",{\"1\":{\"241\":1}}],[\"stoppropagation方法\",{\"1\":{\"389\":1}}],[\"stoppropagation\",{\"1\":{\"241\":1}}],[\"stylesheet\",{\"1\":{\"626\":1}}],[\"styles\",{\"1\":{\"596\":1,\"639\":8}}],[\"styled\",{\"1\":{\"224\":4}}],[\"style=\",{\"1\":{\"221\":2,\"224\":1,\"264\":1}}],[\"style\",{\"1\":{\"219\":1,\"223\":1,\"224\":1,\"379\":1,\"449\":2,\"541\":1,\"596\":1,\"618\":1,\"638\":2,\"639\":4}}],[\"staged\",{\"1\":{\"375\":1,\"379\":1}}],[\"starttime\",{\"1\":{\"568\":1}}],[\"startindex已经大于endindex\",{\"1\":{\"421\":2}}],[\"startindex移动到b\",{\"1\":{\"421\":1}}],[\"startindex移动到a\",{\"1\":{\"421\":1}}],[\"startindex移动到e\",{\"1\":{\"421\":1}}],[\"start\",{\"1\":{\"216\":3,\"297\":2}}],[\"stack\",{\"1\":{\"168\":1}}],[\"stats\",{\"1\":{\"645\":1}}],[\"status进行查询\",{\"1\":{\"375\":1}}],[\"status\",{\"1\":{\"256\":2,\"379\":1}}],[\"staticdir\",{\"1\":{\"599\":1}}],[\"staticprocessed\",{\"1\":{\"443\":1}}],[\"staticroot\",{\"1\":{\"443\":1}}],[\"static定义的属性\",{\"1\":{\"342\":1}}],[\"static\",{\"0\":{\"144\":1},\"1\":{\"66\":4,\"86\":1,\"108\":1,\"144\":5,\"157\":1,\"236\":3,\"269\":1,\"342\":1}}],[\"state和props\",{\"0\":{\"309\":1}}],[\"state的浅比较结果来实现\",{\"1\":{\"280\":1}}],[\"state更新方式\",{\"1\":{\"255\":1}}],[\"state读取方式\",{\"1\":{\"255\":1}}],[\"state声明方式\",{\"1\":{\"255\":1}}],[\"state进行访问\",{\"1\":{\"210\":1}}],[\"state来加一些限制条件\",{\"1\":{\"177\":1}}],[\"statenode\",{\"1\":{\"169\":1}}],[\"statementlistitem\",{\"1\":{\"668\":2,\"676\":1}}],[\"statementlist\",{\"1\":{\"44\":5,\"668\":3,\"676\":2}}],[\"statement\",{\"1\":{\"37\":1,\"71\":1,\"682\":1}}],[\"state\",{\"0\":{\"310\":1},\"1\":{\"10\":1,\"155\":2,\"156\":3,\"201\":4,\"210\":4,\"215\":1,\"216\":2,\"236\":5,\"253\":2,\"255\":5,\"256\":5,\"264\":1,\"273\":4,\"279\":1,\"280\":1,\"298\":4,\"299\":2,\"302\":5,\"304\":2,\"305\":2,\"306\":8,\"310\":2,\"312\":4,\"323\":3,\"324\":3,\"325\":3,\"443\":8}}],[\"stuttgarter\",{\"1\":{\"147\":1}}],[\"stuff\",{\"1\":{\"130\":2}}],[\"strats\",{\"1\":{\"482\":1,\"483\":8}}],[\"strat\",{\"1\":{\"482\":2}}],[\"str\",{\"1\":{\"335\":1}}],[\"strtoupper\",{\"1\":{\"128\":1}}],[\"strtolower\",{\"1\":{\"90\":1}}],[\"strict\",{\"1\":{\"55\":1,\"109\":2,\"702\":1,\"703\":2}}],[\"string字面量\",{\"0\":{\"698\":1}}],[\"string|number\",{\"1\":{\"360\":1}}],[\"string|int|null\",{\"1\":{\"109\":2}}],[\"stringify\",{\"1\":{\"352\":1}}],[\"stringref\",{\"1\":{\"169\":1}}],[\"strings\",{\"1\":{\"120\":1}}],[\"string类型\",{\"0\":{\"696\":1},\"1\":{\"108\":1}}],[\"string\",{\"0\":{\"119\":1},\"1\":{\"45\":1,\"54\":1,\"61\":1,\"62\":2,\"67\":7,\"71\":2,\"78\":1,\"87\":2,\"90\":2,\"109\":7,\"119\":1,\"120\":1,\"122\":1,\"123\":2,\"127\":1,\"147\":1,\"150\":1,\"169\":2,\"269\":1,\"335\":2,\"336\":4,\"339\":2,\"349\":7,\"352\":8,\"353\":2,\"354\":1,\"360\":7,\"361\":2,\"362\":1,\"443\":1,\"483\":2,\"549\":2,\"698\":3}}],[\"stdclass\",{\"1\":{\"88\":2}}],[\"step\",{\"1\":{\"45\":1}}],[\"脚本产生式\",{\"1\":{\"676\":1}}],[\"脚本可以为空\",{\"1\":{\"676\":1}}],[\"脚本的语法导向操作\",{\"1\":{\"667\":1}}],[\"脚本时\",{\"1\":{\"147\":1}}],[\"脚本引擎在\",{\"1\":{\"92\":1}}],[\"脚本在此处结束\",{\"1\":{\"71\":1}}],[\"脚本记录器\",{\"1\":{\"10\":1}}],[\"脚本求值\",{\"1\":{\"9\":1}}],[\"脚本执行\",{\"1\":{\"9\":1}}],[\"包住\",{\"1\":{\"244\":1}}],[\"包装显示名字以便于调试\",{\"1\":{\"215\":1}}],[\"包括模块的id\",{\"1\":{\"632\":1}}],[\"包括读取入口文件\",{\"1\":{\"622\":1}}],[\"包括第三方组件\",{\"1\":{\"480\":1}}],[\"包括事件注册\",{\"1\":{\"239\":1}}],[\"包括几个函数可以判断变量的类型\",{\"1\":{\"150\":1}}],[\"包括静态类方法\",{\"1\":{\"132\":1}}],[\"包括其自身\",{\"1\":{\"118\":1}}],[\"包括类\",{\"1\":{\"92\":1}}],[\"包括\",{\"1\":{\"53\":1,\"580\":1,\"643\":1}}],[\"包括的一系列参数\",{\"1\":{\"673\":1}}],[\"包括的\",{\"1\":{\"44\":1}}],[\"包括一个执行上下文栈\",{\"1\":{\"8\":1}}],[\"包含可选符号的替代项实际上指定了两个代换式\",{\"1\":{\"683\":1}}],[\"包含了项目中所有依赖的模块\",{\"1\":{\"628\":1}}],[\"包含了元素的信息\",{\"1\":{\"169\":1}}],[\"包含文本节点或其他内嵌级文本元素子元素的块级元素\",{\"1\":{\"569\":1}}],[\"包含小程序的图标\",{\"1\":{\"528\":1}}],[\"包含组件options的data\",{\"1\":{\"479\":1}}],[\"包含组件中任意选项功能\",{\"1\":{\"478\":1}}],[\"包含余下属性的对象\",{\"1\":{\"427\":1}}],[\"包含以下的数据成员\",{\"1\":{\"339\":1}}],[\"包含有可用\",{\"1\":{\"147\":1}}],[\"包含末尾换行符的结束标记的例子\",{\"1\":{\"73\":1}}],[\"包含所有在相关领域代码中的全局代码声明的绑定\",{\"1\":{\"32\":1}}],[\"包含内置绑定\",{\"1\":{\"32\":1}}],[\"包含一个realm\",{\"1\":{\"7\":1}}],[\"执行这些逻辑\",{\"1\":{\"667\":1}}],[\"执行以上的顺序\",{\"1\":{\"518\":1}}],[\"执行过程\",{\"0\":{\"518\":1}}],[\"执行beforeenter\",{\"1\":{\"449\":1}}],[\"执行blockdeclarationinstantiation\",{\"1\":{\"34\":1}}],[\"执行的结果保存到vnode中的text属性中\",{\"1\":{\"438\":1}}],[\"执行this\",{\"1\":{\"302\":1}}],[\"执行函数\",{\"1\":{\"269\":1,\"538\":1}}],[\"执行函数体中的语句\",{\"1\":{\"38\":1}}],[\"执行顺序如下\",{\"1\":{\"518\":1}}],[\"执行顺序\",{\"0\":{\"241\":1,\"353\":1}}],[\"执行操作\",{\"1\":{\"236\":1}}],[\"执行之时dom元素还没有被更新\",{\"1\":{\"182\":1}}],[\"执行时机\",{\"1\":{\"177\":1,\"181\":1,\"183\":1}}],[\"执行运算符\",{\"0\":{\"101\":1}}],[\"执行createperiterationenvironment\",{\"1\":{\"37\":1}}],[\"执行\",{\"1\":{\"10\":1,\"638\":1}}],[\"执行上下文的关联代码所需的资源的realm记录器\",{\"1\":{\"10\":1}}],[\"执行上下文栈用于跟踪执行上下文\",{\"1\":{\"9\":1}}],[\"执行上下文是代码的执行环境\",{\"1\":{\"7\":1}}],[\"执行环境\",{\"0\":{\"7\":1}}],[\"hg\",{\"1\":{\"371\":1}}],[\"huihui\",{\"1\":{\"352\":3}}],[\"href=\",{\"1\":{\"269\":1,\"596\":4}}],[\"h3>\",{\"1\":{\"269\":1}}],[\"h\",{\"1\":{\"231\":1,\"622\":1}}],[\"h2>\",{\"1\":{\"222\":1,\"223\":1,\"302\":1}}],[\"hint\",{\"1\":{\"597\":1}}],[\"history的路由切换会被当成http请求\",{\"1\":{\"383\":1}}],[\"hi\",{\"1\":{\"244\":1}}],[\"highordercomponent\",{\"1\":{\"214\":1}}],[\"higher\",{\"1\":{\"214\":1}}],[\"hide\",{\"1\":{\"517\":1}}],[\"hid\",{\"1\":{\"162\":1}}],[\"hook修改状态\",{\"1\":{\"298\":1}}],[\"hook是通过\",{\"1\":{\"289\":1}}],[\"hook\",{\"1\":{\"253\":1,\"646\":2}}],[\"hooks\",{\"0\":{\"253\":1,\"257\":1},\"1\":{\"646\":1}}],[\"hooks的出现\",{\"1\":{\"211\":1,\"258\":1}}],[\"hooks出来之前\",{\"1\":{\"208\":1,\"210\":1}}],[\"home\",{\"1\":{\"216\":2,\"222\":2,\"223\":2,\"599\":1}}],[\"host\",{\"1\":{\"13\":1}}],[\"hostdefined\",{\"1\":{\"11\":1}}],[\"hclass\",{\"1\":{\"162\":1}}],[\"h1\",{\"1\":{\"162\":1}}],[\"h1>\",{\"1\":{\"74\":1,\"162\":1,\"190\":1,\"191\":1,\"193\":2,\"195\":2,\"216\":1,\"236\":2,\"264\":1,\"297\":2,\"298\":4,\"311\":1}}],[\"has\",{\"1\":{\"618\":1}}],[\"hasown\",{\"1\":{\"482\":1}}],[\"hasownproperty\",{\"1\":{\"280\":3}}],[\"hash\",{\"1\":{\"375\":1}}],[\"haserror\",{\"1\":{\"236\":3}}],[\"handleinputchange\",{\"1\":{\"386\":1}}],[\"handlewrapperclick\",{\"1\":{\"386\":1}}],[\"handlename\",{\"1\":{\"311\":1}}],[\"handlestatuschange\",{\"1\":{\"256\":3}}],[\"handlesubmit\",{\"1\":{\"202\":2}}],[\"handleclick\",{\"1\":{\"197\":4,\"236\":4,\"240\":7,\"246\":2,\"247\":2,\"248\":4,\"249\":2,\"306\":1}}],[\"handle\",{\"1\":{\"169\":1,\"386\":1}}],[\"handler\",{\"1\":{\"56\":3,\"100\":1}}],[\"have\",{\"1\":{\"120\":1}}],[\"here\",{\"1\":{\"688\":2}}],[\"heredoc结构\",{\"0\":{\"122\":1}}],[\"heredoc\",{\"1\":{\"119\":1,\"122\":2}}],[\"hexintegerliteral\",{\"1\":{\"681\":1}}],[\"help\",{\"1\":{\"599\":1}}],[\"hellodecorator\",{\"1\":{\"359\":1}}],[\"hellomessage\",{\"1\":{\"261\":1,\"317\":1}}],[\"hellocomponent\",{\"1\":{\"208\":1,\"209\":1}}],[\"hello\",{\"1\":{\"47\":3,\"67\":10,\"71\":1,\"145\":2,\"162\":1,\"195\":1,\"209\":1,\"261\":2,\"263\":2,\"268\":1,\"290\":1,\"297\":2,\"302\":1,\"304\":1,\"352\":1,\"362\":1}}],[\"height\",{\"1\":{\"224\":2}}],[\"headless\",{\"1\":{\"599\":2}}],[\"header中添加vary\",{\"1\":{\"585\":2}}],[\"header>\",{\"1\":{\"297\":1}}],[\"header\",{\"1\":{\"74\":1,\"148\":1,\"264\":1,\"297\":1}}],[\"heavy\",{\"1\":{\"548\":1}}],[\"hearts\",{\"1\":{\"130\":1}}],[\"htm\",{\"1\":{\"585\":2}}],[\"htmlwebpackplugin\",{\"1\":{\"597\":2,\"643\":2,\"644\":3}}],[\"html$|\",{\"1\":{\"585\":1}}],[\"html文档\",{\"1\":{\"560\":1}}],[\"html字符转为html实体字符\",{\"1\":{\"147\":1}}],[\"html表单\",{\"0\":{\"147\":1}}],[\"html\",{\"1\":{\"70\":1,\"74\":2,\"147\":1,\"383\":1,\"571\":1,\"585\":6,\"597\":3,\"599\":1,\"618\":2,\"626\":1,\"643\":4,\"644\":3}}],[\"html401\",{\"1\":{\"65\":1}}],[\"htmlspecialchars将特定的\",{\"1\":{\"147\":1}}],[\"htmlspecialchars\",{\"1\":{\"65\":2,\"147\":1}}],[\"html5的loading属性\",{\"0\":{\"551\":1}}],[\"html5\",{\"0\":{\"5\":1}}],[\"http2\",{\"1\":{\"596\":2}}],[\"httpd\",{\"1\":{\"585\":2}}],[\"http\",{\"0\":{\"148\":1},\"1\":{\"147\":1,\"148\":1,\"150\":1,\"585\":4}}],[\"htnl\",{\"2\":{\"4\":1,\"652\":1}}],[\"h5的新增属性\",{\"1\":{\"551\":1}}],[\"h5\",{\"0\":{\"3\":1},\"2\":{\"6\":1,\"650\":1}}],[\"join\",{\"1\":{\"599\":2}}],[\"john\",{\"1\":{\"126\":1}}],[\"jpeg\",{\"1\":{\"585\":2}}],[\"jpg\",{\"1\":{\"551\":1,\"586\":2,\"596\":1}}],[\"jwt验证\",{\"1\":{\"392\":1}}],[\"j++\",{\"1\":{\"269\":1}}],[\"j\",{\"1\":{\"269\":3}}],[\"jumbotron>\",{\"1\":{\"264\":1}}],[\"jack\",{\"1\":{\"316\":5}}],[\"jane\",{\"1\":{\"126\":1}}],[\"javascript必须依赖一个宿主环境才能实现完整的功能\",{\"1\":{\"7\":1}}],[\"javascript\",{\"1\":{\"162\":1,\"168\":2,\"169\":1,\"223\":1,\"224\":1,\"236\":2,\"261\":1,\"312\":1,\"574\":1,\"585\":6,\"615\":2,\"635\":1,\"636\":2,\"646\":1},\"2\":{\"2\":1}}],[\"js|jsx\",{\"1\":{\"644\":1}}],[\"js运算并不是性能的瓶颈\",{\"1\":{\"604\":1}}],[\"js$|\",{\"1\":{\"585\":1}}],[\"js中配置插件\",{\"1\":{\"585\":2}}],[\"jscore线程运行js脚本\",{\"1\":{\"525\":1}}],[\"js是单线程的\",{\"1\":{\"525\":1}}],[\"js对象\",{\"1\":{\"501\":1}}],[\"js文件\",{\"1\":{\"622\":1}}],[\"js文件配置\",{\"1\":{\"413\":1}}],[\"js文件用于存放样式组件\",{\"1\":{\"224\":1}}],[\"js框架\",{\"2\":{\"363\":1,\"384\":1,\"387\":1,\"390\":1,\"393\":1,\"396\":1,\"400\":1,\"405\":1,\"410\":1,\"414\":1,\"419\":1,\"424\":1,\"429\":1,\"432\":1,\"439\":1,\"451\":1,\"456\":1,\"461\":1,\"475\":1,\"484\":1,\"488\":1,\"492\":1,\"498\":1,\"504\":1,\"510\":1,\"531\":1}}],[\"js拥有了class关键字\",{\"1\":{\"338\":1}}],[\"js每日一题\",{\"1\":{\"302\":1}}],[\"js<\",{\"1\":{\"224\":1}}],[\"jsx通过babel编译后就会转化成我们熟悉的js格式\",{\"1\":{\"297\":1}}],[\"jsx通过babel最终转化成react\",{\"1\":{\"268\":1}}],[\"jsx通过babel的方式转化成react\",{\"1\":{\"162\":1}}],[\"jsx转为真实dom\",{\"0\":{\"268\":1}}],[\"jsx语法\",{\"1\":{\"262\":1}}],[\"jsx\",{\"1\":{\"261\":1,\"268\":1,\"269\":1,\"270\":1,\"599\":2}}],[\"jsx就是为了简化直接调用react\",{\"1\":{\"162\":1}}],[\"jsx实际是一种语法糖\",{\"1\":{\"162\":1}}],[\"jsx是其一大特性\",{\"1\":{\"162\":1}}],[\"jsonp\",{\"1\":{\"413\":1}}],[\"json文件启动\",{\"1\":{\"352\":1}}],[\"json\",{\"1\":{\"70\":1,\"352\":1,\"617\":1,\"632\":1,\"636\":1,\"639\":1}}],[\"js宿主\",{\"1\":{\"16\":1}}],[\"js则会提供与服务端操作相关的对象\",{\"1\":{\"15\":1}}],[\"js\",{\"0\":{\"1\":1,\"224\":1},\"1\":{\"13\":1,\"220\":1,\"224\":1,\"225\":1,\"459\":1,\"548\":1,\"596\":2,\"599\":3,\"616\":5,\"617\":1,\"618\":1,\"624\":1,\"626\":1,\"630\":1,\"635\":1,\"636\":1,\"637\":1,\"643\":1,\"644\":5,\"645\":2,\"646\":1}}],[\"介绍页\",{\"0\":{\"0\":1}}]],\"version\":2}}")).map(([e,t])=>[e,Mt(t,{fields:["h","t","c"],storeFields:["h","t","c"]})]));self.onmessage=({data:{type:e="all",query:t,locale:s,options:n,id:o}})=>{const r=St[s];e==="suggest"?self.postMessage([e,o,et(t,r,n)]):e==="search"?self.postMessage([e,o,tt(t,r,n)]):self.postMessage({suggestions:[e,o,et(t,r,n)],results:[e,o,tt(t,r,n)]})};
//# sourceMappingURL=index.js.map
